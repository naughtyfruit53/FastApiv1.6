[{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddBOMModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":81,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[1620,1629],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  Grid,\n  IconButton,\n  CircularProgress,\n  Switch,\n  FormControlLabel,\n  Paper,\n  Autocomplete,\n  Box\n} from '@mui/material';\nimport { Add, Remove } from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../lib/api';\nimport { getProducts } from '../services/masterService';\n\ninterface BOMComponent {\n  component_item_id: number;\n  quantity_required: number;\n  unit: string;\n  unit_cost: number;\n  wastage_percentage: number;\n  is_optional: boolean;\n  sequence: number;\n  notes?: string;\n}\n\ninterface BOM {\n  id?: number;\n  bom_name: string;\n  output_item_id: number;\n  output_quantity: number;\n  version: string;\n  validity_start?: string;\n  validity_end?: string;\n  description?: string;\n  notes?: string;\n  material_cost: number;\n  labor_cost: number;\n  overhead_cost: number;\n  is_active: boolean;\n  components: BOMComponent[];\n}\n\nconst defaultBOM: BOM = {\n  bom_name: '',\n  output_item_id: 0,\n  output_quantity: 1.0,\n  version: '1.0',\n  description: '',\n  notes: '',\n  material_cost: 0.0,\n  labor_cost: 0.0,\n  overhead_cost: 0.0,\n  is_active: true,\n  components: [\n    {\n      component_item_id: 0,\n      quantity_required: 1.0,\n      unit: 'PCS',\n      unit_cost: 0.0,\n      wastage_percentage: 0.0,\n      is_optional: false,\n      sequence: 1,\n      notes: ''\n    }\n  ]\n};\n\ninterface AddBOMModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: BOM) => void;\n  initialData?: BOM;\n  mode: 'create' | 'edit';\n}\n\nconst AddBOMModal: React.FC<AddBOMModalProps> = ({ open, onClose, onAdd, initialData, mode }) => {\n  const queryClient = useQueryClient();\n  const { control, handleSubmit, reset, setValue, watch, formState: { errors } } = useForm<BOM>({\n    defaultValues: initialData || defaultBOM\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'components'\n  });\n\n  // Fetch products\n  const { data: productList, isLoading: isLoadingProducts } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts\n  });\n\n  const productOptions = productList || [];\n\n  // Mutation for create/edit\n  const mutation = useMutation({\n    mutationFn: (bomData: BOM) => {\n      // Clean the data\n      const cleanData = {\n        ...bomData,\n        output_item_id: bomData.output_item_id || null,\n        output_quantity: Number(bomData.output_quantity) || 1.0,\n        labor_cost: Number(bomData.labor_cost) || 0.0,\n        overhead_cost: Number(bomData.overhead_cost) || 0.0,\n        material_cost: Number(bomData.material_cost) || 0.0,\n        components: bomData.components.map(comp => ({\n          ...comp,\n          component_item_id: Number(comp.component_item_id) || null,\n          quantity_required: Number(comp.quantity_required) || 1.0,\n          unit_cost: Number(comp.unit_cost) || 0.0,\n          wastage_percentage: Number(comp.wastage_percentage) || 0.0,\n          sequence: Number(comp.sequence) || 0,\n          is_optional: Boolean(comp.is_optional)\n        })).filter(comp => comp.component_item_id)\n      };\n\n      if (mode === 'create') {\n        return api.post('/bom', cleanData).then(res => res.data);\n      } else {\n        return api.put(`/bom/${initialData?.id}`, cleanData).then(res => res.data);\n      }\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['boms'] });\n      onAdd(data);\n      onClose();\n      reset(defaultBOM);\n    },\n    onError: (error: any) => {\n      console.error(`Error ${mode === 'create' ? 'creating' : 'updating'} BOM:`, error);\n    }\n  });\n\n  const onSubmit = (data: BOM) => {\n    // Validations\n    if (!data.bom_name?.trim()) {return;}\n    if (!data.output_item_id || data.output_item_id === 0) {return;}\n    if (!data.components || data.components.length === 0) {return;}\n    const invalidComponents = data.components.filter(comp => \n      !comp.component_item_id || comp.quantity_required <= 0\n    );\n    if (invalidComponents.length > 0) {return;}\n\n    mutation.mutate(data);\n  };\n\n  const addComponent = () => {\n    append({\n      component_item_id: 0,\n      quantity_required: 1.0,\n      unit: 'PCS',\n      unit_cost: 0.0,\n      wastage_percentage: 0.0,\n      is_optional: false,\n      sequence: fields.length + 1,\n      notes: ''\n    });\n  };\n\n  const removeComponent = (index: number) => {\n    if (fields.length > 1) {\n      remove(index);\n    }\n  };\n\n  const calculateTotalCost = () => {\n    const components = watch('components') || [];\n    const materialCost = components.reduce((sum, comp) => {\n      const totalQty = comp.quantity_required * (1 + comp.wastage_percentage / 100);\n      return sum + (totalQty * comp.unit_cost);\n    }, 0);\n    \n    const laborCost = watch('labor_cost') || 0;\n    const overheadCost = watch('overhead_cost') || 0;\n    \n    return materialCost + laborCost + overheadCost;\n  };\n\n  if (isLoadingProducts) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\n      <DialogTitle>{mode === 'create' ? 'Create BOM' : 'Edit BOM'}</DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={3}>\n            {/* Basic Information */}\n            <Grid size={12}>\n              <Typography variant=\"h6\" gutterBottom>Basic Information</Typography>\n            </Grid>\n            \n            <Grid size={6}>\n              <TextField\n                {...control.register('bom_name', { required: 'BOM name is required' })}\n                label=\"BOM Name\"\n                fullWidth\n                error={!!errors.bom_name}\n                helperText={errors.bom_name?.message}\n              />\n            </Grid>\n            \n            <Grid size={3}>\n              <TextField\n                {...control.register('version', { required: 'Version is required' })}\n                label=\"Version\"\n                fullWidth\n                error={!!errors.version}\n                helperText={errors.version?.message}\n              />\n            </Grid>\n\n            <Grid size={3}>\n              <TextField\n                {...control.register('output_quantity', { required: 'Output quantity is required', min: 0.01 })}\n                label=\"Output Quantity\"\n                type=\"number\"\n                fullWidth\n                error={!!errors.output_quantity}\n                helperText={errors.output_quantity?.message}\n                InputProps={{ inputProps: { step: 0.01 } }}\n              />\n            </Grid>\n\n            <Grid size={6}>\n              <Autocomplete\n                options={productOptions}\n                getOptionLabel={(option) => option.product_name || ''}\n                value={productOptions.find((p: any) => p.id === watch('output_item_id')) || null}\n                onChange={(_, newValue) => setValue('output_item_id', newValue?.id || 0)}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Output Item *\"\n                    error={!!errors.output_item_id}\n                    helperText={errors.output_item_id?.message || 'Select the product that will be manufactured'}\n                    required\n                  />\n                )}\n              />\n            </Grid>\n\n            <Grid size={6}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={watch('is_active')}\n                    onChange={(e) => setValue('is_active', e.target.checked)}\n                  />\n                }\n                label=\"Active\"\n              />\n            </Grid>\n\n            <Grid size={6}>\n              <TextField\n                {...control.register('validity_start')}\n                label=\"Validity Start\"\n                type=\"date\"\n                fullWidth\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n\n            <Grid size={6}>\n              <TextField\n                {...control.register('validity_end')}\n                label=\"Validity End\"\n                type=\"date\"\n                fullWidth\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n\n            <Grid size={12}>\n              <TextField\n                {...control.register('description')}\n                label=\"Description\"\n                fullWidth\n                multiline\n                rows={2}\n              />\n            </Grid>\n\n            <Grid size={12}>\n              <TextField\n                {...control.register('notes')}\n                label=\"Notes\"\n                fullWidth\n                multiline\n                rows={2}\n              />\n            </Grid>\n\n            {/* Components */}\n            <Grid size={12}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 3, mb: 2 }}>\n                <Typography variant=\"h6\">Components</Typography>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<Add />}\n                  onClick={addComponent}\n                >\n                  Add Component\n                </Button>\n              </Box>\n            </Grid>\n\n            {fields.map((field, index) => (\n              <Grid size={12} key={field.id}>\n                <Paper sx={{ p: 2, mb: 2 }}>\n                  <Grid container spacing={2}>\n                    <Grid size={4}>\n                      <Autocomplete\n                        options={productOptions}\n                        getOptionLabel={(option) => option.product_name || ''}\n                        value={productOptions.find((p: any) => p.id === watch(`components.${index}.component_item_id`)) || null}\n                        onChange={(_, newValue) => setValue(`components.${index}.component_item_id`, newValue?.id || 0)}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            label=\"Component Item *\"\n                            size=\"small\"\n                            required\n                            error={!watch(`components.${index}.component_item_id`)}\n                            helperText={!watch(`components.${index}.component_item_id`) ? 'Component item is required' : ''}\n                          />\n                        )}\n                      />\n                    </Grid>\n                    \n                    <Grid size={2}>\n                      <TextField\n                        {...control.register(`components.${index}.quantity_required` as const, { \n                          required: 'Quantity is required', \n                          min: { value: 0.01, message: 'Quantity must be greater than 0' }\n                        })}\n                        label=\"Quantity *\"\n                        type=\"number\"\n                        fullWidth\n                        size=\"small\"\n                        error={!!errors.components?.[index]?.quantity_required}\n                        helperText={errors.components?.[index]?.quantity_required?.message}\n                        InputProps={{ inputProps: { step: 0.01, min: 0.01 } }}\n                      />\n                    </Grid>\n\n                    <Grid size={1}>\n                      <TextField\n                        {...control.register(`components.${index}.unit` as const)}\n                        label=\"Unit\"\n                        fullWidth\n                        size=\"small\"\n                      />\n                    </Grid>\n\n                    <Grid size={2}>\n                      <TextField\n                        {...control.register(`components.${index}.unit_cost` as const, { min: 0 })}\n                        label=\"Unit Cost\"\n                        type=\"number\"\n                        fullWidth\n                        size=\"small\"\n                        InputProps={{ inputProps: { step: 0.01 } }}\n                      />\n                    </Grid>\n\n                    <Grid size={2}>\n                      <TextField\n                        {...control.register(`components.${index}.wastage_percentage` as const, { min: 0, max: 100 })}\n                        label=\"Wastage %\"\n                        type=\"number\"\n                        fullWidth\n                        size=\"small\"\n                        InputProps={{ inputProps: { step: 0.1 } }}\n                      />\n                    </Grid>\n\n                    <Grid size={1}>\n                      <IconButton\n                        onClick={() => removeComponent(index)}\n                        color=\"error\"\n                        disabled={fields.length === 1}\n                      >\n                        <Remove />\n                      </IconButton>\n                    </Grid>\n\n                    <Grid size={12}>\n                      <TextField\n                        {...control.register(`components.${index}.notes` as const)}\n                        label=\"Component Notes\"\n                        fullWidth\n                        size=\"small\"\n                      />\n                    </Grid>\n                  </Grid>\n                </Paper>\n              </Grid>\n            ))}\n\n            {/* Costing */}\n            <Grid size={12}>\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3 }}>Costing</Typography>\n            </Grid>\n\n            <Grid size={4}>\n              <TextField\n                {...control.register('labor_cost', { min: 0 })}\n                label=\"Labor Cost\"\n                type=\"number\"\n                fullWidth\n                InputProps={{ inputProps: { step: 0.01 } }}\n              />\n            </Grid>\n\n            <Grid size={4}>\n              <TextField\n                {...control.register('overhead_cost', { min: 0 })}\n                label=\"Overhead Cost\"\n                type=\"number\"\n                fullWidth\n                InputProps={{ inputProps: { step: 0.01 } }}\n              />\n            </Grid>\n\n            <Grid size={4}>\n              <TextField\n                label=\"Total Cost\"\n                value={calculateTotalCost().toFixed(2)}\n                fullWidth\n                disabled\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} disabled={mutation.isPending}>\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={mutation.isPending}\n          >\n            {mutation.isPending ? <CircularProgress size={20} /> : (mode === 'create' ? 'Create' : 'Update')}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddBOMModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddCommissionModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":24,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[401,410],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  CircularProgress,\n  Box,\n  Grid,\n  InputAdornment\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\n\ninterface AddCommissionModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n}\n\ninterface CommissionFormData {\n  sales_person_id: number;\n  opportunity_id?: number;\n  lead_id?: number;\n  commission_type: string;\n  commission_rate?: number;\n  commission_amount?: number;\n  base_amount: number;\n  commission_date: string;\n  payment_status: string;\n  notes?: string;\n}\n\nconst commissionTypes = [\n  'percentage',\n  'fixed_amount',\n  'tiered',\n  'bonus'\n];\n\nconst paymentStatuses = [\n  'pending',\n  'paid',\n  'approved',\n  'rejected',\n  'on_hold'\n];\n\nconst AddCommissionModal: React.FC<AddCommissionModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false\n}) => {\n  const { register, handleSubmit, reset, control, watch, formState: { errors } } = useForm<CommissionFormData>({\n    defaultValues: {\n      sales_person_id: 0,\n      opportunity_id: undefined,\n      lead_id: undefined,\n      commission_type: 'percentage',\n      commission_rate: 0,\n      commission_amount: 0,\n      base_amount: 0,\n      commission_date: new Date().toISOString().split('T')[0],\n      payment_status: 'pending',\n      notes: '',\n    }\n  });\n\n  const commissionType = watch('commission_type');\n  const baseAmount = watch('base_amount');\n  const commissionRate = watch('commission_rate');\n\n  React.useEffect(() => {\n    if (open) {\n      reset({\n        sales_person_id: 0,\n        opportunity_id: undefined,\n        lead_id: undefined,\n        commission_type: 'percentage',\n        commission_rate: 0,\n        commission_amount: 0,\n        base_amount: 0,\n        commission_date: new Date().toISOString().split('T')[0],\n        payment_status: 'pending',\n        notes: ''\n      });\n    }\n  }, [open, reset]);\n\n  // Calculate commission amount automatically for percentage type\n  React.useEffect(() => {\n    if (commissionType === 'percentage' && baseAmount && commissionRate) {\n      const calculated = (baseAmount * commissionRate) / 100;\n      console.log(calculated); // Use the expression to fix no-unused-expressions\n    }\n  }, [commissionType, baseAmount, commissionRate]);\n\n  const onSubmit = async (commissionData: CommissionFormData) => {\n    try {\n      // Clean and prepare data\n      const cleanData = {\n        ...commissionData,\n        // Ensure numeric fields are properly typed\n        sales_person_id: Number(commissionData.sales_person_id),\n        opportunity_id: commissionData.opportunity_id ? Number(commissionData.opportunity_id) : null,\n        lead_id: commissionData.lead_id ? Number(commissionData.lead_id) : null,\n        commission_rate: commissionData.commission_rate ? Number(commissionData.commission_rate) : null,\n        commission_amount: commissionData.commission_amount ? Number(commissionData.commission_amount) : null,\n        base_amount: Number(commissionData.base_amount)\n      };\n\n      // Remove undefined/empty fields\n      Object.keys(cleanData).forEach(key => {\n        if (cleanData[key as keyof typeof cleanData] === undefined || cleanData[key as keyof typeof cleanData] === '') {\n          delete cleanData[key as keyof typeof cleanData];\n        }\n      });\n\n      await onAdd(cleanData);\n      reset();\n      onClose();\n    } catch (error) {\n      console.error('Error adding commission:', error);\n    }\n  };\n\n  const handleClose = () => {\n    if (!loading) {\n      reset();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\" component=\"div\">\n          Add New Commission Record\n        </Typography>\n      </DialogTitle>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Box sx={{ mt: 1 }}>\n            <Grid container spacing={3}>\n              {/* Basic Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2 }}>\n                  Commission Details\n                </Typography>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('sales_person_id', { \n                    required: 'Sales person ID is required',\n                    min: { value: 1, message: 'Please enter a valid sales person ID' }\n                  })}\n                  label=\"Sales Person ID\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.sales_person_id}\n                  helperText={errors.sales_person_id?.message}\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Commission Type</InputLabel>\n                  <Controller\n                    name=\"commission_type\"\n                    control={control}\n                    rules={{ required: 'Commission type is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Commission Type\"\n                        error={!!errors.commission_type}\n                      >\n                        {commissionTypes.map((type) => (\n                          <MenuItem key={type} value={type}>\n                            {type.replace('_', ' ').toUpperCase()}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.commission_type && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.commission_type.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('base_amount', { \n                    required: 'Base amount is required',\n                    min: { value: 0, message: 'Base amount must be positive' }\n                  })}\n                  label=\"Base Amount\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.base_amount}\n                  helperText={errors.base_amount?.message}\n                  disabled={loading}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                  }}\n                  inputProps={{ min: 0, step: 0.01 }}\n                />\n              </Grid>\n\n              {commissionType === 'percentage' && (\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <TextField\n                    {...register('commission_rate', {\n                      min: { value: 0, message: 'Rate must be positive' },\n                      max: { value: 100, message: 'Rate cannot exceed 100%' }\n                    })}\n                    label=\"Commission Rate\"\n                    type=\"number\"\n                    fullWidth\n                    error={!!errors.commission_rate}\n                    helperText={errors.commission_rate?.message}\n                    disabled={loading}\n                    InputProps={{\n                      endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                    }}\n                    inputProps={{ min: 0, max: 100, step: 0.1 }}\n                  />\n                </Grid>\n              )}\n\n              {(commissionType === 'fixed_amount' || commissionType === 'bonus') && (\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <TextField\n                    {...register('commission_amount', {\n                      min: { value: 0, message: 'Amount must be positive' }\n                    })}\n                    label=\"Commission Amount\"\n                    type=\"number\"\n                    fullWidth\n                    error={!!errors.commission_amount}\n                    helperText={errors.commission_amount?.message}\n                    disabled={loading}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                    }}\n                    inputProps={{ min: 0, step: 0.01 }}\n                  />\n                </Grid>\n              )}\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('commission_date', { \n                    required: 'Commission date is required' \n                  })}\n                  label=\"Commission Date\"\n                  type=\"date\"\n                  fullWidth\n                  error={!!errors.commission_date}\n                  helperText={errors.commission_date?.message}\n                  disabled={loading}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Payment Status</InputLabel>\n                  <Controller\n                    name=\"payment_status\"\n                    control={control}\n                    rules={{ required: 'Payment status is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Payment Status\"\n                        error={!!errors.payment_status}\n                      >\n                        {paymentStatuses.map((status) => (\n                          <MenuItem key={status} value={status}>\n                            {status.replace('_', ' ').toUpperCase()}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.payment_status && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.payment_status.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n\n              {/* Reference Fields */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Reference Information (Optional)\n                </Typography>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('opportunity_id')}\n                  label=\"Opportunity ID\"\n                  type=\"number\"\n                  fullWidth\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('lead_id')}\n                  label=\"Lead ID\"\n                  type=\"number\"\n                  fullWidth\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('notes')}\n                  label=\"Notes\"\n                  multiline\n                  rows={3}\n                  fullWidth\n                  disabled={loading}\n                  placeholder=\"Add any additional notes about this commission...\"\n                />\n              </Grid>\n\n              {/* Calculation Display */}\n              {commissionType === 'percentage' && baseAmount && commissionRate && (\n                <Grid size={{ xs: 12 }}>\n                  <Box sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Calculated Commission Amount\n                    </Typography>\n                    <Typography variant=\"h6\" color=\"primary\">\n                      ${((baseAmount * commissionRate) / 100).toFixed(2)}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {commissionRate}% of ${baseAmount}\n                    </Typography>\n                  </Box>\n                </Grid>\n              )}\n            </Grid>\n          </Box>\n        </DialogContent>\n\n        <DialogActions>\n          <Button \n            onClick={handleClose} \n            disabled={loading}\n            color=\"inherit\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Commission'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddCommissionModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddCustomerModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":29,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[617,626],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Grid,\n  Alert,\n  InputAdornment,\n  Box,\n  Paper,\n  Chip,\n  Tooltip,\n  LinearProgress,\n  IconButton,\n} from '@mui/material';\nimport { CloudUpload, Description, CheckCircle, Search } from '@mui/icons-material';\nimport { useForm } from 'react-hook-form';\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\nimport api from '../lib/api';\n\ninterface AddCustomerModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd?: (data: any) => Promise<void>;\n  loading?: boolean;\n  initialName?: string;\n}\n\ninterface CustomerFormData {\n  name: string;\n  contact_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  gst_number: string;\n  pan_number: string;\n  state_code: string;\n}\n\nconst AddCustomerModal: React.FC<AddCustomerModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false,\n  initialName = ''\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [gstFile, setGstFile] = useState<File | null>(null);\n  const [gstUploadLoading, setGstUploadLoading] = useState(false);\n  const [gstExtractedData, setGstExtractedData] = useState<any>(null);\n  const [gstUploadError, setGstUploadError] = useState<string | null>(null);\n  const [gstSearchLoading, setGstSearchLoading] = useState(false);\n\n  const { register, handleSubmit, reset, formState: { errors }, setValue, watch } = useForm<CustomerFormData>({\n    defaultValues: {\n      name: initialName,\n      contact_number: '',\n      email: '',\n      address1: '',\n      address2: '',\n      city: '',\n      state: '',\n      pin_code: '',\n      gst_number: '',\n      pan_number: '',\n      state_code: '',\n    }\n  });\n\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError, clearData } = usePincodeLookup();\n  const watchedPincode = watch('pin_code');\n  const watchedGstNumber = watch('gst_number');\n\n  // Auto-populate form fields when pincode data is available\n  useEffect(() => {\n    if (pincodeData) {\n      setValue('city', pincodeData.city);\n      setValue('state', pincodeData.state);\n      setValue('state_code', pincodeData.state_code);\n    }\n  }, [pincodeData, setValue]);\n\n  // Handle pincode change with debouncing\n  useEffect(() => {\n    if (watchedPincode && /^\\d{6}$/.test(watchedPincode)) {\n      const timeoutId = setTimeout(() => {\n        lookupPincode(watchedPincode);\n      }, 500); // 500ms debounce\n\n      return () => clearTimeout(timeoutId);\n    } else {\n      clearData();\n    }\n  }, [watchedPincode, lookupPincode, clearData]);\n\n  // Handle GST certificate upload with actual API call\n  const handleGstFileUpload = async (file: File) => {\n    setGstUploadLoading(true);\n    setGstUploadError(null);\n    \n    try {\n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Call backend PDF extraction API\n      const response = await api.post('/pdf-extraction/extract/customer', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      if (response.data.success) {\n        const extractedData = response.data.extracted_data;\n        \n        // Auto-populate form fields with processed extracted data\n        Object.entries(extractedData).forEach(([key, value]) => {\n          if (value) {\n            setValue(key as keyof CustomerFormData, value as string);\n          }\n        });\n        \n        setGstExtractedData(extractedData);\n        setGstFile(file);\n      } else {\n        const errorMessage = (response.data as any)?.detail || 'Extraction failed';\n        throw new globalThis.Error(errorMessage);\n      }\n      \n    } catch (error: any) {\n      console.error('Error processing GST certificate:', error);\n      setGstUploadError(error.response?.data?.detail || 'Failed to process GST certificate. Please try again.');\n    } finally {\n      setGstUploadLoading(false);\n    }\n  };\n\n  const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/pdf') {\n        setGstUploadError('Please upload a PDF file');\n        return;\n      }\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        setGstUploadError('File size should be less than 10MB');\n        return;\n      }\n      handleGstFileUpload(file);\n    }\n  };\n\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  const removeGstFile = () => {\n    setGstFile(null);\n    setGstExtractedData(null);\n    setGstUploadError(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleGstSearch = async () => {\n    if (!watchedGstNumber || !/^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/.test(watchedGstNumber)) {\n      setGstUploadError('Please enter a valid GSTIN');\n      return;\n    }\n    \n    setGstSearchLoading(true);\n    setGstUploadError(null);\n    \n    try {\n      const response = await api.get(`/gst/search/${watchedGstNumber}`);\n      const data = response.data;\n      \n      // Auto-populate fields from API response\n      Object.entries(data).forEach(([key, value]) => {\n        if (value) {\n          setValue(key as keyof CustomerFormData, value as string);\n        }\n      });\n      \n    } catch (error: any) {\n      setGstUploadError(error.response?.data?.detail || 'Failed to fetch GST details. Please check GSTIN.');\n    } finally {\n      setGstSearchLoading(false);\n    }\n  };\n\n  const onSubmit = async (customerData: CustomerFormData) => {\n    try {\n      // Remove empty fields to match backend schema\n      const allowedFields = ['name', 'contact_number', 'email', 'address1', 'address2', 'city', 'state', 'pin_code', 'gst_number', 'pan_number', 'state_code'];\n      const cleanData = Object.fromEntries(\n        Object.entries(customerData).filter(([key, value]) => allowedFields.includes(key) && value !== null && String(value).trim() !== '')\n      );\n      \n      // Direct API call to save customer\n      const response = await api.post('/customers', cleanData);\n      console.log('Customer added successfully:', response.data);\n      \n      // Call onAdd if provided and is a function\n      if (typeof onAdd === 'function') {\n        await onAdd(response.data);\n      }\n      \n      reset();\n      onClose();  // Close modal on success\n    } catch (error: any) {\n      console.error('Error adding customer:', error);\n      // Set more specific error message\n      const errorMessage = error.response?.data?.detail || 'Failed to add customer. Please try again.';\n      setGstUploadError(errorMessage);\n    }\n  };\n\n  const handleClose = () => {\n    reset();\n    clearData();\n    removeGstFile();\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add New Customer</Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Customer Name *\"\n                {...register('name', { required: 'Customer name is required' })}\n                error={!!errors.name}\n                helperText={errors.name?.message}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('name') || !!gstExtractedData?.name,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Contact Number\"\n                {...register('contact_number')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('contact_number') || !!gstExtractedData?.phone,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Email\"\n                type=\"email\"\n                {...register('email', {\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: 'Invalid email address'\n                  }\n                })}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('email') || !!gstExtractedData?.email,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"GST Number\"\n                {...register('gst_number')}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      {gstSearchLoading ? (\n                        <CircularProgress size={16} />\n                      ) : (\n                        <IconButton\n                          onClick={handleGstSearch}\n                          disabled={!watchedGstNumber || gstSearchLoading}\n                          aria-label=\"Search GST\"\n                        >\n                          <Search />\n                        </IconButton>\n                      )}\n                    </InputAdornment>\n                  ),\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('gst_number') || !!gstExtractedData?.gst_number,\n                }}\n              />\n            </Grid>\n\n            {/* GST Certificate Upload Section */}\n            <Grid size={12}>\n              <Paper sx={{ p: 2, bgcolor: 'grey.50', border: '1px dashed', borderColor: 'grey.300' }}>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    GST Certificate Upload (Optional)\n                  </Typography>\n                  <Tooltip title=\"Upload GST certificate PDF to auto-fill customer details\">\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      PDF Auto-Extract\n                    </Typography>\n                  </Tooltip>\n                </Box>\n                \n                {!gstFile && !gstUploadLoading && (\n                  <Box\n                    sx={{\n                      border: '2px dashed',\n                      borderColor: 'grey.300',\n                      borderRadius: 1,\n                      p: 3,\n                      textAlign: 'center',\n                      cursor: 'pointer',\n                      '&:hover': {\n                        borderColor: 'primary.main',\n                        bgcolor: 'action.hover'\n                      }\n                    }}\n                    onClick={triggerFileUpload}\n                  >\n                    <CloudUpload sx={{ fontSize: 48, color: 'grey.400', mb: 1 }} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                      Click to upload GST certificate (PDF only)\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Maximum file size: 10MB\n                    </Typography>\n                  </Box>\n                )}\n                \n                {gstUploadLoading && (\n                  <Box sx={{ p: 3, textAlign: 'center' }}>\n                    <CircularProgress size={40} sx={{ mb: 2 }} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                      Processing GST certificate...\n                    </Typography>\n                    <LinearProgress sx={{ mt: 1 }} />\n                  </Box>\n                )}\n                \n                {gstFile && !gstUploadLoading && (\n                  <Box sx={{ p: 2, bgcolor: 'success.light', borderRadius: 1 }}>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <Description color=\"primary\" />\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {gstFile.name}\n                        </Typography>\n                        <Chip\n                          icon={<CheckCircle />}\n                          label=\"Processed\"\n                          size=\"small\"\n                          color=\"success\"\n                          variant=\"outlined\"\n                        />\n                      </Box>\n                      <Button\n                        size=\"small\"\n                        onClick={removeGstFile}\n                        color=\"error\"\n                        variant=\"outlined\"\n                      >\n                        Remove\n                      </Button>\n                    </Box>\n                    {gstExtractedData && (\n                      <Alert severity=\"success\" sx={{ mt: 1 }}>\n                        <Typography variant=\"caption\">\n                          Auto-populated: {Object.keys(gstExtractedData).join(', ')}\n                        </Typography>\n                      </Alert>\n                    )}\n                  </Box>\n                )}\n                \n                {gstUploadError && (\n                  <Alert severity=\"error\" sx={{ mt: 1 }} onClose={() => setGstUploadError(null)}>\n                    {gstUploadError}\n                  </Alert>\n                )}\n                \n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".pdf\"\n                  style={{ display: 'none' }}\n                  onChange={handleFileInputChange}\n                />\n              </Paper>\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"PAN Number\"\n                {...register('pan_number')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('pan_number') || !!gstExtractedData?.pan_number,\n                }}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 1\"\n                {...register('address1')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('address1') || !!gstExtractedData?.address1,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 2\"\n                {...register('address2')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('address2') || !!gstExtractedData?.address2,\n                }}\n              />\n            </Grid>\n            \n            {/* PIN Code moved to be first after address lines */}\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"PIN Code *\"\n                {...register('pin_code', { \n                  required: 'PIN code is required',\n                  pattern: {\n                    value: /^\\d{6}$/,\n                    message: 'Please enter a valid 6-digit PIN code'\n                  }\n                })}\n                error={!!errors.pin_code}\n                helperText={errors.pin_code?.message || (pincodeError && pincodeError)}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: pincodeLoading ? (\n                    <InputAdornment position=\"end\">\n                      <CircularProgress size={16} />\n                    </InputAdornment>\n                  ) : null,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('pin_code') || !!gstExtractedData?.pin_code,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"City\"\n                {...register('city', { required: 'City is required' })}\n                error={!!errors.city}\n                helperText={errors.city?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('city') || !!pincodeData || !!gstExtractedData?.city,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"State\"\n                {...register('state', { required: 'State is required' })}\n                error={!!errors.state}\n                helperText={errors.state?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state') || !!pincodeData || !!gstExtractedData?.state,\n                }}\n              />\n            </Grid>\n\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"State Code\"\n                {...register('state_code', { required: 'State code is required' })}\n                error={!!errors.state_code}\n                helperText={errors.state_code?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state_code') || !!pincodeData || !!gstExtractedData?.state_code,\n                }}\n              />\n            </Grid>\n\n            {pincodeError && (\n              <Grid size={12}>\n                <Alert severity=\"warning\" sx={{ mt: 1 }}>\n                  {pincodeError}\n                </Alert>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Customer'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddCustomerModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddEmployeeModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":32,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[689,698],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Alert,\n  Box,\n  Paper,\n  LinearProgress,\n  IconButton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Tabs,\n  Tab,\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport { CloudUpload, Description, Delete as DeleteIcon } from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\nimport api from '../lib/api';\n\ninterface AddEmployeeModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n  initialData?: any;\n  mode: 'create' | 'edit';\n}\n\ninterface EmployeeFormData {\n  full_name: string;\n  email: string;\n  phone: string;\n  date_of_birth?: string;\n  gender?: string;\n  employee_code: string;\n  employee_type: string;\n  hire_date?: string;\n  job_title?: string;\n  department?: string;\n  work_location?: string;\n  reporting_manager_id?: number;\n  pan_number?: string;\n  aadhaar_number?: string;\n  passport_number?: string;\n  driving_license?: string;\n  bank_account_number?: string;\n  bank_name?: string;\n  ifsc_code?: string;\n  bank_branch?: string;\n  address_line1?: string;\n  address_line2?: string;\n  city?: string;\n  state?: string;\n  pin_code?: string;\n  country?: string;\n  emergency_contact_name?: string;\n  emergency_contact_phone?: string;\n  emergency_contact_relation?: string;\n}\n\nconst AddEmployeeModal: React.FC<AddEmployeeModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false,\n  initialData,\n  mode,\n}) => {\n  const fileInputRefs = [\n    useRef<HTMLInputElement>(null),\n    useRef<HTMLInputElement>(null),\n    useRef<HTMLInputElement>(null),\n    useRef<HTMLInputElement>(null),\n    useRef<HTMLInputElement>(null),\n  ];\n  const [documents, setDocuments] = useState<\n    Array<{ file: File | null; type: string; extractedData?: any; loading: boolean; error?: string }>\n  >(\n    Array.from({ length: 5 }, () => ({\n      file: null,\n      type: '',\n      extractedData: null,\n      loading: false,\n      error: undefined,\n    }))\n  );\n  const [tabValue, setTabValue] = useState(0);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n    setValue,\n    watch,\n    control,\n  } = useForm<EmployeeFormData>({\n    defaultValues: initialData || {\n      full_name: '',\n      email: '',\n      phone: '',\n      employee_code: '',\n      employee_type: 'permanent',\n      gender: '',\n      country: 'India',\n    },\n  });\n\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError, clearData } = usePincodeLookup();\n  const watchedPincode = watch('pin_code');\n\n  useEffect(() => {\n    if (pincodeData) {\n      setValue('city', pincodeData.city);\n      setValue('state', pincodeData.state);\n    }\n  }, [pincodeData, setValue]);\n\n  useEffect(() => {\n    if (watchedPincode && /^\\d{6}$/.test(watchedPincode)) {\n      const timeoutId = setTimeout(() => {\n        lookupPincode(watchedPincode);\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    } else {\n      clearData();\n    }\n  }, [watchedPincode, lookupPincode, clearData]);\n\n  const handleDocumentUpload = async (index: number, file: File) => {\n    const updatedDocs = [...documents];\n    updatedDocs[index] = { ...updatedDocs[index], loading: true, error: undefined };\n    setDocuments(updatedDocs);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('document_type', updatedDocs[index].type || 'general');\n\n      const response: { data: { success: boolean; extracted_data?: any; detail?: string } } = await api.post(\n        '/pdf-extraction/extract/employee',\n        formData,\n        {\n          headers: { 'Content-Type': 'multipart/form-data' },\n        }\n      );\n\n      if (response.data.success) {\n        const extractedData = response.data.extracted_data;\n        Object.entries(extractedData).forEach(([key, value]) => {\n          if (value) {setValue(key as keyof EmployeeFormData, value as string);}\n        });\n\n        updatedDocs[index] = { ...updatedDocs[index], file, extractedData, loading: false };\n      } else {\n        throw new globalThis.Error(response.data.detail || 'Extraction failed');\n      }\n    } catch (error: any) {\n      updatedDocs[index] = {\n        ...updatedDocs[index],\n        loading: false,\n        error: error.message || 'Failed to process document',\n      };\n    }\n    setDocuments(updatedDocs);\n  };\n\n  const handleFileChange = (index: number, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/pdf') {return alert('Please upload a PDF file');}\n      if (file.size > 10 * 1024 * 1024) {return alert('File size should be less than 10MB');}\n      handleDocumentUpload(index, file);\n    }\n  };\n\n  const triggerUpload = (index: number) => {\n    fileInputRefs[index].current?.click();\n  };\n\n  const removeDocument = (index: number) => {\n    const updatedDocs = [...documents];\n    updatedDocs[index] = { file: null, type: '', extractedData: null, loading: false, error: undefined };\n    setDocuments(updatedDocs);\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const onSubmit = async (employeeData: EmployeeFormData) => {\n    try {\n      const formData = new FormData();\n      Object.entries(employeeData).forEach(([key, value]) => {\n        formData.append(key, value as string);\n      });\n\n      documents.forEach((doc, index) => {\n        if (doc.file) {\n          formData.append(`documents_${index}`, doc.file);\n          formData.append(`document_types_${index}`, doc.type);\n        }\n      });\n\n      const endpoint = mode === 'create' ? '/hr/employees' : `/hr/employees/${initialData?.id}`;\n      const method = mode === 'create' ? 'post' : 'put';\n      const response = await api[method](endpoint, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n\n      await onAdd(response.data);\n      reset();\n      onClose();\n    } catch (error: any) {\n      console.error('Error saving employee:', error);\n      alert(error.response?.data?.detail || 'Failed to save employee');\n    }\n  };\n\n  const handleClose = () => {\n    reset();\n    clearData();\n    setDocuments(\n      Array.from({ length: 5 }, () => ({\n        file: null,\n        type: '',\n        extractedData: null,\n        loading: false,\n        error: undefined,\n      }))\n    );\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">{mode === 'create' ? 'Add New Employee' : 'Edit Employee'}</Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Tabs value={tabValue} onChange={handleTabChange}>\n            <Tab label=\"Personal Details\" />\n            <Tab label=\"Employment Details\" />\n            <Tab label=\"KYC & Bank\" />\n            <Tab label=\"Address & Emergency\" />\n          </Tabs>\n\n          {tabValue === 0 && (\n            <Grid container spacing={2} sx={{ mt: 2 }}>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Full Name *\"\n                  {...register('full_name', { required: 'Full name is required' })}\n                  error={!!errors.full_name}\n                  helperText={errors.full_name?.message}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Email *\"\n                  type=\"email\"\n                  {...register('email', { required: 'Email is required' })}\n                  error={!!errors.email}\n                  helperText={errors.email?.message}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Phone Number\"\n                  {...register('phone')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Date of Birth\"\n                  type=\"date\"\n                  {...register('date_of_birth')}\n                  InputLabelProps={{ shrink: true }}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Gender</InputLabel>\n                  <Controller\n                    name=\"gender\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select {...field} label=\"Gender\">\n                        <MenuItem value=\"male\">Male</MenuItem>\n                        <MenuItem value=\"female\">Female</MenuItem>\n                        <MenuItem value=\"other\">Other</MenuItem>\n                        <MenuItem value=\"prefer_not_to_say\">Prefer not to say</MenuItem>\n                      </Select>\n                    )}\n                  />\n                </FormControl>\n              </Grid>\n            </Grid>\n          )}\n\n          {tabValue === 1 && (\n            <Grid container spacing={2} sx={{ mt: 2 }}>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Employee Code *\"\n                  {...register('employee_code', { required: 'Employee code is required' })}\n                  error={!!errors.employee_code}\n                  helperText={errors.employee_code?.message}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Employee Type</InputLabel>\n                  <Controller\n                    name=\"employee_type\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select {...field} label=\"Employee Type\">\n                        <MenuItem value=\"permanent\">Permanent</MenuItem>\n                        <MenuItem value=\"contract\">Contract</MenuItem>\n                        <MenuItem value=\"intern\">Intern</MenuItem>\n                        <MenuItem value=\"consultant\">Consultant</MenuItem>\n                      </Select>\n                    )}\n                  />\n                </FormControl>\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Hire Date\"\n                  type=\"date\"\n                  {...register('hire_date')}\n                  InputLabelProps={{ shrink: true }}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Job Title\"\n                  {...register('job_title')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Department\"\n                  {...register('department')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Work Location\"\n                  {...register('work_location')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Reporting Manager ID\"\n                  type=\"number\"\n                  {...register('reporting_manager_id')}\n                  margin=\"normal\"\n                />\n              </Grid>\n            </Grid>\n          )}\n\n          {tabValue === 2 && (\n            <Grid container spacing={2} sx={{ mt: 2 }}>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"PAN Number\"\n                  {...register('pan_number')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Aadhaar Number\"\n                  {...register('aadhaar_number')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Passport Number\"\n                  {...register('passport_number')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Driving License\"\n                  {...register('driving_license')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Bank Account Number\"\n                  {...register('bank_account_number')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Bank Name\"\n                  {...register('bank_name')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"IFSC Code\"\n                  {...register('ifsc_code')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Bank Branch\"\n                  {...register('bank_branch')}\n                  margin=\"normal\"\n                />\n              </Grid>\n\n              <Grid size={12}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Upload Documents (up to 5 PDFs)\n                </Typography>\n                {documents.map((doc, index) => (\n                  <Paper key={index} sx={{ p: 2, mb: 2, bgcolor: 'grey.50' }}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                      <FormControl fullWidth>\n                        <InputLabel>Document Type</InputLabel>\n                        <Select\n                          value={doc.type}\n                          label=\"Document Type\"\n                          onChange={(e) => {\n                            const updated = [...documents];\n                            updated[index].type = e.target.value as string;\n                            setDocuments(updated);\n                          }}\n                        >\n                          <MenuItem value=\"aadhaar\">Aadhaar</MenuItem>\n                          <MenuItem value=\"pan\">PAN</MenuItem>\n                          <MenuItem value=\"passport\">Passport</MenuItem>\n                          <MenuItem value=\"driving_license\">Driving License</MenuItem>\n                          <MenuItem value=\"bank_passbook\">Bank Passbook</MenuItem>\n                          <MenuItem value=\"other\">Other</MenuItem>\n                        </Select>\n                      </FormControl>\n                      <Button variant=\"outlined\" startIcon={<CloudUpload />} onClick={() => triggerUpload(index)}>\n                        Upload PDF\n                      </Button>\n                      <input\n                        ref={fileInputRefs[index]}\n                        type=\"file\"\n                        accept=\".pdf\"\n                        style={{ display: 'none' }}\n                        onChange={(e) => handleFileChange(index, e)}\n                      />\n                    </Box>\n                    {doc.loading && <LinearProgress sx={{ mt: 1 }} />}\n                    {doc.file && (\n                      <Box sx={{ mt: 1, display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Description />\n                        <Typography>{doc.file.name}</Typography>\n                        <IconButton color=\"error\" onClick={() => removeDocument(index)}>\n                          <DeleteIcon />\n                        </IconButton>\n                      </Box>\n                    )}\n                    {doc.error && (\n                      <Alert severity=\"error\" sx={{ mt: 1 }}>\n                        {doc.error}\n                      </Alert>\n                    )}\n                    {doc.extractedData && (\n                      <Alert severity=\"success\" sx={{ mt: 1 }}>\n                        Extracted: {Object.keys(doc.extractedData).join(', ')}\n                      </Alert>\n                    )}\n                  </Paper>\n                ))}\n              </Grid>\n            </Grid>\n          )}\n\n          {tabValue === 3 && (\n            <Grid container spacing={2} sx={{ mt: 2 }}>\n              <Grid size={12}>\n                <TextField\n                  fullWidth\n                  label=\"Address Line 1\"\n                  {...register('address_line1')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={12}>\n                <TextField\n                  fullWidth\n                  label=\"Address Line 2\"\n                  {...register('address_line2')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 4 }}>\n                <TextField\n                  fullWidth\n                  label=\"PIN Code\"\n                  {...register('pin_code')}\n                  error={!!pincodeError}\n                  helperText={pincodeError}\n                  margin=\"normal\"\n                  InputProps={{\n                    endAdornment: pincodeLoading ? <CircularProgress size={16} /> : null,\n                  }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 4 }}>\n                <TextField\n                  fullWidth\n                  label=\"City\"\n                  {...register('city')}\n                  margin=\"normal\"\n                  InputProps={{ readOnly: !!pincodeData }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 4 }}>\n                <TextField\n                  fullWidth\n                  label=\"State\"\n                  {...register('state')}\n                  margin=\"normal\"\n                  InputProps={{ readOnly: !!pincodeData }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Country\"\n                  {...register('country')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Emergency Contact Name\"\n                  {...register('emergency_contact_name')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Emergency Contact Phone\"\n                  {...register('emergency_contact_phone')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Emergency Contact Relation\"\n                  {...register('emergency_contact_relation')}\n                  margin=\"normal\"\n                />\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" variant=\"contained\" disabled={loading}>\n            {loading ? <CircularProgress size={20} /> : mode === 'create' ? 'Add Employee' : 'Update Employee'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddEmployeeModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddLeadModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":24,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[385,394],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  CircularProgress,\n  Box,\n  Grid,\n  Chip\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\n\ninterface AddLeadModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n}\n\ninterface LeadFormData {\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  job_title?: string;\n  website?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  country?: string;\n  source: string;\n  status: string;\n  score: number;\n  estimated_value?: number;\n  expected_close_date?: string;\n  notes?: string;\n}\n\nconst leadSources = [\n  'Website',\n  'Social Media',\n  'Email Campaign',\n  'Cold Call',\n  'Referral',\n  'Trade Show',\n  'Partner',\n  'Advertisement',\n  'Direct Mail',\n  'Other'\n];\n\nconst leadStatuses = [\n  'new',\n  'contacted',\n  'qualified',\n  'proposal_sent',\n  'negotiation',\n  'converted',\n  'lost',\n  'disqualified'\n];\n\nconst AddLeadModal: React.FC<AddLeadModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false\n}) => {\n  const { register, handleSubmit, reset, control, formState: { errors } } = useForm<LeadFormData>({\n    defaultValues: {\n      first_name: '',\n      last_name: '',\n      email: '',\n      phone: '',\n      company: '',\n      job_title: '',\n      website: '',\n      address: '',\n      city: '',\n      state: '',\n      postal_code: '',\n      country: '',\n      source: 'Website',\n      status: 'new',\n      score: 0,\n      estimated_value: 0,\n      expected_close_date: '',\n      notes: ''\n    }\n  });\n\n  React.useEffect(() => {\n    if (open) {\n      reset({\n        first_name: '',\n        last_name: '',\n        email: '',\n        phone: '',\n        company: '',\n        job_title: '',\n        website: '',\n        address: '',\n        city: '',\n        state: '',\n        postal_code: '',\n        country: '',\n        source: 'Website',\n        status: 'new',\n        score: 0,\n        estimated_value: 0,\n        expected_close_date: '',\n        notes: ''\n      });\n    }\n  }, [open, reset]);\n\n  const onSubmit = async (leadData: LeadFormData) => {\n    try {\n      // Remove empty fields to match backend schema\n      const cleanData = Object.fromEntries(\n        Object.entries(leadData).filter(([key, value]) => {\n          if (key === 'score' || key === 'estimated_value') {\n            return value !== undefined && value !== null;\n          }\n          return value !== undefined && value !== null && value !== '';\n        })\n      );\n\n      await onAdd(cleanData);\n      reset();\n      onClose();\n    } catch (error) {\n      console.error('Error adding lead:', error);\n    }\n  };\n\n  const handleClose = () => {\n    if (!loading) {\n      reset();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\" component=\"div\">\n          Add New Lead\n        </Typography>\n      </DialogTitle>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Box sx={{ mt: 1 }}>\n            <Grid container spacing={3}>\n              {/* Basic Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2 }}>\n                  Basic Information\n                </Typography>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('first_name', { \n                    required: 'First name is required',\n                    minLength: { value: 2, message: 'First name must be at least 2 characters' }\n                  })}\n                  label=\"First Name\"\n                  fullWidth\n                  error={!!errors.first_name}\n                  helperText={errors.first_name?.message}\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('last_name', { \n                    required: 'Last name is required',\n                    minLength: { value: 2, message: 'Last name must be at least 2 characters' }\n                  })}\n                  label=\"Last Name\"\n                  fullWidth\n                  error={!!errors.last_name}\n                  helperText={errors.last_name?.message}\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('email', { \n                    required: 'Email is required',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: 'Invalid email address'\n                    }\n                  })}\n                  label=\"Email\"\n                  type=\"email\"\n                  fullWidth\n                  error={!!errors.email}\n                  helperText={errors.email?.message}\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('phone')}\n                  label=\"Phone\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              {/* Company Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Company Information\n                </Typography>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('company')}\n                  label=\"Company\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('job_title')}\n                  label=\"Job Title\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('website')}\n                  label=\"Website\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              {/* Address Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Address Information\n                </Typography>\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('address')}\n                  label=\"Address\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('city')}\n                  label=\"City\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('state')}\n                  label=\"State\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('postal_code')}\n                  label=\"Postal Code\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('country')}\n                  label=\"Country\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              {/* Lead Details */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Lead Details\n                </Typography>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Source</InputLabel>\n                  <Controller\n                    name=\"source\"\n                    control={control}\n                    rules={{ required: 'Source is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Source\"\n                        error={!!errors.source}\n                      >\n                        {leadSources.map((source) => (\n                          <MenuItem key={source} value={source}>\n                            {source}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.source && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.source.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Status</InputLabel>\n                  <Controller\n                    name=\"status\"\n                    control={control}\n                    rules={{ required: 'Status is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Status\"\n                        error={!!errors.status}\n                      >\n                        {leadStatuses.map((status) => (\n                          <MenuItem key={status} value={status}>\n                            <Chip \n                              label={status.replace('_', ' ').toUpperCase()} \n                              size=\"small\" \n                              variant=\"outlined\"\n                              sx={{ textTransform: 'capitalize' }}\n                            />\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.status && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.status.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('score', {\n                    min: { value: 0, message: 'Score must be at least 0' },\n                    max: { value: 100, message: 'Score must be at most 100' }\n                  })}\n                  label=\"Lead Score (0-100)\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.score}\n                  helperText={errors.score?.message}\n                  disabled={loading}\n                  inputProps={{ min: 0, max: 100 }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('estimated_value', {\n                    min: { value: 0, message: 'Value must be positive' }\n                  })}\n                  label=\"Estimated Value\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.estimated_value}\n                  helperText={errors.estimated_value?.message}\n                  disabled={loading}\n                  inputProps={{ min: 0 }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('expected_close_date')}\n                  label=\"Expected Close Date\"\n                  type=\"date\"\n                  fullWidth\n                  disabled={loading}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('notes')}\n                  label=\"Notes\"\n                  multiline\n                  rows={3}\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n\n        <DialogActions>\n          <Button \n            onClick={handleClose} \n            disabled={loading}\n            color=\"inherit\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Lead'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddLeadModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddOpportunityModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":25,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[410,419],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  CircularProgress,\n  Box,\n  Grid,\n  Chip,\n  InputAdornment\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\n\ninterface AddOpportunityModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n}\n\ninterface OpportunityFormData {\n  name: string;\n  account_name?: string;\n  contact_name?: string;\n  amount: number;\n  probability: number;\n  stage: string;\n  source: string;\n  close_date: string;\n  description?: string;\n  next_step?: string;\n  lead_id?: number;\n  assigned_to_id?: number;\n}\n\nconst opportunityStages = [\n  'prospecting',\n  'qualification',\n  'needs_analysis',\n  'proposal',\n  'negotiation',\n  'closed_won',\n  'closed_lost'\n];\n\nconst opportunitySources = [\n  'Website',\n  'Social Media',\n  'Email Campaign',\n  'Cold Call',\n  'Referral',\n  'Trade Show',\n  'Partner',\n  'Lead Conversion',\n  'Existing Customer',\n  'Other'\n];\n\nconst AddOpportunityModal: React.FC<AddOpportunityModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false\n}) => {\n  const { register, handleSubmit, reset, control, formState: { errors } } = useForm<OpportunityFormData>({\n    defaultValues: {\n      name: '',\n      account_name: '',\n      contact_name: '',\n      amount: 0,\n      probability: 50,\n      stage: 'prospecting',\n      source: 'Website',\n      close_date: '',\n      description: '',\n      next_step: '',\n      lead_id: undefined,\n      assigned_to_id: undefined\n    }\n  });\n\n  React.useEffect(() => {\n    if (open) {\n      reset({\n        name: '',\n        account_name: '',\n        contact_name: '',\n        amount: 0,\n        probability: 50,\n        stage: 'prospecting',\n        source: 'Website',\n        close_date: '',\n        description: '',\n        next_step: '',\n        lead_id: undefined,\n        assigned_to_id: undefined\n      });\n    }\n  }, [open, reset]);\n\n  const onSubmit = async (opportunityData: OpportunityFormData) => {\n    try {\n      // Remove empty fields to match backend schema\n      const cleanData = Object.fromEntries(\n        Object.entries(opportunityData).filter(([key, value]) => {\n          if (key === 'amount' || key === 'probability') {\n            return value !== undefined && value !== null;\n          }\n          return value !== undefined && value !== null && value !== '';\n        })\n      );\n\n      await onAdd(cleanData);\n      reset();\n      onClose();\n    } catch (error) {\n      console.error('Error adding opportunity:', error);\n    }\n  };\n\n  const handleClose = () => {\n    if (!loading) {\n      reset();\n      onClose();\n    }\n  };\n\n  const getStageColor = (stage: string) => {\n    switch (stage) {\n      case 'prospecting': return 'info';\n      case 'qualification': return 'warning';\n      case 'needs_analysis': return 'secondary';\n      case 'proposal': return 'primary';\n      case 'negotiation': return 'error';\n      case 'closed_won': return 'success';\n      case 'closed_lost': return 'default';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\" component=\"div\">\n          Add New Opportunity\n        </Typography>\n      </DialogTitle>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Box sx={{ mt: 1 }}>\n            <Grid container spacing={3}>\n              {/* Basic Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2 }}>\n                  Opportunity Details\n                </Typography>\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('name', { \n                    required: 'Opportunity name is required',\n                    minLength: { value: 3, message: 'Name must be at least 3 characters' }\n                  })}\n                  label=\"Opportunity Name\"\n                  fullWidth\n                  error={!!errors.name}\n                  helperText={errors.name?.message}\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('account_name')}\n                  label=\"Account Name\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('contact_name')}\n                  label=\"Contact Name\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('amount', { \n                    required: 'Amount is required',\n                    min: { value: 0, message: 'Amount must be positive' }\n                  })}\n                  label=\"Opportunity Value\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.amount}\n                  helperText={errors.amount?.message}\n                  disabled={loading}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                  }}\n                  inputProps={{ min: 0 }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('probability', {\n                    required: 'Probability is required',\n                    min: { value: 0, message: 'Probability must be at least 0%' },\n                    max: { value: 100, message: 'Probability must be at most 100%' }\n                  })}\n                  label=\"Probability\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.probability}\n                  helperText={errors.probability?.message}\n                  disabled={loading}\n                  InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                  }}\n                  inputProps={{ min: 0, max: 100 }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Stage</InputLabel>\n                  <Controller\n                    name=\"stage\"\n                    control={control}\n                    rules={{ required: 'Stage is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Stage\"\n                        error={!!errors.stage}\n                      >\n                        {opportunityStages.map((stage) => (\n                          <MenuItem key={stage} value={stage}>\n                            <Chip \n                              label={stage.replace('_', ' ').toUpperCase()} \n                              size=\"small\" \n                              color={getStageColor(stage) as any}\n                              variant=\"outlined\"\n                              sx={{ textTransform: 'capitalize' }}\n                            />\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.stage && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.stage.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Source</InputLabel>\n                  <Controller\n                    name=\"source\"\n                    control={control}\n                    rules={{ required: 'Source is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Source\"\n                        error={!!errors.source}\n                      >\n                        {opportunitySources.map((source) => (\n                          <MenuItem key={source} value={source}>\n                            {source}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.source && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.source.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('close_date', { \n                    required: 'Expected close date is required' \n                  })}\n                  label=\"Expected Close Date\"\n                  type=\"date\"\n                  fullWidth\n                  error={!!errors.close_date}\n                  helperText={errors.close_date?.message}\n                  disabled={loading}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Grid>\n\n              {/* Additional Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Additional Information\n                </Typography>\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('description')}\n                  label=\"Description\"\n                  multiline\n                  rows={3}\n                  fullWidth\n                  disabled={loading}\n                  placeholder=\"Describe the opportunity details, requirements, and potential challenges...\"\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('next_step')}\n                  label=\"Next Step\"\n                  fullWidth\n                  disabled={loading}\n                  placeholder=\"What is the next next action required to move this opportunity forward?\"\n                />\n              </Grid>\n\n              {/* Optional Reference Fields */}\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('lead_id')}\n                  label=\"Lead ID (if converted from lead)\"\n                  type=\"number\"\n                  fullWidth\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('assigned_to_id')}\n                  label=\"Assigned To (User ID)\"\n                  type=\"number\"\n                  fullWidth\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n\n        <DialogActions>\n          <Button \n            onClick={handleClose} \n            disabled={loading}\n            color=\"inherit\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Opportunity'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddOpportunityModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddProductModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":24,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[473,482],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n  CircularProgress,\n  Box,\n  Grid,\n  Autocomplete,\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { useQuery } from '@tanstack/react-query';\nimport { getProducts } from '../services/masterService';\n\ninterface AddProductModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n  initialName?: string;\n}\n\ninterface ProductFormData {\n  product_name: string;\n  hsn_code: string;\n  part_number: string;\n  unit: string;\n  unit_price: number;\n  gst_rate: number;\n  is_gst_inclusive: boolean;\n  reorder_level: number;\n  description: string;\n  is_manufactured: boolean;\n}\n\ninterface Product {\n  product_name: string;\n  hsn_code: string;\n  unit: string;\n  gst_rate: number;\n}\n\nconst AddProductModal: React.FC<AddProductModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false,\n  initialName = ''\n}) => {\n  const { register, handleSubmit, reset, watch, setValue, formState: { errors } } = useForm<ProductFormData>({\n    defaultValues: {\n      product_name: initialName,\n      hsn_code: '',\n      part_number: '',\n      unit: 'PCS',\n      unit_price: 0,\n      gst_rate: 18,\n      is_gst_inclusive: false,\n      reorder_level: 0,\n      description: '',\n      is_manufactured: false,\n    }\n  });\n\n  // Watch form values for bidirectional updates\n  const watchedProductName = watch('product_name');\n  const watchedHsnCode = watch('hsn_code');\n\n  // Fetch all products for autocomplete functionality\n  const { data: allProducts = [], isLoading: productsLoading } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts,\n    enabled: open, // Only fetch when modal is open\n    staleTime: 300000, // 5 minutes cache\n  });\n\n  // Create unique HSN codes list from existing products\n  const uniqueHsnCodes = React.useMemo(() => {\n    const hsnSet = new Set<string>();\n    allProducts.forEach((product: Product) => {\n      if (product.hsn_code && product.hsn_code.trim()) {\n        hsnSet.add(product.hsn_code.trim());\n      }\n    });\n    return Array.from(hsnSet).sort();\n  }, [allProducts]);\n\n  // Create product suggestions based on HSN code\n  const getProductsByHsn = React.useCallback((hsnCode: string): Product[] => {\n    if (!hsnCode.trim()) {return [];}\n    return allProducts.filter((product: Product) => \n      product.hsn_code && product.hsn_code.toLowerCase().includes(hsnCode.toLowerCase())\n    );\n  }, [allProducts]);\n\n  // Create HSN suggestions based on product name\n  const getHsnByProductName = React.useCallback((productName: string) => {\n    if (!productName.trim()) {return [];}\n    const matchingProducts = allProducts.filter((product: Product) =>\n      product.product_name.toLowerCase().includes(productName.toLowerCase())\n    );\n    const hsnCodes = matchingProducts\n      .map((product: Product) => product.hsn_code)\n      .filter((hsn: string) => hsn && hsn.trim())\n      .filter((hsn: string, index: number, array: string[]) => array.indexOf(hsn) === index); // unique\n    return hsnCodes;\n  }, [allProducts]);\n\n  React.useEffect(() => {\n    if (open && initialName) {\n      reset({ \n        product_name: initialName,\n        hsn_code: '',\n        part_number: '',\n        unit: 'PCS',\n        unit_price: 0,\n        gst_rate: 18,\n        is_gst_inclusive: false,\n        reorder_level: 0,\n        description: '',\n        is_manufactured: false,\n      });\n    }\n  }, [open, initialName, reset]);\n\n  // Bidirectional auto-population logic\n  React.useEffect(() => {\n    // When product name changes, suggest HSN codes\n    if (watchedProductName && watchedProductName.length > 2) {\n      const suggestedHsns = getHsnByProductName(watchedProductName);\n      if (suggestedHsns.length === 1 && !watchedHsnCode) {\n        // Auto-populate if there's exactly one matching HSN and HSN field is empty\n        setValue('hsn_code', suggestedHsns[0]);\n      }\n    }\n  }, [watchedProductName, watchedHsnCode, getHsnByProductName, setValue]);\n\n  React.useEffect(() => {\n    // When HSN code changes, suggest product info\n    if (watchedHsnCode && watchedHsnCode.length > 2) {\n      const matchingProducts = getProductsByHsn(watchedHsnCode);\n      if (matchingProducts.length > 0 && !watchedProductName) {\n        // If there's a strong match and product name is empty, suggest the most common unit/gst_rate\n        const commonUnit = matchingProducts[0].unit;\n        const commonGstRate = matchingProducts[0].gst_rate;\n        \n        if (commonUnit && commonUnit !== 'PCS') {\n          setValue('unit', commonUnit);\n        }\n        if (commonGstRate && commonGstRate !== 18) {\n          setValue('gst_rate', commonGstRate);\n        }\n      }\n    }\n  }, [watchedHsnCode, watchedProductName, getProductsByHsn, setValue]);\n\n  const onSubmit = async (productData: ProductFormData) => {\n    try {\n      // Remove empty fields to match backend schema to match backend schema\n      const allowedFields = ['product_name', 'hsn_code', 'part_number', 'unit', 'unit_price', 'gst_rate', 'is_gst_inclusive', 'reorder_level', 'description', 'is_manufactured'];\n      const cleanData = Object.fromEntries(\n        Object.entries(productData).filter(([key, value]) => {\n          if (key === 'unit_price' || key === 'gst_rate' || key === 'reorder_level') {\n            return true;  // Send 0 values for numbers as they are meaningful defaults\n          }\n          return allowedFields.includes(key) && value !== null && String(value).trim() !== '';\n        })\n      );\n      await onAdd(cleanData);\n      reset();\n      onClose();  // Close modal on success\n    } catch (error) {\n      console.error('Error adding product:', error);\n    }\n  };\n\n  const handleClose = () => {\n    reset();\n    onClose();\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { minHeight: '500px' }\n      }}\n    >\n      <DialogTitle>\n        <Typography variant=\"h6\" component=\"div\">\n          Add New Product\n        </Typography>\n      </DialogTitle>\n      \n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Product Name\"\n                {...register('product_name', { required: 'Product name is required' })}\n                error={!!errors.product_name}\n                helperText={\n                  errors.product_name?.message || \n                  (watchedProductName && watchedProductName.length > 2 && getHsnByProductName(watchedProductName).length > 0\n                    ? `Suggested HSN: ${getHsnByProductName(watchedProductName).slice(0, 3).join(', ')}`\n                    : undefined)\n                }\n                disabled={loading}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <Autocomplete\n                freeSolo\n                options={uniqueHsnCodes}\n                value={watchedHsnCode || ''}\n                onInputChange={(_, newValue) => {\n                  setValue('hsn_code', newValue || '');\n                }}\n                onChange={(_, newValue) => {\n                  setValue('hsn_code', newValue || '');\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    fullWidth\n                    label=\"HSN Code\"\n                    placeholder=\"Search or enter HSN code...\"\n                    disabled={loading}\n                    helperText={\n                      watchedHsnCode && getProductsByHsn(watchedHsnCode).length > 0\n                        ? `Found ${getProductsByHsn(watchedHsnCode).length} product(s) with this HSN`\n                        : undefined\n                    }\n                    InputProps={{\n                      ...params.InputProps,\n                      endAdornment: (\n                        <>\n                          {productsLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                          {params.InputProps.endAdornment}\n                        </>\n                      ),\n                    }}\n                  />\n                )}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <Box sx={{ width: '100%' }}>\n                      <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\n                        {option}\n                      </Typography>\n                      {getProductsByHsn(option).length > 0 && (\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {getProductsByHsn(option).length} product(s): {getProductsByHsn(option).slice(0, 2).map((p: Product) => p.product_name).join(', ')}\n                          {getProductsByHsn(option).length > 2 && '...'}\n                        </Typography>\n                      )}\n                    </Box>\n                  </Box>\n                )}\n                noOptionsText=\"No HSN codes found\"\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Part Number\"\n                {...register('part_number')}\n                disabled={loading}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Unit\"\n                {...register('unit', { required: 'Unit is required' })}\n                error={!!errors.unit}\n                helperText={errors.unit?.message}\n                disabled={loading}\n                placeholder=\"e.g., PCS, KG, METER\"\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Unit Price\"\n                type=\"number\"\n                inputProps={{ step: 0.01 }}\n                {...register('unit_price', { \n                  required: 'Unit price is required',\n                  min: { value: 0.01, message: 'Price must be greater than 0' },\n                  valueAsNumber: true \n                })}\n                error={!!errors.unit_price}\n                helperText={errors.unit_price?.message}\n                disabled={loading}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"GST Rate (%)\"\n                type=\"number\"\n                inputProps={{ step: 0.01 }}\n                {...register('gst_rate', { \n                  min: { value: 0, message: 'GST rate must be positive' },\n                  max: { value: 100, message: 'GST rate cannot exceed 100%' },\n                  valueAsNumber: true \n                })}\n                error={!!errors.gst_rate}\n                helperText={errors.gst_rate?.message}\n                disabled={loading}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Reorder Level\"\n                type=\"number\"\n                {...register('reorder_level', { \n                  min: { value: 0, message: 'Reorder level must be positive' },\n                  valueAsNumber: true \n                })}\n                error={!!errors.reorder_level}\n                helperText={errors.reorder_level?.message}\n                disabled={loading}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12 }}>\n              <TextField\n                fullWidth\n                label=\"Description\"\n                multiline\n                rows={3}\n                {...register('description')}\n                disabled={loading}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12 }}>\n              <Box sx={{ display: 'flex', gap: 2 }}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      {...register('is_gst_inclusive')}\n                      disabled={loading}\n                    />\n                  }\n                  label=\"GST Inclusive\"\n                />\n                \n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      {...register('is_manufactured')}\n                      disabled={loading}\n                    />\n                  }\n                  label=\"Manufactured Item\"\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        \n        <DialogActions sx={{ px: 3, pb: 2 }}>\n          <Button \n            onClick={handleClose}\n            disabled={loading}\n            color=\"inherit\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\"\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Product'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddProductModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddShippingAddressModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":22,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[476,485],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":90,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"key"},"fix":{"range":[2526,2529],"text":""},"desc":"Remove unused variable 'key'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useCallback } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Grid,\n  Alert,\n  InputAdornment,\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\nimport debounce from 'lodash/debounce';\n\ninterface AddShippingAddressModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n}\n\ninterface ShippingAddressFormData {\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  country: string;\n}\n\nconst AddShippingAddressModal: React.FC<AddShippingAddressModalProps> = ({ \n  open, \n  onClose, \n  onAdd, \n  loading = false \n}) => {\n  const { register, handleSubmit, reset, formState: { errors }, setValue, watch } = useForm<ShippingAddressFormData>({\n    defaultValues: {\n      address1: '',\n      address2: '',\n      city: '',\n      state: '',\n      pin_code: '',\n      state_code: '',\n      country: 'India',\n    }\n  });\n\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError, clearData } = usePincodeLookup();\n\n  // Auto-populate address fields when pincode data is available\n  useEffect(() => {\n    if (pincodeData) {\n      console.log('Auto-populating fields with PIN data:', pincodeData);\n      setValue('city', pincodeData.city, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n      setValue('state', pincodeData.state, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n      setValue('state_code', pincodeData.state_code, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n    }\n  }, [pincodeData, setValue]);\n\n  // Debounced lookup function\n  const debouncedLookup = useCallback(\n    debounce((pin: string) => {\n      console.log('Executing debounced lookup for PIN:', pin);\n      lookupPincode(pin);\n    }, 500),\n    [lookupPincode]\n  );\n\n  // Handle PIN change\n  const handlePinChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const pin = e.target.value;\n    console.log('PIN field onChange triggered, value:', pin);\n    if (pin && /^\\d{6}$/.test(pin)) {\n      debouncedLookup(pin);\n    } else {\n      clearData();\n    }\n  };\n\n  // Handle form submission\n  const onSubmit = async (shippingData: ShippingAddressFormData) => {\n    try {\n      const cleanData = Object.fromEntries(\n        Object.entries(shippingData).filter(([key, value]) => value && value.trim() !== '')\n      );\n      await onAdd(cleanData);\n      reset();\n      onClose();\n    } catch (error) {\n      console.error('Error adding shipping address:', error);\n    }\n  };\n\n  const handleClose = () => {\n    reset();\n    clearData();\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add Shipping Address</Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 1\"\n                {...register('address1', { required: 'Address is required' })}\n                error={!!errors.address1}\n                helperText={errors.address1?.message}\n                margin=\"normal\"\n              />\n            </Grid>\n            \n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 2\"\n                {...register('address2')}\n                margin=\"normal\"\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 4 }}>\n              <TextField\n                fullWidth\n                label=\"PIN Code *\"\n                {...register('pin_code', { \n                  required: 'PIN code is required',\n                  pattern: {\n                    value: /^\\d{6}$/,\n                    message: 'Please enter a valid 6-digit PIN code'\n                  }\n                })}\n                error={!!errors.pin_code}\n                helperText={errors.pin_code?.message || (pincodeError && pincodeError)}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: pincodeLoading ? (\n                    <InputAdornment position=\"end\">\n                      <CircularProgress size={16} />\n                    </InputAdornment>\n                  ) : null,\n                }}\n                onChange={handlePinChange}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 4 }}>\n              <TextField\n                fullWidth\n                label=\"City\"\n                {...register('city', { required: 'City is required' })}\n                error={!!errors.city}\n                helperText={errors.city?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('city') || !!pincodeData,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 4 }}>\n              <TextField\n                fullWidth\n                label=\"State\"\n                {...register('state', { required: 'State is required' })}\n                error={!!errors.state}\n                helperText={errors.state?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state') || !!pincodeData,\n                }}\n                sx={{\n                  '& .MuiInputBase-root': {\n                    height: '40px',\n                  },\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"State Code\"\n                {...register('state_code', { required: 'State code is required' })}\n                error={!!errors.state_code}\n                helperText={errors.state_code?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state_code') || !!pincodeData,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Country\"\n                {...register('country', { required: 'Country is required' })}\n                error={!!errors.country}\n                helperText={errors.country?.message}\n                margin=\"normal\"\n              />\n            </Grid>\n\n            {pincodeError && (\n              <Grid size={12}>\n                <Alert severity=\"warning\" sx={{ mt: 1 }}>\n                  {pincodeError}\n                </Alert>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Address'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddShippingAddressModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddUserDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddVendorModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":30,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[669,678],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/AddVendorModal.tsx\nimport React, { useEffect, useState, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Grid as Grid,\n  Alert,\n  InputAdornment,\n  Box,\n  Paper,\n  Chip,\n  Tooltip,\n  LinearProgress,\n  IconButton,\n} from '@mui/material';\nimport { CloudUpload, Description, CheckCircle, Search } from '@mui/icons-material';\nimport { useForm } from 'react-hook-form';\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\nimport api from '../lib/api';\n\ninterface AddVendorModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd?: (data: any) => Promise<void>;\n  loading?: boolean;\n  initialName?: string;\n}\n\ninterface VendorFormData {\n  name: string;\n  contact_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  gst_number: string;\n  pan_number: string;\n  state_code: string;\n}\n\nconst AddVendorModal: React.FC<AddVendorModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false,\n  initialName = ''\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [gstFile, setGstFile] = useState<File | null>(null);\n  const [gstUploadLoading, setGstUploadLoading] = useState(false);\n  const [gstExtractedData, setGstExtractedData] = useState<any>(null);\n  const [gstUploadError, setGstUploadError] = useState<string | null>(null);\n  const [gstSearchLoading, setGstSearchLoading] = useState(false);\n\n  const { register, handleSubmit, reset, formState: { errors }, setValue, watch } = useForm<VendorFormData>({\n    defaultValues: {\n      name: initialName,\n      contact_number: '',\n      email: '',\n      address1: '',\n      address2: '',\n      city: '',\n      state: '',\n      pin_code: '',\n      gst_number: '',\n      pan_number: '',\n      state_code: '',\n    }\n  });\n\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError, clearData } = usePincodeLookup();\n  const watchedPincode = watch('pin_code');\n  const watchedGstNumber = watch('gst_number');\n\n  // Auto-populate form fields when pincode data is available\n  useEffect(() => {\n    if (pincodeData) {\n      setValue('city', pincodeData.city);\n      setValue('state', pincodeData.state);\n      setValue('state_code', pincodeData.state_code);\n    }\n  }, [pincodeData, setValue]);\n\n  // Handle pincode change with debouncing\n  useEffect(() => {\n    if (watchedPincode && /^\\d{6}$/.test(watchedPincode)) {\n      const timeoutId = setTimeout(() => {\n        lookupPincode(watchedPincode);\n      }, 500); // 500ms debounce\n\n      return () => clearTimeout(timeoutId);\n    } else {\n      clearData();\n    }\n  }, [watchedPincode, lookupPincode, clearData]);\n\n  // Handle GST certificate upload with actual API call\n  const handleGstFileUpload = async (file: File) => {\n    setGstUploadLoading(true);\n    setGstUploadError(null);\n    \n    try {\n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Call backend PDF extraction API\n      const response = await api.post('/pdf-extraction/extract/vendor', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      if (response.data.success) {\n        const extractedData = response.data.extracted_data;\n        \n        // Auto-populate form fields with processed extracted data\n        Object.entries(extractedData).forEach(([key, value]) => {\n          if (value) {\n            setValue(key as keyof VendorFormData, value as string);\n          }\n        });\n        \n        setGstExtractedData(extractedData);\n        setGstFile(file);\n      } else {\n        const errorMessage = (response.data as any)?.detail || 'Extraction failed';\n        throw new globalThis.Error(errorMessage);\n      }\n      \n    } catch (error: any) {\n      console.error('Error processing GST certificate:', error);\n      setGstUploadError(error.response?.data?.detail || 'Failed to process GST certificate. Please try again.');\n    } finally {\n      setGstUploadLoading(false);\n    }\n  };\n\n  const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/pdf') {\n        setGstUploadError('Please upload a PDF file');\n        return;\n      }\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        setGstUploadError('File size should be less than 10MB');\n        return;\n      }\n      handleGstFileUpload(file);\n    }\n  };\n\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  const removeGstFile = () => {\n    setGstFile(null);\n    setGstExtractedData(null);\n    setGstUploadError(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleGstSearch = async () => {\n    if (!watchedGstNumber || !/^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/.test(watchedGstNumber)) {\n      setGstUploadError('Please enter a valid GSTIN');\n      return;\n    }\n    \n    setGstSearchLoading(true);\n    setGstUploadError(null);\n    \n    try {\n      const response = await api.get(`/gst/search/${watchedGstNumber}`);\n      const data = response.data;\n      \n      // Auto-populate fields from API response\n      Object.entries(data).forEach(([key, value]) => {\n        if (value) {\n          setValue(key as keyof VendorFormData, value as string);\n        }\n      });\n      \n    } catch (error: any) {\n      setGstUploadError(error.response?.data?.detail || 'Failed to fetch GST details. Please check GSTIN.');\n    } finally {\n      setGstSearchLoading(false);\n    }\n  };\n\n  const onSubmit = async (data: VendorFormData) => {\n    try {\n      // Remove empty fields and exclude unexpected fields like 'is_active'\n      const allowedFields = ['name', 'contact_number', 'email', 'address1', 'address2', 'city', 'state', 'pin_code', 'gst_number', 'pan_number', 'state_code'];\n      const cleanData = Object.fromEntries(\n        Object.entries(data).filter(([key, value]) => allowedFields.includes(key) && value !== null && String(value).trim() !== '')\n      );\n      \n      // Direct API call to save vendor\n      const response = await api.post('/vendors', cleanData);\n      console.log('Vendor added successfully:', response.data);\n      \n      // Call onAdd if provided and is a function\n      if (typeof onAdd === 'function') {\n        await onAdd(response.data);\n      }\n      \n      reset();\n      onClose();  // Close modal on success\n    } catch (error: any) {\n      console.error('Error adding vendor:', error);\n      // Set more specific error message\n      const errorMessage = error.response?.data?.detail || 'Failed to add vendor. Please try again.';\n      setGstUploadError(errorMessage);\n    }\n  };\n\n  const handleClose = () => {\n    reset();\n    clearData();\n    removeGstFile();\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add New Vendor</Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Vendor Name *\"\n                {...register('name', { required: 'Vendor name is required' })}\n                error={!!errors.name}\n                helperText={errors.name?.message}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('name') || !!gstExtractedData?.name,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Contact Number\"\n                {...register('contact_number')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('contact_number') || !!gstExtractedData?.phone,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Email\"\n                type=\"email\"\n                {...register('email', {\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: 'Invalid email address'\n                  }\n                })}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('email') || !!gstExtractedData?.email,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"GST Number\"\n                {...register('gst_number')}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      {gstSearchLoading ? (\n                        <CircularProgress size={16} />\n                      ) : (\n                        <IconButton\n                          onClick={handleGstSearch}\n                          disabled={!watchedGstNumber || gstSearchLoading}\n                          aria-label=\"Search GST\"\n                        >\n                          <Search />\n                        </IconButton>\n                      )}\n                    </InputAdornment>\n                  ),\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('gst_number') || !!gstExtractedData?.gst_number,\n                }}\n              />\n            </Grid>\n\n            {/* GST Certificate Upload Section */}\n            <Grid size={12}>\n              <Paper sx={{ p: 2, bgcolor: 'grey.50', border: '1px dashed', borderColor: 'grey.300' }}>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    GST Certificate Upload (Optional)\n                  </Typography>\n                  <Tooltip title=\"Upload GST certificate PDF to auto-fill vendor details\">\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      PDF Auto-Extract\n                    </Typography>\n                  </Tooltip>\n                </Box>\n                \n                {!gstFile && !gstUploadLoading && (\n                  <Box\n                    sx={{\n                      border: '2px dashed',\n                      borderColor: 'grey.300',\n                      borderRadius: 1,\n                      p: 3,\n                      textAlign: 'center',\n                      cursor: 'pointer',\n                      '&:hover': {\n                        borderColor: 'primary.main',\n                        bgcolor: 'action.hover'\n                      }\n                    }}\n                    onClick={triggerFileUpload}\n                  >\n                    <CloudUpload sx={{ fontSize: 48, color: 'grey.400', mb: 1 }} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                      Click to upload GST certificate (PDF only)\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Maximum file size: 10MB\n                    </Typography>\n                  </Box>\n                )}\n                \n                {gstUploadLoading && (\n                  <Box sx={{ p: 3, textAlign: 'center' }}>\n                    <CircularProgress size={40} sx={{ mb: 2 }} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                      Processing GST certificate...\n                    </Typography>\n                    <LinearProgress sx={{ mt: 1 }} />\n                  </Box>\n                )}\n                \n                {gstFile && !gstUploadLoading && (\n                  <Box sx={{ p: 2, bgcolor: 'success.light', borderRadius: 1 }}>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <Description color=\"primary\" />\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {gstFile.name}\n                        </Typography>\n                        <Chip\n                          icon={<CheckCircle />}\n                          label=\"Processed\"\n                          size=\"small\"\n                          color=\"success\"\n                          variant=\"outlined\"\n                        />\n                      </Box>\n                      <Button\n                        size=\"small\"\n                        onClick={removeGstFile}\n                        color=\"error\"\n                        variant=\"outlined\"\n                      >\n                        Remove\n                      </Button>\n                    </Box>\n                    {gstExtractedData && (\n                      <Alert severity=\"success\" sx={{ mt: 1 }}>\n                        <Typography variant=\"caption\">\n                          Auto-populated: {Object.keys(gstExtractedData).join(', ')}\n                        </Typography>\n                      </Alert>\n                    )}\n                  </Box>\n                )}\n                \n                {gstUploadError && (\n                  <Alert severity=\"error\" sx={{ mt: 1 }} onClose={() => setGstUploadError(null)}>\n                    {gstUploadError}\n                  </Alert>\n                )}\n                \n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".pdf\"\n                  style={{ display: 'none' }}\n                  onChange={handleFileInputChange}\n                />\n              </Paper>\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"PAN Number\"\n                {...register('pan_number')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('pan_number') || !!gstExtractedData?.pan_number,\n                }}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 1\"\n                {...register('address1')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('address1') || !!gstExtractedData?.address1,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 2\"\n                {...register('address2')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('address2') || !!gstExtractedData?.address2,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"PIN Code *\"\n                {...register('pin_code', { \n                  required: 'PIN code is required',\n                  pattern: {\n                    value: /^\\d{6}$/,\n                    message: 'Please enter a valid 6-digit PIN code'\n                  }\n                })}\n                error={!!errors.pin_code}\n                helperText={errors.pin_code?.message || (pincodeError && pincodeError)}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: pincodeLoading ? (\n                    <InputAdornment position=\"end\">\n                      <CircularProgress size={16} />\n                    </InputAdornment>\n                  ) : null,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('pin_code') || !!gstExtractedData?.pin_code,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"City\"\n                {...register('city', { required: 'City is required' })}\n                error={!!errors.city}\n                helperText={errors.city?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('city') || !!pincodeData || !!gstExtractedData?.city,\n                }}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"State\"\n                {...register('state', { required: 'State is required' })}\n                error={!!errors.state}\n                helperText={errors.state?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state') || !!pincodeData || !!gstExtractedData?.state,\n                }}\n              />\n            </Grid>\n\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"State Code\"\n                {...register('state_code', { required: 'State code is required' })}\n                error={!!errors.state_code}\n                helperText={errors.state_code?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state_code') || !!pincodeData || !!gstExtractedData?.state_code,\n                }}\n              />\n            </Grid>\n\n            {pincodeError && (\n              <Grid size={12}>\n                <Alert severity=\"warning\" sx={{ mt: 1 }}>\n                  {pincodeError}\n                </Alert>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Vendor'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default AddVendorModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AdminUserForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'formData' is defined but never used.","line":6,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"formData"},"fix":{"range":[230,243],"text":""},"desc":"Remove unused variable 'formData'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/AdminUserForm.tsx\nimport React, { useState } from 'react';\nimport { Box, TextField, MenuItem, FormControl, InputLabel, Select, Button } from '@mui/material';\n\ninterface AdminUserFormProps {\n  onSubmit: (formData: any) => void;\n}\n\nconst AdminUserForm: React.FC<AdminUserFormProps> = ({ onSubmit }) => {\n  const [formData, setFormData] = useState({\n    email: '',\n    full_name: '',\n    role: 'platform_admin',\n    password: ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  const handleChange = (field: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({ ...prev, [field]: e.target.value }));\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\n      <TextField\n        fullWidth\n        label=\"Email\"\n        value={formData.email}\n        onChange={handleChange('email')}\n        required\n        margin=\"normal\"\n      />\n      <TextField\n        fullWidth\n        label=\"Full Name\"\n        value={formData.full_name}\n        onChange={handleChange('full_name')}\n        margin=\"normal\"\n      />\n      <FormControl fullWidth margin=\"normal\">\n        <InputLabel>Role</InputLabel>\n        <Select\n          label=\"Role\"\n          value={formData.role}\n          onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}\n        >\n          <MenuItem value=\"platform_admin\">Platform Admin</MenuItem>\n        </Select>\n      </FormControl>\n      <TextField\n        fullWidth\n        label=\"Password\"\n        type=\"password\"\n        value={formData.password}\n        onChange={handleChange('password')}\n        required\n        margin=\"normal\"\n      />\n      <Button type=\"submit\" variant=\"contained\" fullWidth sx={{ mt: 2 }}>\n        Create User\n      </Button>\n    </Box>\n  );\n};\n\nexport default AdminUserForm;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AlertsFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AuthProvider.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'email' is defined but never used.","line":19,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"email"},"fix":{"range":[391,405],"text":""},"desc":"Remove unused variable 'email'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'password' is defined but never used.","line":19,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"password"},"fix":{"range":[404,422],"text":""},"desc":"Remove unused variable 'password'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'refreshToken' was used before it was defined.","line":52,"column":15,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":52,"endColumn":27},{"ruleId":"no-use-before-define","severity":2,"message":"'logout' was used before it was defined.","line":61,"column":25,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":61,"endColumn":31},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchUser' was used before it was defined.","line":65,"column":13,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":65,"endColumn":22},{"ruleId":"no-use-before-define","severity":2,"message":"'logout' was used before it was defined.","line":68,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":68,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'useEffect' is not defined.","line":88,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":88,"endColumn":12}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/AuthProvider.tsx\nimport React, { createContext, useState, ReactNode } from 'react';\nimport { useRouter } from 'next/router';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\n\ninterface User {\n  id: number;\n  email: string;\n}\n\ninterface JwtPayload {\n  exp: number;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  const api = axios.create({\n    baseURL: '/api/v1',\n  });\n\n  api.interceptors.request.use(\n    (config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => Promise.reject(error)\n  );\n\n  api.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n      const originalRequest = error.config;\n      if (error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        await refreshToken();\n        return api(originalRequest);\n      }\n      return Promise.reject(error);\n    }\n  );\n\n  const refreshToken = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {return logout();}\n    try {\n      const response = await api.post('/auth/refresh-token');\n      localStorage.setItem('token', response.data.access_token);\n      await fetchUser();\n    } catch (refreshError) {\n      console.error('Token refresh failed', refreshError);\n      logout();\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    router.push('/login');\n  };\n\n  const fetchUser = async () => {\n    try {\n      const response = await api.get('/users/me');\n      setUser(response.data);\n    } catch (fetchError) {\n      console.error('Fetch user error', fetchError);\n      throw fetchError;\n    }\n  };\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const decoded: JwtPayload = jwtDecode(token);\n          if (decoded.exp * 1000 < Date.now()) {\n            console.log('Token expired on load, logging out');\n            logout();\n            return;\n          }\n          await fetchUser();\n        } catch (authError) {\n          console.error('Auth check failed', authError);\n          logout();\n        }\n      } else {\n        logout();\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await api.post('/auth/login/email', { email, password });\n      localStorage.setItem('token', response.data.access_token);\n      setUser(response.data.user);\n      router.push('/dashboard');\n    } catch (loginError) {\n      console.error('Login error', loginError);\n      throw loginError;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, logout, refreshToken }}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = React.useContext(AuthContext);\n  if (undefined === context) {throw new Error('useAuth must be used within AuthProvider');}\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/BalanceDisplay.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'accountName' is assigned a value but never used.","line":36,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"accountName"},"fix":{"range":[1210,1261],"text":""},"desc":"Remove unused variable 'accountName'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/BalanceDisplay.tsx\n// Component to display current balance for selected customers/vendors\n\nimport React from 'react';\nimport { Typography, Box } from '@mui/material';\nimport { useQuery } from '@tanstack/react-query';\nimport { getAccountBalance } from '../services/stockService';\n\ninterface BalanceDisplayProps {\n  accountType: 'customer' | 'vendor' | null;\n  accountId: number | null;\n  disabled?: boolean;\n}\n\nconst BalanceDisplay: React.FC<BalanceDisplayProps> = ({ \n  accountType, \n  accountId, \n  disabled = false \n}) => {\n  const { data: balanceData, isLoading, isError } = useQuery({\n    queryKey: ['accountBalance', accountType, accountId],\n    queryFn: getAccountBalance,\n    enabled: !disabled && !!accountType && !!accountId,\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n    gcTime: 10 * 60 * 1000, // Keep in cache for 10 minutes\n    refetchOnWindowFocus: false,\n    retry: false, // Don't retry on permission errors\n  });\n\n  // Don't show anything if disabled, no account selected, loading, or error\n  if (disabled || !accountType || !accountId || isLoading || isError || !balanceData) {\n    return null;\n  }\n\n  const outstandingAmount = balanceData.outstanding_amount || 0;\n  const accountName = balanceData.account_name || '';\n  \n  // Format the balance with proper sign convention\n  const formatBalance = (amount: number, type: string) => {\n    const absAmount = Math.abs(amount);\n    if (type === 'vendor') {\n      // For vendors: negative amount means money payable TO vendor\n      return amount < 0 \n        ? `₹${absAmount.toLocaleString()} payable`\n        : `₹${amount.toLocaleString()} advance`;\n    } else {\n      // For customers: positive amount means money receivable FROM customer\n      return amount > 0 \n        ? `₹${amount.toLocaleString()} receivable`\n        : `₹${absAmount.toLocaleString()} advance`;\n    }\n  };\n\n  return (\n    <Box sx={{ mt: 0.5 }}>\n      <Typography\n        variant=\"caption\"\n        sx={{\n          color: 'success.main',\n          fontSize: '0.75rem',\n          fontWeight: 500,\n          display: 'block'\n        }}\n      >\n        Current Balance: {formatBalance(outstandingAmount, accountType)}\n      </Typography>\n    </Box>\n  );\n};\n\nexport default BalanceDisplay;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CompanyDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CompanyLogoUpload.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'logoPath' is defined but never used.","line":27,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"logoPath"},"fix":{"range":[543,566],"text":""},"desc":"Remove unused variable 'logoPath'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  IconButton,\n  Paper,\n  CircularProgress,\n  Alert,\n  Avatar,\n  Tooltip,\n  Stack\n} from '@mui/material';\nimport {\n  CloudUpload,\n  Delete,\n  PhotoCamera,\n  Business\n} from '@mui/icons-material';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { companyService } from '../services/authService';\n\ninterface CompanyLogoUploadProps {\n  companyId: number;\n  currentLogoPath?: string | null;\n  disabled?: boolean;\n  onLogoChange?: (logoPath: string | null) => void;\n}\n\nconst CompanyLogoUpload: React.FC<CompanyLogoUploadProps> = ({\n  companyId,\n  currentLogoPath,\n  disabled = false,\n  onLogoChange\n}) => {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(currentLogoPath || null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n\n  // Upload mutation\n  const uploadMutation = useMutation({\n    mutationFn: (file: File) => companyService.uploadLogo(companyId, file),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['company'] });\n      setPreviewUrl(companyService.getLogoUrl(companyId));\n      setUploadError(null);\n      if (onLogoChange) {\n        onLogoChange(data.logo_path);\n      }\n    },\n    onError: (error: any) => {\n      setUploadError(error.message || 'Failed to upload logo');\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: () => companyService.deleteLogo(companyId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['company'] });\n      setPreviewUrl(null);\n      setUploadError(null);\n      if (onLogoChange) {\n        onLogoChange(null);\n      }\n    },\n    onError: (error: any) => {\n      setUploadError(error.message || 'Failed to delete logo');\n    },\n  });\n\n  const validateFile = (file: File): string | null => {\n    // Check file type\n    if (!file.type.startsWith('image/')) {\n      return 'Please select an image file (PNG, JPG, JPEG, GIF, etc.)';\n    }\n\n    // Check file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      return 'Logo file size must be less than 5MB';\n    }\n\n    return null;\n  };\n\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files || files.length === 0) {return;}\n\n    const file = files[0];\n    const validationError = validateFile(file);\n\n    if (validationError) {\n      setUploadError(validationError);\n      return;\n    }\n\n    // Create preview URL\n    const objectUrl = URL.createObjectURL(file);\n    setPreviewUrl(objectUrl);\n\n    // Upload file\n    uploadMutation.mutate(file);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    if (!disabled) {\n      handleFileSelect(e.dataTransfer.files);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (!disabled) {\n      setIsDragOver(true);\n    }\n  };\n\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFileSelect(e.target.files);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleUploadClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleDeleteLogo = () => {\n    deleteMutation.mutate();\n  };\n\n  const isLoading = uploadMutation.isPending || deleteMutation.isPending;\n\n  return (\n    <Box>\n      <Typography variant=\"subtitle2\" gutterBottom>\n        Company Logo\n      </Typography>\n\n      {uploadError && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {uploadError}\n        </Alert>\n      )}\n\n      <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n        {/* Logo Preview */}\n        <Avatar\n          src={previewUrl || undefined}\n          sx={{\n            width: 80,\n            height: 80,\n            bgcolor: 'grey.200',\n            border: '2px solid',\n            borderColor: 'grey.300'\n          }}\n        >\n          {!previewUrl && <Business sx={{ fontSize: 40, color: 'grey.500' }} />}\n        </Avatar>\n\n        {/* Upload Area */}\n        <Box sx={{ flex: 1 }}>\n          {!previewUrl ? (\n            <Paper\n              sx={{\n                p: 2,\n                border: '2px dashed',\n                borderColor: isDragOver ? 'primary.main' : 'grey.300',\n                bgcolor: isDragOver ? 'action.hover' : 'background.paper',\n                cursor: disabled ? 'default' : 'pointer',\n                textAlign: 'center',\n                transition: 'all 0.2s ease-in-out',\n                minHeight: 80,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n              onDrop={handleDrop}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onClick={disabled ? undefined : handleUploadClick}\n            >\n              {isLoading ? (\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <CircularProgress size={20} />\n                  <Typography variant=\"body2\">\n                    {uploadMutation.isPending ? 'Uploading...' : 'Processing...'}\n                  </Typography>\n                </Box>\n              ) : (\n                <Box>\n                  <CloudUpload sx={{ fontSize: 32, color: 'grey.500', mb: 1 }} />\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    Drag & drop logo here or click to upload\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    PNG, JPG, JPEG, GIF up to 5MB\n                  </Typography>\n                </Box>\n              )}\n            </Paper>\n          ) : (\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              <Tooltip title=\"Change Logo\">\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<PhotoCamera />}\n                  onClick={handleUploadClick}\n                  disabled={disabled || isLoading}\n                  size=\"small\"\n                >\n                  Change\n                </Button>\n              </Tooltip>\n              <Tooltip title=\"Remove Logo\">\n                <IconButton\n                  color=\"error\"\n                  onClick={handleDeleteLogo}\n                  disabled={disabled || isLoading}\n                  size=\"small\"\n                >\n                  <Delete />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          )}\n        </Box>\n      </Stack>\n\n      {/* Hidden file input */}\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileInputChange}\n        accept=\"image/*\"\n        style={{ display: 'none' }}\n        disabled={disabled}\n      />\n    </Box>\n  );\n};\n\nexport default CompanyLogoUpload;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CompanySetupGuard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CreateOrganizationLicenseModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[336,347],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Accordion' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Accordion"},"fix":{"range":[392,405],"text":""},"desc":"Remove unused variable 'Accordion'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionSummary' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionSummary"},"fix":{"range":[405,425],"text":""},"desc":"Remove unused variable 'AccordionSummary'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionDetails' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionDetails"},"fix":{"range":[425,445],"text":""},"desc":"Remove unused variable 'AccordionDetails'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ExpandMore' is defined but never used.","line":30,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"ExpandMore"},"fix":{"range":[470,519],"text":""},"desc":"Remove unused variable 'ExpandMore'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'authService' is defined but never used.","line":33,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"authService"},"fix":{"range":[654,708],"text":""},"desc":"Remove unused variable 'authService'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used.","line":39,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"result"},"fix":{"range":[894,905],"text":""},"desc":"Remove unused variable 'result'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/CreateOrganizationLicenseModal.tsx\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Alert,\n  CircularProgress,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Grid as Grid,\n  Divider,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport { ExpandMore } from '@mui/icons-material';\nimport { useForm } from 'react-hook-form';\nimport { organizationService } from '../services/organizationService'; // Adjust if needed\nimport { authService } from '../services/authService'; // Add this import\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\n\ninterface CreateOrganizationLicenseModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSuccess?: (result: any) => void;\n}\n\ninterface LicenseFormData {\n  organization_name: string;\n  superadmin_email: string;\n  primary_phone: string;\n  address1: string;\n  pin_code: string;\n  city: string;\n  state: string;\n  state_code: string;\n  gst_number?: string;\n  max_users: number;\n}\n\n// Indian states for dropdown selection\nconst INDIAN_STATES = [\n  'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh', \n  'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir',\n  'Jharkhand', 'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra',\n  'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab',\n  'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura',\n  'Uttar Pradesh', 'Uttarakhand', 'West Bengal', 'Andaman and Nicobar Islands',\n  'Chandigarh', 'Dadra and Nagar Haveli and Daman and Diu', 'Lakshadweep',\n  'Delhi', 'Puducherry', 'Ladakh'\n];\n\n// State to GST state code mapping\nconst stateToCodeMap: { [key: string]: string } = {\n  'Andhra Pradesh': '37',\n  'Arunachal Pradesh': '12',\n  'Assam': '18',\n  'Bihar': '10',\n  'Chhattisgarh': '22',\n  'Goa': '30',\n  'Gujarat': '24',\n  'Haryana': '06',\n  'Himachal Pradesh': '02',\n  'Jammu and Kashmir': '01',\n  'Jharkhand': '20',\n  'Karnataka': '29',\n  'Kerala': '32',\n  'Madhya Pradesh': '23',\n  'Maharashtra': '27',\n  'Manipur': '14',\n  'Meghalaya': '17',\n  'Mizoram': '15',\n  'Nagaland': '13',\n  'Odisha': '21',\n  'Punjab': '03',\n  'Rajasthan': '08',\n  'Sikkim': '11',\n  'Tamil Nadu': '33',\n  'Telangana': '36',\n  'Tripura': '16',\n  'Uttar Pradesh': '09',\n  'Uttarakhand': '05',\n  'West Bengal': '19',\n  'Andaman and Nicobar Islands': '35',\n  'Chandigarh': '04',\n  'Dadra and Nagar Haveli and Daman and Diu': '26',\n  'Lakshadweep': '31',\n  'Delhi': '07',\n  'Puducherry': '34',\n  'Ladakh': '38',\n};\n\nconst CreateOrganizationLicenseModal: React.FC<CreateOrganizationLicenseModalProps> = ({\n  open,\n  onClose,\n  onSuccess\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<any | null>(null);\n  const [moduleDialogOpen, setModuleDialogOpen] = useState(false);\n  const [licenseActivationOpen, setLicenseActivationOpen] = useState(false);\n  const [activationPeriod, setActivationPeriod] = useState<'month' | 'year' | 'perpetual'>('year');\n  const [selectedModules, setSelectedModules] = useState({\n    \"CRM\": true,\n    \"ERP\": true,\n    \"HR\": true,\n    \"Inventory\": true,\n    \"Service\": true,\n    \"Analytics\": true,\n    \"Finance\": true\n  });\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue,\n    watch\n  } = useForm<LicenseFormData>({\n    defaultValues: {\n      max_users: 5, // Default value\n    },\n  });\n\n  // Use the enhanced pincode lookup hook\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError } = usePincodeLookup();\n\n  const pin_code = watch('pin_code');\n  const state = watch('state');\n\n  // Auto-populate city, state, and state_code when pin code changes\n  useEffect(() => {\n    if (pin_code && pin_code.length === 6 && /^\\d{6}$/.test(pin_code)) {\n      lookupPincode(pin_code);\n    }\n  }, [pin_code, lookupPincode]);\n\n  // Auto-populate fields when pincode data is fetched\n  useEffect(() => {\n    if (pincodeData) {\n      setValue('city', pincodeData.city, { shouldValidate: true });\n      setValue('state', pincodeData.state, { shouldValidate: true });\n      setValue('state_code', pincodeData.state_code, { shouldValidate: true });\n    }\n  }, [pincodeData, setValue]);\n\n  // Auto-populate state_code when state changes\n  useEffect(() => {\n    if (state) {\n      const code = stateToCodeMap[state];\n      if (code) {\n        setValue('state_code', code, { shouldValidate: true });\n      }\n    }\n  }, [state, setValue]);\n\n  const handleClose = () => {\n    reset();\n    setError(null);\n    setSuccess(null);\n    onClose();\n  };\n\n  const onSubmit = async (data: LicenseFormData) => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    console.log('[LicenseModal] Starting license creation process');\n    console.log('[LicenseModal] Current auth state before license creation:', {\n      hasToken: !!localStorage.getItem('token'),\n      userRole: localStorage.getItem('user_role'),\n      timestamp: new Date().toISOString(),\n      note: 'Organization context managed by backend session'\n    });\n\n    // Validate required fields that might not be caught by form validation\n    if (!data.state) {\n      setError('Please select a state');\n      setLoading(false);\n      return;\n    }\n\n    // Prepare the data for submission\n    const submissionData = {\n      organization_name: data.organization_name.trim(),\n      superadmin_email: data.superadmin_email.trim(),\n      primary_phone: data.primary_phone?.trim(),\n      address1: data.address1.trim(),\n      pin_code: data.pin_code.trim(),\n      city: data.city.trim(),\n      state: data.state.trim(),\n      state_code: data.state_code.trim(),\n      gst_number: data.gst_number?.trim() || undefined, // Optional field\n      max_users: data.max_users,\n      enabled_modules: selectedModules, // Include selected modules\n    };\n\n    console.log('[LicenseModal] Submitting license data:', submissionData);\n\n    try {\n      const result = await organizationService.createLicense(submissionData);\n      if (!result || typeof result !== 'object') {\n        throw new Error('Invalid response from server');\n      }\n      console.log('[LicenseModal] License creation successful:', {\n        organizationName: result.organization_name,\n        subdomain: result.subdomain,\n        adminEmail: result.superadmin_email\n      });\n      \n      // Verify current user's session is still intact\n      console.log('[LicenseModal] Verifying session after license creation:', {\n        hasToken: !!localStorage.getItem('token'),\n        userRole: localStorage.getItem('user_role'),\n        timestamp: new Date().toISOString(),\n        note: 'Organization context managed by backend session'\n      });\n      \n      setSuccess(result);\n      if (onSuccess) {\n        onSuccess(result);\n      }\n      \n      // Show license activation dialog after successful creation\n      setLicenseActivationOpen(true);\n      \n      // IMPORTANT: Auto-login functionality removed to preserve current user's session\n      // The current super admin remains logged in and sees the success message\n      console.log('[LicenseModal] License creation complete - current user session preserved');\n    } catch (err: any) {\n      console.error('[LicenseModal] License creation error:', err);\n      console.error('[LicenseModal] Error details:', {\n        message: err.message,\n        status: err.status,\n        userMessage: err.userMessage\n      });\n      setError(err.message || 'Failed to create organization license. Please check if RBAC initialization succeeded or run init_rbac_for_org.py manually.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleModuleChange = (module: string, enabled: boolean) => {\n    setSelectedModules(prev => ({\n      ...prev,\n      [module]: enabled\n    }));\n  };\n\n  const handleOpenModuleDialog = () => {\n    setModuleDialogOpen(true);\n  };\n\n  const handleCloseModuleDialog = () => {\n    setModuleDialogOpen(false);\n  };\n\n  return (\n    <>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"lg\" fullWidth>\n        <DialogTitle sx={{ \n          textAlign: 'center', \n          fontWeight: 'bold',\n          pb: 1,\n          borderBottom: '1px solid',\n          borderColor: 'divider'\n        }}>\n          Create Organization License\n        </DialogTitle>\n        <DialogContent sx={{ pt: 3 }}>\n          <Box>\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 3 }}>\n                {error}\n              </Alert>\n            )}\n            \n            {success && (\n              <Alert severity=\"success\" sx={{ mb: 3 }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: 'success.dark' }}>\n                  🎉 License Created Successfully!\n                </Typography>\n                <Box sx={{ mt: 2, p: 2, bgcolor: 'success.50', borderRadius: 1, border: '1px solid', borderColor: 'success.200' }}>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Organization:</strong> {success.organization_name}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Subdomain:</strong> {success.subdomain}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Admin Email:</strong> {success.superadmin_email}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Temporary Password:</strong> \n                    <Box component=\"span\" sx={{ \n                      ml: 1, \n                      p: 0.5, \n                      bgcolor: 'warning.100', \n                      borderRadius: 0.5,\n                      fontFamily: 'monospace',\n                      fontSize: '0.9em'\n                    }}>\n                      {success.temp_password}\n                    </Box>\n                  </Typography>\n                </Box>\n                <Alert severity=\"warning\" sx={{ mt: 2 }}>\n                  <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                    ⚠️ Important: Save these credentials immediately!\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                    This password will not be displayed again. The admin must change it on first login.\n                  </Typography>\n                </Alert>\n              </Alert>\n            )}\n\n            {!success && (\n              <form onSubmit={handleSubmit(onSubmit)}>\n                {/* Organization Information Section */}\n                <Box sx={{ mb: 4 }}>\n                  <Typography variant=\"h6\" sx={{ \n                    mb: 2, \n                    fontWeight: 'bold', \n                    color: 'primary.main',\n                    borderBottom: '2px solid',\n                    borderColor: 'primary.main',\n                    pb: 0.5\n                  }}>\n                    📋 Organization Information\n                  </Typography>\n                  \n                  <Grid container spacing={3}>\n                    <Grid size={12}>\n                      <TextField\n                        fullWidth\n                        label=\"Organization Name\"\n                        placeholder=\"Enter your organization's full legal name\"\n                        {...register('organization_name', {\n                          required: 'Organization name is required',\n                          minLength: {\n                            value: 3,\n                            message: 'Organization name must be at least 3 characters'\n                          }\n                        })}\n                        error={!!errors.organization_name}\n                        helperText={errors.organization_name?.message || 'This will be used for official documents and branding'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    \n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"Primary/Admin Email\"\n                        type=\"email\"\n                        placeholder=\"admin@yourorganization.com\"\n                        {...register('superadmin_email', {\n                          required: 'Primary email is required',\n                          pattern: {\n                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                            message: 'Please enter a valid email address'\n                          }\n                        })}\n                        error={!!errors.superadmin_email}\n                        helperText={errors.superadmin_email?.message || 'This will be the admin login email'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    \n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"Primary Phone Number\"\n                        placeholder=\"+91-1234567890\"\n                        {...register('primary_phone', {\n                          required: 'Primary phone is required',\n                          pattern: {\n                            value: /^[+\\0-9\\s()-]{10,15}$/,\n                            message: 'Enter a valid phone number (10-15 digits)'\n                          }\n                        })}\n                        error={!!errors.primary_phone}\n                        helperText={errors.primary_phone?.message || 'Include country code for international numbers'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    \n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"Maximum Users\"\n                        type=\"number\"\n                        inputProps={{ min: 1, max: 1000 }}\n                        {...register('max_users', {\n                          required: 'Maximum users is required',\n                          min: {\n                            value: 1,\n                            message: 'Must allow at least 1 user'\n                          },\n                          max: {\n                            value: 1000,\n                            message: 'Cannot exceed 1000 users'\n                          }\n                        })}\n                        error={!!errors.max_users}\n                        helperText={errors.max_users?.message || 'Number of users allowed in this organization'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    \n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"GST Number (Optional)\"\n                        placeholder=\"22AAAAA0000A1Z5\"\n                        {...register('gst_number', {\n                          pattern: {\n                            value: /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/,\n                            message: 'Invalid GST format (15 characters: 22AAAAA0000A1Z5)'\n                          }\n                        })}\n                        error={!!errors.gst_number}\n                        helperText={errors.gst_number?.message || 'Leave empty if not applicable'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                  </Grid>\n                </Box>\n\n                {/* Address Information Section */}\n                <Box sx={{ mb: 4 }}>\n                  <Typography variant=\"h6\" sx={{ \n                    mb: 2, \n                    fontWeight: 'bold', \n                    color: 'secondary.main',\n                    borderBottom: '2px solid',\n                    borderColor: 'secondary.main',\n                    pb: 0.5\n                  }}>\n                    🏢 Address Information\n                  </Typography>\n                  \n                  <Grid container spacing={3}>\n                    <Grid size={12}>\n                      <TextField\n                        fullWidth\n                        label=\"Full Address\"\n                        multiline\n                        rows={3}\n                        placeholder=\"Enter complete address including building, street, and area\"\n                        {...register('address1', {\n                          required: 'Address is required',\n                          minLength: {\n                            value: 10,\n                            message: 'Please provide a complete address'\n                          }\n                        })}\n                        error={!!errors.address1}\n                        helperText={errors.address1?.message || 'Include building name, street, and locality'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    \n                    <Grid size={{ xs: 12, md: 4 }}>\n                      <TextField\n                        fullWidth\n                        label=\"PIN Code\"\n                        placeholder=\"123456\"\n                        {...register('pin_code', {\n                          required: 'PIN code is required',\n                          pattern: {\n                            value: /^\\d{6}$/,\n                            message: 'PIN code must be exactly 6 digits'\n                          }\n                        })}\n                        error={!!errors.pin_code || !!pincodeError}\n                        helperText={\n                          pincodeLoading ? 'Looking up location...' :\n                          errors.pin_code?.message || pincodeError || \n                          '6-digit postal code (automatically fetches city & state)'\n                        }\n                        disabled={loading || pincodeLoading}\n                        variant=\"outlined\"\n                        InputProps={{\n                          endAdornment: pincodeLoading ? (\n                            <Box sx={{ display: 'flex', alignItems: 'center', pr: 1 }}>\n                              <CircularProgress size={20} />\n                            </Box>\n                          ) : null\n                        }}\n                      />\n                    </Grid>\n                    \n                    <Grid size={{ xs: 12, md: 4 }}>\n                      <TextField\n                        fullWidth\n                        label=\"City\"\n                        placeholder=\"Enter city name\"\n                        {...register('city', { \n                          required: 'City is required',\n                          minLength: {\n                            value: 2,\n                            message: 'City name must be at least 2 characters'\n                          }\n                        })}\n                        error={!!errors.city}\n                        helperText={errors.city?.message || (pincodeData ? 'Auto-filled from PIN code' : 'Will be auto-filled when PIN is entered')}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    \n                    <Grid size={{ xs: 12, md: 4 }}>\n                      <FormControl fullWidth error={!!errors.state} variant=\"outlined\">\n                        <InputLabel>State</InputLabel>\n                        <Select\n                          label=\"State\"\n                          value={watch('state') || ''}\n                          onChange={(e) => setValue('state', e.target.value, { shouldValidate: true })}\n                          disabled={loading}\n                        >\n                          <MenuItem value=\"\">\n                            <em>Select a state</em>\n                          </MenuItem>\n                          {INDIAN_STATES.map((stateName) => (\n                            <MenuItem key={stateName} value={stateName}>\n                              {stateName}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                        <Typography variant=\"caption\" color={errors.state ? 'error' : 'text.secondary'} sx={{ mt: 0.5, ml: 2 }}>\n                          {errors.state?.message || (pincodeData ? 'Auto-filled from PIN code' : 'Will be auto-filled when PIN is entered')}\n                        </Typography>\n                      </FormControl>\n                    </Grid>\n                    \n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"State Code\"\n                        {...register('state_code', {\n                          required: 'State code is required',\n                          pattern: {\n                            value: /^\\d{2}$/,\n                            message: 'State code must be 2 digits'\n                          }\n                        })}\n                        error={!!errors.state_code}\n                        helperText={errors.state_code?.message || 'Automatically set based on selected state'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                        InputProps={{\n                          readOnly: true,\n                        }}\n                      />\n                    </Grid>\n                  </Grid>\n                </Box>\n\n                {/* Information Notice */}\n\n              </form>\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions sx={{ p: 3, borderTop: '1px solid', borderColor: 'divider' }}>\n          <Button \n            onClick={handleClose} \n            disabled={loading}\n            variant=\"outlined\"\n            size=\"large\"\n            sx={{ minWidth: 120 }}\n          >\n            {success ? 'Close' : 'Cancel'}\n          </Button>\n          {!success && (\n            <>\n              <Button\n                onClick={handleOpenModuleDialog}\n                variant=\"text\"\n                disabled={loading}\n                size=\"large\"\n                sx={{ minWidth: 150 }}\n              >\n                Manage Modules\n              </Button>\n              <Button\n                onClick={handleSubmit(onSubmit)}\n                variant=\"contained\"\n                disabled={loading}\n                size=\"large\"\n                sx={{ minWidth: 150 }}\n                startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : null}\n              >\n                {loading ? 'Creating...' : 'Create License'}\n              </Button>\n            </>\n          )}\n        </DialogActions>\n      </Dialog>\n\n      {/* Module Selection Dialog */}\n      <Dialog \n        open={moduleDialogOpen} \n        onClose={handleCloseModuleDialog}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          Module Selection for New Organization\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" sx={{ mb: 2 }}>\n            Select which modules should be enabled for this organization. All modules are enabled by default.\n          </Typography>\n          <FormGroup>\n            {Object.entries(selectedModules).map(([module, enabled]) => (\n              <FormControlLabel\n                key={module}\n                control={\n                  <Checkbox\n                    checked={enabled}\n                    onChange={(e) => handleModuleChange(module, e.target.checked)}\n                    color=\"primary\"\n                  />\n                }\n                label={module}\n              />\n            ))}\n          </FormGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseModuleDialog}>\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* License Activation Dialog */}\n      <Dialog \n        open={licenseActivationOpen} \n        onClose={() => setLicenseActivationOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          Activate License\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\" sx={{ mb: 3 }}>\n            The organization license has been created successfully. Please set the license activation period:\n          </Typography>\n          \n          <FormControl fullWidth sx={{ mb: 2 }}>\n            <InputLabel id=\"activation-period-label\">License Period</InputLabel>\n            <Select\n              labelId=\"activation-period-label\"\n              value={activationPeriod}\n              label=\"License Period\"\n              onChange={(e) => setActivationPeriod(e.target.value as 'month' | 'year' | 'perpetual')}\n            >\n              <MenuItem value=\"month\">1 Month</MenuItem>\n              <MenuItem value=\"year\">1 Year</MenuItem>\n              <MenuItem value=\"perpetual\">Perpetual</MenuItem>\n            </Select>\n          </FormControl>\n          \n          {success && (\n            <Box sx={{ mt: 2, p: 2, bgcolor: 'success.light', borderRadius: 1 }}>\n              <Typography variant=\"body2\" color=\"success.dark\">\n                <strong>Organization:</strong> {success.organization_name}<br/>\n                <strong>Subdomain:</strong> {success.subdomain}<br/>\n                <strong>Admin Email:</strong> {success.superadmin_email}\n              </Typography>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setLicenseActivationOpen(false)}>\n            Skip\n          </Button>\n          <Button \n            onClick={() => {\n              // Here you would typically make an API call to activate the license\n              console.log(`Activating license for ${activationPeriod}`);\n              setLicenseActivationOpen(false);\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Activate License\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default CreateOrganizationLicenseModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CreateVoucherButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CustomerAnalytics.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[236,245],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Person' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Person"},"fix":{"range":[363,373],"text":""},"desc":"Remove unused variable 'Person'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CustomerAnalyticsData' is defined but never used.","line":33,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"CustomerAnalyticsData"},"fix":{"range":[530,553],"text":""},"desc":"Remove unused variable 'CustomerAnalyticsData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refetch' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"refetch"},"fix":{"range":[1002,1015],"text":""},"desc":"Remove unused variable 'refetch'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/CustomerAnalytics.tsx\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Chip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  CircularProgress,\n  Alert,\n  FormControlLabel,\n  Switch,\n  TextField\n} from '@mui/material';\nimport {\n  TrendingUp,\n  Person,\n  DateRange,\n  Category,\n  Assessment,\n  Timeline\n} from '@mui/icons-material';\nimport { useQuery } from '@tanstack/react-query';\nimport { analyticsService, CustomerAnalyticsData } from '../services/analyticsService';\n\ninterface CustomerAnalyticsProps {\n  customerId: number;\n  customerName?: string;\n}\n\nconst CustomerAnalytics: React.FC<CustomerAnalyticsProps> = ({ \n  customerId, \n  customerName \n}) => {\n  const [includeRecentInteractions, setIncludeRecentInteractions] = useState(true);\n  const [recentInteractionsLimit, setRecentInteractionsLimit] = useState(5);\n\n  const { \n    data: analytics, \n    isLoading, \n    error,\n    refetch \n  } = useQuery({\n    queryKey: ['customerAnalytics', customerId, includeRecentInteractions, recentInteractionsLimit],\n    queryFn: () => analyticsService.getCustomerAnalytics(\n      customerId, \n      includeRecentInteractions, \n      recentInteractionsLimit\n    ),\n    enabled: !!customerId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n        <Typography variant=\"body1\" sx={{ ml: 2 }}>\n          Loading customer analytics...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ m: 2 }}>\n        Error loading customer analytics: {(error as Error).message}\n      </Alert>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <Alert severity=\"info\" sx={{ m: 2 }}>\n        No analytics data available for this customer.\n      </Alert>\n    );\n  }\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) {return 'Never';}\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getInteractionTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      call: 'primary',\n      email: 'secondary',\n      meeting: 'success',\n      support_ticket: 'warning',\n      complaint: 'error',\n      feedback: 'info'\n    };\n    return colors[type] || 'default';\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      pending: 'warning',\n      in_progress: 'info',\n      completed: 'success',\n      cancelled: 'error'\n    };\n    return colors[status] || 'default';\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" alignItems=\"center\" mb={3}>\n        <Assessment sx={{ mr: 2, fontSize: 32, color: 'primary.main' }} />\n        <Box>\n          <Typography variant=\"h4\" component=\"h1\">\n            Customer Analytics\n          </Typography>\n          <Typography variant=\"h6\" color=\"textSecondary\">\n            {analytics.customer_name || customerName}\n          </Typography>\n        </Box>\n      </Box>\n\n      {/* Controls */}\n      <Box mb={3}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid size={{ xs: 12 }}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={includeRecentInteractions}\n                  onChange={(e) => setIncludeRecentInteractions(e.target.checked)}\n                />\n              }\n              label=\"Show Recent Interactions\"\n            />\n          </Grid>\n          {includeRecentInteractions && (\n            <Grid size={{ xs: 12 }}>\n              <TextField\n                type=\"number\"\n                label=\"Recent Interactions Limit\"\n                value={recentInteractionsLimit}\n                onChange={(e) => setRecentInteractionsLimit(Number(e.target.value))}\n                InputProps={{ inputProps: { min: 1, max: 20 } }}\n                size=\"small\"\n                sx={{ width: 200 }}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </Box>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} mb={4}>\n        <Grid size={{ xs: 12, md: 3 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <TrendingUp color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Interactions\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {analytics.total_interactions}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid size={{ xs: 12, md: 3 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <DateRange color=\"secondary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Last Interaction\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatDate(analytics.last_interaction_date)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid size={{ xs: 12, md: 3 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Category color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Segments\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {analytics.segments.length}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid size={{ xs: 12, md: 3 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Timeline color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Interaction Types\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {Object.keys(analytics.interaction_types).length}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      <Grid container spacing={3}>\n        {/* Interaction Types Breakdown */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Interaction Types\n              </Typography>\n              <Box>\n                {Object.entries(analytics.interaction_types).map(([type, count]) => (\n                  <Box key={type} display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                    <Chip \n                      label={type.replace('_', ' ').toUpperCase()} \n                      color={getInteractionTypeColor(type) as any}\n                      size=\"small\"\n                    />\n                    <Typography variant=\"body2\">{count}</Typography>\n                  </Box>\n                ))}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Interaction Status */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Interaction Status\n              </Typography>\n              <Box>\n                {Object.entries(analytics.interaction_status).map(([status, count]) => (\n                  <Box key={status} display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                    <Chip \n                      label={status.replace('_', ' ').toUpperCase()} \n                      color={getStatusColor(status) as any}\n                      size=\"small\"\n                    />\n                    <Typography variant=\"body2\">{count}</Typography>\n                  </Box>\n                ))}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Customer Segments */}\n        <Grid size={{ xs: 12 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Customer Segments\n              </Typography>\n              {analytics.segments.length > 0 ? (\n                <TableContainer>\n                  <Table size=\"small\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Segment</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Assigned Date</TableCell>\n                        <TableCell>Description</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {analytics.segments.map((segment, index) => (\n                        <TableRow key={index}>\n                          <TableCell>\n                            <Chip \n                              label={segment.segment_name} \n                              color=\"primary\" \n                              size=\"small\" \n                            />\n                          </TableCell>\n                          <TableCell>\n                            {segment.segment_value ? segment.segment_value.toFixed(2) : '-'}\n                          </TableCell>\n                          <TableCell>{formatDate(segment.assigned_date)}</TableCell>\n                          <TableCell>{segment.description || '-'}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              ) : (\n                <Typography color=\"textSecondary\">\n                  No segments assigned to this customer.\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Recent Interactions */}\n        {includeRecentInteractions && analytics.recent_interactions.length > 0 && (\n          <Grid size={{ xs: 12 }}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Recent Interactions\n                </Typography>\n                <TableContainer>\n                  <Table size=\"small\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Type</TableCell>\n                        <TableCell>Subject</TableCell>\n                        <TableCell>Status</TableCell>\n                        <TableCell>Date</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {analytics.recent_interactions.map((interaction, index) => (\n                        <TableRow key={index}>\n                          <TableCell>\n                            <Chip \n                              label={interaction.interaction_type} \n                              color={getInteractionTypeColor(interaction.interaction_type) as any}\n                              size=\"small\" \n                            />\n                          </TableCell>\n                          <TableCell>{interaction.subject}</TableCell>\n                          <TableCell>\n                            <Chip \n                              label={interaction.status} \n                              color={getStatusColor(interaction.status) as any}\n                              size=\"small\" \n                            />\n                          </TableCell>\n                          <TableCell>{formatDate(interaction.interaction_date)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n      </Grid>\n\n      {/* Footer */}\n      <Box mt={3}>\n        <Typography variant=\"caption\" color=\"textSecondary\">\n          Analytics calculated at: {formatDate(analytics.calculated_at)}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CustomerAnalytics;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CustomerAnalyticsModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Box"},"fix":{"range":[172,179],"text":""},"desc":"Remove unused variable 'Box'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/CustomerAnalyticsModal.tsx\n\nimport React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  IconButton,\n  Box\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\nimport CustomerAnalytics from './CustomerAnalytics';\n\ninterface CustomerAnalyticsModalProps {\n  open: boolean;\n  onClose: () => void;\n  customerId: number;\n  customerName?: string;\n}\n\nconst CustomerAnalyticsModal: React.FC<CustomerAnalyticsModalProps> = ({\n  open,\n  onClose,\n  customerId,\n  customerName\n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"lg\"\n      fullWidth\n      PaperProps={{\n        sx: {\n          height: '90vh',\n          maxHeight: '90vh'\n        }\n      }}\n    >\n      <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        Customer Analytics\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <Close />\n        </IconButton>\n      </DialogTitle>\n      \n      <DialogContent dividers sx={{ p: 0 }}>\n        <CustomerAnalytics customerId={customerId} customerName={customerName} />\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CustomerAnalyticsModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CustomerAutocomplete.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"useCallback"},"fix":{"range":[24,37],"text":""},"desc":"Remove unused variable 'useCallback'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'customer' is defined but never used.","line":32,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"customer"},"fix":{"range":[789,814],"text":""},"desc":"Remove unused variable 'customer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[1005,1011],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 43 column 3.","line":76,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":76,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 43 column 3.","line":76,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":76,"endColumn":25},{"ruleId":"no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 41 column 3.","line":122,"column":40,"nodeType":"Identifier","messageId":"noShadow","endLine":122,"endColumn":45},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 41 column 3.","line":122,"column":40,"nodeType":"Identifier","messageId":"noShadow","endLine":122,"endColumn":45}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  CircularProgress,\n  Box,\n  Typography,\n  Chip\n} from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient, keepPreviousData } from '@tanstack/react-query';\nimport { searchCustomers, createCustomer } from '../services/masterService';\nimport AddCustomerModal from './AddCustomerModal';\n\ninterface Customer {\n  id: number;\n  name: string;\n  contact_number: string;\n  email?: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  gst_number?: string;\n  pan_number?: string;\n}\n\ninterface CustomerAutocompleteProps {\n  value?: string | number | null;\n  onChange: (customer: Customer | null) => void;\n  error?: boolean;\n  helperText?: string;\n  disabled?: boolean;\n  label?: string;\n  placeholder?: string;\n}\n\nconst CustomerAutocomplete: React.FC<CustomerAutocompleteProps> = ({\n  value,\n  onChange,\n  error = false,\n  helperText = '',\n  disabled = false,\n  label = 'Customer',\n  placeholder = 'Search or add customer...'\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [addModalOpen, setAddModalOpen] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Search query with debouncing\n  const { data: searchResults = [], isLoading } = useQuery({\n    queryKey: ['searchCustomers', inputValue, 10],\n    queryFn: searchCustomers,\n    enabled: inputValue.length >= 2,\n    placeholderData: keepPreviousData,\n    staleTime: 300, // Cache for 300ms to debounce\n  });\n\n  // Create customer mutation\n  const createCustomerMutation = useMutation({\n    mutationFn: createCustomer,\n    onSuccess: (newCustomer) => {\n      // Invalidate search queries\n      queryClient.invalidateQueries({queryKey: ['customerSearch']});\n      queryClient.invalidateQueries({queryKey: ['customers']});\n      \n      // Auto-select the newly created customer\n      setSelectedCustomer(newCustomer);\n      onChange(newCustomer);\n      setAddModalOpen(false);\n    },\n    onError: (error: any) => {\n      console.error('Failed to create customer:', error);\n    }\n  });\n\n  // Create options array with \"Add Customer\" option\n  const options = React.useMemo(() => {\n    const addOption = {\n      id: -1,\n      name: '➕ Add Customer',\n      isAddOption: true,\n    };\n    \n    return inputValue.length >= 2 \n      ? [addOption, ...searchResults]\n      : searchResults.length > 0 \n        ? [addOption, ...searchResults]\n        : [addOption];\n  }, [searchResults, inputValue]);\n\n  const handleSelectionChange = (_: any, newValue: any) => {\n    if (newValue?.isAddOption) {\n      setAddModalOpen(true);\n      return;\n    }\n    \n    setSelectedCustomer(newValue);\n    onChange(newValue);\n  };\n\n  const handleAddCustomer = async (customerData: any) => {\n    await createCustomerMutation.mutateAsync(customerData);\n  };\n\n  return (\n    <>\n      <Autocomplete\n        value={selectedCustomer}\n        onChange={handleSelectionChange}\n        inputValue={inputValue}\n        onInputChange={(_, newInputValue) => setInputValue(newInputValue)}\n        options={options}\n        getOptionLabel={(option) => {\n          if (option.isAddOption) {return option.name;}\n          return option.name;\n        }}\n        isOptionEqualToValue={(option, value) => option.id === value?.id}\n        loading={isLoading}\n        disabled={disabled}\n        filterOptions={(x) => x} // Disable default default filtering since we use backend search\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={label}\n            placeholder={placeholder}\n            error={error}\n            helperText={helperText}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <>\n                  {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                  {params.InputProps.endAdornment}\n                </>\n              ),\n            }}\n          />\n        )}\n        renderOption={(props, option) => {\n          if (option.isAddOption) {\n            return (\n              <Box component=\"li\" {...props} sx={{ \n                color: 'primary.main', \n                fontWeight: 'bold',\n                borderBottom: '1px solid #eee'\n              }}>\n                <AddIcon sx={{ mr: 1 }} />\n                {option.name}\n              </Box>\n            );\n          }\n\n          return (\n            <Box component=\"li\" {...props}>\n              <Box sx={{ width: '100%' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\n                    {option.name}\n                  </Typography>\n                  {option.gst_number && (\n                    <Chip \n                      label={`GST: ${option.gst_number}`} \n                      size=\"small\" \n                      variant=\"outlined\" \n                    />\n                  )}\n                </Box>\n                <Box sx={{ display: 'flex', gap: 1, mt: 0.5 }}>\n                  {option.contact_number && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      📞 {option.contact_number}\n                    </Typography>\n                  )}\n                  {option.city && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      📍 {option.city}, {option.state}\n                    </Typography>\n                  )}\n                  {option.email && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      ✉️ {option.email}\n                    </Typography>\n                  )}\n                </Box>\n              </Box>\n            </Box>\n          );\n        }}\n        noOptionsText={\n          inputValue.length < 2 \n            ? \"Type to search customers...\" \n            : \"No customers found\"\n        }\n      />\n\n      <AddCustomerModal\n        open={addModalOpen}\n        onClose={() => setAddModalOpen(false)}\n        onAdd={handleAddCustomer}\n        loading={createCustomerMutation.isPending}\n        initialName={inputValue}\n      />\n    </>\n  );\n};\n\nexport default CustomerAutocomplete;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DemoModeDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'authService' is defined but never used.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"authService"},"fix":{"range":[338,392],"text":""},"desc":"Remove unused variable 'authService'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":28,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"token"},"fix":{"range":[482,496],"text":""},"desc":"Remove unused variable 'token'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":28,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[495,516],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":81,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 43 column 10.","line":81,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":81,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 43 column 10.","line":81,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":81,"endColumn":24},{"ruleId":"no-use-before-define","severity":2,"message":"'handleReset' was used before it was defined.","line":127,"column":9,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":127,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":130,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 43 column 10.","line":130,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":130,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 43 column 10.","line":130,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":130,"endColumn":24}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  TextField,\n  Alert,\n  CircularProgress,\n  Stepper,\n  Step,\n  StepLabel\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { authService } from '../services/authService';\n\ninterface DemoModeDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onDemoStart: (token: string, loginResponse?: any) => void;\n}\n\ninterface NewUserFormData {\n  fullName: string;\n  email: string;\n  phoneNumber: string;\n  companyName: string;\n  otp: string;\n}\n\nconst DemoModeDialog: React.FC<DemoModeDialogProps> = ({ open, onClose, onDemoStart }) => {\n  const [userType, setUserType] = useState<'current' | 'new' | ''>('');\n  const [step, setStep] = useState(0); // 0: selection, 1: form/login, 2: OTP (for new users)\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [tempEmail, setTempEmail] = useState('');\n\n  const { register, handleSubmit, formState: { errors }, reset } = useForm<NewUserFormData>();\n\n  const steps = ['User Type', 'Details', 'Verification'];\n\n  const handleUserTypeNext = () => {\n    if (!userType) {\n      setError('Please select whether you are a current or new user');\n      return;\n    }\n    setError('');\n    setStep(1);\n  };\n\n  const handleCurrentUserLogin = () => {\n    // For current users, close this dialog and let them use regular login\n    // Then they'll enter demo mode after login\n    onClose();\n    // Set a flag to indicate demo mode should be activated after login\n    localStorage.setItem('pendingDemoMode', 'true');\n  };\n\n  const handleNewUserSubmit = async (data: NewUserFormData) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      // For demo purposes, simulate sending OTP to the email\n      // In a real implementation, this would call an API endpoint\n      console.log('[Demo] Simulating OTP send to:', data.email);\n      \n      setTempEmail(data.email);\n      setSuccess(`Demo OTP sent to ${data.email}. Please check your email.`);\n      setStep(2);\n    } catch (error: any) {\n      setError('Failed to send demo OTP. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOTPSubmit = async () => {\n    // Get the OTP value directly from the input\n    const otpInput = document.querySelector('input[name=\"otp\"]') as HTMLInputElement;\n    const otp = otpInput?.value || '';\n\n    if (!otp || otp.length !== 6) {\n      setError('Please enter a valid 6-digit OTP');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // For demo purposes, accept any 6-digit OTP\n      // Create a temporary demo token\n      const demoToken = `demo_temp_token_${Date.now()}`;\n      const demoResponse = {\n        access_token: demoToken,\n        user_role: 'demo_user',\n        organization_id: 'demo_org',\n        user: {\n          email: tempEmail,\n          is_demo_user: true,\n          is_temporary: true\n        },\n        demo_mode: true\n      };\n\n      // Set demo mode flag\n      localStorage.setItem('demoMode', 'true');\n      localStorage.setItem('isDemoTempUser', 'true');\n      \n      setSuccess('Demo login successful! Welcome to TRITIQ ERP Demo.');\n      \n      // Close dialog and start demo\n      setTimeout(() => {\n        onDemoStart(demoToken, demoResponse);\n        onClose();\n        handleReset();\n      }, 1500);\n\n    } catch (error: any) {\n      setError('Demo OTP verification failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBack = () => {\n    if (step > 0) {\n      setStep(step - 1);\n      setError('');\n      setSuccess('');\n    }\n  };\n\n  const handleReset = () => {\n    setUserType('');\n    setStep(0);\n    setError('');\n    setSuccess('');\n    setTempEmail('');\n    reset();\n  };\n\n  const handleClose = () => {\n    handleReset();\n    onClose();\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"sm\" \n      fullWidth\n      PaperProps={{\n        sx: { borderRadius: 3 }\n      }}\n    >\n      <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>\n        <Typography variant=\"h5\" component=\"div\" sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>\n          🎭 Demo Mode\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n          Experience TRITIQ ERP with sample data\n        </Typography>\n      </DialogTitle>\n\n      <DialogContent sx={{ pt: 2 }}>\n        {/* Stepper */}\n        <Stepper activeStep={step} sx={{ mb: 3 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {success && (\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\n            {success}\n          </Alert>\n        )}\n\n        {/* Step 0: User Type Selection */}\n        {step === 0 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Are you a current user or new user?\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n              Please select your user type to continue with the demo experience.\n            </Typography>\n\n            <RadioGroup\n              value={userType}\n              onChange={(e) => setUserType(e.target.value as 'current' | 'new')}\n            >\n              <FormControlLabel\n                value=\"current\"\n                control={<Radio />}\n                label={\n                  <Box>\n                    <Typography variant=\"body1\" fontWeight=\"medium\">\n                      Current User\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      I have an existing account and want to explore demo features\n                    </Typography>\n                  </Box>\n                }\n              />\n              <FormControlLabel\n                value=\"new\"\n                control={<Radio />}\n                label={\n                  <Box>\n                    <Typography variant=\"body1\" fontWeight=\"medium\">\n                      New User\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      I'm new and want to try the system with a temporary demo account\n                    </Typography>\n                  </Box>\n                }\n                sx={{ mt: 2 }}\n              />\n            </RadioGroup>\n          </Box>\n        )}\n\n        {/* Step 1: Current User Login or New User Form */}\n        {step === 1 && userType === 'current' && (\n          <Box textAlign=\"center\">\n            <Typography variant=\"h6\" gutterBottom>\n              Login to Start Demo\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n              Please login with your existing credentials. After successful login, you'll enter demo mode with sample data.\n            </Typography>\n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              <Typography variant=\"body2\">\n                <strong>Demo Mode Features:</strong>\n                <br />• All functionality available with sample data\n                <br />• No real data will be affected or saved\n                <br />• Full access to all modules and features\n              </Typography>\n            </Alert>\n          </Box>\n        )}\n\n        {step === 1 && userType === 'new' && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Demo Account Details\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n              Fill in your details to create a temporary demo account. This account will be valid until you logout or close your browser.\n            </Typography>\n\n            <form onSubmit={handleSubmit(handleNewUserSubmit)}>\n              <TextField\n                fullWidth\n                label=\"Full Name\"\n                margin=\"normal\"\n                {...register('fullName', { required: 'Full name is required' })}\n                error={!!errors.fullName}\n                helperText={errors.fullName?.message}\n              />\n\n              <TextField\n                fullWidth\n                label=\"Email Address\"\n                type=\"email\"\n                margin=\"normal\"\n                {...register('email', { \n                  required: 'Email is required',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: 'Invalid email address'\n                  }\n                })}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n              />\n\n              <TextField\n                fullWidth\n                label=\"Phone Number\"\n                margin=\"normal\"\n                {...register('phoneNumber', { required: 'Phone number is required' })}\n                error={!!errors.phoneNumber}\n                helperText={errors.phoneNumber?.message}\n              />\n\n              <TextField\n                fullWidth\n                label=\"Company Name\"\n                margin=\"normal\"\n                {...register('companyName', { required: 'Company name is required' })}\n                error={!!errors.companyName}\n                helperText={errors.companyName?.message}\n              />\n\n              <Alert severity=\"warning\" sx={{ mt: 2 }}>\n                <Typography variant=\"body2\">\n                  This is a temporary demo account. No real user will be created in the database.\n                </Typography>\n              </Alert>\n            </form>\n          </Box>\n        )}\n\n        {/* Step 2: OTP Verification for New Users */}\n        {step === 2 && userType === 'new' && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Verify Demo OTP\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n              Enter the 6-digit demo OTP sent to: <strong>{tempEmail}</strong>\n            </Typography>\n\n            <TextField\n              fullWidth\n              label=\"Demo OTP\"\n              name=\"otp\"\n              type=\"text\"\n              inputProps={{ maxLength: 6, pattern: '[0-9]*' }}\n              margin=\"normal\"\n              placeholder=\"123456\"\n              helperText=\"For demo purposes, enter any 6-digit number\"\n            />\n\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              <Typography variant=\"body2\">\n                <strong>Demo Mode:</strong> Enter any 6-digit number to continue. In a real environment, this would be sent to your email.\n              </Typography>\n            </Alert>\n          </Box>\n        )}\n      </DialogContent>\n\n      <DialogActions sx={{ p: 3, pt: 1 }}>\n        {step > 0 && (\n          <Button onClick={handleBack} disabled={loading}>\n            Back\n          </Button>\n        )}\n        \n        <Button onClick={handleClose} disabled={loading}>\n          Cancel\n        </Button>\n\n        {step === 0 && (\n          <Button \n            variant=\"contained\" \n            onClick={handleUserTypeNext}\n            disabled={!userType}\n          >\n            Continue\n          </Button>\n        )}\n\n        {step === 1 && userType === 'current' && (\n          <Button \n            variant=\"contained\" \n            onClick={handleCurrentUserLogin}\n            disabled={loading}\n          >\n            Proceed to Login\n          </Button>\n        )}\n\n        {step === 1 && userType === 'new' && (\n          <Button \n            variant=\"contained\" \n            onClick={handleSubmit(handleNewUserSubmit)}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={20} /> : 'Send Demo OTP'}\n          </Button>\n        )}\n\n        {step === 2 && userType === 'new' && (\n          <Button \n            variant=\"contained\" \n            onClick={handleOTPSubmit}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={20} /> : 'Start Demo'}\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DemoModeDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DispatchManagement/DispatchManagement.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[165,173],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[173,188],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Grid' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Grid"},"fix":{"range":[188,196],"text":""},"desc":"Remove unused variable 'Grid'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[218,228],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[228,243],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[243,260],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogActions"},"fix":{"range":[260,277],"text":""},"desc":"Remove unused variable 'DialogActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DispatchIcon' is defined but never used.","line":41,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"DispatchIcon"},"fix":{"range":[591,624],"text":""},"desc":"Remove unused variable 'DispatchIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FilterIcon' is defined but never used.","line":44,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"FilterIcon"},"fix":{"range":[679,707],"text":""},"desc":"Remove unused variable 'FilterIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'organizationId' is defined but never used.","line":92,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":80,"suggestions":[{"messageId":"removeVar","data":{"varName":"organizationId"},"fix":{"range":[2048,2066],"text":""},"desc":"Remove unused variable 'organizationId'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadData' was used before it was defined.","line":127,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":127,"endColumn":13}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/DispatchManagement/DispatchManagement.tsx\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Chip,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Tooltip,\n  Alert,\n  CircularProgress,\n  Tab,\n  Tabs,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Pagination\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  LocalShipping as DispatchIcon,\n  Build as InstallationIcon,\n  Visibility as ViewIcon,\n  FilterList as FilterIcon,\n  Search as SearchIcon\n} from '@mui/icons-material';\nimport { useAuth } from '../../context/AuthContext';\nimport { dispatchService, DispatchOrderInDB, InstallationJobInDB } from '../../services/dispatchService';\nimport DispatchOrderDialog from './DispatchOrderDialog';\nimport InstallationJobDialog from './InstallationJobDialog';\nimport InstallationSchedulePromptModal from './InstallationSchedulePromptModal';\nimport {\n  DISPATCH_ORDER_STATUS_CONFIG,\n  INSTALLATION_JOB_STATUS_CONFIG,\n  INSTALLATION_JOB_PRIORITY_CONFIG,\n  hasDispatchManagementPermission,\n  hasDispatchViewPermission,\n  hasInstallationManagementPermission,\n  hasInstallationViewPermission,\n  DispatchOrderStatus\n} from '../../types/dispatch.types';\n\ninterface DispatchManagementProps {\n  organizationId: number;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`dispatch-tabpanel-${index}`}\n      aria-labelledby={`dispatch-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst DispatchManagement: React.FC<DispatchManagementProps> = ({ organizationId }) => {\n  const { user } = useAuth();\n  const [currentTab, setCurrentTab] = useState(0);\n  const [dispatchOrders, setDispatchOrders] = useState<DispatchOrderInDB[]>([]);\n  const [installationJobs, setInstallationJobs] = useState<InstallationJobInDB[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Pagination\n  const [dispatchPage, setDispatchPage] = useState(1);\n  const [installationPage, setInstallationPage] = useState(1);\n  const [itemsPerPage] = useState(10);\n  \n  // Filters\n  const [dispatchStatusFilter, setDispatchStatusFilter] = useState('');\n  const [installationStatusFilter, setInstallationStatusFilter] = useState('');\n  const [installationPriorityFilter, setInstallationPriorityFilter] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  \n  // Dialog states\n  const [dispatchOrderDialogOpen, setDispatchOrderDialogOpen] = useState(false);\n  const [installationJobDialogOpen, setInstallationJobDialogOpen] = useState(false);\n  const [installationPromptOpen, setInstallationPromptOpen] = useState(false);\n  const [selectedDispatchOrder, setSelectedDispatchOrder] = useState<DispatchOrderInDB | null>(null);\n  const [selectedInstallationJob, setSelectedInstallationJob] = useState<InstallationJobInDB | null>(null);\n  const [editMode, setEditMode] = useState(false);\n\n  // Check permissions\n  const canManageDispatch = user?.role ? hasDispatchManagementPermission(user.role) : false;\n  const canViewDispatch = user?.role ? hasDispatchViewPermission(user.role) : false;\n  const canManageInstallation = user?.role ? hasInstallationManagementPermission(user.role) : false;\n  const canViewInstallation = user?.role ? hasInstallationViewPermission(user.role) : false;\n\n  // Load data\n  useEffect(() => {\n    loadData();\n  }, [dispatchPage, installationPage, dispatchStatusFilter, installationStatusFilter, installationPriorityFilter]);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const [dispatchResponse, installationResponse] = await Promise.all([\n        canViewDispatch ? dispatchService.getDispatchOrders({\n          skip: (dispatchPage - 1) * itemsPerPage,\n          limit: itemsPerPage,\n          filter: dispatchStatusFilter ? { status: dispatchStatusFilter as DispatchOrderStatus } : undefined\n        }) : Promise.resolve([]),\n        canViewInstallation ? dispatchService.getInstallationJobs({\n          skip: (installationPage - 1) * itemsPerPage,\n          limit: itemsPerPage,\n          filter: {\n            ...(installationStatusFilter ? { status: installationStatusFilter as any } : {}),\n            ...(installationPriorityFilter ? { priority: installationPriorityFilter as any } : {})\n          }\n        }) : Promise.resolve([])\n      ]);\n\n      setDispatchOrders(dispatchResponse);\n      setInstallationJobs(installationResponse);\n    } catch (err: any) {\n      console.error('Error loading dispatch data:', err);\n      setError(err.message || 'Failed to load dispatch data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateDispatchOrder = () => {\n    setSelectedDispatchOrder(null);\n    setEditMode(false);\n    setDispatchOrderDialogOpen(true);\n  };\n\n  const handleEditDispatchOrder = (order: DispatchOrderInDB) => {\n    setSelectedDispatchOrder(order);\n    setEditMode(true);\n    setDispatchOrderDialogOpen(true);\n  };\n\n  const handleRefreshData = async () => {\n    await loadData();\n  };\n\n  const handleCreateInstallation = async (installationData: any) => {\n    try {\n      await dispatchService.createInstallationJob(installationData);\n      setInstallationPromptOpen(false);\n      await loadData();\n    } catch (err: any) {\n      console.error('Error creating installation job:', err);\n      setError(err.message || 'Failed to create installation job');\n    }\n  };\n\n  const handleDeleteDispatchOrder = async (orderId: number) => {\n    if (!window.confirm('Are you sure you want to delete this dispatch order?')) {\n      return;\n    }\n\n    try {\n      await dispatchService.deleteDispatchOrder(orderId);\n      await loadData();\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete dispatch order');\n    }\n  };\n\n  const handleCreateInstallationJob = () => {\n    setSelectedInstallationJob(null);\n    setEditMode(false);\n    setInstallationJobDialogOpen(true);\n  };\n\n  const handleEditInstallationJob = (job: InstallationJobInDB) => {\n    setSelectedInstallationJob(job);\n    setEditMode(true);\n    setInstallationJobDialogOpen(true);\n  };\n\n  const handleDeleteInstallationJob = async (jobId: number) => {\n    if (!window.confirm('Are you sure you want to delete this installation job?')) {\n      return;\n    }\n\n    try {\n      await dispatchService.deleteInstallationJob(jobId);\n      await loadData();\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete installation job');\n    }\n  };\n\n  const renderDispatchOrderRow = (order: DispatchOrderInDB) => {\n    const statusKey = order.status.toLowerCase();\n    const statusConfig = DISPATCH_ORDER_STATUS_CONFIG[statusKey as keyof typeof DISPATCH_ORDER_STATUS_CONFIG];\n    \n    return (\n      <TableRow key={order.id}>\n        <TableCell>{order.order_number}</TableCell>\n        <TableCell>{order.customer_id}</TableCell>\n        <TableCell>\n          <Chip \n            label={statusConfig.label}\n            color={statusConfig.color as any}\n            size=\"small\"\n          />\n        </TableCell>\n        <TableCell>{new Date(order.created_at).toLocaleDateString()}</TableCell>\n        <TableCell>\n          {order.expected_delivery_date ? \n            new Date(order.expected_delivery_date).toLocaleDateString() : \n            '-'\n          }\n        </TableCell>\n        <TableCell>{order.items.length}</TableCell>\n        <TableCell>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Tooltip title=\"View\">\n              <IconButton \n                size=\"small\" \n                onClick={() => handleEditDispatchOrder(order)}\n              >\n                <ViewIcon />\n              </IconButton>\n            </Tooltip>\n            {canManageDispatch && (\n              <>\n                <Tooltip title=\"Edit\">\n                  <IconButton \n                    size=\"small\" \n                    onClick={() => handleEditDispatchOrder(order)}\n                  >\n                    <EditIcon />\n                  </IconButton>\n                </Tooltip>\n                {order.status.toLowerCase() === 'pending' && (\n                  <Tooltip title=\"Delete\">\n                    <IconButton \n                      size=\"small\" \n                      color=\"error\"\n                      onClick={() => handleDeleteDispatchOrder(order.id)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </Tooltip>\n                )}\n              </>\n            )}\n          </Box>\n        </TableCell>\n      </TableRow>\n    );\n  };\n\n  const renderInstallationJobRow = (job: InstallationJobInDB) => {\n    const statusKey = job.status.toLowerCase();\n    const priorityKey = job.priority.toLowerCase();\n    const statusConfig = INSTALLATION_JOB_STATUS_CONFIG[statusKey as keyof typeof INSTALLATION_JOB_STATUS_CONFIG];\n    const priorityConfig = INSTALLATION_JOB_PRIORITY_CONFIG[priorityKey as keyof typeof INSTALLATION_JOB_PRIORITY_CONFIG];\n    \n    return (\n      <TableRow key={job.id}>\n        <TableCell>{job.job_number}</TableCell>\n        <TableCell>{job.customer_id}</TableCell>\n        <TableCell>\n          <Chip \n            label={statusConfig.label}\n            color={statusConfig.color as any}\n            size=\"small\"\n          />\n        </TableCell>\n        <TableCell>\n          <Chip \n            label={priorityConfig.label}\n            color={priorityConfig.color as any}\n            size=\"small\"\n            variant=\"outlined\"\n          />\n        </TableCell>\n        <TableCell>\n          {job.scheduled_date ? \n            new Date(job.scheduled_date).toLocaleDateString() : \n            '-'\n          }\n        </TableCell>\n        <TableCell>{job.assigned_technician_id || '-'}</TableCell>\n        <TableCell>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Tooltip title=\"View\">\n              <IconButton \n                size=\"small\" \n                onClick={() => handleEditInstallationJob(job)}\n              >\n                <ViewIcon />\n              </IconButton>\n            </Tooltip>\n            {canManageInstallation && (\n              <>\n                <Tooltip title=\"Edit\">\n                  <IconButton \n                    size=\"small\" \n                    onClick={() => handleEditInstallationJob(job)}\n                  >\n                    <EditIcon />\n                  </IconButton>\n                </Tooltip>\n                {job.status.toLowerCase() === 'scheduled' && (\n                  <Tooltip title=\"Delete\">\n                    <IconButton \n                      size=\"small\" \n                      color=\"error\"\n                      onClick={() => handleDeleteInstallationJob(job.id)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </Tooltip>\n                )}\n              </>\n            )}\n          </Box>\n        </TableCell>\n      </TableRow>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography variant=\"h5\" gutterBottom>\n          Material Dispatch Management\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          {canManageDispatch && (\n            <Button\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              onClick={handleCreateDispatchOrder}\n            >\n              Create Dispatch Order\n            </Button>\n          )}\n          {canManageInstallation && (\n            <Button\n              variant=\"contained\"\n              startIcon={<InstallationIcon />}\n              onClick={handleCreateInstallationJob}\n              color=\"secondary\"\n            >\n              Create Installation Job\n            </Button>\n          )}\n        </Box>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs value={currentTab} onChange={(_, newValue) => setCurrentTab(newValue)}>\n          <Tab label=\"Dispatch Orders\" />\n          <Tab label=\"Installation Jobs\" />\n        </Tabs>\n      </Box>\n\n      <TabPanel value={currentTab} index={0}>\n        {/* Dispatch Orders Tab */}\n        <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center' }}>\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Status Filter</InputLabel>\n            <Select\n              value={dispatchStatusFilter}\n              onChange={(e) => setDispatchStatusFilter(e.target.value)}\n              label=\"Status Filter\"\n            >\n              <MenuItem value=\"\">All Statuses</MenuItem>\n              {Object.entries(DISPATCH_ORDER_STATUS_CONFIG).map(([key, config]) => (\n                <MenuItem key={key} value={key}>\n                  {config.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          \n          <TextField\n            size=\"small\"\n            placeholder=\"Search orders...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <SearchIcon sx={{ mr: 1, color: 'action.active' }} />\n            }}\n          />\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Order Number</TableCell>\n                <TableCell>Customer</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Created Date</TableCell>\n                <TableCell>Expected Delivery</TableCell>\n                <TableCell>Items Count</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {dispatchOrders.map(renderDispatchOrderRow)}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n          <Pagination\n            count={Math.ceil(dispatchOrders.length / itemsPerPage)}\n            page={dispatchPage}\n            onChange={(_, page) => setDispatchPage(page)}\n          />\n        </Box>\n      </TabPanel>\n\n      <TabPanel value={currentTab} index={1}>\n        {/* Installation Jobs Tab */}\n        <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center' }}>\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Status Filter</InputLabel>\n            <Select\n              value={installationStatusFilter}\n              onChange={(e) => setInstallationStatusFilter(e.target.value)}\n              label=\"Status Filter\"\n            >\n              <MenuItem value=\"\">All Statuses</MenuItem>\n              {Object.entries(INSTALLATION_JOB_STATUS_CONFIG).map(([key, config]) => (\n                <MenuItem key={key} value={key}>\n                  {config.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Priority Filter</InputLabel>\n            <Select\n              value={installationPriorityFilter}\n              onChange={(e) => setInstallationPriorityFilter(e.target.value)}\n              label=\"Priority Filter\"\n            >\n              <MenuItem value=\"\">All Priorities</MenuItem>\n              {Object.entries(INSTALLATION_JOB_PRIORITY_CONFIG).map(([key, config]) => (\n                <MenuItem key={key} value={key}>\n                  {config.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          \n          <TextField\n            size=\"small\"\n            placeholder=\"Search jobs...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <SearchIcon sx={{ mr: 1, color: 'action.active' }} />\n            }}\n          />\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Job Number</TableCell>\n                <TableCell>Customer</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Priority</TableCell>\n                <TableCell>Scheduled Date</TableCell>\n                <TableCell>Technician</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {installationJobs.map(renderInstallationJobRow)}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n          <Pagination\n            count={Math.ceil(installationJobs.length / itemsPerPage)}\n            page={installationPage}\n            onChange={(_, page) => setInstallationPage(page)}\n          />\n        </Box>\n      </TabPanel>\n\n      {/* Dispatch Order Dialog */}\n      {dispatchOrderDialogOpen && (\n        <DispatchOrderDialog\n          open={dispatchOrderDialogOpen}\n          onClose={() => setDispatchOrderDialogOpen(false)}\n          dispatchOrder={selectedDispatchOrder}\n          editMode={editMode}\n          onSave={handleRefreshData}\n        />\n      )}\n\n      {/* Installation Job Dialog */}\n      {installationJobDialogOpen && (\n        <InstallationJobDialog\n          open={installationJobDialogOpen}\n          onClose={() => setInstallationJobDialogOpen(false)}\n          jobId={selectedInstallationJob ? selectedInstallationJob.id : undefined}\n          onJobUpdated={handleRefreshData}\n        />\n      )}\n\n      {/* Installation Schedule Prompt Modal */}\n      {installationPromptOpen && (\n        <InstallationSchedulePromptModal\n          open={installationPromptOpen}\n          onClose={() => setInstallationPromptOpen(false)}\n          dispatchOrderId={selectedDispatchOrder?.id}\n          customerId={selectedDispatchOrder?.customer_id}\n          onCreateInstallation={handleCreateInstallation}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default DispatchManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DispatchManagement/DispatchOrderDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DispatchManagement/InstallationJobDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'EditIcon' is defined but never used.","line":31,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"EditIcon"},"fix":{"range":[415,435],"text":""},"desc":"Remove unused variable 'EditIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DeleteIcon' is defined but never used.","line":32,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"DeleteIcon"},"fix":{"range":[435,459],"text":""},"desc":"Remove unused variable 'DeleteIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ScheduleIcon' is defined but never used.","line":35,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"ScheduleIcon"},"fix":{"range":[510,538],"text":""},"desc":"Remove unused variable 'ScheduleIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InstallationTaskInDB' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"InstallationTaskInDB"},"fix":{"range":[898,922],"text":""},"desc":"Remove unused variable 'InstallationTaskInDB'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'INSTALLATION_JOB_PRIORITIES' is defined but never used.","line":51,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"INSTALLATION_JOB_PRIORITIES"},"fix":{"range":[1085,1116],"text":""},"desc":"Remove unused variable 'INSTALLATION_JOB_PRIORITIES'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadJobDetails' was used before it was defined.","line":139,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":139,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'task' is assigned a value but never used.","line":186,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":186,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"task"},"fix":{"range":[5191,5576],"text":""},"desc":"Remove unused variable 'task'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleAssignTask' is assigned a value but never used.","line":224,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":224,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleAssignTask"},"fix":{"range":[6394,6733],"text":""},"desc":"Remove unused variable 'handleAssignTask'."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Grid,\n  Typography,\n  Box,\n  Chip,\n  Card,\n  CardContent,\n  IconButton,\n  Tooltip,\n  Alert,\n  Tabs,\n  Tab,\n  FormControlLabel,\n  Checkbox,\n  Rating\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  PlayArrow as StartIcon,\n  Check as CompleteIcon,\n  Schedule as ScheduleIcon\n} from '@mui/icons-material';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { useAuth } from '../../context/AuthContext';\nimport { \n  dispatchService,\n  InstallationJobWithDetails,\n  InstallationTaskInDB,\n  INSTALLATION_TASK_STATUSES,\n  INSTALLATION_TASK_PRIORITIES,\n  COMPLETION_STATUSES\n} from '../../services/dispatchService';\nimport {\n  INSTALLATION_JOB_STATUSES,\n  INSTALLATION_JOB_PRIORITIES,\n  InstallationJobPriority\n} from '../../types/dispatch.types';\n\ninterface InstallationJobDialogProps {\n  open: boolean;\n  onClose: () => void;\n  jobId?: number;\n  onJobUpdated?: () => void;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`job-tabpanel-${index}`}\n      aria-labelledby={`job-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 2 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst InstallationJobDialog: React.FC<InstallationJobDialogProps> = ({\n  open,\n  onClose,\n  jobId,\n  onJobUpdated\n}) => {\n  const { user } = useAuth();\n  const [currentTab, setCurrentTab] = useState(0);\n  const [job, setJob] = useState<InstallationJobWithDetails | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Task management state\n  const [newTask, setNewTask] = useState<{\n    title: string;\n    description: string;\n    priority: InstallationJobPriority;\n    estimated_duration_minutes: number;\n    sequence_order: number;\n    status: typeof INSTALLATION_TASK_STATUSES[keyof typeof INSTALLATION_TASK_STATUSES];\n  }>({\n    title: '',\n    description: '',\n    priority: INSTALLATION_TASK_PRIORITIES.MEDIUM,\n    estimated_duration_minutes: 60,\n    sequence_order: 1,\n    status: INSTALLATION_TASK_STATUSES.PENDING\n  });\n  \n  // Completion form state\n  const [completionForm, setCompletionForm] = useState({\n    work_performed: '',\n    issues_encountered: '',\n    resolution_notes: '',\n    materials_used: '',\n    parts_replaced: '',\n    quality_check_passed: false,\n    verification_notes: '',\n    photos_attached: false,\n    customer_present: true,\n    customer_signature_received: false,\n    customer_feedback_notes: '',\n    customer_rating: 5,\n    follow_up_required: false,\n    follow_up_notes: '',\n    actual_start_time: new Date(),\n    actual_end_time: new Date()\n  });\n\n  // Load job details\n  useEffect(() => {\n    if (open && jobId) {\n      loadJobDetails();\n    }\n  }, [open, jobId]);\n\n  const loadJobDetails = async () => {\n    if (!jobId) {return;}\n    \n    try {\n      setLoading(true);\n      setError(null);\n      const jobDetails = await dispatchService.getInstallationJobWithDetails(jobId);\n      setJob(jobDetails);\n      \n      // Initialize completion form if completion record exists\n      if (jobDetails.completion_record) {\n        const record = jobDetails.completion_record;\n        setCompletionForm({\n          work_performed: record.work_performed || '',\n          issues_encountered: record.issues_encountered || '',\n          resolution_notes: record.resolution_notes || '',\n          materials_used: record.materials_used || '',\n          parts_replaced: record.parts_replaced || '',\n          quality_check_passed: record.quality_check_passed || false,\n          verification_notes: record.verification_notes || '',\n          photos_attached: record.photos_attached || false,\n          customer_present: record.customer_present || true,\n          customer_signature_received: record.customer_signature_received || false,\n          customer_feedback_notes: record.customer_feedback_notes || '',\n          customer_rating: record.customer_rating || 5,\n          follow_up_required: record.follow_up_required || false,\n          follow_up_notes: record.follow_up_notes || '',\n          actual_start_time: record.actual_start_time ? new Date(record.actual_start_time) : new Date(),\n          actual_end_time: record.actual_end_time ? new Date(record.actual_end_time) : new Date()\n        });\n      }\n    } catch (err) {\n      setError('Failed to load job details');\n      console.error('Error loading job details:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateTask = async () => {\n    if (!job || !newTask.title.trim()) {return;}\n    \n    try {\n      const task = await dispatchService.createInstallationTask({\n        installation_job_id: job.id,\n        title: newTask.title,\n        description: newTask.description,\n        priority: newTask.priority,\n        estimated_duration_minutes: newTask.estimated_duration_minutes,\n        sequence_order: newTask.sequence_order,\n        status: INSTALLATION_TASK_STATUSES.PENDING\n      });\n      \n      // Refresh job details\n      await loadJobDetails();\n      \n      // Reset form\n      setNewTask({\n        title: '',\n        description: '',\n        priority: INSTALLATION_TASK_PRIORITIES.MEDIUM,\n        estimated_duration_minutes: 60,\n        sequence_order: (job.tasks?.length || 0) + 1,\n        status: INSTALLATION_TASK_STATUSES.PENDING\n      });\n    } catch (err) {\n      setError('Failed to create task');\n      console.error('Error creating task:', err);\n    }\n  };\n\n  const handleUpdateTaskStatus = async (taskId: number, status: string) => {\n    try {\n      await dispatchService.updateInstallationTask(taskId, { status });\n      await loadJobDetails();\n    } catch (err) {\n      setError('Failed to update task status');\n      console.error('Error updating task status:', err);\n    }\n  };\n\n  const handleAssignTask = async (taskId: number, technicianId: number) => {\n    try {\n      await dispatchService.updateInstallationTask(taskId, { assigned_technician_id: technicianId });\n      await loadJobDetails();\n    } catch (err) {\n      setError('Failed to assign task');\n      console.error('Error assigning task:', err);\n    }\n  };\n\n  const handleCompleteJob = async () => {\n    if (!job) {return;}\n    \n    try {\n      setLoading(true);\n      await dispatchService.completeInstallationJob(job.id, {\n        installation_job_id: job.id,\n        completion_date: new Date().toISOString(),\n        completion_status: COMPLETION_STATUSES.COMPLETED,\n        ...completionForm,\n        actual_start_time: completionForm.actual_start_time.toISOString(),\n        actual_end_time: completionForm.actual_end_time.toISOString()\n      });\n      \n      await loadJobDetails();\n      if (onJobUpdated) {onJobUpdated();}\n      setCurrentTab(0); // Switch back to overview tab\n    } catch (err) {\n      setError('Failed to complete job');\n      console.error('Error completing job:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const canAssignTasks = user?.role === 'admin' || user?.role === 'manager';\n  const canCompleteJob = job?.assigned_technician_id === user?.id || user?.role === 'admin';\n  const isJobCompleted = job?.status === INSTALLATION_JOB_STATUSES.COMPLETED;\n\n  if (!job && !loading) {return null;}\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <Dialog\n        open={open}\n        onClose={onClose}\n        maxWidth=\"lg\"\n        fullWidth\n        PaperProps={{\n          sx: { minHeight: '80vh' }\n        }}\n      >\n        <DialogTitle>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography variant=\"h6\">\n              Installation Job Details - {job?.job_number}\n            </Typography>\n            <IconButton onClick={onClose}>\n              <CloseIcon />\n            </IconButton>\n          </Box>\n        </DialogTitle>\n\n        <DialogContent>\n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error}\n            </Alert>\n          )}\n\n          {loading ? (\n            <Box display=\"flex\" justifyContent=\"center\" p={4}>\n              <Typography>Loading...</Typography>\n            </Box>\n          ) : job ? (\n            <>\n              <Tabs value={currentTab} onChange={(_, newValue) => setCurrentTab(newValue)}>\n                <Tab label=\"Overview\" />\n                <Tab label=\"Tasks\" />\n                {!isJobCompleted && canCompleteJob && <Tab label=\"Complete Job\" />}\n                {isJobCompleted && <Tab label=\"Completion Details\" />}\n              </Tabs>\n\n              <TabPanel value={currentTab} index={0}>\n                {/* Overview Tab */}\n                <Grid container spacing={3}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"h6\" gutterBottom>Job Information</Typography>\n                    <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"textSecondary\">Status</Typography>\n                        <Chip \n                          label={job.status}\n                          color={job.status === 'completed' ? 'success' : job.status === 'in_progress' ? 'warning' : 'default'}\n                        />\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"textSecondary\">Priority</Typography>\n                        <Chip \n                          label={job.priority}\n                          color={job.priority === 'urgent' ? 'error' : job.priority === 'high' ? 'warning' : 'default'}\n                        />\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"textSecondary\">Scheduled Date</Typography>\n                        <Typography>{job.scheduled_date ? new Date(job.scheduled_date).toLocaleDateString() : 'Not scheduled'}</Typography>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"textSecondary\">Installation Address</Typography>\n                        <Typography>{job.installation_address}</Typography>\n                      </Box>\n                    </Box>\n                  </Grid>\n                  \n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"h6\" gutterBottom>Progress Summary</Typography>\n                    <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"textSecondary\">Total Tasks</Typography>\n                        <Typography>{job.tasks?.length || 0}</Typography>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"textSecondary\">Completed Tasks</Typography>\n                        <Typography>\n                          {job.tasks?.filter(task => task.status === 'completed').length || 0}\n                        </Typography>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" color=\"textSecondary\">Estimated Duration</Typography>\n                        <Typography>\n                          {job.tasks?.reduce((total, task) => total + (task.estimated_duration_minutes || 0), 0) || 0} minutes\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </TabPanel>\n\n              <TabPanel value={currentTab} index={1}>\n                {/* Tasks Tab */}\n                <Box>\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n                    <Typography variant=\"h6\">Installation Tasks</Typography>\n                    {canAssignTasks && !isJobCompleted && (\n                      <Button\n                        startIcon={<AddIcon />}\n                        variant=\"contained\"\n                        onClick={() => {/* Open task creation form */}}\n                        size=\"small\"\n                      >\n                        Add Task\n                      </Button>\n                    )}\n                  </Box>\n\n                  {/* New Task Form */}\n                  {canAssignTasks && !isJobCompleted && (\n                    <Card sx={{ mb: 3 }}>\n                      <CardContent>\n                        <Typography variant=\"subtitle2\" gutterBottom>Create New Task</Typography>\n                        <Grid container spacing={2}>\n                          <Grid item xs={12} md={6}>\n                            <TextField\n                              fullWidth\n                              label=\"Task Title\"\n                              value={newTask.title}\n                              onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\n                              size=\"small\"\n                            />\n                          </Grid>\n                          <Grid item xs={12} md={3}>\n                            <FormControl fullWidth size=\"small\">\n                              <InputLabel>Priority</InputLabel>\n                              <Select\n                                value={newTask.priority}\n                                onChange={(e) => setNewTask({ ...newTask, priority: e.target.value })}\n                              >\n                                {Object.values(INSTALLATION_TASK_PRIORITIES).map(priority => (\n                                  <MenuItem key={priority} value={priority}>{priority}</MenuItem>\n                                ))}\n                              </Select>\n                            </FormControl>\n                          </Grid>\n                          <Grid item xs={12} md={3}>\n                            <TextField\n                              fullWidth\n                              type=\"number\"\n                              label=\"Est. Duration (min)\"\n                              value={newTask.estimated_duration_minutes}\n                              onChange={(e) => setNewTask({ ...newTask, estimated_duration_minutes: parseInt(e.target.value) })}\n                              size=\"small\"\n                            />\n                          </Grid>\n                          <Grid item xs={12}>\n                            <TextField\n                              fullWidth\n                              multiline\n                              rows={2}\n                              label=\"Description\"\n                              value={newTask.description}\n                              onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\n                              size=\"small\"\n                            />\n                          </Grid>\n                          <Grid item xs={12}>\n                            <Button \n                              variant=\"contained\" \n                              onClick={handleCreateTask}\n                              disabled={!newTask.title.trim()}\n                              size=\"small\"\n                            >\n                              Create Task\n                            </Button>\n                          </Grid>\n                        </Grid>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Task List */}\n                  <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n                    {job.tasks?.map((task) => (\n                      <Card key={task.id}>\n                        <CardContent>\n                          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"start\">\n                            <Box flex={1}>\n                              <Typography variant=\"subtitle1\">{task.title}</Typography>\n                              <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                                {task.description}\n                              </Typography>\n                              <Box display=\"flex\" gap={1} mt={1}>\n                                <Chip \n                                  label={task.status} \n                                  size=\"small\"\n                                  color={task.status === 'completed' ? 'success' : task.status === 'in_progress' ? 'warning' : 'default'}\n                                />\n                                <Chip label={task.priority} size=\"small\" />\n                                <Chip label={`${task.estimated_duration_minutes || 0} min`} size=\"small\" />\n                              </Box>\n                            </Box>\n                            <Box display=\"flex\" gap={1}>\n                              {task.status === 'pending' && (\n                                <Tooltip title=\"Start Task\">\n                                  <IconButton\n                                    size=\"small\"\n                                    onClick={() => handleUpdateTaskStatus(task.id, 'in_progress')}\n                                  >\n                                    <StartIcon />\n                                  </IconButton>\n                                </Tooltip>\n                              )}\n                              {task.status === 'in_progress' && (\n                                <Tooltip title=\"Complete Task\">\n                                  <IconButton\n                                    size=\"small\"\n                                    onClick={() => handleUpdateTaskStatus(task.id, 'completed')}\n                                  >\n                                    <CompleteIcon />\n                                  </IconButton>\n                                </Tooltip>\n                              )}\n                            </Box>\n                          </Box>\n                        </CardContent>\n                      </Card>\n                    ))}\n                    \n                    {(!job.tasks || job.tasks.length === 0) && (\n                      <Typography variant=\"body2\" color=\"textSecondary\" textAlign=\"center\" py={4}>\n                        No tasks created yet\n                      </Typography>\n                    )}\n                  </Box>\n                </Box>\n              </TabPanel>\n\n              {!isJobCompleted && canCompleteJob && (\n                <TabPanel value={currentTab} index={2}>\n                  {/* Complete Job Tab */}\n                  <Typography variant=\"h6\" gutterBottom>Complete Installation Job</Typography>\n                  \n                  <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                      <TextField\n                        fullWidth\n                        multiline\n                        rows={4}\n                        label=\"Work Performed *\"\n                        value={completionForm.work_performed}\n                        onChange={(e) => setCompletionForm({ ...completionForm, work_performed: e.target.value })}\n                        required\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        label=\"Issues Encountered\"\n                        value={completionForm.issues_encountered}\n                        onChange={(e) => setCompletionForm({ ...completionForm, issues_encountered: e.target.value })}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        label=\"Resolution Notes\"\n                        value={completionForm.resolution_notes}\n                        onChange={(e) => setCompletionForm({ ...completionForm, resolution_notes: e.target.value })}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <DateTimePicker\n                        label=\"Actual Start Time\"\n                        value={completionForm.actual_start_time}\n                        onChange={(date) => setCompletionForm({ ...completionForm, actual_start_time: date || new Date() })}\n                        slotProps={{ textField: { fullWidth: true } }}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <DateTimePicker\n                        label=\"Actual End Time\"\n                        value={completionForm.actual_end_time}\n                        onChange={(date) => setCompletionForm({ ...completionForm, actual_end_time: date || new Date() })}\n                        slotProps={{ textField: { fullWidth: true } }}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12}>\n                      <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={completionForm.quality_check_passed}\n                              onChange={(e) => setCompletionForm({ ...completionForm, quality_check_passed: e.target.checked })}\n                            />\n                          }\n                          label=\"Quality Check Passed\"\n                        />\n                        \n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={completionForm.customer_present}\n                              onChange={(e) => setCompletionForm({ ...completionForm, customer_present: e.target.checked })}\n                            />\n                          }\n                          label=\"Customer Present\"\n                        />\n                        \n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={completionForm.customer_signature_received}\n                              onChange={(e) => setCompletionForm({ ...completionForm, customer_signature_received: e.target.checked })}\n                            />\n                          }\n                          label=\"Customer Signature Received\"\n                        />\n                      </Box>\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        label=\"Customer Feedback\"\n                        value={completionForm.customer_feedback_notes}\n                        onChange={(e) => setCompletionForm({ ...completionForm, customer_feedback_notes: e.target.value })}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <Box>\n                        <Typography variant=\"body2\" gutterBottom>Customer Rating</Typography>\n                        <Rating\n                          value={completionForm.customer_rating}\n                          onChange={(_, value) => setCompletionForm({ ...completionForm, customer_rating: value || 5 })}\n                        />\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </TabPanel>\n              )}\n              \n              {isJobCompleted && job.completion_record && (\n                <TabPanel value={currentTab} index={2}>\n                  {/* Completion Details Tab */}\n                  <Typography variant=\"h6\" gutterBottom>Completion Details</Typography>\n                  \n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={6}>\n                      <Typography variant=\"subtitle2\" gutterBottom>Work Performed</Typography>\n                      <Typography variant=\"body2\" paragraph>\n                        {job.completion_record.work_performed}\n                      </Typography>\n                      \n                      {job.completion_record.issues_encountered && (\n                        <>\n                          <Typography variant=\"subtitle2\" gutterBottom>Issues Encountered</Typography>\n                          <Typography variant=\"body2\" paragraph>\n                            {job.completion_record.issues_encountered}\n                          </Typography>\n                        </>\n                      )}\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <Typography variant=\"subtitle2\" gutterBottom>Quality & Customer</Typography>\n                      <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n                        <Chip \n                          label={job.completion_record.quality_check_passed ? \"Quality Check Passed\" : \"Quality Check Failed\"}\n                          color={job.completion_record.quality_check_passed ? \"success\" : \"error\"}\n                          size=\"small\"\n                        />\n                        <Chip \n                          label={job.completion_record.customer_present ? \"Customer Present\" : \"Customer Not Present\"}\n                          color={job.completion_record.customer_present ? \"success\" : \"default\"}\n                          size=\"small\"\n                        />\n                        {job.completion_record.customer_rating && (\n                          <Box>\n                            <Typography variant=\"body2\">Customer Rating:</Typography>\n                            <Rating value={job.completion_record.customer_rating} readOnly />\n                          </Box>\n                        )}\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </TabPanel>\n              )}\n            </>\n          ) : (\n            <Box display=\"flex\" justifyContent=\"center\" p={4}>\n              <Typography>No job data available</Typography>\n            </Box>\n          )}\n        </DialogContent>\n\n        <DialogActions>\n          <Button onClick={onClose}>Close</Button>\n          {!isJobCompleted && canCompleteJob && currentTab === 2 && (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleCompleteJob}\n              disabled={!completionForm.work_performed.trim() || loading}\n            >\n              Complete Job\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </LocalizationProvider>\n  );\n};\n\nexport default InstallationJobDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DispatchManagement/InstallationSchedulePromptModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'PersonIcon' is defined but never used.","line":28,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"PersonIcon"},"fix":{"range":[450,474],"text":""},"desc":"Remove unused variable 'PersonIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'installationData' is defined but never used.","line":39,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"installationData"},"fix":{"range":[1010,1049],"text":""},"desc":"Remove unused variable 'installationData'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/DispatchManagement/InstallationSchedulePromptModal.tsx\n'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  TextField,\n  Alert,\n  Grid,\n  InputLabel,\n  Select,\n  MenuItem,\n  Divider\n} from '@mui/material';\nimport {\n  Build as InstallationIcon,\n  Schedule as ScheduleIcon,\n  Person as PersonIcon\n} from '@mui/icons-material';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { InstallationJobCreate } from '../../services/dispatchService';\nimport { INSTALLATION_JOB_PRIORITIES, InstallationJobPriority } from '../../types/dispatch.types';\n\ninterface InstallationSchedulePromptModalProps {\n  open: boolean;\n  onClose: () => void;\n  onCreateInstallation: (installationData: InstallationJobCreate) => Promise<void>;\n  dispatchOrderId?: number;\n  customerId?: number;\n  customerName?: string;\n  deliveryAddress?: string;\n}\n\nconst InstallationSchedulePromptModal: React.FC<InstallationSchedulePromptModalProps> = ({\n  open,\n  onClose,\n  onCreateInstallation,\n  dispatchOrderId,\n  customerId,\n  customerName,\n  deliveryAddress\n}) => {\n  const [createSchedule, setCreateSchedule] = useState<string>('yes');\n  const [scheduledDate, setScheduledDate] = useState<Date | null>(null);\n  const [priority, setPriority] = useState<InstallationJobPriority>('medium');\n  const [estimatedDuration, setEstimatedDuration] = useState<number>(2);\n  const [installationAddress, setInstallationAddress] = useState<string>(deliveryAddress || '');\n  const [contactPerson, setContactPerson] = useState<string>('');\n  const [contactNumber, setContactNumber] = useState<string>('');\n  const [installationNotes, setInstallationNotes] = useState<string>('');\n  const [assignedTechnician, setAssignedTechnician] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSubmit = async () => {\n    if (createSchedule === 'no') {\n      onClose();\n      return;\n    }\n\n    if (!dispatchOrderId || !customerId) {\n      setError('Missing required dispatch order or customer information');\n      return;\n    }\n\n    if (!installationAddress.trim()) {\n      setError('Installation address is required');\n      return;\n    }\n\n    if (!scheduledDate) {\n      setError('Scheduled date and time are required');\n      return;\n    }\n\n    if (estimatedDuration <= 0) {\n      setError('Estimated duration must be greater than 0');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const installationJobData: InstallationJobCreate = {\n        dispatch_order_id: dispatchOrderId,\n        customer_id: customerId,\n        status: 'scheduled',\n        priority,\n        scheduled_date: scheduledDate.toISOString(),\n        estimated_duration_hours: estimatedDuration,\n        installation_address: installationAddress.trim(),\n        contact_person: contactPerson.trim() || null,\n        contact_number: contactNumber.trim() || null,\n        installation_notes: installationNotes.trim() || null,\n        assigned_technician_id: assignedTechnician ? parseInt(assignedTechnician) : null\n      };\n\n      await onCreateInstallation(installationJobData);\n      onClose();\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to create installation schedule');\n      console.error('Error creating installation schedule:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    onClose();\n  };\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n            <InstallationIcon color=\"primary\" />\n            <Typography variant=\"h6\">\n              Create Installation Schedule\n            </Typography>\n          </Box>\n        </DialogTitle>\n\n        <DialogContent dividers>\n          <Box sx={{ mb: 3 }}>\n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              A delivery challan or service voucher has been created for {customerName || 'Unknown Customer'}. \n              Would you like to schedule an installation for the delivered items?\n            </Alert>\n\n            <FormControl component=\"fieldset\" sx={{ mb: 3 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                Do you want to create an installation schedule for this customer?\n              </Typography>\n              <RadioGroup\n                value={createSchedule}\n                onChange={(e) => setCreateSchedule(e.target.value)}\n                row\n              >\n                <FormControlLabel\n                  value=\"yes\"\n                  control={<Radio />}\n                  label=\"Yes, schedule installation\"\n                />\n                <FormControlLabel\n                  value=\"no\"\n                  control={<Radio />}\n                  label=\"No, skip installation scheduling\"\n                />\n              </RadioGroup>\n            </FormControl>\n\n            {createSchedule === 'yes' && (\n              <>\n                <Divider sx={{ mb: 3 }} />\n                \n                <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <ScheduleIcon />\n                  Installation Details\n                </Typography>\n\n                {error && (\n                  <Alert severity=\"error\" sx={{ mb: 2 }}>\n                    {error}\n                  </Alert>\n                )}\n\n                <Grid container spacing={3}>\n                  {/* @ts-expect-error Suppress Grid item prop type mismatch due to MUI type resolution */}\n                  <Grid item xs={12} md={6}>\n                    <FormControl fullWidth>\n                      <InputLabel>Priority</InputLabel>\n                      <Select\n                        value={priority}\n                        onChange={(e) => setPriority(e.target.value as InstallationJobPriority)}\n                        label=\"Priority\"\n                      >\n                        {Object.values(INSTALLATION_JOB_PRIORITIES).map(value => (\n                          <MenuItem key={value} value={value}>\n                            {value.charAt(0).toUpperCase() + value.slice(1)}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n\n                  {/* @ts-expect-error Suppress Grid item prop type mismatch due to MUI type resolution */}\n                  <Grid item xs={12} md={6}>\n                    <DateTimePicker\n                      label=\"Scheduled Date & Time\"\n                      value={scheduledDate}\n                      onChange={(newValue) => setScheduledDate(newValue)}\n                      slotProps={{\n                        textField: {\n                          fullWidth: true,\n                          helperText: 'Select the preferred installation date and time'\n                        }\n                      }}\n                    />\n                  </Grid>\n\n                  {/* @ts-expect-error Suppress Grid item prop type mismatch due to MUI type resolution */}\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      type=\"number\"\n                      label=\"Estimated Duration (hours)\"\n                      value={estimatedDuration}\n                      onChange={(e) => setEstimatedDuration(Math.max(0.5, parseFloat(e.target.value) || 0))}\n                      inputProps={{ min: 0.5, step: 0.5 }}\n                      helperText=\"Expected time to complete installation\"\n                    />\n                  </Grid>\n\n                  {/* @ts-expect-error Suppress Grid item prop type mismatch due to MUI type resolution */}\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Assigned Technician ID\"\n                      value={assignedTechnician}\n                      onChange={(e) => setAssignedTechnician(e.target.value)}\n                      helperText=\"Optional: Enter technician ID if known\"\n                      type=\"number\"\n                    />\n                  </Grid>\n\n                  {/* @ts-expect-error Suppress Grid item prop type mismatch due to MUI type resolution */}\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      multiline\n                      rows={3}\n                      label=\"Installation Address\"\n                      value={installationAddress}\n                      onChange={(e) => setInstallationAddress(e.target.value)}\n                      required\n                      helperText=\"Where the installation will take place\"\n                    />\n                  </Grid>\n\n                  {/* @ts-expect-error Suppress Grid item prop type mismatch due to MUI type resolution */}\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Contact Person\"\n                      value={contactPerson}\n                      onChange={(e) => setContactPerson(e.target.value)}\n                      helperText=\"Primary contact for installation\"\n                    />\n                  </Grid>\n\n                  {/* @ts-expect-error Suppress Grid item prop type mismatch due to MUI type resolution */}\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Contact Number\"\n                      value={contactNumber}\n                      onChange={(e) => setContactNumber(e.target.value)}\n                      helperText=\"Phone number for coordination\"\n                    />\n                  </Grid>\n\n                  {/* @ts-expect-error Suppress Grid item prop type mismatch due to MUI type resolution */}\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      multiline\n                      rows={2}\n                      label=\"Installation Notes\"\n                      value={installationNotes}\n                      onChange={(e) => setInstallationNotes(e.target.value)}\n                      helperText=\"Any special instructions or requirements\"\n                    />\n                  </Grid>\n                </Grid>\n              </>\n            )}\n          </Box>\n        </DialogContent>\n\n        <DialogActions>\n          <Button \n            onClick={handleCancel}\n            disabled={loading}\n          >\n            {createSchedule === 'yes' ? 'Cancel' : 'Skip'}\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            variant=\"contained\"\n            disabled={loading || (createSchedule === 'yes' && (!installationAddress.trim() || !scheduledDate))}\n            startIcon={createSchedule === 'yes' ? <InstallationIcon /> : undefined}\n          >\n            {loading ? 'Creating...' : createSchedule === 'yes' ? 'Create Installation Schedule' : 'Continue'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </LocalizationProvider>\n  );\n};\n\nexport default InstallationSchedulePromptModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DispatchManagement/index.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":8,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/DispatchManagement/index.ts\n\nexport { default as DispatchManagement } from './DispatchManagement';\nexport { default as DispatchOrderDialog } from './DispatchOrderDialog';\nexport { default as InstallationSchedulePromptModal } from './InstallationSchedulePromptModal';\n\n// Placeholder exports for components that would be implemented later\nexport const InstallationJobDialog = () => null;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/EmailTemplateEditor.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Code' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Code"},"fix":{"range":[393,401],"text":""},"desc":"Remove unused variable 'Code'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[451,461],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'template' is defined but never used.","line":60,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"template"},"fix":{"range":[918,950],"text":""},"desc":"Remove unused variable 'template'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'template' is defined but never used.","line":61,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"template"},"fix":{"range":[973,1005],"text":""},"desc":"Remove unused variable 'template'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setPreviewData' is assigned a value but never used.","line":112,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"setPreviewData"},"fix":{"range":[2273,2289],"text":""},"desc":"Remove unused variable 'setPreviewData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'insertVariable' is assigned a value but never used.","line":204,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":204,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"insertVariable"},"fix":{"range":[5434,5804],"text":""},"desc":"Remove unused variable 'insertVariable'."}]},{"ruleId":"no-undef","severity":2,"message":"'variable_name' is not defined.","line":403,"column":83,"nodeType":"Identifier","messageId":"undef","endLine":403,"endColumn":96}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Box,\n  Typography,\n  Tab,\n  Tabs,\n  Grid,\n  Chip,\n  Alert,\n  IconButton,\n  Tooltip,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Divider,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction\n} from '@mui/material';\nimport {\n  Preview,\n  Code,\n  Send,\n  Save,\n  Refresh,\n  Info,\n  ContentCopy,\n  Delete,\n  Add\n} from '@mui/icons-material';\nimport { toast } from 'react-toastify';\n\ninterface EmailTemplate {\n  id: number;\n  name: string;\n  description?: string;\n  template_type: string;\n  channel: string;\n  subject: string;\n  body: string;\n  html_body?: string;\n  trigger_event?: string;\n  variables: string[];\n  is_active: boolean;\n}\n\ninterface EmailTemplateEditorProps {\n  open: boolean;\n  onClose: () => void;\n  template?: EmailTemplate | null;\n  onSave: (template: Partial<EmailTemplate>) => void;\n  onTest?: (template: Partial<EmailTemplate>) => void;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`template-tabpanel-${index}`}\n      aria-labelledby={`template-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst EmailTemplateEditor: React.FC<EmailTemplateEditorProps> = ({\n  open,\n  onClose,\n  template,\n  onSave,\n  onTest\n}) => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [formData, setFormData] = useState<Partial<EmailTemplate>>({\n    name: template?.name || '',\n    description: template?.description || '',\n    template_type: template?.template_type || 'exhibition_intro',\n    channel: template?.channel || 'email',\n    subject: template?.subject || '',\n    body: template?.body || '',\n    html_body: template?.html_body || '',\n    trigger_event: template?.trigger_event || '',\n    variables: template?.variables || [],\n    is_active: template?.is_active ?? true\n  });\n  \n  const [newVariable, setNewVariable] = useState('');\n  const [previewData, setPreviewData] = useState<{ [key: string]: string }>({\n    prospect_name: 'John Smith',\n    company_name: 'TechCorp Solutions',\n    exhibition_name: 'Tech Expo 2024',\n    exhibition_location: 'Convention Center',\n    contact_person: 'Sarah Johnson',\n    contact_email: 'sarah@yourcompany.com',\n    contact_phone: '+1-555-0123'\n  });\n\n  const templateTypes = [\n    { value: 'exhibition_intro', label: 'Exhibition Introduction' },\n    { value: 'follow_up', label: 'Follow-up Email' },\n    { value: 'appointment_reminder', label: 'Appointment Reminder' },\n    { value: 'thank_you', label: 'Thank You Note' },\n    { value: 'proposal_sent', label: 'Proposal Sent' },\n    { value: 'meeting_request', label: 'Meeting Request' }\n  ];\n\n  const availableVariables = [\n    'prospect_name',\n    'company_name',\n    'designation',\n    'exhibition_name',\n    'exhibition_location',\n    'contact_person',\n    'contact_email',\n    'contact_phone',\n    'follow_up_date',\n    'meeting_time',\n    'proposal_link'\n  ];\n\n  const defaultTemplates = {\n    exhibition_intro: {\n      subject: 'Great meeting you at {{exhibition_name}}!',\n      body: `Hi {{prospect_name}},\n\nIt was wonderful meeting you at {{exhibition_name}} in {{exhibition_location}}. I enjoyed our conversation about {{company_name}} and would love to continue our discussion.\n\nI believe our solutions could be a great fit for your needs. Would you be interested in scheduling a brief call to explore how we can help {{company_name}} achieve its goals?\n\nBest regards,\n{{contact_person}}\n{{contact_email}}\n{{contact_phone}}`,\n      html_body: `<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n  <h2 style=\"color: #2196F3;\">Great meeting you at {{exhibition_name}}!</h2>\n  \n  <p>Hi <strong>{{prospect_name}}</strong>,</p>\n  \n  <p>It was wonderful meeting you at <strong>{{exhibition_name}}</strong> in {{exhibition_location}}. I enjoyed our conversation about <strong>{{company_name}}</strong> and would love to continue our discussion.</p>\n  \n  <p>I believe our solutions could be a great fit for your needs. Would you be interested in scheduling a brief call to explore how we can help {{company_name}} achieve its goals?</p>\n  \n  <div style=\"margin: 20px 0; padding: 15px; background-color: #f5f5f5; border-radius: 5px;\">\n    <p style=\"margin: 0;\"><strong>{{contact_person}}</strong><br>\n    📧 {{contact_email}}<br>\n    📞 {{contact_phone}}</p>\n  </div>\n</div>`\n    }\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  const handleInputChange = (field: keyof EmailTemplate, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleAddVariable = () => {\n    if (newVariable && !formData.variables?.includes(newVariable)) {\n      setFormData(prev => ({\n        ...prev,\n        variables: [...(prev.variables || []), newVariable]\n      }));\n      setNewVariable('');\n    }\n  };\n\n  const handleRemoveVariable = (variable: string) => {\n    setFormData(prev => ({\n      ...prev,\n      variables: prev.variables?.filter(v => v !== variable) || []\n    }));\n  };\n\n  const insertVariable = (variable: string, field: 'subject' | 'body' | 'html_body') => {\n    const variableText = `{{${variable}}}`;\n    const currentValue = formData[field] || '';\n    \n    // For simplicity, just append the variable. In a real implementation,\n    // you'd want to insert at cursor position\n    handleInputChange(field, currentValue + variableText);\n  };\n\n  const renderPreview = (text: string, isHtml: boolean = false) => {\n    let processedText = text;\n    \n    // Replace variables with preview data\n    Object.entries(previewData).forEach(([key, value]) => {\n      const regex = new RegExp(`{{${key}}}`, 'g');\n      processedText = processedText.replace(regex, value);\n    });\n    \n    if (isHtml) {\n      return <div dangerouslySetInnerHTML={{ __html: processedText }} />;\n    }\n    \n    return (\n      <Typography component=\"pre\" sx={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit' }}>\n        {processedText}\n      </Typography>\n    );\n  };\n\n  const loadDefaultTemplate = () => {\n    const defaultTemplate = defaultTemplates[formData.template_type as keyof typeof defaultTemplates];\n    if (defaultTemplate) {\n      setFormData(prev => ({\n        ...prev,\n        ...defaultTemplate,\n        variables: [...(prev.variables || []), ...Object.keys(previewData)]\n      }));\n      toast.success('Default template loaded');\n    }\n  };\n\n  const handleSave = () => {\n    if (!formData.name || !formData.subject || !formData.body) {\n      toast.error('Please fill in required fields: Name, Subject, and Body');\n      return;\n    }\n    \n    onSave(formData);\n    toast.success('Email template saved successfully');\n  };\n\n  const handleTest = () => {\n    if (onTest) {\n      onTest(formData);\n      toast.success('Test email sent');\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\n      <DialogTitle>\n        <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\">\n          <Typography variant=\"h6\">\n            {template ? 'Edit Email Template' : 'Create Email Template'}\n          </Typography>\n          <Box>\n            <Tooltip title=\"Load default template\">\n              <IconButton onClick={loadDefaultTemplate}>\n                <Refresh />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Template help\">\n              <IconButton>\n                <Info />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent sx={{ p: 0 }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={activeTab} onChange={handleTabChange}>\n            <Tab label=\"Template Settings\" />\n            <Tab label=\"Email Content\" />\n            <Tab label=\"Variables\" />\n            <Tab label=\"Preview\" />\n          </Tabs>\n        </Box>\n\n        {/* Template Settings Tab */}\n        <TabPanel value={activeTab} index={0}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Template Name\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Template Type</InputLabel>\n                <Select\n                  value={formData.template_type}\n                  label=\"Template Type\"\n                  onChange={(e) => handleInputChange('template_type', e.target.value)}\n                >\n                  {templateTypes.map(type => (\n                    <MenuItem key={type.value} value={type.value}>\n                      {type.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Description\"\n                value={formData.description}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                multiline\n                rows={2}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Trigger Event\"\n                value={formData.trigger_event}\n                onChange={(e) => handleInputChange('trigger_event', e.target.value)}\n                helperText=\"When should this template be automatically sent?\"\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Channel</InputLabel>\n                <Select\n                  value={formData.channel}\n                  label=\"Channel\"\n                  onChange={(e) => handleInputChange('channel', e.target.value)}\n                >\n                  <MenuItem value=\"email\">Email</MenuItem>\n                  <MenuItem value=\"sms\">SMS</MenuItem>\n                  <MenuItem value=\"push\">Push Notification</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        {/* Email Content Tab */}\n        <TabPanel value={activeTab} index={1}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Email Subject\"\n                value={formData.subject}\n                onChange={(e) => handleInputChange('subject', e.target.value)}\n                required\n                helperText=\"Use {{variable_name}} for dynamic content\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Email Body (Plain Text)\"\n                value={formData.body}\n                onChange={(e) => handleInputChange('body', e.target.value)}\n                multiline\n                rows={10}\n                required\n                helperText=\"Plain text version of the email\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Email Body (HTML)\"\n                value={formData.html_body}\n                onChange={(e) => handleInputChange('html_body', e.target.value)}\n                multiline\n                rows={10}\n                helperText=\"HTML version for rich formatting (optional)\"\n              />\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        {/* Variables Tab */}\n        <TabPanel value={activeTab} index={2}>\n          <Typography variant=\"h6\" gutterBottom>\n            Template Variables\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n            Variables allow you to personalize emails with dynamic content. Use {{variable_name}} in your template.\n          </Typography>\n\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Available Variables\n                </Typography>\n                <List dense>\n                  {availableVariables.map(variable => (\n                    <ListItem key={variable}>\n                      <ListItemText \n                        primary={`{{${variable}}}`}\n                        secondary={previewData[variable] || 'Sample data not available'}\n                      />\n                      <ListItemSecondaryAction>\n                        <Tooltip title=\"Copy to clipboard\">\n                          <IconButton \n                            size=\"small\"\n                            onClick={() => {\n                              navigator.clipboard.writeText(`{{${variable}}}`);\n                              toast.success('Variable copied to clipboard');\n                            }}\n                          >\n                            <ContentCopy />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Used Variables\n                </Typography>\n                <Box display=\"flex\" flexWrap=\"wrap\" gap={1} mb={2}>\n                  {formData.variables?.map(variable => (\n                    <Chip\n                      key={variable}\n                      label={variable}\n                      onDelete={() => handleRemoveVariable(variable)}\n                      size=\"small\"\n                    />\n                  ))}\n                </Box>\n                \n                <Box display=\"flex\" gap={1}>\n                  <TextField\n                    size=\"small\"\n                    label=\"Add Variable\"\n                    value={newVariable}\n                    onChange={(e) => setNewVariable(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddVariable()}\n                  />\n                  <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    startIcon={<Add />}\n                    onClick={handleAddVariable}\n                  >\n                    Add\n                  </Button>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        {/* Preview Tab */}\n        <TabPanel value={activeTab} index={3}>\n          <Typography variant=\"h6\" gutterBottom>\n            Email Preview\n          </Typography>\n          <Alert severity=\"info\" sx={{ mb: 3 }}>\n            This preview shows how the email will look with sample data.\n          </Alert>\n\n          <Paper sx={{ p: 3, mb: 3 }}>\n            <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold' }}>\n              Subject: {renderPreview(formData.subject || '')}\n            </Typography>\n            <Divider sx={{ my: 2 }} />\n            \n            <Box sx={{ minHeight: 200 }}>\n              {activeTab === 3 && formData.html_body ? (\n                <Box>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    HTML Preview:\n                  </Typography>\n                  {renderPreview(formData.html_body, true)}\n                </Box>\n              ) : (\n                <Box>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Plain Text Preview:\n                  </Typography>\n                  {renderPreview(formData.body || '')}\n                </Box>\n              )}\n            </Box>\n          </Paper>\n\n          <Box display=\"flex\" gap={2}>\n            <Button\n              variant=\"outlined\"\n              startIcon={<Send />}\n              onClick={handleTest}\n              disabled={!onTest}\n            >\n              Send Test Email\n            </Button>\n            <Button\n              variant=\"outlined\"\n              startIcon={<Preview />}\n              onClick={() => {\n                // Toggle between HTML and plain text preview\n                // This is just a demo action\n                toast.info('Preview mode toggled');\n              }}\n            >\n              Toggle Preview Mode\n            </Button>\n          </Box>\n        </TabPanel>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          startIcon={<Save />}\n          onClick={handleSave}\n        >\n          {template ? 'Update Template' : 'Create Template'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default EmailTemplateEditor;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/EntitySelector.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[232,242],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[311,322],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useEntityForm' is defined but never used.","line":22,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEntityForm"},"fix":{"range":[531,546],"text":""},"desc":"Remove unused variable 'useEntityForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'entity' is defined but never used.","line":34,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"entity"},"fix":{"range":[953,964],"text":""},"desc":"Remove unused variable 'entity'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/EntitySelector.tsx\n// Unified Entity selection component for Customer + Vendor + Employee + ExpenseAccount\n\nimport React, { useState } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  Box,\n  Chip,\n  Typography,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  InputAdornment,\n  Tooltip,\n  CircularProgress\n} from '@mui/material';\nimport { Add, Person, Business, Badge, AccountBalance } from '@mui/icons-material';\nimport { Controller, Control } from 'react-hook-form';\nimport { useEntityOptions, useEntityForm } from '../hooks/useEntity';\nimport { EntityType, EntityOption, ENTITY_CONFIGS } from '../types/entity.types';\nimport AddVendorModal from './AddVendorModal';\nimport AddCustomerModal from './AddCustomerModal';\n\ninterface EntitySelectorProps {\n  name: string;\n  control: Control<any>;\n  label?: string;\n  required?: boolean;\n  entityTypes?: EntityType[];\n  allowTypeSelection?: boolean;\n  onEntityCreated?: (entity: any) => void;\n  disabled?: boolean;\n  error?: boolean;\n  helperText?: string;\n}\n\nconst getEntityIcon = (entityType: EntityType) => {\n  switch (entityType) {\n    case 'Customer':\n      return <Person fontSize=\"small\" />;\n    case 'Vendor':\n      return <Business fontSize=\"small\" />;\n    case 'Employee':\n      return <Badge fontSize=\"small\" />;\n    case 'ExpenseAccount':\n      return <AccountBalance fontSize=\"small\" />;\n    default:\n      return <Person fontSize=\"small\" />;\n  }\n};\n\nconst EntitySelector: React.FC<EntitySelectorProps> = ({\n  name,\n  control,\n  label = 'Select Entity',\n  required = false,\n  entityTypes = ['Customer', 'Vendor'],\n  allowTypeSelection = true,\n  onEntityCreated,\n  disabled = false,\n  error = false,\n  helperText\n}) => {\n  const [selectedEntityType, setSelectedEntityType] = useState<EntityType>(entityTypes[0]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [addModalType, setAddModalType] = useState<'Customer' | 'Vendor'>('Customer');\n\n  const { options, isLoading } = useEntityOptions(\n    allowTypeSelection ? [selectedEntityType] : entityTypes\n  );\n\n  const handleAddNew = () => {\n    if (selectedEntityType === 'Customer' || selectedEntityType === 'Vendor') {\n      setAddModalType(selectedEntityType);\n      setShowAddModal(true);\n    } else {\n      // For Employee and ExpenseAccount, we can add these modals later\n      alert(`Create ${selectedEntityType} functionality will be implemented soon`);\n    }\n  };\n\n  const handleEntityCreated = async (newEntity: any) => {\n    setShowAddModal(false);\n    if (onEntityCreated) {\n      onEntityCreated(newEntity);\n    }\n  };\n\n  // Enhanced options with \"Add New\" option\n  const enhancedOptions = [\n    ...options,\n    {\n      id: -1,\n      name: `Add New ${selectedEntityType}...`,\n      type: selectedEntityType,\n      label: `Add New ${selectedEntityType}...`,\n      value: -1,\n      originalData: null\n    } as EntityOption\n  ];\n\n  return (\n    <Box>\n      <Box display=\"flex\" gap={1} alignItems=\"flex-start\">\n        {/* Entity Type Selector */}\n        {allowTypeSelection && entityTypes.length > 1 && (\n          <FormControl size=\"small\" sx={{ minWidth: 140 }}>\n            <InputLabel>Type</InputLabel>\n            <Select\n              value={selectedEntityType}\n              onChange={(e) => setSelectedEntityType(e.target.value as EntityType)}\n              label=\"Type\"\n              disabled={disabled}\n            >\n              {entityTypes.map((type) => (\n                <MenuItem key={type} value={type}>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    {getEntityIcon(type)}\n                    {ENTITY_CONFIGS[type].displayName}\n                  </Box>\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        )}\n\n        {/* Entity Selector */}\n        <Box flex={1}>\n          <Controller\n            name={name}\n            control={control}\n            rules={{ required: required ? `${label} is required` : false }}\n            render={({ field }) => (\n              <Autocomplete\n                {...field}\n                options={enhancedOptions}\n                getOptionLabel={(option) => \n                  typeof option === 'string' ? option : (option?.label || '')\n                }\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1} width=\"100%\">\n                      {option.id === -1 ? (\n                        <>\n                          <Add fontSize=\"small\" color=\"primary\" />\n                          <Typography color=\"primary\" fontWeight=\"bold\">\n                            {option.label}\n                          </Typography>\n                        </>\n                      ) : (\n                        <>\n                          {getEntityIcon(option.type)}\n                          <Box>\n                            <Typography variant=\"body2\">\n                              {option.name}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {option.type}\n                            </Typography>\n                          </Box>\n                        </>\n                      )}\n                    </Box>\n                  </Box>\n                )}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip\n                      {...getTagProps({ index })}\n                      key={option.id}\n                      label={option.name}\n                      size=\"small\"\n                      color={option.type === 'Customer' ? 'success' : 'primary'}\n                    />\n                  ))\n                }\n                onChange={(_, newValue) => {\n                  if (newValue && newValue.id === -1) {\n                    handleAddNew();\n                    return;\n                  }\n                  field.onChange(newValue);\n                }}\n                loading={isLoading}\n                disabled={disabled}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label={label}\n                    required={required}\n                    error={error}\n                    helperText={helperText}\n                    InputProps={{\n                      ...params.InputProps,\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          {getEntityIcon(selectedEntityType)}\n                        </InputAdornment>\n                      ),\n                      endAdornment: (\n                        <>\n                          {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                          {params.InputProps.endAdornment}\n                        </>\n                      ),\n                    }}\n                  />\n                )}\n                isOptionEqualToValue={(option, value) => option.id === value?.id}\n              />\n            )}\n          />\n        </Box>\n      </Box>\n\n      {/* Add Entity Modals */}\n      {addModalType === 'Customer' && (\n        <AddCustomerModal\n          open={showAddModal}\n          onClose={() => setShowAddModal(false)}\n          onAdd={handleEntityCreated}\n        />\n      )}\n      \n      {addModalType === 'Vendor' && (\n        <AddVendorModal\n          open={showAddModal}\n          onClose={() => setShowAddModal(false)}\n          onAdd={handleEntityCreated}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default EntitySelector;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ExcelImportExport.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'importedData' is defined but never used.","line":11,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"importedData"},"fix":{"range":[273,292],"text":""},"desc":"Remove unused variable 'importedData'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/ExcelImportExport.tsx\n'use client';\n\nimport React from 'react';\nimport { Button, Box } from '@mui/material';\nimport { exportToExcel, importFromExcel } from '../lib/excelUtils';\n\ninterface ExcelImportExportProps {\n  data: any[];\n  entity: string;\n  onImport: (importedData: any[]) => void;\n}\n\nconst ExcelImportExport: React.FC<ExcelImportExportProps> = ({ data, entity, onImport }) => {\n  const handleExport = () => {\n    exportToExcel(data, entity);\n  };\n\n  const handleImport = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const importedData = await importFromExcel(file);\n      onImport(importedData);\n    }\n  };\n\n  return (\n    <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n      <Button variant=\"outlined\" onClick={handleExport}>\n        Export {entity} to Excel\n      </Button>\n      <Button variant=\"outlined\" component=\"label\">\n        Import {entity} from Excel\n        <input type=\"file\" hidden accept=\".xlsx\" onChange={handleImport} />\n      </Button>\n    </Box>\n  );\n};\n\nexport default ExcelImportExport;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ExcelUploadComponent.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Object pattern argument should be typed.","line":7,"column":31,"nodeType":"ObjectPattern","messageId":"missingArgTypeUnnamed","endLine":7,"endColumn":74},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":7,"column":76,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":7,"endColumn":78}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Button, Typography, CircularProgress, Alert, Box } from '@mui/material';\nimport axios from 'axios';\n\nconst ExcelUploadComponent = ({ endpoint = '/api/v1/stock/import/excel' }) => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState<{ message: string; total_processed: number; errors: any[] } | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedFile(event.target.files?.[0] || null);\n    setResponse(null);\n    setError(null);\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select an Excel file first');\n      return;\n    }\n\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n\n    try {\n      const res = await axios.post(endpoint, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${localStorage.getItem('token')}`,  // Assume token-based auth\n        },\n      });\n      setResponse(res.data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Upload failed');\n      setResponse(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h6\">Upload Excel File</Typography>\n      <input type=\"file\" accept=\".xlsx,.xls\" onChange={handleFileChange} />\n      <Button variant=\"contained\" onClick={handleUpload} disabled={loading} sx={{ mt: 2 }}>\n        {loading ? <CircularProgress size={24} /> : 'Upload'}\n      </Button>\n      {response && (\n        <Alert severity=\"success\" sx={{ mt: 2 }}>\n          {response.message} (Processed: {response.total_processed}, Errors: {response.errors.length})\n        </Alert>\n      )}\n      {error && <Alert severity=\"error\" sx={{ mt: 2 }}>{error}</Alert>}\n    </Box>\n  );\n};\n\nexport default ExcelUploadComponent;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ExportPrintToolbar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'GetApp' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"GetApp"},"fix":{"range":[198,208],"text":""},"desc":"Remove unused variable 'GetApp'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Menu,\n  MenuItem,\n  IconButton,\n  Tooltip,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Download,\n  Print,\n  GetApp,\n  TableChart,\n  Description\n} from '@mui/icons-material';\nimport { saveAs } from 'file-saver';\n\ninterface ExportPrintToolbarProps {\n  onExportExcel?: () => Promise<Blob | void>;\n  onExportCSV?: () => Promise<Blob | void>;\n  onPrint?: () => void;\n  showExcel?: boolean;\n  showCSV?: boolean;\n  showPrint?: boolean;\n  disabled?: boolean;\n  loading?: boolean;\n  filename?: string;\n}\n\nconst ExportPrintToolbar: React.FC<ExportPrintToolbarProps> = ({\n  onExportExcel,\n  onExportCSV,\n  onPrint,\n  showExcel = true,\n  showCSV = true,\n  showPrint = true,\n  disabled = false,\n  loading = false,\n  filename = 'report'\n}) => {\n  const [exportAnchorEl, setExportAnchorEl] = useState<null | HTMLElement>(null);\n  const [isExporting, setIsExporting] = useState(false);\n\n  const handleExportClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setExportAnchorEl(event.currentTarget);\n  };\n\n  const handleExportClose = () => {\n    setExportAnchorEl(null);\n  };\n\n  const handleExcelExport = async () => {\n    if (!onExportExcel) {return;}\n    \n    setIsExporting(true);\n    try {\n      const blob = await onExportExcel();\n      if (blob) {\n        saveAs(blob, `${filename}.xlsx`);\n      }\n    } catch (error) {\n      console.error('Error exporting Excel:', error);\n      // You might want to show a toast notification here\n    } finally {\n      setIsExporting(false);\n      handleExportClose();\n    }\n  };\n\n  const handleCSVExport = async () => {\n    if (!onExportCSV) {return;}\n    \n    setIsExporting(true);\n    try {\n      const blob = await onExportCSV();\n      if (blob) {\n        saveAs(blob, `${filename}.csv`);\n      }\n    } catch (error) {\n      console.error('Error exporting CSV:', error);\n      // You might want to show a toast notification here\n    } finally {\n      setIsExporting(false);\n      handleExportClose();\n    }\n  };\n\n  const handlePrint = () => {\n    if (onPrint) {\n      onPrint();\n    } else {\n      // Default print behavior\n      window.print();\n    }\n  };\n\n  const hasExportOptions = (showExcel && onExportExcel) || (showCSV && onExportCSV);\n\n  return (\n    <Box sx={{ display: 'flex', gap: 1 }}>\n      {hasExportOptions && (\n        <>\n          <Button\n            startIcon={loading || isExporting ? <CircularProgress size={16} /> : <Download />}\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={handleExportClick}\n            disabled={disabled || loading || isExporting}\n            aria-label=\"Export options\"\n          >\n            Export\n          </Button>\n          <Menu\n            anchorEl={exportAnchorEl}\n            open={Boolean(exportAnchorEl)}\n            onClose={handleExportClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n          >\n            {showExcel && onExportExcel && (\n              <MenuItem onClick={handleExcelExport} disabled={isExporting}>\n                <TableChart sx={{ mr: 1 }} fontSize=\"small\" />\n                Export to Excel\n              </MenuItem>\n            )}\n            {showCSV && onExportCSV && (\n              <MenuItem onClick={handleCSVExport} disabled={isExporting}>\n                <Description sx={{ mr: 1 }} fontSize=\"small\" />\n                Export to CSV\n              </MenuItem>\n            )}\n          </Menu>\n        </>\n      )}\n      \n      {showPrint && (\n        <Tooltip title=\"Print Report\">\n          <IconButton\n            size=\"small\"\n            onClick={handlePrint}\n            disabled={disabled || loading}\n            aria-label=\"Print report\"\n          >\n            <Print />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Box>\n  );\n};\n\nexport default ExportPrintToolbar;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/FactoryReset.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/FeedbackWorkflow/CustomerFeedbackModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'feedbackData' is defined but never used.","line":40,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"feedbackData"},"fix":{"range":[670,687],"text":""},"desc":"Remove unused variable 'feedbackData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getSatisfactionColor' is assigned a value but never used.","line":160,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"getSatisfactionColor"},"fix":{"range":[3773,3947],"text":""},"desc":"Remove unused variable 'getSatisfactionColor'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  Rating,\n  FormControlLabel,\n  Switch,\n  Alert,\n  CircularProgress,\n  Divider,\n  Grid,\n  Card,\n  CardContent\n} from '@mui/material';\nimport {\n  Feedback as FeedbackIcon,\n  Star as StarIcon,\n  ThumbUp as ThumbUpIcon,\n  ThumbDown as ThumbDownIcon\n} from '@mui/icons-material';\n\ninterface CustomerFeedbackModalProps {\n  open: boolean;\n  onClose: () => void;\n  installationJobId: number;\n  customerId: number;\n  completionRecordId?: number;\n  onSubmit: (feedbackData: any) => Promise<void>;\n}\n\nconst SATISFACTION_LEVELS = [\n  { value: 'very_satisfied', label: 'Very Satisfied', color: '#4caf50' },\n  { value: 'satisfied', label: 'Satisfied', color: '#8bc34a' },\n  { value: 'neutral', label: 'Neutral', color: '#ff9800' },\n  { value: 'dissatisfied', label: 'Dissatisfied', color: '#f44336' },\n  { value: 'very_dissatisfied', label: 'Very Dissatisfied', color: '#d32f2f' }\n];\n\nconst CONTACT_METHODS = [\n  { value: 'email', label: 'Email' },\n  { value: 'phone', label: 'Phone' },\n  { value: 'sms', label: 'SMS' }\n];\n\nexport const CustomerFeedbackModal: React.FC<CustomerFeedbackModalProps> = ({\n  open,\n  onClose,\n  installationJobId,\n  customerId,\n  completionRecordId,\n  onSubmit\n}) => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState({\n    overall_rating: 0,\n    service_quality_rating: 0,\n    technician_rating: 0,\n    timeliness_rating: 0,\n    communication_rating: 0,\n    feedback_comments: '',\n    improvement_suggestions: '',\n    would_recommend: true,\n    satisfaction_level: 'satisfied',\n    follow_up_preferred: false,\n    preferred_contact_method: 'email',\n    survey_responses: {}\n  });\n  const [error, setError] = useState<string | null>(null);\n\n  const handleRatingChange = (field: string) => (event: any, value: number | null) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value || 0\n    }));\n  };\n\n  const handleTextChange = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n\n  const handleSelectChange = (field: string) => (event: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n\n  const handleSwitchChange = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: event.target.checked\n    }));\n  };\n\n  const handleSubmit = async () => {\n    setError(null);\n    \n    if (formData.overall_rating === 0) {\n      setError('Please provide an overall rating');\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      const feedbackData = {\n        installation_job_id: installationJobId,\n        customer_id: customerId,\n        completion_record_id: completionRecordId,\n        ...formData\n      };\n      \n      await onSubmit(feedbackData);\n      onClose();\n    } catch (err: any) {\n      setError(err.message || 'Failed to submit feedback');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      overall_rating: 0,\n      service_quality_rating: 0,\n      technician_rating: 0,\n      timeliness_rating: 0,\n      communication_rating: 0,\n      feedback_comments: '',\n      improvement_suggestions: '',\n      would_recommend: true,\n      satisfaction_level: 'satisfied',\n      follow_up_preferred: false,\n      preferred_contact_method: 'email',\n      survey_responses: {}\n    });\n    setError(null);\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  const getSatisfactionColor = (level: string) => {\n    const satisfaction = SATISFACTION_LEVELS.find(s => s.value === level);\n    return satisfaction?.color || '#757575';\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      maxWidth=\"md\"\n      fullWidth\n      scroll=\"paper\"\n    >\n      <DialogTitle>\n        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n          <FeedbackIcon color=\"primary\" />\n          <Typography variant=\"h6\">Service Feedback</Typography>\n        </Box>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n          Please share your experience with our service to help us improve\n        </Typography>\n      </DialogTitle>\n\n      <DialogContent dividers>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Grid container spacing={3}>\n          {/* Overall Rating */}\n          <Grid item xs={12}>\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Overall Service Rating *\n                </Typography>\n                <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                  <Rating\n                    value={formData.overall_rating}\n                    onChange={handleRatingChange('overall_rating')}\n                    size=\"large\"\n                    icon={<StarIcon fontSize=\"inherit\" />}\n                    emptyIcon={<StarIcon fontSize=\"inherit\" />}\n                  />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {formData.overall_rating > 0 ? `${formData.overall_rating}/5` : 'Please rate'}\n                  </Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Detailed Ratings */}\n          <Grid item xs={12}>\n            <Typography variant=\"h6\" gutterBottom>\n              Detailed Ratings\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <Box>\n                  <Typography variant=\"body2\" gutterBottom>\n                    Service Quality\n                  </Typography>\n                  <Rating\n                    value={formData.service_quality_rating}\n                    onChange={handleRatingChange('service_quality_rating')}\n                    size=\"small\"\n                  />\n                </Box>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Box>\n                  <Typography variant=\"body2\" gutterBottom>\n                    Technician Performance\n                  </Typography>\n                  <Rating\n                    value={formData.technician_rating}\n                    onChange={handleRatingChange('technician_rating')}\n                    size=\"small\"\n                  />\n                </Box>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Box>\n                  <Typography variant=\"body2\" gutterBottom>\n                    Timeliness\n                  </Typography>\n                  <Rating\n                    value={formData.timeliness_rating}\n                    onChange={handleRatingChange('timeliness_rating')}\n                    size=\"small\"\n                  />\n                </Box>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Box>\n                  <Typography variant=\"body2\" gutterBottom>\n                    Communication\n                  </Typography>\n                  <Rating\n                    value={formData.communication_rating}\n                    onChange={handleRatingChange('communication_rating')}\n                    size=\"small\"\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* Satisfaction Level */}\n          <Grid item xs={12} sm={6}>\n            <FormControl fullWidth>\n              <InputLabel>Satisfaction Level</InputLabel>\n              <Select\n                value={formData.satisfaction_level}\n                onChange={handleSelectChange('satisfaction_level')}\n                label=\"Satisfaction Level\"\n              >\n                {SATISFACTION_LEVELS.map((level) => (\n                  <MenuItem key={level.value} value={level.value}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <Box\n                        width={12}\n                        height={12}\n                        borderRadius=\"50%\"\n                        bgcolor={level.color}\n                      />\n                      {level.label}\n                    </Box>\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          {/* Would Recommend */}\n          <Grid item xs={12} sm={6}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={formData.would_recommend}\n                  onChange={handleSwitchChange('would_recommend')}\n                  color=\"primary\"\n                />\n              }\n              label={\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  {formData.would_recommend ? (\n                    <ThumbUpIcon color=\"success\" fontSize=\"small\" />\n                  ) : (\n                    <ThumbDownIcon color=\"error\" fontSize=\"small\" />\n                  )}\n                  Would recommend our service\n                </Box>\n              }\n            />\n          </Grid>\n\n          {/* Feedback Comments */}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              multiline\n              rows={4}\n              label=\"Feedback Comments\"\n              placeholder=\"Please share your thoughts about the service...\"\n              value={formData.feedback_comments}\n              onChange={handleTextChange('feedback_comments')}\n            />\n          </Grid>\n\n          {/* Improvement Suggestions */}\n          <Grid item xs={12}>\n            <TextField\n              fullWidth\n              multiline\n              rows={3}\n              label=\"Suggestions for Improvement\"\n              placeholder=\"How can we improve our service?\"\n              value={formData.improvement_suggestions}\n              onChange={handleTextChange('improvement_suggestions')}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <Divider />\n          </Grid>\n\n          {/* Follow-up Preferences */}\n          <Grid item xs={12}>\n            <Typography variant=\"h6\" gutterBottom>\n              Follow-up Preferences\n            </Typography>\n          </Grid>\n\n          <Grid item xs={12} sm={6}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={formData.follow_up_preferred}\n                  onChange={handleSwitchChange('follow_up_preferred')}\n                  color=\"primary\"\n                />\n              }\n              label=\"I would like follow-up contact\"\n            />\n          </Grid>\n\n          {formData.follow_up_preferred && (\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Preferred Contact Method</InputLabel>\n                <Select\n                  value={formData.preferred_contact_method}\n                  onChange={handleSelectChange('preferred_contact_method')}\n                  label=\"Preferred Contact Method\"\n                >\n                  {CONTACT_METHODS.map((method) => (\n                    <MenuItem key={method.value} value={method.value}>\n                      {method.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n          )}\n        </Grid>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={handleClose} disabled={isSubmitting}>\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSubmit}\n          variant=\"contained\"\n          disabled={isSubmitting || formData.overall_rating === 0}\n          startIcon={isSubmitting ? <CircularProgress size={20} /> : <FeedbackIcon />}\n        >\n          {isSubmitting ? 'Submitting...' : 'Submit Feedback'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CustomerFeedbackModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/FeedbackWorkflow/FeedbackStatusList.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[351,364],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'StarIcon' is defined but never used.","line":39,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"StarIcon"},"fix":{"range":[507,527],"text":""},"desc":"Remove unused variable 'StarIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SearchIcon' is defined but never used.","line":46,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"SearchIcon"},"fix":{"range":[683,707],"text":""},"desc":"Remove unused variable 'SearchIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FilterIcon' is defined but never used.","line":47,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"FilterIcon"},"fix":{"range":[707,735],"text":""},"desc":"Remove unused variable 'FilterIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'feedback' is defined but never used.","line":53,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"feedback"},"fix":{"range":[883,896],"text":""},"desc":"Remove unused variable 'feedback'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'closure' is defined but never used.","line":54,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"closure"},"fix":{"range":[928,940],"text":""},"desc":"Remove unused variable 'closure'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedClosure' is assigned a value but never used.","line":105,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedClosure"},"fix":{"range":[2816,2831],"text":""},"desc":"Remove unused variable 'selectedClosure'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Chip,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Tooltip,\n  Alert,\n  CircularProgress,\n  Tab,\n  Tabs,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Pagination,\n  Rating,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions\n} from '@mui/material';\nimport {\n  Feedback as FeedbackIcon,\n  Star as StarIcon,\n  Visibility as ViewIcon,\n  Edit as EditIcon,\n  Close as CloseIcon,\n  CheckCircle as CheckCircleIcon,\n  Schedule as ScheduleIcon,\n  Warning as WarningIcon,\n  Search as SearchIcon,\n  FilterList as FilterIcon,\n  Assignment as AssignmentIcon\n} from '@mui/icons-material';\n\ninterface FeedbackStatusListProps {\n  organizationId: number;\n  onFeedbackSelect?: (feedback: any) => void;\n  onClosureSelect?: (closure: any) => void;\n}\n\nconst FEEDBACK_STATUS_CONFIG = {\n  submitted: { label: 'Submitted', color: 'info', icon: FeedbackIcon },\n  reviewed: { label: 'Reviewed', color: 'warning', icon: EditIcon },\n  responded: { label: 'Responded', color: 'success', icon: CheckCircleIcon },\n  closed: { label: 'Closed', color: 'default', icon: CloseIcon }\n};\n\nconst CLOSURE_STATUS_CONFIG = {\n  pending: { label: 'Pending', color: 'warning', icon: ScheduleIcon },\n  approved: { label: 'Approved', color: 'info', icon: CheckCircleIcon },\n  closed: { label: 'Closed', color: 'success', icon: CheckCircleIcon },\n  reopened: { label: 'Reopened', color: 'error', icon: WarningIcon }\n};\n\nconst SATISFACTION_CONFIG = {\n  very_satisfied: { label: 'Very Satisfied', color: '#4caf50' },\n  satisfied: { label: 'Satisfied', color: '#8bc34a' },\n  neutral: { label: 'Neutral', color: '#ff9800' },\n  dissatisfied: { label: 'Dissatisfied', color: '#f44336' },\n  very_dissatisfied: { label: 'Very Dissatisfied', color: '#d32f2f' }\n};\n\nexport const FeedbackStatusList: React.FC<FeedbackStatusListProps> = ({\n  organizationId,\n  onFeedbackSelect,\n  onClosureSelect\n}) => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [feedbackList, setFeedbackList] = useState<any[]>([]);\n  const [closureList, setClosureList] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [feedbackFilters, setFeedbackFilters] = useState({\n    feedback_status: '',\n    overall_rating: '',\n    satisfaction_level: ''\n  });\n  const [closureFilters, setClosureFilters] = useState({\n    closure_status: '',\n    requires_manager_approval: '',\n    escalation_required: ''\n  });\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 10,\n    total: 0\n  });\n  const [selectedFeedback, setSelectedFeedback] = useState<any>(null);\n  const [selectedClosure, setSelectedClosure] = useState<any>(null);\n\n  // Mock data - replace with actual API calls\n  const loadFeedback = async () => {\n    setLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await feedbackService.getFeedbackList(organizationId, feedbackFilters);\n      const mockFeedback = [\n        {\n          id: 1,\n          installation_job_id: 1,\n          customer_name: 'John Doe',\n          overall_rating: 5,\n          service_quality_rating: 4,\n          feedback_status: 'submitted',\n          satisfaction_level: 'very_satisfied',\n          feedback_comments: 'Excellent service!',\n          submitted_at: new Date().toISOString(),\n          would_recommend: true\n        },\n        {\n          id: 2,\n          installation_job_id: 2,\n          customer_name: 'Jane Smith',\n          overall_rating: 3,\n          service_quality_rating: 3,\n          feedback_status: 'reviewed',\n          satisfaction_level: 'neutral',\n          feedback_comments: 'Service was okay, could be improved.',\n          submitted_at: new Date(Date.now() - 86400000).toISOString(),\n          would_recommend: false\n        }\n      ];\n      setFeedbackList(mockFeedback);\n    } catch (err: any) {\n      setError(err.message || 'Failed to load feedback');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadClosures = async () => {\n    setLoading(true);\n    try {\n      // TODO: Replace with actual API call\n      // const response = await feedbackService.getClosureList(organizationId, closureFilters);\n      const mockClosures = [\n        {\n          id: 1,\n          installation_job_id: 1,\n          closure_status: 'pending',\n          closure_reason: 'completed',\n          requires_manager_approval: true,\n          feedback_received: true,\n          minimum_rating_met: true,\n          escalation_required: false,\n          created_at: new Date().toISOString()\n        },\n        {\n          id: 2,\n          installation_job_id: 2,\n          closure_status: 'closed',\n          closure_reason: 'completed',\n          requires_manager_approval: true,\n          feedback_received: true,\n          minimum_rating_met: false,\n          escalation_required: true,\n          created_at: new Date(Date.now() - 172800000).toISOString(),\n          closed_at: new Date(Date.now() - 86400000).toISOString()\n        }\n      ];\n      setClosureList(mockClosures);\n    } catch (err: any) {\n      setError(err.message || 'Failed to load closures');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (activeTab === 0) {\n      loadFeedback();\n    } else {\n      loadClosures();\n    }\n  }, [activeTab, feedbackFilters, closureFilters, organizationId]);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n    setError(null);\n  };\n\n  const handleFeedbackFilterChange = (field: string) => (event: any) => {\n    setFeedbackFilters(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n\n  const handleClosureFilterChange = (field: string) => (event: any) => {\n    setClosureFilters(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n\n  const handleViewFeedback = (feedback: any) => {\n    setSelectedFeedback(feedback);\n    onFeedbackSelect?.(feedback);\n  };\n\n  const handleViewClosure = (closure: any) => {\n    setSelectedClosure(closure);\n    onClosureSelect?.(closure);\n  };\n\n  const renderFeedbackTable = () => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Customer</TableCell>\n            <TableCell>Rating</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Satisfaction</TableCell>\n            <TableCell>Submitted</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {feedbackList.map((feedback) => (\n            <TableRow key={feedback.id} hover>\n              <TableCell>\n                <Typography variant=\"body2\">{feedback.customer_name}</Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Job #{feedback.installation_job_id}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  <Rating value={feedback.overall_rating} readOnly size=\"small\" />\n                  <Typography variant=\"caption\">\n                    {feedback.overall_rating}/5\n                  </Typography>\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Chip\n                  size=\"small\"\n                  label={FEEDBACK_STATUS_CONFIG[feedback.feedback_status as keyof typeof FEEDBACK_STATUS_CONFIG]?.label}\n                  color={FEEDBACK_STATUS_CONFIG[feedback.feedback_status as keyof typeof FEEDBACK_STATUS_CONFIG]?.color as any}\n                  icon={React.createElement(FEEDBACK_STATUS_CONFIG[feedback.feedback_status as keyof typeof FEEDBACK_STATUS_CONFIG]?.icon, { fontSize: 'small' })}\n                />\n              </TableCell>\n              <TableCell>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  <Box\n                    width={12}\n                    height={12}\n                    borderRadius=\"50%\"\n                    bgcolor={SATISFACTION_CONFIG[feedback.satisfaction_level as keyof typeof SATISFACTION_CONFIG]?.color}\n                  />\n                  <Typography variant=\"caption\">\n                    {SATISFACTION_CONFIG[feedback.satisfaction_level as keyof typeof SATISFACTION_CONFIG]?.label}\n                  </Typography>\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"caption\">\n                  {new Date(feedback.submitted_at).toLocaleDateString()}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Tooltip title=\"View Feedback\">\n                  <IconButton\n                    size=\"small\"\n                    onClick={() => handleViewFeedback(feedback)}\n                  >\n                    <ViewIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  const renderClosureTable = () => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Job ID</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Reason</TableCell>\n            <TableCell>Feedback</TableCell>\n            <TableCell>Created</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {closureList.map((closure) => (\n            <TableRow key={closure.id} hover>\n              <TableCell>\n                <Typography variant=\"body2\">#{closure.installation_job_id}</Typography>\n              </TableCell>\n              <TableCell>\n                <Chip\n                  size=\"small\"\n                  label={CLOSURE_STATUS_CONFIG[closure.closure_status as keyof typeof CLOSURE_STATUS_CONFIG]?.label}\n                  color={CLOSURE_STATUS_CONFIG[closure.closure_status as keyof typeof CLOSURE_STATUS_CONFIG]?.color as any}\n                  icon={React.createElement(CLOSURE_STATUS_CONFIG[closure.closure_status as keyof typeof CLOSURE_STATUS_CONFIG]?.icon, { fontSize: 'small' })}\n                />\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                  {closure.closure_reason.replace('_', ' ')}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  {closure.feedback_received ? (\n                    <CheckCircleIcon color=\"success\" fontSize=\"small\" />\n                  ) : (\n                    <ScheduleIcon color=\"warning\" fontSize=\"small\" />\n                  )}\n                  <Typography variant=\"caption\">\n                    {closure.feedback_received ? 'Received' : 'Pending'}\n                  </Typography>\n                  {closure.escalation_required && (\n                    <WarningIcon color=\"error\" fontSize=\"small\" />\n                  )}\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"caption\">\n                  {new Date(closure.created_at).toLocaleDateString()}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Tooltip title=\"View Closure\">\n                  <IconButton\n                    size=\"small\"\n                    onClick={() => handleViewClosure(closure)}\n                  >\n                    <AssignmentIcon fontSize=\"small\" />\n                  </IconButton>\n                </Tooltip>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  return (\n    <Box>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n        <Tabs value={activeTab} onChange={handleTabChange}>\n          <Tab \n            label=\"Customer Feedback\" \n            icon={<FeedbackIcon />}\n            iconPosition=\"start\"\n          />\n          <Tab \n            label=\"Service Closures\" \n            icon={<AssignmentIcon />}\n            iconPosition=\"start\"\n          />\n        </Tabs>\n      </Box>\n\n      {/* Filters */}\n      <Card sx={{ mb: 2 }}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Filters\n          </Typography>\n          <Grid container spacing={2}>\n            {activeTab === 0 ? (\n              <>\n                <Grid item xs={12} sm={4}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel>Status</InputLabel>\n                    <Select\n                      value={feedbackFilters.feedback_status}\n                      onChange={handleFeedbackFilterChange('feedback_status')}\n                      label=\"Status\"\n                    >\n                      <MenuItem value=\"\">All</MenuItem>\n                      <MenuItem value=\"submitted\">Submitted</MenuItem>\n                      <MenuItem value=\"reviewed\">Reviewed</MenuItem>\n                      <MenuItem value=\"responded\">Responded</MenuItem>\n                      <MenuItem value=\"closed\">Closed</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel>Rating</InputLabel>\n                    <Select\n                      value={feedbackFilters.overall_rating}\n                      onChange={handleFeedbackFilterChange('overall_rating')}\n                      label=\"Rating\"\n                    >\n                      <MenuItem value=\"\">All</MenuItem>\n                      <MenuItem value=\"5\">5 Stars</MenuItem>\n                      <MenuItem value=\"4\">4 Stars</MenuItem>\n                      <MenuItem value=\"3\">3 Stars</MenuItem>\n                      <MenuItem value=\"2\">2 Stars</MenuItem>\n                      <MenuItem value=\"1\">1 Star</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel>Satisfaction</InputLabel>\n                    <Select\n                      value={feedbackFilters.satisfaction_level}\n                      onChange={handleFeedbackFilterChange('satisfaction_level')}\n                      label=\"Satisfaction\"\n                    >\n                      <MenuItem value=\"\">All</MenuItem>\n                      <MenuItem value=\"very_satisfied\">Very Satisfied</MenuItem>\n                      <MenuItem value=\"satisfied\">Satisfied</MenuItem>\n                      <MenuItem value=\"neutral\">Neutral</MenuItem>\n                      <MenuItem value=\"dissatisfied\">Dissatisfied</MenuItem>\n                      <MenuItem value=\"very_dissatisfied\">Very Dissatisfied</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </>\n            ) : (\n              <>\n                <Grid item xs={12} sm={4}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel>Status</InputLabel>\n                    <Select\n                      value={closureFilters.closure_status}\n                      onChange={handleClosureFilterChange('closure_status')}\n                      label=\"Status\"\n                    >\n                      <MenuItem value=\"\">All</MenuItem>\n                      <MenuItem value=\"pending\">Pending</MenuItem>\n                      <MenuItem value=\"approved\">Approved</MenuItem>\n                      <MenuItem value=\"closed\">Closed</MenuItem>\n                      <MenuItem value=\"reopened\">Reopened</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel>Manager Approval</InputLabel>\n                    <Select\n                      value={closureFilters.requires_manager_approval}\n                      onChange={handleClosureFilterChange('requires_manager_approval')}\n                      label=\"Manager Approval\"\n                    >\n                      <MenuItem value=\"\">All</MenuItem>\n                      <MenuItem value=\"true\">Required</MenuItem>\n                      <MenuItem value=\"false\">Not Required</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel>Escalation</InputLabel>\n                    <Select\n                      value={closureFilters.escalation_required}\n                      onChange={handleClosureFilterChange('escalation_required')}\n                      label=\"Escalation\"\n                    >\n                      <MenuItem value=\"\">All</MenuItem>\n                      <MenuItem value=\"true\">Required</MenuItem>\n                      <MenuItem value=\"false\">Not Required</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </>\n            )}\n          </Grid>\n        </CardContent>\n      </Card>\n\n      {/* Loading */}\n      {loading && (\n        <Box display=\"flex\" justifyContent=\"center\" p={4}>\n          <CircularProgress />\n        </Box>\n      )}\n\n      {/* Tables */}\n      {!loading && (\n        <>\n          {activeTab === 0 ? renderFeedbackTable() : renderClosureTable()}\n          \n          {/* Pagination */}\n          <Box display=\"flex\" justifyContent=\"center\" mt={2}>\n            <Pagination\n              count={Math.ceil(pagination.total / pagination.limit)}\n              page={pagination.page}\n              onChange={(event, value) => setPagination(prev => ({ ...prev, page: value }))}\n              color=\"primary\"\n            />\n          </Box>\n        </>\n      )}\n\n      {/* Feedback Detail Dialog */}\n      <Dialog\n        open={!!selectedFeedback}\n        onClose={() => setSelectedFeedback(null)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Feedback Details</DialogTitle>\n        <DialogContent>\n          {selectedFeedback && (\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <Typography variant=\"body2\" color=\"text.secondary\">Customer</Typography>\n                <Typography variant=\"body1\">{selectedFeedback.customer_name}</Typography>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Typography variant=\"body2\" color=\"text.secondary\">Overall Rating</Typography>\n                <Rating value={selectedFeedback.overall_rating} readOnly />\n              </Grid>\n              <Grid item xs={12}>\n                <Typography variant=\"body2\" color=\"text.secondary\">Comments</Typography>\n                <Typography variant=\"body1\">{selectedFeedback.feedback_comments}</Typography>\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setSelectedFeedback(null)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default FeedbackStatusList;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/FeedbackWorkflow/FeedbackWorkflowDemo.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[212,223],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FeedbackStatusList' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"FeedbackStatusList"},"fix":{"range":[533,555],"text":""},"desc":"Remove unused variable 'FeedbackStatusList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'demoMode' is assigned a value but never used.","line":46,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"demoMode"},"fix":{"range":[932,940],"text":""},"desc":"Remove unused variable 'demoMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setDemoMode' is assigned a value but never used.","line":46,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setDemoMode"},"fix":{"range":[940,953],"text":""},"desc":"Remove unused variable 'setDemoMode'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":304,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":304,"endColumn":36},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":311,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":311,"endColumn":36},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":318,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":318,"endColumn":36}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Grid,\n  Chip,\n  Alert,\n  Stack,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider\n} from '@mui/material';\nimport {\n  Feedback as FeedbackIcon,\n  Assignment as AssignmentIcon,\n  CheckCircle as CheckCircleIcon,\n  Star as StarIcon,\n  TrendingUp as TrendingUpIcon,\n  Group as GroupIcon,\n  Close as CloseIcon\n} from '@mui/icons-material';\n\nimport {\n  CustomerFeedbackModal,\n  ServiceClosureDialog,\n  FeedbackStatusList\n} from '../FeedbackWorkflow';\n\ninterface FeedbackWorkflowDemoProps {\n  userRole?: 'customer' | 'manager' | 'support';\n}\n\nexport const FeedbackWorkflowDemo: React.FC<FeedbackWorkflowDemoProps> = ({\n  userRole = 'customer'\n}) => {\n  const [feedbackModalOpen, setFeedbackModalOpen] = useState(false);\n  const [closureDialogOpen, setClosureDialogOpen] = useState(false);\n  const [demoMode, setDemoMode] = useState(true);\n\n  // Mock data for demo\n  const mockJob = {\n    id: 123,\n    customerId: 456,\n    completionRecordId: 789,\n    status: 'completed',\n    description: 'AC Installation - Living Room'\n  };\n\n  const handleSubmitFeedback = async (feedbackData: any) => {\n    console.log('Demo: Submit feedback', feedbackData);\n    // In real app: await feedbackService.submitFeedback(feedbackData);\n    setFeedbackModalOpen(false);\n    alert('✅ Demo: Feedback submitted successfully!');\n  };\n\n  const handleCreateClosure = async (closureData: any) => {\n    console.log('Demo: Create service closure', closureData);\n    // In real app: await feedbackService.createServiceClosure(closureData);\n    setClosureDialogOpen(false);\n    alert('✅ Demo: Service closure created successfully!');\n  };\n\n  const renderCustomerInterface = () => (\n    <Card>\n      <CardContent>\n        <Stack spacing={2}>\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n            <GroupIcon color=\"primary\" />\n            <Typography variant=\"h6\">Customer Interface</Typography>\n          </Box>\n          \n          <Alert severity=\"info\">\n            As a customer, you can submit feedback after service completion.\n          </Alert>\n          \n          <Box>\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n              Service: {mockJob.description}\n            </Typography>\n            <Chip label=\"Completed\" color=\"success\" size=\"small\" />\n          </Box>\n          \n          <Button\n            variant=\"contained\"\n            startIcon={<FeedbackIcon />}\n            onClick={() => setFeedbackModalOpen(true)}\n            color=\"primary\"\n          >\n            Submit Service Feedback\n          </Button>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n\n  const renderManagerInterface = () => (\n    <Card>\n      <CardContent>\n        <Stack spacing={2}>\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n            <AssignmentIcon color=\"primary\" />\n            <Typography variant=\"h6\">Manager Interface</Typography>\n          </Box>\n          \n          <Alert severity=\"info\">\n            As a manager, you can approve service closures and review feedback.\n          </Alert>\n          \n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <Button\n                variant=\"contained\"\n                startIcon={<CloseIcon />}\n                onClick={() => setClosureDialogOpen(true)}\n                color=\"secondary\"\n                fullWidth\n              >\n                Close Service Ticket\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <Button\n                variant=\"outlined\"\n                startIcon={<TrendingUpIcon />}\n                onClick={() => alert('Demo: Analytics feature')}\n                fullWidth\n              >\n                View Analytics\n              </Button>\n            </Grid>\n          </Grid>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n\n  const renderWorkflowSteps = () => (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Feedback & Closure Workflow\n        </Typography>\n        \n        <List>\n          <ListItem>\n            <ListItemIcon>\n              <CheckCircleIcon color=\"success\" />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"1. Service Completion\"\n              secondary=\"Technician marks installation job as complete\"\n            />\n          </ListItem>\n          \n          <ListItem>\n            <ListItemIcon>\n              <FeedbackIcon color=\"primary\" />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"2. Customer Feedback\"\n              secondary=\"Automated feedback request sent to customer\"\n            />\n          </ListItem>\n          \n          <ListItem>\n            <ListItemIcon>\n              <AssignmentIcon color=\"secondary\" />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"3. Manager Review\"\n              secondary=\"Manager reviews feedback and approves service closure\"\n            />\n          </ListItem>\n          \n          <ListItem>\n            <ListItemIcon>\n              <CloseIcon color=\"action\" />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"4. Service Closure\"\n              secondary=\"Ticket closed with satisfaction metrics recorded\"\n            />\n          </ListItem>\n        </List>\n      </CardContent>\n    </Card>\n  );\n\n  const renderFeatures = () => (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Key Features\n        </Typography>\n        \n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <Paper variant=\"outlined\" sx={{ p: 2 }}>\n              <Stack spacing={1}>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  <StarIcon color=\"warning\" />\n                  <Typography variant=\"subtitle2\">Comprehensive Rating</Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  • Overall service rating (1-5 stars)\n                  • Individual ratings: quality, technician, timeliness\n                  • Customer satisfaction levels\n                  • Recommendation tracking\n                </Typography>\n              </Stack>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12} sm={6}>\n            <Paper variant=\"outlined\" sx={{ p: 2 }}>\n              <Stack spacing={1}>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  <AssignmentIcon color=\"primary\" />\n                  <Typography variant=\"subtitle2\">Manager Approval</Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  • Service closure workflow\n                  • Manager approval required\n                  • Escalation for low ratings\n                  • Reopening capability\n                </Typography>\n              </Stack>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12} sm={6}>\n            <Paper variant=\"outlined\" sx={{ p: 2 }}>\n              <Stack spacing={1}>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  <TrendingUpIcon color=\"success\" />\n                  <Typography variant=\"subtitle2\">Analytics & Insights</Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  • Satisfaction rate tracking\n                  • Service quality metrics\n                  • Performance trends\n                  • Customer sentiment analysis\n                </Typography>\n              </Stack>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12} sm={6}>\n            <Paper variant=\"outlined\" sx={{ p: 2 }}>\n              <Stack spacing={1}>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  <GroupIcon color=\"info\" />\n                  <Typography variant=\"subtitle2\">Role-based Access</Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  • Customer feedback submission\n                  • Manager approval controls\n                  • Support team review access\n                  • Organization-scoped data\n                </Typography>\n              </Stack>\n            </Paper>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Customer Feedback & Service Closure Workflow\n      </Typography>\n      \n      <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n        Complete vertical slice for collecting customer feedback and managing service closures\n        with role-based access control and analytics.\n      </Typography>\n\n      <Alert severity=\"success\" sx={{ mb: 3 }}>\n        ✅ <strong>Implementation Complete</strong> - All backend APIs, frontend components, \n        database migrations, and RBAC integration are ready for production use.\n      </Alert>\n\n      <Grid container spacing={3}>\n        {/* Role Switcher */}\n        <Grid item xs={12}>\n          <Card variant=\"outlined\">\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Demo Mode - Switch User Role\n              </Typography>\n              <Stack direction=\"row\" spacing={1}>\n                <Button\n                  variant={userRole === 'customer' ? 'contained' : 'outlined'}\n                  onClick={() => {}}\n                  size=\"small\"\n                >\n                  Customer View\n                </Button>\n                <Button\n                  variant={userRole === 'manager' ? 'contained' : 'outlined'}\n                  onClick={() => {}}\n                  size=\"small\"\n                >\n                  Manager View\n                </Button>\n                <Button\n                  variant={userRole === 'support' ? 'contained' : 'outlined'}\n                  onClick={() => {}}\n                  size=\"small\"\n                >\n                  Support View\n                </Button>\n              </Stack>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* User Interface */}\n        <Grid item xs={12} md={6}>\n          {userRole === 'customer' ? renderCustomerInterface() : renderManagerInterface()}\n        </Grid>\n\n        {/* Workflow Steps */}\n        <Grid item xs={12} md={6}>\n          {renderWorkflowSteps()}\n        </Grid>\n\n        {/* Features */}\n        <Grid item xs={12}>\n          {renderFeatures()}\n        </Grid>\n      </Grid>\n\n      {/* Modals */}\n      <CustomerFeedbackModal\n        open={feedbackModalOpen}\n        onClose={() => setFeedbackModalOpen(false)}\n        installationJobId={mockJob.id}\n        customerId={mockJob.customerId}\n        completionRecordId={mockJob.completionRecordId}\n        onSubmit={handleSubmitFeedback}\n      />\n\n      <ServiceClosureDialog\n        open={closureDialogOpen}\n        onClose={() => setClosureDialogOpen(false)}\n        installationJobId={mockJob.id}\n        completionRecordId={mockJob.completionRecordId}\n        customerFeedbackId={123}\n        userRole={userRole}\n        onSubmit={handleCreateClosure}\n      />\n    </Box>\n  );\n};\n\nexport default FeedbackWorkflowDemo;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/FeedbackWorkflow/FeedbackWorkflowIntegration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/FeedbackWorkflow/ServiceClosureDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[246,257],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'closureData' is defined but never used.","line":46,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"closureData"},"fix":{"range":[791,807],"text":""},"desc":"Remove unused variable 'closureData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'steps' is assigned a value but never used.","line":236,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"steps"},"fix":{"range":[6202,6298],"text":""},"desc":"Remove unused variable 'steps'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  Alert,\n  CircularProgress,\n  Divider,\n  Grid,\n  Card,\n  CardContent,\n  Chip,\n  FormControlLabel,\n  Switch,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent\n} from '@mui/material';\nimport {\n  CheckCircle as CheckCircleIcon,\n  Cancel as CancelIcon,\n  Warning as WarningIcon,\n  Assignment as AssignmentIcon,\n  VerifiedUser as VerifiedUserIcon,\n  Lock as LockIcon\n} from '@mui/icons-material';\n\ninterface ServiceClosureDialogProps {\n  open: boolean;\n  onClose: () => void;\n  installationJobId: number;\n  completionRecordId?: number;\n  customerFeedbackId?: number;\n  onSubmit: (closureData: any) => Promise<void>;\n  currentClosure?: any;\n  userRole: string;\n}\n\nconst CLOSURE_REASONS = [\n  { value: 'completed', label: 'Service Completed Successfully', icon: CheckCircleIcon, color: 'success' },\n  { value: 'cancelled', label: 'Service Cancelled', icon: CancelIcon, color: 'error' },\n  { value: 'customer_request', label: 'Customer Request', icon: AssignmentIcon, color: 'info' },\n  { value: 'no_show', label: 'Customer No-Show', icon: WarningIcon, color: 'warning' }\n];\n\nconst CLOSURE_STATUS_CONFIG = {\n  pending: { label: 'Pending', color: 'warning', icon: WarningIcon },\n  approved: { label: 'Approved', color: 'info', icon: VerifiedUserIcon },\n  closed: { label: 'Closed', color: 'success', icon: CheckCircleIcon },\n  reopened: { label: 'Reopened', color: 'error', icon: CancelIcon }\n};\n\nexport const ServiceClosureDialog: React.FC<ServiceClosureDialogProps> = ({\n  open,\n  onClose,\n  installationJobId,\n  completionRecordId,\n  customerFeedbackId,\n  onSubmit,\n  currentClosure,\n  userRole\n}) => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [action, setAction] = useState<'create' | 'approve' | 'close' | 'reopen'>('create');\n  const [formData, setFormData] = useState({\n    closure_reason: 'completed',\n    closure_notes: '',\n    requires_manager_approval: true,\n    approval_notes: '',\n    final_closure_notes: '',\n    escalation_required: false,\n    escalation_reason: '',\n    reopening_reason: ''\n  });\n  const [error, setError] = useState<string | null>(null);\n\n  const isManager = userRole === 'manager' || userRole === 'admin';\n  const canApprove = isManager && currentClosure?.closure_status === 'pending';\n  const canClose = isManager && (currentClosure?.closure_status === 'approved' || currentClosure?.closure_status === 'pending');\n  const canReopen = isManager && currentClosure?.closure_status === 'closed';\n\n  const handleTextChange = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n\n  const handleSelectChange = (field: string) => (event: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: event.target.value\n    }));\n  };\n\n  const handleSwitchChange = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: event.target.checked\n    }));\n  };\n\n  const getStepContent = () => {\n    if (!currentClosure) {\n      return 0; // Create new closure\n    }\n    \n    switch (currentClosure.closure_status) {\n      case 'pending':\n        return 1;\n      case 'approved':\n        return 2;\n      case 'closed':\n        return 3;\n      case 'reopened':\n        return 1; // Back to pending\n      default:\n        return 0;\n    }\n  };\n\n  const handleSubmit = async () => {\n    setError(null);\n    setIsSubmitting(true);\n    \n    try {\n      let submitData: any;\n      \n      switch (action) {\n        case 'create':\n          submitData = {\n            installation_job_id: installationJobId,\n            completion_record_id: completionRecordId,\n            customer_feedback_id: customerFeedbackId,\n            closure_reason: formData.closure_reason,\n            closure_notes: formData.closure_notes,\n            requires_manager_approval: formData.requires_manager_approval,\n            escalation_required: formData.escalation_required,\n            escalation_reason: formData.escalation_required ? formData.escalation_reason : undefined\n          };\n          break;\n        \n        case 'approve':\n          submitData = {\n            action: 'approve',\n            approval_notes: formData.approval_notes\n          };\n          break;\n        \n        case 'close':\n          submitData = {\n            action: 'close',\n            final_closure_notes: formData.final_closure_notes\n          };\n          break;\n        \n        case 'reopen':\n          submitData = {\n            action: 'reopen',\n            reopening_reason: formData.reopening_reason\n          };\n          break;\n      }\n      \n      await onSubmit(submitData);\n      onClose();\n    } catch (err: any) {\n      setError(err.message || 'Failed to process service closure');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      closure_reason: 'completed',\n      closure_notes: '',\n      requires_manager_approval: true,\n      approval_notes: '',\n      final_closure_notes: '',\n      escalation_required: false,\n      escalation_reason: '',\n      reopening_reason: ''\n    });\n    setAction('create');\n    setError(null);\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  const getDialogTitle = () => {\n    if (currentClosure) {\n      switch (action) {\n        case 'approve':\n          return 'Approve Service Closure';\n        case 'close':\n          return 'Close Service Ticket';\n        case 'reopen':\n          return 'Reopen Service Ticket';\n        default:\n          return 'Service Closure Details';\n      }\n    }\n    return 'Create Service Closure';\n  };\n\n  const getSubmitButtonText = () => {\n    switch (action) {\n      case 'approve':\n        return 'Approve Closure';\n      case 'close':\n        return 'Close Service';\n      case 'reopen':\n        return 'Reopen Service';\n      default:\n        return 'Create Closure Request';\n    }\n  };\n\n  const renderWorkflowStepper = () => {\n    const steps = [\n      'Closure Requested',\n      'Manager Review',\n      'Service Closed'\n    ];\n\n    const activeStep = getStepContent();\n\n    return (\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Closure Workflow\n        </Typography>\n        <Stepper activeStep={activeStep} orientation=\"vertical\">\n          <Step>\n            <StepLabel>Closure Requested</StepLabel>\n            <StepContent>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Service closure request has been created and is pending review.\n              </Typography>\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel>Manager Review</StepLabel>\n            <StepContent>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Manager is reviewing the closure request and customer feedback.\n              </Typography>\n            </StepContent>\n          </Step>\n          <Step>\n            <StepLabel>Service Closed</StepLabel>\n            <StepContent>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Service has been officially closed and archived.\n              </Typography>\n            </StepContent>\n          </Step>\n        </Stepper>\n      </Box>\n    );\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      maxWidth=\"md\"\n      fullWidth\n      scroll=\"paper\"\n    >\n      <DialogTitle>\n        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n          <AssignmentIcon color=\"primary\" />\n          <Typography variant=\"h6\">{getDialogTitle()}</Typography>\n          {currentClosure && (\n            <Chip\n              size=\"small\"\n              label={CLOSURE_STATUS_CONFIG[currentClosure.closure_status as keyof typeof CLOSURE_STATUS_CONFIG]?.label}\n              color={CLOSURE_STATUS_CONFIG[currentClosure.closure_status as keyof typeof CLOSURE_STATUS_CONFIG]?.color as any}\n              icon={React.createElement(CLOSURE_STATUS_CONFIG[currentClosure.closure_status as keyof typeof CLOSURE_STATUS_CONFIG]?.icon)}\n            />\n          )}\n        </Box>\n      </DialogTitle>\n\n      <DialogContent dividers>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {currentClosure && renderWorkflowStepper()}\n\n        <Grid container spacing={3}>\n          {/* Action Selection for Existing Closures */}\n          {currentClosure && isManager && (\n            <Grid item xs={12}>\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Manager Actions\n                  </Typography>\n                  <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                    {canApprove && (\n                      <Button\n                        variant={action === 'approve' ? 'contained' : 'outlined'}\n                        color=\"success\"\n                        startIcon={<VerifiedUserIcon />}\n                        onClick={() => setAction('approve')}\n                      >\n                        Approve\n                      </Button>\n                    )}\n                    {canClose && (\n                      <Button\n                        variant={action === 'close' ? 'contained' : 'outlined'}\n                        color=\"primary\"\n                        startIcon={<CheckCircleIcon />}\n                        onClick={() => setAction('close')}\n                      >\n                        Close Service\n                      </Button>\n                    )}\n                    {canReopen && (\n                      <Button\n                        variant={action === 'reopen' ? 'contained' : 'outlined'}\n                        color=\"warning\"\n                        startIcon={<CancelIcon />}\n                        onClick={() => setAction('reopen')}\n                      >\n                        Reopen\n                      </Button>\n                    )}\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          )}\n\n          {/* Create New Closure Form */}\n          {!currentClosure && (\n            <>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Closure Reason</InputLabel>\n                  <Select\n                    value={formData.closure_reason}\n                    onChange={handleSelectChange('closure_reason')}\n                    label=\"Closure Reason\"\n                  >\n                    {CLOSURE_REASONS.map((reason) => (\n                      <MenuItem key={reason.value} value={reason.value}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <reason.icon color={reason.color as any} fontSize=\"small\" />\n                          {reason.label}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.requires_manager_approval}\n                      onChange={handleSwitchChange('requires_manager_approval')}\n                      color=\"primary\"\n                    />\n                  }\n                  label={\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <LockIcon fontSize=\"small\" />\n                      Requires Manager Approval\n                    </Box>\n                  }\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  multiline\n                  rows={3}\n                  label=\"Closure Notes\"\n                  placeholder=\"Describe the reason for closure...\"\n                  value={formData.closure_notes}\n                  onChange={handleTextChange('closure_notes')}\n                />\n              </Grid>\n\n              <Grid item xs={12} sm={6}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.escalation_required}\n                      onChange={handleSwitchChange('escalation_required')}\n                      color=\"warning\"\n                    />\n                  }\n                  label={\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <WarningIcon fontSize=\"small\" />\n                      Escalation Required\n                    </Box>\n                  }\n                />\n              </Grid>\n\n              {formData.escalation_required && (\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    multiline\n                    rows={2}\n                    label=\"Escalation Reason\"\n                    placeholder=\"Explain why escalation is required...\"\n                    value={formData.escalation_reason}\n                    onChange={handleTextChange('escalation_reason')}\n                  />\n                </Grid>\n              )}\n            </>\n          )}\n\n          {/* Approval Form */}\n          {action === 'approve' && (\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                label=\"Approval Notes\"\n                placeholder=\"Add notes about the approval...\"\n                value={formData.approval_notes}\n                onChange={handleTextChange('approval_notes')}\n              />\n            </Grid>\n          )}\n\n          {/* Final Closure Form */}\n          {action === 'close' && (\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                label=\"Final Closure Notes\"\n                placeholder=\"Add final notes before closing the service...\"\n                value={formData.final_closure_notes}\n                onChange={handleTextChange('final_closure_notes')}\n              />\n            </Grid>\n          )}\n\n          {/* Reopen Form */}\n          {action === 'reopen' && (\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                label=\"Reopening Reason *\"\n                placeholder=\"Explain why the service needs to be reopened...\"\n                value={formData.reopening_reason}\n                onChange={handleTextChange('reopening_reason')}\n                required\n              />\n            </Grid>\n          )}\n\n          {/* Current Closure Details */}\n          {currentClosure && action === 'create' && (\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Closure Details\n                  </Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Reason\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        {CLOSURE_REASONS.find(r => r.value === currentClosure.closure_reason)?.label || currentClosure.closure_reason}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Created At\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        {new Date(currentClosure.created_at).toLocaleDateString()}\n                      </Typography>\n                    </Grid>\n                    {currentClosure.closure_notes && (\n                      <Grid item xs={12}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Notes\n                        </Typography>\n                        <Typography variant=\"body1\">\n                          {currentClosure.closure_notes}\n                        </Typography>\n                      </Grid>\n                    )}\n                    {currentClosure.escalation_required && (\n                      <Grid item xs={12}>\n                        <Alert severity=\"warning\">\n                          <Typography variant=\"body2\">\n                            <strong>Escalation Required:</strong> {currentClosure.escalation_reason}\n                          </Typography>\n                        </Alert>\n                      </Grid>\n                    )}\n                  </Grid>\n                </CardContent>\n              </Card>\n            </Grid>\n          )}\n        </Grid>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={handleClose} disabled={isSubmitting}>\n          Cancel\n        </Button>\n        {(action !== 'create' || !currentClosure) && (\n          <Button\n            onClick={handleSubmit}\n            variant=\"contained\"\n            disabled={\n              isSubmitting || \n              (action === 'reopen' && !formData.reopening_reason.trim())\n            }\n            startIcon={isSubmitting ? <CircularProgress size={20} /> : <AssignmentIcon />}\n          >\n            {isSubmitting ? 'Processing...' : getSubmitButtonText()}\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ServiceClosureDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/FeedbackWorkflow/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ForgotPasswordModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/IntegrationDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Table"},"fix":{"range":[469,478],"text":""},"desc":"Remove unused variable 'Table'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableBody"},"fix":{"range":[478,491],"text":""},"desc":"Remove unused variable 'TableBody'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableCell"},"fix":{"range":[491,504],"text":""},"desc":"Remove unused variable 'TableCell'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableContainer"},"fix":{"range":[504,522],"text":""},"desc":"Remove unused variable 'TableContainer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableHead"},"fix":{"range":[522,535],"text":""},"desc":"Remove unused variable 'TableHead'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableRow"},"fix":{"range":[535,547],"text":""},"desc":"Remove unused variable 'TableRow'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Switch"},"fix":{"range":[547,557],"text":""},"desc":"Remove unused variable 'Switch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[557,577],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"LinearProgress"},"fix":{"range":[588,606],"text":""},"desc":"Remove unused variable 'LinearProgress'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Badge"},"fix":{"range":[606,615],"text":""},"desc":"Remove unused variable 'Badge'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[705,713],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PlayArrow' is defined but never used.","line":56,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"PlayArrow"},"fix":{"range":[824,837],"text":""},"desc":"Remove unused variable 'PlayArrow'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":96,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1914,1941],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadDashboardData' was used before it was defined.","line":105,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":105,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Paper' is not defined.","line":306,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":306,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'Paper' is not defined.","line":306,"column":8,"nodeType":"JSXIdentifier","messageId":"undef","endLine":306,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'Paper' is not defined.","line":346,"column":9,"nodeType":"JSXIdentifier","messageId":"undef","endLine":346,"endColumn":14}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Integration Dashboard Component\n * \n * Centralized dashboard for managing all external integrations (Tally, email, calendar, payment, Zoho, etc.)\n * with health status, sync info, and access control.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  Chip,\n  IconButton,\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Switch,\n  FormControlLabel,\n  Divider,\n  LinearProgress,\n  Badge\n} from '@mui/material';\nimport {\n  Settings,\n  CheckCircle,\n  Error,\n  Warning,\n  Refresh,\n  Edit,\n  Add,\n  Sync,\n  Timeline,\n  Security,\n  Email,\n  CalendarToday,\n  Payment,\n  AccountBalance,\n  Cloud,\n  Info,\n  PlayArrow,\n  History\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport axios from 'axios';\n\nexport interface IntegrationHealthStatus {\n  integration_name: string;\n  status: 'healthy' | 'warning' | 'error' | 'disconnected';\n  last_sync_at?: string;\n  sync_frequency?: string;\n  error_count: number;\n  configuration_valid: boolean;\n  performance_metrics?: {\n    last_sync_duration?: string;\n    records_synced?: number;\n    avg_response_time?: string;\n  };\n}\n\nexport interface IntegrationDashboardData {\n  tally_integration: IntegrationHealthStatus;\n  email_integration: IntegrationHealthStatus;\n  calendar_integration: IntegrationHealthStatus;\n  payment_integration: IntegrationHealthStatus;\n  zoho_integration: IntegrationHealthStatus;\n  system_health: {\n    database_status: string;\n    api_response_time: string;\n    last_backup: string;\n    storage_usage: string;\n  };\n}\n\ninterface IntegrationDashboardProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nconst IntegrationDashboard: React.FC<IntegrationDashboardProps> = ({ open, onClose }) => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [dashboardData, setDashboardData] = useState<IntegrationDashboardData | null>(null);\n  const [err, setErr] = useState<string | null>(null);\n  const [selectedIntegration, setSelectedIntegration] = useState<string | null>(null);\n  const [configDialogOpen, setConfigDialogOpen] = useState(false);\n\n  useEffect(() => {\n    if (open) {\n      loadDashboardData();\n    }\n  }, [open]);\n\n  const loadDashboardData = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('/api/v1/integrations/dashboard');\n      setDashboardData(response.data);\n    } catch (error) {\n      console.error('Failed to load dashboard data:', error);\n      setErr('Failed to load integration dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const syncIntegration = async (integrationName: string) => {\n    setLoading(true);\n    try {\n      await axios.post(`/api/v1/integrations/${integrationName}/sync`);\n      await loadDashboardData();\n    } catch (error) {\n      console.error(`Failed to sync ${integrationName}:`, error);\n      setErr(`Failed to sync ${integrationName}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testConnection = async (integrationName: string) => {\n    setLoading(true);\n    try {\n      await axios.post(`/api/v1/integrations/${integrationName}/test`);\n      await loadDashboardData();\n    } catch (error) {\n      console.error(`Failed to test ${integrationName}:`, error);\n      setErr(`Failed to test connection for ${integrationName}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'healthy':\n        return 'success';\n      case 'warning':\n        return 'warning';\n      case 'error':\n        return 'error';\n      case 'disconnected':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'healthy':\n        return <CheckCircle color=\"success\" />;\n      case 'warning':\n        return <Warning color=\"warning\" />;\n      case 'error':\n        return <Error color=\"error\" />;\n      case 'disconnected':\n        return <Error color=\"disabled\" />;\n      default:\n        return <Info />;\n    }\n  };\n\n  const getIntegrationIcon = (name: string) => {\n    switch (name.toLowerCase()) {\n      case 'tally':\n        return <AccountBalance />;\n      case 'email':\n        return <Email />;\n      case 'calendar':\n        return <CalendarToday />;\n      case 'payment':\n        return <Payment />;\n      case 'zoho':\n        return <Cloud />;\n      default:\n        return <Settings />;\n    }\n  };\n\n  const renderIntegrationCard = (integration: IntegrationHealthStatus) => (\n    <Card key={integration.integration_name} sx={{ height: '100%' }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {getIntegrationIcon(integration.integration_name)}\n            <Typography variant=\"h6\">\n              {integration.integration_name}\n            </Typography>\n          </Box>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {getStatusIcon(integration.status)}\n            <Chip \n              label={integration.status} \n              color={getStatusColor(integration.status) as any}\n              size=\"small\"\n            />\n          </Box>\n        </Box>\n\n        <Divider sx={{ mb: 2 }} />\n\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Last Sync: {integration.last_sync_at \n              ? new Date(integration.last_sync_at).toLocaleString()\n              : 'Never'\n            }\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Frequency: {integration.sync_frequency || 'Manual'}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Errors: {integration.error_count}\n          </Typography>\n        </Box>\n\n        {integration.performance_metrics && (\n          <Box sx={{ mb: 2 }}>\n            <Typography variant=\"caption\" color=\"text.secondary\" gutterBottom display=\"block\">\n              Performance Metrics:\n            </Typography>\n            {integration.performance_metrics.last_sync_duration && (\n              <Typography variant=\"body2\" fontSize=\"0.75rem\">\n                Last Sync: {integration.performance_metrics.last_sync_duration}\n              </Typography>\n            )}\n            {integration.performance_metrics.records_synced && (\n              <Typography variant=\"body2\" fontSize=\"0.75rem\">\n                Records: {integration.performance_metrics.records_synced}\n              </Typography>\n            )}\n            {integration.performance_metrics.avg_response_time && (\n              <Typography variant=\"body2\" fontSize=\"0.75rem\">\n                Response Time: {integration.performance_metrics.avg_response_time}\n              </Typography>\n            )}\n          </Box>\n        )}\n\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n          <Tooltip title=\"Test Connection\">\n            <IconButton \n              size=\"small\" \n              onClick={() => testConnection(integration.integration_name)}\n              disabled={loading}\n            >\n              <Refresh />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Sync Now\">\n            <IconButton \n              size=\"small\" \n              onClick={() => syncIntegration(integration.integration_name)}\n              disabled={loading}\n            >\n              <Sync />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Configure\">\n            <IconButton \n              size=\"small\" \n              onClick={() => {\n                setSelectedIntegration(integration.integration_name);\n                setConfigDialogOpen(true);\n              }}\n            >\n              <Settings />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"View History\">\n            <IconButton \n              size=\"small\"\n              onClick={() => {\n                // Navigate to integration history\n              }}\n            >\n              <History />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n\n  const renderSystemHealth = () => {\n    if (!dashboardData?.system_health) {return null;}\n\n    const { system_health } = dashboardData;\n\n    return (\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Timeline />\n          System Health\n        </Typography>\n        \n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"caption\" color=\"text.secondary\">Database</Typography>\n              <Typography variant=\"h6\" color={system_health.database_status === 'healthy' ? 'success.main' : 'error.main'}>\n                {system_health.database_status}\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"caption\" color=\"text.secondary\">API Response</Typography>\n              <Typography variant=\"h6\">\n                {system_health.api_response_time}\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"caption\" color=\"text.secondary\">Last Backup</Typography>\n              <Typography variant=\"body2\">\n                {new Date(system_health.last_backup).toLocaleDateString()}\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"caption\" color=\"text.secondary\">Storage Usage</Typography>\n              <Typography variant=\"h6\">\n                {system_health.storage_usage}\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      maxWidth=\"xl\" \n      fullWidth\n      PaperProps={{ sx: { minHeight: '80vh' } }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Timeline />\n            Integration Dashboard\n          </Box>\n          <Button\n            startIcon={<Refresh />}\n            onClick={loadDashboardData}\n            disabled={loading}\n          >\n            Refresh All\n          </Button>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent>\n        {loading && !dashboardData && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {err && (\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setErr(null)}>\n            {err}\n          </Alert>\n        )}\n\n        {dashboardData && (\n          <>\n            {renderSystemHealth()}\n            \n            <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <Settings />\n              Active Integrations\n            </Typography>\n\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.tally_integration)}\n              </Grid>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.email_integration)}\n              </Grid>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.calendar_integration)}\n              </Grid>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.payment_integration)}\n              </Grid>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.zoho_integration)}\n              </Grid>\n            </Grid>\n\n            <Box sx={{ mt: 4 }}>\n              <Typography variant=\"h6\" gutterBottom>Quick Actions</Typography>\n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                <Button variant=\"outlined\" startIcon={<Add />}>\n                  Add Integration\n                </Button>\n                <Button variant=\"outlined\" startIcon={<Security />}>\n                  Manage Permissions\n                </Button>\n                <Button variant=\"outlined\" startIcon={<Timeline />}>\n                  View Analytics\n                </Button>\n              </Box>\n            </Box>\n          </>\n        )}\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n\n      {/* Configuration Dialog */}\n      <Dialog\n        open={configDialogOpen}\n        onClose={() => setConfigDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Configure {selectedIntegration}\n        </DialogTitle>\n        <DialogContent>\n          <Typography>\n            Configuration interface for {selectedIntegration} would be loaded here.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setConfigDialogOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\">Save</Button>\n        </DialogActions>\n      </Dialog>\n    </Dialog>\n  );\n};\n\nexport default IntegrationDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/LoginForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[39,50],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":19,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"token"},"fix":{"range":[391,405],"text":""},"desc":"Remove unused variable 'token'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":19,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[404,425],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_router' is assigned a value but never used.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"_router"},"fix":{"range":[815,843],"text":""},"desc":"Remove unused variable '_router'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 29 column 10.","line":48,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":48,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 29 column 10.","line":48,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":48,"endColumn":24}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Box,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  CircularProgress\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useRouter } from 'next/navigation';\nimport { authService } from '../services/authService';\n\ninterface LoginFormProps {\n  onLogin: (token: string, loginResponse?: any) => void;\n}\n\ninterface LoginFormData {\n  email: string;\n  password: string;\n}\n\nconst LoginForm: React.FC<LoginFormProps> = ({ onLogin }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { control, handleSubmit, formState: { errors } } = useForm<LoginFormData>({\n    defaultValues: {\n      email: '',\n      password: ''\n    }\n  });\n  const _router = useRouter(); // Prefixed unused router\n\n  const onSubmit = async (data: LoginFormData) => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      const response = await authService.loginWithEmail(data.email, data.password);\n      \n      // Store user info - removed redundant localStorage sets since AuthContext handles it\n      onLogin(response.access_token, response);\n    } catch (error: any) {\n      // Better error handling to prevent flicker\n      const errorMessage = error.message || error.response?.data?.detail || 'Login failed. Please check your credentials.';\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent sx={{ p: 4 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom align=\"center\">\n          Standard Login\n        </Typography>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        <Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>\n          <Controller\n            name=\"email\"\n            control={control}\n            rules={{\n              required: 'Email is required',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: 'Invalid email address'\n              }\n            }}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                fullWidth\n                label=\"Email Address\"\n                type=\"email\"\n                variant=\"outlined\"\n                slotProps={{\n                  inputLabel: {\n                    shrink: field.value ? true : undefined\n                  }\n                }}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n                margin=\"normal\"\n                autoComplete=\"email\"\n                autoFocus\n              />\n            )}\n          />\n\n          <Controller\n            name=\"password\"\n            control={control}\n            rules={{\n              required: 'Password is required'\n            }}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                fullWidth\n                label=\"Password\"\n                type=\"password\"\n                variant=\"outlined\"\n                slotProps={{\n                  inputLabel: {\n                    shrink: field.value ? true : undefined\n                  }\n                }}\n                error={!!errors.password}\n                helperText={errors.password?.message}\n                margin=\"normal\"\n                autoComplete=\"current-password\"\n              />\n            )}\n          />\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Login'}\n          </Button>\n        </Box>\n\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n          Use your email and password to login, or try OTP authentication for enhanced security.\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default LoginForm;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/MegaMenu.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItem"},"fix":{"range":[161,173],"text":""},"desc":"Remove unused variable 'ListItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[256,267],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AdminPanelSettings' is defined but never used.","line":51,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"AdminPanelSettings"},"fix":{"range":[692,714],"text":""},"desc":"Remove unused variable 'AdminPanelSettings'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'LockOutlined' is defined but never used.","line":61,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"LockOutlined"},"fix":{"range":[848,864],"text":""},"desc":"Remove unused variable 'LockOutlined'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ServiceDeskIcon' is defined but never used.","line":74,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"ServiceDeskIcon"},"fix":{"range":[1013,1048],"text":""},"desc":"Remove unused variable 'ServiceDeskIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckBox' is defined but never used.","line":80,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckBox"},"fix":{"range":[1109,1121],"text":""},"desc":"Remove unused variable 'CheckBox'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'handleMenuClose' was used before it was defined.","line":173,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":173,"endColumn":26},{"ruleId":"no-use-before-define","severity":2,"message":"'handleUserMenuClose' was used before it was defined.","line":176,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":176,"endColumn":30},{"ruleId":"no-use-before-define","severity":2,"message":"'handleSubClose' was used before it was defined.","line":179,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":179,"endColumn":25},{"ruleId":"no-use-before-define","severity":2,"message":"'handleMenuClose' was used before it was defined.","line":219,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":219,"endColumn":20},{"ruleId":"no-use-before-define","severity":2,"message":"'handleSubClose' was used before it was defined.","line":220,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":220,"endColumn":19},{"ruleId":"no-use-before-define","severity":2,"message":"'handleMenuClose' was used before it was defined.","line":225,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":225,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'_isOrgAdmin' is assigned a value but never used.","line":229,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":229,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"_isOrgAdmin"},"fix":{"range":[6512,6554],"text":""},"desc":"Remove unused variable '_isOrgAdmin'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_canManage' is assigned a value but never used.","line":230,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":230,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"_canManage"},"fix":{"range":[6557,6597],"text":""},"desc":"Remove unused variable '_canManage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_canShowUserMgmtInMenu' is assigned a value but never used.","line":231,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":231,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"_canShowUserMgmtInMenu"},"fix":{"range":[6600,6669],"text":""},"desc":"Remove unused variable '_canShowUserMgmtInMenu'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'canAccessServiceFeatures' is assigned a value but never used.","line":239,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":239,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"canAccessServiceFeatures"},"fix":{"range":[6991,7434],"text":""},"desc":"Remove unused variable 'canAccessServiceFeatures'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'canAccessServiceAnalytics' is assigned a value but never used.","line":252,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":252,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"canAccessServiceAnalytics"},"fix":{"range":[7437,7567],"text":""},"desc":"Remove unused variable 'canAccessServiceAnalytics'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'canManageServiceRoles' is assigned a value but never used.","line":255,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":255,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"canManageServiceRoles"},"fix":{"range":[7570,7710],"text":""},"desc":"Remove unused variable 'canManageServiceRoles'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isModuleEnabled' is assigned a value but never used.","line":259,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":259,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"isModuleEnabled"},"fix":{"range":[7778,8151],"text":""},"desc":"Remove unused variable 'isModuleEnabled'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDemoMode' is assigned a value but never used.","line":268,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":268,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDemoMode"},"fix":{"range":[8154,8267],"text":""},"desc":"Remove unused variable 'handleDemoMode'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'handleMenuClose' was used before it was defined.","line":271,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":271,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'handleContactSupport' is assigned a value but never used.","line":273,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":273,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleContactSupport"},"fix":{"range":[8270,8542],"text":""},"desc":"Remove unused variable 'handleContactSupport'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleCreateOrgLicense' is assigned a value but never used.","line":289,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":289,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleCreateOrgLicense"},"fix":{"range":[8830,9064],"text":""},"desc":"Remove unused variable '_handleCreateOrgLicense'."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useEffect, useRef } from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  Menu,\n  MenuItem,\n  Box,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  IconButton,\n  ListItemButton,\n  Grid,\n  Tooltip,\n  InputBase\n} from '@mui/material';\nimport {\n  Dashboard,\n  Receipt,\n  Inventory,\n  People,\n  Business,\n  Assessment,\n  Settings,\n  AccountCircle,\n  ExpandMore,\n  ShoppingCart,\n  LocalShipping,\n  AccountBalance,\n  SwapHoriz,\n  TrendingUp,\n  BarChart,\n  Security,\n  Storage,\n  Build,\n  ReceiptLong,\n  NoteAdd,\n  AddBusiness,\n  DeveloperMode,\n  Analytics,\n  SupervisorAccount,\n  Engineering,\n  Schedule,\n  Payment,\n  Feedback,\n  AdminPanelSettings,\n  NotificationsActive,\n  History,\n  CloudUpload,\n  SupportAgent,\n  Assignment,\n  Timeline,\n  Groups,\n  CorporateFare,\n  ChevronRight,\n  LockOutlined,\n  Person,\n  ContactPhone,\n  PersonAdd,\n  AssignmentTurnedIn,\n  MonetizationOn,\n  Campaign,\n  LocalOffer,\n  Email,\n  Sms,\n  Chat,\n  SmartToy,\n  Poll,\n  SupportAgent as ServiceDeskIcon,\n  Task,\n  CalendarToday,\n  EventNote,\n  Alarm,\n  AccessTime,\n  CheckBox,\n  Inbox,\n  Send,\n  Drafts,\n  Menu as MenuIcon,\n  Search as SearchIcon\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\nimport CreateOrganizationLicenseModal from './CreateOrganizationLicenseModal';\nimport { isAppSuperAdmin, isOrgSuperAdmin, canManageUsers, canShowUserManagementInMegaMenu } from '../types/user.types';\nimport { useQuery } from '@tanstack/react-query';\nimport { companyService } from '../services/authService';\nimport { rbacService, SERVICE_PERMISSIONS } from '../services/rbacService';\nimport { organizationService } from '../services/organizationService';\ninterface MegaMenuProps {\n  user?: any;\n  onLogout: () => void;\n  isVisible?: boolean;\n}\nconst MegaMenu: React.FC<MegaMenuProps> = ({ user, onLogout, isVisible = true }) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [userMenuAnchor, setUserMenuAnchor] = useState<null | HTMLElement>(null);\n  const [activeMenu, setActiveMenu] = useState<string | null>(null);\n  const [subAnchorEl, setSubAnchorEl] = useState<null | HTMLElement>(null);\n  const [activeSubCategory, setActiveSubCategory] = useState<any>(null);\n  const [createLicenseModalOpen, setCreateLicenseModalOpen] = useState(false);\n  const [selectedSection, setSelectedSection] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filteredMenuItems, setFilteredMenuItems] = useState<any[]>([]);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const router = useRouter();\n  // Common button style for enhanced UI/UX\n  const modernButtonStyle = {\n    mx: 1,\n    transition: 'all 0.2s ease-in-out',\n    borderRadius: 2,\n    '&:hover': {\n      transform: 'translateY(-2px)',\n      backgroundColor: 'rgba(59, 130, 246, 0.1)',\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n    },\n    '&:focus': {\n      outline: '2px solid',\n      outlineColor: 'primary.main',\n      outlineOffset: '2px',\n    },\n    '&:active': {\n      transform: 'translateY(0) scale(0.98)',\n    }\n  };\n  // Query for company data to show logo\n  const { data: companyData } = useQuery({\n    queryKey: ['company'],\n    queryFn: companyService.getCurrentCompany,\n    enabled: !isAppSuperAdmin(user), // Only fetch for organization users\n    retry: false,\n    staleTime: 0, // 5 minutes\n  });\n  // Query for current organization (to get enabled_modules)\n  const { data: organizationData } = useQuery({\n    queryKey: ['currentOrganization'],\n    queryFn: organizationService.getCurrentOrganization,\n    enabled: !isAppSuperAdmin(user), // Only for organization users\n    retry: false,\n    staleTime: 0,\n    refetchOnWindowFocus: true, // Refetch when window regains focus\n    refetchInterval: 10000, // Auto-refetch every 10 seconds for testing\n    onSuccess: (data) => {\n      console.log('Organization data fetched:', {\n        enabled_modules: data.enabled_modules,\n        timestamp: new Date().toISOString()\n      });\n    },\n    onError: (error) => {\n      console.error('Failed to fetch organization data:', error);\n    }\n  });\n  // Query for current user's service permissions\n  const { data: userPermissions = [] } = useQuery({\n    queryKey: ['userServicePermissions'],\n    queryFn: rbacService.getCurrentUserPermissions,\n    enabled: !!user && !isAppSuperAdmin(user), // Only fetch for organization users\n    retry: false,\n    staleTime: 0, // 5 minutes\n    onSuccess: (data) => {\n      console.log('User permissions fetched:', data);\n    }\n  });\n  // Add keyboard event listener for Escape key\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        if (anchorEl) {\n          handleMenuClose();\n        }\n        if (userMenuAnchor) {\n          handleUserMenuClose();\n        }\n        if (subAnchorEl) {\n          handleSubClose();\n        }\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [anchorEl, userMenuAnchor, subAnchorEl]);\n  // Click outside to close search results\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setSearchQuery('');\n        setFilteredMenuItems([]);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [searchRef]);\n  // Don't render if not visible\n  if (!isVisible) {\n    return null;\n  }\n  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, menuName: string) => {\n    setAnchorEl(event.currentTarget);\n    setActiveMenu(menuName);\n    setSelectedSection(null);\n  };\n  const handleSubClick = (event: React.MouseEvent<HTMLElement>, category: any) => {\n    setSubAnchorEl(event.currentTarget);\n    setActiveSubCategory(category);\n  };\n  const handleUserMenuClick = (event: React.MouseEvent<HTMLElement>) => {\n    setUserMenuAnchor(event.currentTarget);\n  };\n  const navigateTo = (path: string) => {\n    router.push(path);\n    handleMenuClose();\n    handleSubClose();\n  };\n  // Enhanced logo navigation function\n  const navigateToHome = () => {\n    router.push('/dashboard');\n    handleMenuClose();\n  };\n  // Check user roles using proper utility functions\n  const isSuperAdmin = isAppSuperAdmin(user);\n  const _isOrgAdmin = isOrgSuperAdmin(user);\n  const _canManage = canManageUsers(user);\n  const _canShowUserMgmtInMenu = canShowUserManagementInMegaMenu(user);\n  // Service permission helper functions\n  const hasServicePermission = (permission: string): boolean => {\n    return userPermissions.includes(permission);\n  };\n  const hasAnyServicePermission = (permissions: string[]): boolean => {\n    return permissions.some(permission => userPermissions.includes(permission));\n  };\n  const canAccessServiceFeatures = (): boolean => {\n    const hasAccess = hasAnyServicePermission([\n      SERVICE_PERMISSIONS.SERVICE_READ,\n      SERVICE_PERMISSIONS.APPOINTMENT_READ,\n      SERVICE_PERMISSIONS.TECHNICIAN_READ,\n      SERVICE_PERMISSIONS.WORK_ORDER_READ\n    ]);\n    console.log('Permission check - canAccessService:', hasAccess, {\n      userPermissions,\n      timestamp: new Date().toISOString()\n    });\n    return hasAccess;\n  };\n  const canAccessServiceAnalytics = (): boolean => {\n    return hasServicePermission(SERVICE_PERMISSIONS.SERVICE_REPORTS_READ);\n  };\n  const canManageServiceRoles = (): boolean => {\n    return hasServicePermission(SERVICE_PERMISSIONS.CRM_ADMIN) || isOrgSuperAdmin(user);\n  };\n  // Helper to check if a module is enabled for the organization\n  const isModuleEnabled = (module: string): boolean => {\n    if (isSuperAdmin) {return true;} // Super admins see all\n    const enabled = organizationData?.enabled_modules?.[module] ?? false;\n    console.log(`Module check - ${module}:`, enabled, {\n      allModules: organizationData?.enabled_modules,\n      timestamp: new Date().toISOString()\n    });\n    return enabled;\n  };\n  const handleDemoMode = () => {\n    // Navigate to demo page\n    router.push('/demo');\n    handleMenuClose();\n  };\n  const handleContactSupport = () => {\n    // In production, this could open a support ticket form or email client\n    window.location.href = 'mailto:support@tritiq.com?subject=Module Activation Request&body=Please activate the Service CRM module for my organization.';\n  };\n  const handleSubClose = () => {\n    setSubAnchorEl(null);\n    setActiveSubCategory(null);\n  };\n  const handleUserMenuClose = () => {\n    setUserMenuAnchor(null);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setActiveMenu(null);\n    setSelectedSection(null);\n  };\n  const _handleCreateOrgLicense = () => {\n    // For now, we'll use a state to control the modal\n    // In a full implementation, this would be managed by parent component\n    setCreateLicenseModalOpen(true);\n    handleMenuClose();\n  };\n  const menuItems = {\n    // Master Data - Restored as top-level menu with direct navigation\n    masterData: {\n      title: 'Master Data',\n      icon: <People />,\n      sections: [\n        {\n          title: 'Business Entities',\n          items: [\n            { name: 'Vendors', path: 'masters/vendors', icon: <People /> },\n            { name: 'Customers', path: 'masters/customers', icon: <Business /> },\n            { name: 'Employees', path: 'masters/employees', icon: <People /> },\n            { name: 'Company Details', path: 'masters/company-details', icon: <Business /> }\n          ]\n        },\n        {\n          title: 'Product & Inventory',\n          items: [\n            { name: 'Products', path: 'masters/products', icon: <Inventory /> },\n            { name: 'Categories', path: '/categories', icon: <Storage /> },\n            { name: 'Units', path: '/units', icon: <Storage /> },\n            { name: 'Bill of Materials (BOM)', path: '/bom', icon: <Build /> }\n          ]\n        },\n        {\n          title: 'Financial Configuration',\n          items: [\n            { name: 'Chart of Accounts', path: '/chart-of-accounts', icon: <AccountBalance /> },\n            { name: 'Tax Codes', path: '/tax-codes', icon: <Assessment /> },\n            { name: 'Payment Terms', path: '/payment-terms', icon: <Business /> }\n          ]\n        }\n      ]\n    },\n    // ERP menu now contains inventory and vouchers only\n    erp: {\n      title: 'ERP',\n      icon: <Business />,\n      sections: [\n        {\n          title: 'Inventory',\n          items: [\n            { name: 'Current Stock', path: '/inventory/stock', icon: <Inventory /> },\n            { name: 'Stock Movements', path: '/inventory/movements', icon: <SwapHoriz /> },\n            { name: 'Low Stock Report', path: '/inventory/low-stock', icon: <TrendingUp /> },\n            { name: 'Stock Bulk Import', path: '/inventory/bulk-import', icon: <CloudUpload />, role: 'org_admin' },\n            { name: 'Locations', path: '/inventory/locations', icon: <Storage /> },\n            { name: 'Bin Management', path: '/inventory/bins', icon: <Storage /> },\n            { name: 'Cycle Count', path: '/inventory/cycle-count', icon: <Assessment /> }\n          ]\n        },\n        {\n          title: 'Vouchers',\n          items: [\n            {\n              name: 'Purchase Vouchers',\n              subItems: [\n                { name: 'Purchase Order', path: '/vouchers/Purchase-Vouchers/purchase-order', icon: <LocalShipping /> },\n                { name: 'GRN (Goods Received Note)', path: '/vouchers/Purchase-Vouchers/grn', icon: <Inventory /> },\n                { name: 'Purchase Voucher', path: '/vouchers/Purchase-Vouchers/purchase-voucher', icon: <ShoppingCart /> },\n                { name: 'Purchase Return', path: '/vouchers/Purchase-Vouchers/purchase-return', icon: <SwapHoriz /> }\n              ]\n            },\n            {\n              name: 'Pre-Sales Vouchers',\n              subItems: [\n                { name: 'Quotation', path: '/vouchers/Pre-Sales-Voucher/quotation', icon: <NoteAdd /> },\n                { name: 'Proforma Invoice', path: '/vouchers/Pre-Sales-Voucher/proforma-invoice', icon: <ReceiptLong /> },\n                { name: 'Sales Order', path: '/vouchers/Pre-Sales-Voucher/sales-order', icon: <Assessment /> }\n              ]\n            },\n            {\n              name: 'Sales Vouchers',\n              subItems: [\n                { name: 'Sales Voucher', path: '/vouchers/Sales-Vouchers/sales-voucher', icon: <TrendingUp /> },\n                { name: 'Delivery Challan', path: '/vouchers/Sales-Vouchers/delivery-challan', icon: <LocalShipping /> },\n                { name: 'Sales Return', path: '/vouchers/Sales-Vouchers/sales-return', icon: <SwapHoriz /> }\n              ]\n            },\n            {\n              name: 'Financial Vouchers',\n              subItems: [\n                { name: 'Payment Voucher', path: '/vouchers/Financial-Vouchers/payment-voucher', icon: <AccountBalance /> },\n                { name: 'Receipt Voucher', path: '/vouchers/Financial-Vouchers/receipt-voucher', icon: <AccountBalance /> },\n                { name: 'Journal Voucher', path: '/vouchers/Financial-Vouchers/journal-voucher', icon: <AccountBalance /> },\n                { name: 'Contra Voucher', path: '/vouchers/Financial-Vouchers/contra-voucher', icon: <AccountBalance /> },\n                { name: 'Credit Note', path: '/vouchers/Financial-Vouchers/credit-note', icon: <AccountBalance /> },\n                { name: 'Debit Note', path: '/vouchers/Financial-Vouchers/debit-note', icon: <AccountBalance /> },\n                { name: 'Non-Sales Credit Note', path: '/vouchers/Financial-Vouchers/non-sales-credit-note', icon: <AccountBalance /> },\n                { name: 'Inter Department Voucher', path: '/vouchers/inter-department-voucher', icon: <SwapHoriz /> }\n              ]\n            },\n            {\n              name: 'Manufacturing Vouchers',\n              subItems: [\n                { name: 'Production Order', path: '/vouchers/Manufacturing-Vouchers/production-order', icon: <Build /> },\n                { name: 'Material Requisition', path: '/vouchers/Manufacturing-Vouchers/material-requisition', icon: <Storage /> },\n                { name: 'Work Order', path: '/vouchers/Manufacturing-Vouchers/work-order', icon: <Assessment /> },\n                { name: 'Finished Goods Receipt', path: '/vouchers/Manufacturing-Vouchers/finished-goods-receipt', icon: <Inventory /> }\n              ]\n            },\n            {\n              name: 'Others',\n              subItems: [\n                { name: 'RFQ (Request for Quotation)', path: '/vouchers/Others/rfq', icon: <Assignment /> },\n                { name: 'Dispatch Details', path: '/vouchers/Others/dispatch-details', icon: <LocalShipping /> }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    // Finance menu (split from Finance & Accounting)\n    finance: {\n      title: 'Finance',\n      icon: <AccountBalance />,\n      sections: [\n        {\n          title: 'Accounts Payable',\n          items: [\n            { name: 'Vendor Bills', path: '/accounts-payable', icon: <Receipt /> },\n            { name: 'Payment Vouchers', path: '/payment-vouchers', icon: <Payment /> },\n            { name: 'Vendor Aging', path: '/vendor-aging', icon: <Schedule /> }\n          ]\n        },\n        {\n          title: 'Accounts Receivable',\n          items: [\n            { name: 'Customer Invoices', path: '/accounts-receivable', icon: <ReceiptLong /> },\n            { name: 'Receipt Vouchers', path: '/receipt-vouchers', icon: <MonetizationOn /> },\n            { name: 'Customer Aging', path: '/customer-aging', icon: <Schedule /> }\n          ]\n        },\n        {\n          title: 'Cost Management',\n          items: [\n            { name: 'Cost Centers', path: '/cost-centers', icon: <CorporateFare /> },\n            { name: 'Budget Management', path: '/budgets', icon: <TrendingUp /> },\n            { name: 'Cost Analysis', path: '/cost-analysis', icon: <Analytics /> }\n          ]\n        },\n        {\n          title: 'Financial Reports',\n          items: [\n            { name: 'Cash Flow', path: '/reports/cash-flow', icon: <AccountBalance /> },\n            { name: 'Cash Flow Forecast', path: '/cash-flow-forecast', icon: <Assessment /> }\n          ]\n        },\n        {\n          title: 'Analytics & KPIs',\n          items: [\n            { name: 'Finance Dashboard', path: '/finance-dashboard', icon: <Analytics /> },\n            { name: 'Financial KPIs', path: '/financial-kpis', icon: <TrendingUp /> },\n            { name: 'Expense Analysis', path: '/expense-analysis', icon: <BarChart /> }\n          ]\n        }\n      ]\n    },\n    // Accounting menu (split from Finance & Accounting)\n    accounting: {\n      title: 'Accounting',\n      icon: <AccountBalance />,\n      sections: [\n        {\n          title: 'Chart of Accounts',\n          items: [\n            { name: 'Chart of Accounts', path: '/chart-of-accounts', icon: <AccountBalance /> },\n            { name: 'Account Groups', path: '/account-groups', icon: <Business /> },\n            { name: 'Opening Balances', path: '/opening-balances', icon: <TrendingUp /> }\n          ]\n        },\n        {\n          title: 'Transactions',\n          items: [\n            { name: 'General Ledger', path: '/general-ledger', icon: <ReceiptLong /> },\n            { name: 'Journal Entries', path: '/journal-entries', icon: <NoteAdd /> },\n            { name: 'Bank Reconciliation', path: '/bank-reconciliation', icon: <AccountBalance /> }\n          ]\n        },\n        {\n          title: 'Financial Reports',\n          items: [\n            { name: 'Trial Balance', path: '/reports/trial-balance', icon: <BarChart /> },\n            { name: 'Profit & Loss', path: '/reports/profit-loss', icon: <TrendingUp /> },\n            { name: 'Balance Sheet', path: '/reports/balance-sheet', icon: <Assessment /> }\n          ]\n        }\n      ]\n    },\n    // Reports & Analytics menu\n    reportsAnalytics: {\n      title: 'Reports & Analytics',\n      icon: <Assessment />,\n      sections: [\n        {\n          title: 'Financial Reports',\n          items: [\n            { name: 'Ledgers', path: '/reports/ledgers', icon: <AccountBalance /> },\n            { name: 'Trial Balance', path: '/reports/trial-balance', icon: <BarChart /> },\n            { name: 'Profit & Loss', path: '/reports/profit-loss', icon: <TrendingUp /> },\n            { name: 'Balance Sheet', path: '/reports/balance-sheet', icon: <Assessment /> }\n          ]\n        },\n        {\n          title: 'Inventory Reports',\n          items: [\n            { name: 'Stock Report', path: '/reports/stock', icon: <Inventory /> },\n            { name: 'Valuation Report', path: '/reports/valuation', icon: <BarChart /> },\n            { name: 'Movement Report', path: '/reports/movements', icon: <SwapHoriz /> }\n          ]\n        },\n        {\n          title: 'Business Reports',\n          items: [\n            { name: 'Sales Analysis', path: '/reports/sales-analysis', icon: <TrendingUp /> },\n            { name: 'Purchase Analysis', path: '/reports/purchase-analysis', icon: <ShoppingCart /> },\n            { name: 'Vendor Analysis', path: '/reports/vendor-analysis', icon: <People /> }\n          ]\n        },\n        {\n          title: 'Business Analytics',\n          items: [\n            { name: 'Customer Analytics', path: '/analytics/customer', icon: <TrendingUp /> },\n            { name: 'Sales Analytics', path: '/analytics/sales', icon: <BarChart /> },\n            { name: 'Purchase Analytics', path: '/analytics/purchase', icon: <ShoppingCart /> }\n          ]\n        },\n        {\n          title: 'Service Analytics',\n          items: [\n            { name: 'Service Dashboard', path: '/analytics/service', icon: <Dashboard />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ },\n            { name: 'Job Completion', path: '/analytics/service/job-completion', icon: <Assignment />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ },\n            { name: 'Technician Performance', path: '/analytics/service/technician-performance', icon: <Engineering />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ },\n            { name: 'Customer Satisfaction', path: '/analytics/service/customer-satisfaction', icon: <Feedback />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ },\n            { name: 'SLA Compliance', path: '/analytics/service/sla-compliance', icon: <Timeline />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ }\n          ]\n        }\n      ]\n    },\n    // Sales menu (renamed from CRM, with service options removed)\n    sales: {\n      title: 'Sales',\n      icon: <Person />,\n      sections: [\n        {\n          title: 'Sales CRM',\n          items: [\n            { name: 'Sales Dashboard', path: '/sales/dashboard', icon: <Dashboard /> },\n            { name: 'Lead Management', path: '/sales/leads', icon: <PersonAdd /> },\n            { name: 'Opportunity Tracking', path: '/sales/opportunities', icon: <TrendingUp /> },\n            { name: 'Sales Pipeline', path: '/sales/pipeline', icon: <Timeline /> }\n          ]\n        },\n        {\n          title: 'Customer Management',\n          items: [\n            { name: 'Customer Database', path: '/sales/customers', icon: <People /> },\n            { name: 'Contact Management', path: '/sales/contacts', icon: <ContactPhone /> },\n            { name: 'Account Management', path: '/sales/accounts', icon: <Business /> },\n            { name: 'Customer Analytics', path: '/sales/customer-analytics', icon: <Analytics /> }\n          ]\n        },\n        {\n          title: 'Sales Operations',\n          items: [\n            { name: 'Quotations', path: '/vouchers/Pre-Sales-Voucher/quotation', icon: <NoteAdd /> },\n            { name: 'Sales Orders', path: '/vouchers/Pre-Sales-Voucher/sales-order', icon: <Receipt /> },\n            { name: 'Commission Tracking', path: '/sales/commissions', icon: <MonetizationOn /> },\n            { name: 'Sales Reports', path: '/sales/reports', icon: <Assessment /> }\n          ]\n        }\n      ]\n    },\n    // Marketing Module\n    marketing: {\n      title: 'Marketing',\n      icon: <Campaign />,\n      sections: [\n        {\n          title: 'Campaign Management',\n          items: [\n            { name: 'Marketing Dashboard', path: '/marketing', icon: <Dashboard /> },\n            { name: 'Campaigns', path: '/marketing/campaigns', icon: <Campaign /> },\n            { name: 'Email Campaigns', path: '/marketing/campaigns/email', icon: <Email /> },\n            { name: 'SMS Campaigns', path: '/marketing/campaigns/sms', icon: <Sms /> },\n            { name: 'Social Media', path: '/marketing/campaigns/social', icon: <Groups /> }\n          ]\n        },\n        {\n          title: 'Promotions & Offers',\n          items: [\n            { name: 'Promotions', path: '/marketing/promotions', icon: <LocalOffer /> },\n            { name: 'Discount Codes', path: '/marketing/discount-codes', icon: <LocalOffer /> },\n            { name: 'Promotion Analytics', path: '/marketing/promotion-analytics', icon: <Analytics /> }\n          ]\n        },\n        {\n          title: 'Customer Engagement',\n          items: [\n            { name: 'Marketing Lists', path: '/marketing/lists', icon: <ContactPhone /> },\n            { name: 'Segmentation', path: '/marketing/segmentation', icon: <Groups /> },\n            { name: 'Campaign Analytics', path: '/marketing/analytics', icon: <Assessment /> },\n            { name: 'ROI Reports', path: '/marketing/reports/roi', icon: <MonetizationOn /> }\n          ]\n        }\n      ]\n    },\n    // Service menu (renamed from Service Desk, with CRM service options added)\n    service: {\n      title: 'Service',\n      icon: <SupportAgent />,\n      sections: [\n        {\n          title: 'Helpdesk & Ticketing',\n          items: [\n            { name: 'Service Dashboard', path: '/service-desk', icon: <Dashboard /> },\n            { name: 'Tickets', path: '/service-desk/tickets', icon: <Assignment /> },\n            { name: 'SLA Management', path: '/service-desk/sla', icon: <Schedule /> },\n            { name: 'Escalations', path: '/service-desk/escalations', icon: <TrendingUp /> }\n          ]\n        },\n        {\n          title: 'Omnichannel Support',\n          items: [\n            { name: 'Chat Conversations', path: '/service-desk/chat', icon: <Chat /> },\n            { name: 'Chatbot Management', path: '/service-desk/chatbot', icon: <SmartToy /> },\n            { name: 'Channel Configuration', path: '/service-desk/channels', icon: <Settings /> },\n            { name: 'Knowledge Base', path: '/service-desk/knowledge', icon: <Storage /> }\n          ]\n        },\n        {\n          title: 'Feedback & Surveys',\n          items: [\n            { name: 'Customer Surveys', path: '/service-desk/surveys', icon: <Poll /> },\n            { name: 'Survey Templates', path: '/service-desk/survey-templates', icon: <NoteAdd /> },\n            { name: 'Feedback Analytics', path: '/service-desk/feedback-analytics', icon: <Analytics /> },\n            { name: 'Satisfaction Reports', path: '/service-desk/satisfaction', icon: <Feedback /> }\n          ]\n        },\n        {\n          title: 'Service CRM',\n          items: [\n            { name: 'Service Dashboard', path: '/service/dashboard', icon: <Dashboard />, servicePermission: SERVICE_PERMISSIONS.SERVICE_READ },\n            { name: 'Dispatch Management', path: '/service/dispatch', icon: <LocalShipping />, servicePermission: SERVICE_PERMISSIONS.WORK_ORDER_READ },\n            { name: 'SLA Management', path: '/sla', icon: <Schedule />, servicePermission: SERVICE_PERMISSIONS.SERVICE_READ },\n            { name: 'Feedback Workflow', path: '/service/feedback', icon: <Feedback />, servicePermission: SERVICE_PERMISSIONS.CUSTOMER_SERVICE_READ }\n          ]\n        },\n        {\n          title: 'Management',\n          items: [\n            { name: 'Technicians', path: '/service/technicians', icon: <Engineering />, servicePermission: SERVICE_PERMISSIONS.TECHNICIAN_READ },\n            { name: 'Work Orders', path: '/service/work-orders', icon: <Assignment />, servicePermission: SERVICE_PERMISSIONS.WORK_ORDER_READ },\n            { name: 'Appointments', path: '/service/appointments', icon: <Schedule />, servicePermission: SERVICE_PERMISSIONS.APPOINTMENT_READ }\n          ]\n        }\n      ]\n    },\n    hrManagement: {\n      title: 'HR Management',\n      icon: <Groups />,\n      sections: [\n        {\n          title: 'Employee Management',\n          items: [\n            { name: 'Employee Directory', path: '/hr/employees-directory', icon: <People /> },\n            { name: 'Employee Onboarding', path: '/hr/onboarding', icon: <PersonAdd /> },\n            { name: 'Performance Management', path: '/hr/performance', icon: <Assessment /> },\n            { name: 'Employee Records', path: '/hr/records', icon: <Storage /> }\n          ]\n        },\n        {\n          title: 'Payroll & Benefits',\n          items: [\n            { name: 'Payroll Management', path: '/hr/payroll', icon: <MonetizationOn /> },\n            { name: 'Salary Processing', path: '/hr/salary', icon: <Payment /> },\n            { name: 'Benefits Administration', path: '/hr/benefits', icon: <Security /> },\n            { name: 'Tax Management', path: '/hr/tax', icon: <AccountBalance /> }\n          ]\n        },\n        {\n          title: 'Time & Attendance',\n          items: [\n            { name: 'Time Tracking', path: '/hr/timesheet', icon: <Schedule /> },\n            { name: 'Leave Management', path: '/hr/leave', icon: <Timeline /> },\n            { name: 'Attendance Reports', path: '/hr/attendance', icon: <BarChart /> },\n            { name: 'Shift Management', path: '/hr/shifts', icon: <Schedule /> }\n          ]\n        },\n        {\n          title: 'Recruitment',\n          items: [\n            { name: 'Job Postings', path: '/hr/jobs', icon: <AddBusiness /> },\n            { name: 'Candidate Management', path: '/hr/candidates', icon: <Person /> },\n            { name: 'Interview Scheduling', path: '/hr/interviews', icon: <Schedule /> },\n            { name: 'Hiring Pipeline', path: '/hr/hiring', icon: <Timeline /> }\n          ]\n        }\n      ]\n    },\n    // Tasks & Calendar menu (split from Workspace)\n    tasksCalendar: {\n      title: 'Tasks & Calendar',\n      icon: <Task />,\n      sections: [\n        {\n          title: 'Tasks',\n          items: [\n            { name: 'Task Dashboard', path: '/tasks/dashboard', icon: <Dashboard /> },\n            { name: 'My Tasks', path: '/tasks', icon: <Task /> },\n            { name: 'Task Projects', path: '/tasks/projects', icon: <Assignment /> },\n            { name: 'Create Task', path: '/tasks/create', icon: <NoteAdd /> }\n          ]\n        },\n        {\n          title: 'Time Management',\n          items: [\n            { name: 'Time Tracking', path: '/tasks/time-logs', icon: <AccessTime /> },\n            { name: 'Task Reports', path: '/tasks/reports', icon: <Assessment /> },\n            { name: 'Team Performance', path: '/tasks/team-performance', icon: <Groups /> },\n            { name: 'Project Analytics', path: '/tasks/project-analytics', icon: <Analytics /> }\n          ]\n        },\n        {\n          title: 'Task Operations',\n          items: [\n            { name: 'Task Assignment', path: '/tasks/assignments', icon: <AssignmentTurnedIn /> },\n            { name: 'Task Templates', path: '/tasks/templates', icon: <Storage /> },\n            { name: 'Task Reminders', path: '/tasks/reminders', icon: <Alarm /> },\n            { name: 'Task Comments', path: '/tasks/comments', icon: <Chat /> }\n          ]\n        },\n        {\n          title: 'Calendar Views',\n          items: [\n            { name: 'Calendar Dashboard', path: '/calendar/dashboard', icon: <Dashboard /> },\n            { name: 'Calendar View', path: '/calendar', icon: <CalendarToday /> },\n            { name: 'My Events', path: '/calendar/events', icon: <EventNote /> },\n            { name: 'Create Event', path: '/calendar/create', icon: <NoteAdd /> }\n          ]\n        },\n        {\n          title: 'Scheduling',\n          items: [\n            { name: 'Appointments', path: '/calendar/appointments', icon: <Schedule /> },\n            { name: 'Meeting Rooms', path: '/calendar/meeting-rooms', icon: <Business /> },\n            { name: 'Event Reminders', path: '/calendar/reminders', icon: <Alarm /> },\n            { name: 'Recurring Events', path: '/calendar/recurring', icon: <Timeline /> }\n          ]\n        }\n      ]\n    },\n    // Email menu (split from Workspace)\n    email: {\n      title: 'Email',\n      icon: <Email />,\n      sections: [\n        {\n          title: 'Email Management',\n          items: [\n            { name: 'Mail Dashboard', path: '/mail/dashboard', icon: <Dashboard /> },\n            { name: 'Inbox', path: '/mail/inbox', icon: <Inbox /> },\n            { name: 'Sent Items', path: '/mail/sent', icon: <Send /> },\n            { name: 'Drafts', path: '/mail/drafts', icon: <Drafts /> }\n          ]\n        },\n        {\n          title: 'Mail Operations',\n          items: [\n            { name: 'Compose Mail', path: '/mail/compose', icon: <NoteAdd /> },\n            { name: 'Email Accounts', path: '/mail/accounts', icon: <AccountCircle /> },\n            { name: 'Email Templates', path: '/mail/templates', icon: <Storage /> },\n            { name: 'Email Rules', path: '/mail/rules', icon: <Settings /> }\n          ]\n        },\n        {\n          title: 'Integration & Sync',\n          items: [\n            { name: 'Email Sync', path: '/mail/sync', icon: <CloudUpload /> },\n            { name: 'Task Linking', path: '/mail/task-linking', icon: <Task /> },\n            { name: 'Calendar Linking', path: '/mail/calendar-linking', icon: <CalendarToday /> },\n            { name: 'Email Analytics', path: '/mail/analytics', icon: <Analytics /> }\n          ]\n        }\n      ]\n    },\n    settings: {\n      title: 'Settings',\n      icon: <Settings />,\n      sections: [\n        {\n          title: 'Organization Settings',\n          items: [\n            { name: 'General Settings', path: '/settings', icon: <Settings /> },\n            { name: 'Company Profile', path: '/settings/company', icon: <Business /> },\n            { name: 'User Management', path: '/settings/users', icon: <People /> }\n          ]\n        },\n        {\n          title: 'Administration',\n          items: [\n            { name: 'App Users', path: '/admin/app-user-management', icon: <Groups />, superAdminOnly: true },\n            { name: 'Organization Management', path: '/admin/manage-organizations', icon: <CorporateFare />, superAdminOnly: true },\n            { name: 'License Management', path: '/admin/license-management', icon: <Security />, superAdminOnly: true },\n            { name: 'Role Management', path: '/admin/rbac', icon: <SupervisorAccount />, servicePermission: SERVICE_PERMISSIONS.CRM_ADMIN },\n            { name: 'Service Settings', path: '/admin/service-settings', icon: <Settings />, servicePermission: SERVICE_PERMISSIONS.CRM_SETTINGS },\n            { name: 'Audit Logs', path: '/admin/audit-logs', icon: <History />, role: 'org_admin' },\n            { name: 'Notification Management', path: '/admin/notifications', icon: <NotificationsActive />, role: 'org_admin' }\n          ]\n        }\n      ]\n    }\n  };\n  // Create main menu sections dynamically\n  const mainMenuSections = isSuperAdmin\n    ? [\n        {\n          title: 'Administration',\n          subSections: [\n            {\n              title: 'Administration',\n              items: [\n                { name: 'Dashboard', path: '/dashboard', icon: <Dashboard /> },\n                { name: 'Demo', path: '/demo', icon: <DeveloperMode /> }\n              ]\n            }\n          ]\n        }\n      ]\n    : [\n        { title: 'Master Data', subSections: menuItems.masterData.sections },\n        { title: 'ERP', subSections: menuItems.erp.sections },\n        { title: 'Finance', subSections: menuItems.finance.sections },\n        { title: 'Accounting', subSections: menuItems.accounting.sections },\n        { title: 'Reports & Analytics', subSections: menuItems.reportsAnalytics.sections },\n        { title: 'Sales', subSections: menuItems.sales.sections },\n        { title: 'Marketing', subSections: menuItems.marketing.sections },\n        { title: 'Service', subSections: menuItems.service.sections },\n        { title: 'HR Management', subSections: menuItems.hrManagement.sections },\n        { title: 'Tasks & Calendar', subSections: menuItems.tasksCalendar.sections },\n        { title: 'Email', subSections: menuItems.email.sections }\n      ];\n  menuItems.menu = {\n    title: 'Menu',\n    icon: <MenuIcon />,\n    sections: mainMenuSections\n  };\n  const flattenMenuItems = (menu: any) => {\n    let items = [];\n    menu.sections.forEach(section => {\n      section.subSections.forEach(subSection => {\n        subSection.items.forEach(item => {\n          if (item.subItems) {\n            item.subItems.forEach(subItem => items.push(subItem));\n          } else {\n            items.push(item);\n          }\n        });\n      });\n    });\n    return items;\n  };\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    if (query.length >= 2) {\n      const allItems = flattenMenuItems(menuItems.menu);\n      const filtered = allItems.filter(item => item.name.toLowerCase().includes(query.toLowerCase()));\n      setFilteredMenuItems(filtered);\n    } else {\n      setFilteredMenuItems([]);\n    }\n  };\n  const renderMegaMenu = () => {\n    if (!activeMenu || !menuItems[activeMenu as keyof typeof menuItems]) {return null;}\n    const menu = menuItems[activeMenu as keyof typeof menuItems];\n    // Filter menu items based on user permissions\n    const filterMenuItems = (subSection: any) => {\n      return subSection.items.filter((item: any) => {\n        // Check role-based permissions\n        if (item.role && !canManageUsers(user)) {\n          return false;\n        }\n       \n        // Check super admin only items\n        if (item.superAdminOnly && !isSuperAdmin) {\n          return false;\n        }\n       \n        // Check service permissions\n        if (item.servicePermission && !hasServicePermission(item.servicePermission)) {\n          return false;\n        }\n       \n        return true;\n      });\n    };\n    const normalizedSections = menu.sections.map(section => {\n      if (!section.subSections) {\n        return {\n          ...section,\n          subSections: [{\n            title: '',\n            items: section.items || []\n          }]\n        };\n      }\n      return section;\n    });\n    const filteredSections = normalizedSections.map(section => ({\n      ...section,\n      subSections: section.subSections.map((subSection: any) => ({\n        ...subSection,\n        items: filterMenuItems(subSection)\n      })).filter((subSection: any) => subSection.items.length > 0)\n    })).filter(section => section.subSections.length > 0);\n    if (filteredSections.length === 0) {\n      console.log(`No items in submenu for ${activeMenu} - permissions may be missing`);\n      return null;\n    }\n    return (\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n        PaperProps={{\n          sx: {\n            width: selectedSection ? 'calc(100vw - 40px)' : 'auto',\n            maxWidth: selectedSection ? 'calc(100vw - 40px)' : 'auto',\n            maxHeight: 'calc(100vh - 100px)',\n            overflowY: 'hidden',\n            mt: 0,\n            borderRadius: 2,\n            boxShadow: '0 10px 40px rgba(0, 0, 0, 0.15)',\n            border: '1px solid',\n            borderColor: 'divider',\n            left: '20px !important',\n            right: 'auto',\n            '& .MuiMenuItem-root': {\n              borderRadius: 1,\n              margin: '2px 8px',\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                backgroundColor: 'primary.50',\n                transform: 'translateX(4px)',\n              }\n            }\n          }\n        }}\n        MenuListProps={{\n          sx: {\n            padding: 1\n          }\n        }}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n        disableAutoFocusItem\n      >\n        <Grid container>\n          <Grid item xs={3}>\n            <List>\n              {filteredSections.map((section, index) => (\n                <ListItemButton\n                  key={index}\n                  selected={selectedSection === section.title}\n                  onClick={() => setSelectedSection(section.title)}\n                  sx={{\n                    backgroundColor: selectedSection === section.title ? 'primary.light' : 'transparent',\n                    color: selectedSection === section.title ? 'primary.contrastText' : 'text.primary',\n                    '&:hover': {\n                      backgroundColor: 'primary.main',\n                      color: 'primary.contrastText',\n                    }\n                  }}\n                >\n                  <ListItemText primary={section.title} />\n                  <ChevronRight />\n                </ListItemButton>\n              ))}\n            </List>\n          </Grid>\n          <Grid item xs={9} sx={{ pl: 2 }}>\n            {selectedSection && (\n              <Grid container spacing={2}>\n                {filteredSections.find(s => s.title === selectedSection)?.subSections.map((subSection: any, subIndex: number) => (\n                  <Grid item xs={12} sm={6} md={4} key={subIndex}>\n                    {subSection.title && (\n                      <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 'bold', color: 'secondary.main' }}>\n                        {subSection.title}\n                      </Typography>\n                    )}\n                    <List dense>\n                      {subSection.items.map((item: any, itemIndex: number) => (\n                        <ListItemButton\n                          key={itemIndex}\n                          onClick={(e) => item.subItems ? handleSubClick(e, item) : navigateTo(item.path)}\n                          sx={{\n                            borderRadius: 1,\n                            mb: 0.5,\n                            '&:hover': {\n                              backgroundColor: 'secondary.light',\n                              color: 'secondary.contrastText'\n                            }\n                          }}\n                        >\n                          <ListItemIcon sx={{ minWidth: 36 }}>\n                            {item.icon}\n                          </ListItemIcon>\n                          <ListItemText primary={item.name} />\n                          {item.subItems && <ChevronRight />}\n                        </ListItemButton>\n                      ))}\n                    </List>\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </Grid>\n        </Grid>\n      </Menu>\n    );\n  };\n  const renderSubMenu = () => {\n    if (!activeSubCategory) {return null;}\n    return (\n      <Menu\n        anchorEl={subAnchorEl}\n        open={Boolean(subAnchorEl)}\n        onClose={handleSubClose}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n        PaperProps={{\n          sx: {\n            ml: 1,\n            borderRadius: 2,\n            boxShadow: '0 10px 40px rgba(0, 0, 0, 0.15)',\n            border: '1px solid',\n            borderColor: 'divider',\n            '& .MuiMenuItem-root': {\n              borderRadius: 1,\n              margin: '2px 8px',\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                backgroundColor: 'primary.50',\n                transform: 'translateX(4px)',\n              }\n            }\n          }\n        }}\n        MenuListProps={{\n          sx: {\n            padding: 1\n          }\n        }}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1, fontWeight: 'bold' }}>\n          {activeSubCategory.name}\n        </Typography>\n        <Divider />\n        <List dense>\n          {activeSubCategory.subItems.map((subItem: any, subIndex: number) => (\n            <ListItemButton\n              key={subIndex}\n              onClick={() => navigateTo(subItem.path)}\n              sx={{\n                px: 3,\n                py: 1,\n                minWidth: 200,\n                '&:hover': {\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText'\n                }\n              }}\n            >\n              <ListItemIcon sx={{ minWidth: 36 }}>\n                {subItem.icon}\n              </ListItemIcon>\n              <ListItemText primary={subItem.name} />\n            </ListItemButton>\n          ))}\n        </List>\n      </Menu>\n    );\n  };\n  const renderSearchResults = () => {\n    if (filteredMenuItems.length === 0) {return null;}\n    return (\n      <Menu\n        open={filteredMenuItems.length > 0}\n        onClose={() => setSearchQuery('')}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        PaperProps={{\n          sx: {\n            width: 300,\n            maxHeight: 400,\n          }\n        }}\n      >\n        {filteredMenuItems.map((item, index) => (\n          <MenuItem key={index} onClick={() => navigateTo(item.path)}>\n            {item.name}\n          </MenuItem>\n        ))}\n      </Menu>\n    );\n  };\n  return (\n    <>\n      <AppBar\n        position=\"static\"\n        className=\"modern-nav\"\n        sx={{\n          backgroundColor: 'var(--bg-surface)',\n          color: 'var(--text-primary)',\n          boxShadow: 'var(--shadow-sm)',\n          borderBottom: '1px solid var(--border-primary)'\n        }}\n      >\n        <Toolbar>\n          {/* Menu and Settings on the left */}\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Button\n              color=\"inherit\"\n              startIcon={<MenuIcon />}\n              endIcon={<ExpandMore />}\n              onClick={(e) => handleMenuClick(e, 'menu')}\n              className=\"modern-menu-button\"\n              sx={modernButtonStyle}\n            >\n              Menu\n            </Button>\n            <Button\n              color=\"inherit\"\n              startIcon={<Settings />}\n              endIcon={<ExpandMore />}\n              onClick={(e) => handleMenuClick(e, 'settings')}\n              className=\"modern-menu-button\"\n              sx={modernButtonStyle}\n            >\n              Settings\n            </Button>\n          </Box>\n          {/* Enhanced Logo Section in the center */}\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              cursor: 'pointer',\n              flexGrow: 1,\n              justifyContent: 'center',\n              '&:hover': {\n                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                borderRadius: 1\n              },\n              p: 1,\n              borderRadius: 1,\n              transition: 'background-color 0.2s'\n            }}\n            onClick={navigateToHome}\n          >\n            <Box\n              component=\"img\"\n              src=\"/Tritiq.png\"\n              alt=\"TritiQ\"\n              sx={{\n                width: 40,\n                height: 40,\n                mr: 1,\n                objectFit: 'contain'\n              }}\n            />\n            <Typography variant=\"h6\" component=\"div\" sx={{ fontWeight: 'bold' }}>\n              {companyData?.name || 'ERP'}\n            </Typography>\n          </Box>\n          {/* Search bar on the right */}\n          <Box sx={{ display: 'flex', alignItems: 'center', position: 'relative', ml: 2 }} ref={searchRef}>\n            <InputBase\n              placeholder=\"Search…\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              startAdornment={<SearchIcon />}\n              sx={{\n                color: 'inherit',\n                ml: 1,\n                '& .MuiInputBase-input': {\n                  padding: '8px 8px 8px 0',\n                  transition: 'width 0.3s',\n                  width: searchQuery ? '200px' : '100px',\n                },\n              }}\n            />\n            {renderSearchResults()}\n          </Box>\n          <IconButton\n            color=\"inherit\"\n            onClick={handleUserMenuClick}\n            sx={{ ml: 2 }}\n          >\n            <AccountCircle />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      {renderMegaMenu()}\n      {renderSubMenu()}\n      <Menu\n        anchorEl={userMenuAnchor}\n        open={Boolean(userMenuAnchor)}\n        onClose={handleUserMenuClose}\n        PaperProps={{\n          sx: {\n            borderRadius: 2,\n            boxShadow: '0 10px 40px rgba(0, 0, 0, 0.15)',\n            border: '1px solid',\n            borderColor: 'divider',\n            minWidth: 200,\n            '& .MuiMenuItem-root': {\n              borderRadius: 1,\n              margin: '2px 8px',\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                backgroundColor: 'primary.50',\n                transform: 'translateX(4px)',\n              }\n            }\n          }\n        }}\n        MenuListProps={{\n          sx: {\n            padding: 1\n          }\n        }}\n      >\n        <MenuItem onClick={handleUserMenuClose}>\n          <Typography variant=\"body2\">\n            {user?.full_name || user?.email || 'User'}\n          </Typography>\n        </MenuItem>\n        <MenuItem onClick={handleUserMenuClose}>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Role: {user?.role || 'Standard User'}\n          </Typography>\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={() => router.push('/profile')}>\n          Profile Settings\n        </MenuItem>\n        <MenuItem onClick={onLogout}>\n          Logout\n        </MenuItem>\n      </Menu>\n      {/* Organization License Creation Modal */}\n      <CreateOrganizationLicenseModal\n        open={createLicenseModalOpen}\n        onClose={() => setCreateLicenseModalOpen(false)}\n        onSuccess={(result) => {\n          console.log('License created:', result);\n          // You might want to show a success notification here\n        }}\n      />\n    </>\n  );\n};\nexport default MegaMenu;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/MigrationWizard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"List"},"fix":{"range":[578,586],"text":""},"desc":"Remove unused variable 'List'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItem"},"fix":{"range":[586,598],"text":""},"desc":"Remove unused variable 'ListItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemText"},"fix":{"range":[598,614],"text":""},"desc":"Remove unused variable 'ListItemText'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemIcon"},"fix":{"range":[614,630],"text":""},"desc":"Remove unused variable 'ListItemIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Checkbox"},"fix":{"range":[630,642],"text":""},"desc":"Remove unused variable 'Checkbox'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Table"},"fix":{"range":[642,651],"text":""},"desc":"Remove unused variable 'Table'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableBody"},"fix":{"range":[651,664],"text":""},"desc":"Remove unused variable 'TableBody'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableCell"},"fix":{"range":[664,677],"text":""},"desc":"Remove unused variable 'TableCell'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableContainer"},"fix":{"range":[677,695],"text":""},"desc":"Remove unused variable 'TableContainer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableHead"},"fix":{"range":[695,708],"text":""},"desc":"Remove unused variable 'TableHead'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableRow"},"fix":{"range":[708,720],"text":""},"desc":"Remove unused variable 'TableRow'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[720,734],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[734,745],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[787,802],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":51,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Error"},"fix":{"range":[802,811],"text":""},"desc":"Remove unused variable 'Error'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Warning' is defined but never used.","line":52,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Warning"},"fix":{"range":[811,822],"text":""},"desc":"Remove unused variable 'Warning'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":58,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Download"},"fix":{"range":[881,893],"text":""},"desc":"Remove unused variable 'Download'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":59,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Info"},"fix":{"range":[893,901],"text":""},"desc":"Remove unused variable 'Info'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":101,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1795,1822],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadWizardState' was used before it was defined.","line":129,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":129,"endColumn":22},{"ruleId":"no-use-before-define","severity":2,"message":"'renderCreateJobStep' was used before it was defined.","line":248,"column":16,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":248,"endColumn":35},{"ruleId":"no-use-before-define","severity":2,"message":"'renderUploadStep' was used before it was defined.","line":250,"column":16,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":250,"endColumn":32},{"ruleId":"no-use-before-define","severity":2,"message":"'renderMappingStep' was used before it was defined.","line":252,"column":16,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":252,"endColumn":33},{"ruleId":"no-use-before-define","severity":2,"message":"'renderValidationStep' was used before it was defined.","line":254,"column":16,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":254,"endColumn":36},{"ruleId":"no-use-before-define","severity":2,"message":"'renderExecutionStep' was used before it was defined.","line":256,"column":16,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":256,"endColumn":35}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Migration Wizard Component\n * \n * A comprehensive step-by-step wizard for importing data from external ERPs like Tally, Zoho.\n * Provides guided migration workflow with data mapping, validation, and progress monitoring.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Stepper,\n  Step,\n  StepLabel,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  LinearProgress,\n  Chip,\n  Card,\n  CardContent,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport {\n  Upload,\n  CheckCircle,\n  Error,\n  Warning,\n  Refresh,\n  CloudUpload,\n  Settings,\n  PlayArrow,\n  Undo,\n  Download,\n  Info\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport axios from 'axios';\n\nexport interface MigrationJob {\n  id: number;\n  job_name: string;\n  description: string;\n  source_type: string;\n  data_types: string[];\n  status: string;\n  created_at: string;\n  progress_percentage?: number;\n  error_message?: string;\n}\n\nexport interface MigrationWizardStep {\n  step_number: number;\n  step_name: string;\n  is_completed: boolean;\n  is_current: boolean;\n  can_skip: boolean;\n  data?: any;\n}\n\nexport interface MigrationWizardState {\n  job_id: number;\n  current_step: number;\n  total_steps: number;\n  steps: MigrationWizardStep[];\n  can_proceed: boolean;\n  validation_errors: string[];\n}\n\ninterface MigrationWizardProps {\n  open: boolean;\n  onClose: () => void;\n  jobId?: number;\n}\n\nconst MigrationWizard: React.FC<MigrationWizardProps> = ({ open, onClose, jobId }) => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [wizardState, setWizardState] = useState<MigrationWizardState | null>(null);\n  const [currentJob, setCurrentJob] = useState<MigrationJob | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [err, setErr] = useState<string | null>(null);\n  \n  // Form data for creating new migration job\n  const [newJobData, setNewJobData] = useState({\n    job_name: '',\n    description: '',\n    source_type: 'tally',\n    data_types: [] as string[],\n    conflict_resolution_strategy: 'skip_existing'\n  });\n\n  // Step definitions\n  const stepNames = [\n    'Create Migration Job',\n    'Upload Source File',\n    'Configure Data Mapping',\n    'Validate Data',\n    'Execute Migration'\n  ];\n\n  useEffect(() => {\n    if (open && jobId) {\n      loadWizardState();\n    }\n  }, [open, jobId]);\n\n  const loadWizardState = async () => {\n    if (!jobId) {return;}\n    \n    setLoading(true);\n    try {\n      const response = await axios.get(`/api/v1/migration/jobs/${jobId}/wizard`);\n      setWizardState(response.data);\n      \n      // Also load job details\n      const jobResponse = await axios.get(`/api/v1/migration/jobs/${jobId}`);\n      setCurrentJob(jobResponse.data);\n    } catch (error) {\n      console.error('Failed to load wizard state:', error);\n      setErr('Failed to load migration wizard state');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createMigrationJob = async () => {\n    if (!newJobData.job_name || newJobData.data_types.length === 0) {\n      setErr('Please provide job name and select at least one data type');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await axios.post('/api/v1/migration/jobs', newJobData);\n      const newJob = response.data;\n      setCurrentJob(newJob);\n      \n      // Load wizard state for the new job\n      const wizardResponse = await axios.get(`/api/v1/migration/jobs/${newJob.id}/wizard`);\n      setWizardState(wizardResponse.data);\n    } catch (error) {\n      console.error('Failed to create migration job:', error);\n      setErr('Failed to create migration job');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const uploadFile = async () => {\n    if (!selectedFile || !currentJob) {\n      setErr('Please select a file to upload');\n      return;\n    }\n\n    setLoading(true);\n    setUploadProgress(0);\n    \n    const formData = new FormData();\n    formData.append('file', selectedFile);\n\n    try {\n      await axios.post(`/api/v1/migration/jobs/${currentJob.id}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round(\n            (progressEvent.loaded * 100) / (progressEvent.total || 1)\n          );\n          setUploadProgress(percentCompleted);\n        },\n      });\n      \n      // Reload wizard state\n      await loadWizardState();\n    } catch (error) {\n      console.error('Failed to upload file:', error);\n      setErr('Failed to upload file');\n    } finally {\n      setLoading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const executeMigration = async () => {\n    if (!currentJob) {return;}\n\n    setLoading(true);\n    try {\n      await axios.post(`/api/v1/migration/jobs/${currentJob.id}/execute`);\n      await loadWizardState();\n    } catch (error) {\n      console.error('Failed to execute migration:', error);\n      setErr('Failed to execute migration');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const rollbackMigration = async () => {\n    if (!currentJob) {return;}\n\n    setLoading(true);\n    try {\n      await axios.post(`/api/v1/migration/jobs/${currentJob.id}/rollback`);\n      await loadWizardState();\n    } catch (error) {\n      console.error('Failed to rollback migration:', error);\n      setErr('Failed to rollback migration');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderStepContent = () => {\n    if (!wizardState) {return null;}\n\n    const currentStep = wizardState.current_step;\n\n    switch (currentStep) {\n      case 1:\n        return renderCreateJobStep();\n      case 2:\n        return renderUploadStep();\n      case 3:\n        return renderMappingStep();\n      case 4:\n        return renderValidationStep();\n      case 5:\n        return renderExecutionStep();\n      default:\n        return <Typography>Unknown step</Typography>;\n    }\n  };\n\n  const renderCreateJobStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Create Migration Job</Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            label=\"Job Name\"\n            value={newJobData.job_name}\n            onChange={(e) => setNewJobData({ ...newJobData, job_name: e.target.value })}\n            required\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            multiline\n            rows={3}\n            label=\"Description\"\n            value={newJobData.description}\n            onChange={(e) => setNewJobData({ ...newJobData, description: e.target.value })}\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <FormControl fullWidth>\n            <InputLabel>Source Type</InputLabel>\n            <Select\n              value={newJobData.source_type}\n              onChange={(e) => setNewJobData({ ...newJobData, source_type: e.target.value })}\n            >\n              <MenuItem value=\"tally\">Tally ERP</MenuItem>\n              <MenuItem value=\"zoho\">Zoho</MenuItem>\n              <MenuItem value=\"excel\">Excel/CSV</MenuItem>\n              <MenuItem value=\"json\">JSON</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"subtitle2\" gutterBottom>Data Types to Import</Typography>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n            {['ledgers', 'vouchers', 'contacts', 'products', 'customers', 'vendors', 'stock'].map((type) => (\n              <Chip\n                key={type}\n                label={type.charAt(0).toUpperCase() + type.slice(1)}\n                clickable\n                color={newJobData.data_types.includes(type) ? 'primary' : 'default'}\n                onClick={() => {\n                  const newTypes = newJobData.data_types.includes(type)\n                    ? newJobData.data_types.filter(t => t !== type)\n                    : [...newJobData.data_types, type];\n                  setNewJobData({ ...newJobData, data_types: newTypes });\n                }}\n              />\n            ))}\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n\n  const renderUploadStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Upload Source File</Typography>\n      <Card>\n        <CardContent>\n          <Box sx={{ textAlign: 'center', p: 3, border: '2px dashed #ccc', borderRadius: 1 }}>\n            <CloudUpload sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n            <Typography variant=\"h6\" gutterBottom>\n              {selectedFile ? selectedFile.name : 'Select File to Upload'}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              Supported formats: CSV, Excel, JSON, Tally XML\n            </Typography>\n            <Button\n              variant=\"contained\"\n              component=\"label\"\n              startIcon={<Upload />}\n            >\n              Choose File\n              <input\n                type=\"file\"\n                hidden\n                accept=\".csv,.xlsx,.xls,.json,.xml\"\n                onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}\n              />\n            </Button>\n          </Box>\n          {uploadProgress > 0 && (\n            <Box sx={{ mt: 2 }}>\n              <LinearProgress variant=\"determinate\" value={uploadProgress} />\n              <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                Uploading... {uploadProgress}%\n              </Typography>\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n    </Box>\n  );\n\n  const renderMappingStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Configure Data Mapping</Typography>\n      <Alert severity=\"info\" sx={{ mb: 2 }}>\n        Map source fields to target system fields. Auto-mapping suggestions are provided.\n      </Alert>\n      {/* Placeholder for mapping interface */}\n      <Typography variant=\"body2\">\n        Data mapping interface will be implemented based on uploaded file structure.\n      </Typography>\n    </Box>\n  );\n\n  const renderValidationStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Validate Data</Typography>\n      <Alert severity=\"warning\" sx={{ mb: 2 }}>\n        Review validation results before proceeding with migration.\n      </Alert>\n      {/* Placeholder for validation results */}\n      <Typography variant=\"body2\">\n        Data validation results will be displayed here.\n      </Typography>\n    </Box>\n  );\n\n  const renderExecutionStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Execute Migration</Typography>\n      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n        <Button\n          variant=\"contained\"\n          startIcon={<PlayArrow />}\n          onClick={executeMigration}\n          disabled={loading}\n        >\n          Start Migration\n        </Button>\n        {currentJob?.status === 'completed' && (\n          <Button\n            variant=\"outlined\"\n            startIcon={<Undo />}\n            onClick={rollbackMigration}\n            disabled={loading}\n          >\n            Rollback\n          </Button>\n        )}\n      </Box>\n      {currentJob?.progress_percentage !== undefined && (\n        <Box sx={{ mt: 2 }}>\n          <LinearProgress \n            variant=\"determinate\" \n            value={currentJob.progress_percentage} \n          />\n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            Progress: {currentJob.progress_percentage}%\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  );\n\n  const getStepStatus = (stepIndex: number) => {\n    if (!wizardState) {return 'pending';}\n    \n    const step = wizardState.steps[stepIndex];\n    if (step?.is_completed) {return 'completed';}\n    if (step?.is_current) {return 'active';}\n    return 'pending';\n  };\n\n  const canProceedToNext = () => {\n    if (!wizardState) {return false;}\n    \n    const currentStep = wizardState.current_step;\n    \n    switch (currentStep) {\n      case 1:\n        return newJobData.job_name && newJobData.data_types.length > 0;\n      case 2:\n        return selectedFile !== null;\n      default:\n        return wizardState.can_proceed;\n    }\n  };\n\n  const handleNext = async () => {\n    if (!wizardState) {return;}\n    \n    const currentStep = wizardState.current_step;\n    \n    switch (currentStep) {\n      case 1:\n        await createMigrationJob();\n        break;\n      case 2:\n        await uploadFile();\n        break;\n      default:\n        // For other steps, just reload the wizard state\n        await loadWizardState();\n        break;\n    }\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      maxWidth=\"lg\" \n      fullWidth\n      PaperProps={{ sx: { minHeight: '600px' } }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Settings />\n          Migration Wizard\n          {currentJob && (\n            <Chip \n              label={currentJob.status} \n              size=\"small\" \n              color={currentJob.status === 'completed' ? 'success' : 'primary'} \n            />\n          )}\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent>\n        {loading && !wizardState && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {err && (\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setErr(null)}>\n            {err}\n          </Alert>\n        )}\n\n        {wizardState && (\n          <>\n            <Stepper activeStep={wizardState.current_step - 1} sx={{ mb: 4 }}>\n              {stepNames.map((label, index) => (\n                <Step key={label}>\n                  <StepLabel \n                    error={getStepStatus(index) === 'error'}\n                    completed={getStepStatus(index) === 'completed'}\n                  >\n                    {label}\n                  </StepLabel>\n                </Step>\n              ))}\n            </Stepper>\n\n            {wizardState.validation_errors.length > 0 && (\n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle2\">Validation Issues:</Typography>\n                <ul>\n                  {wizardState.validation_errors.map((validationError, index) => (\n                    <li key={index}>{validationError}</li>\n                  ))}\n                </ul>\n              </Alert>\n            )}\n\n            {renderStepContent()}\n          </>\n        )}\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {wizardState && wizardState.current_step > 1 && (\n          <Button onClick={() => loadWizardState()}>\n            <Refresh />\n            Refresh\n          </Button>\n        )}\n        {wizardState && wizardState.current_step < wizardState.total_steps && (\n          <Button\n            variant=\"contained\"\n            onClick={handleNext}\n            disabled={!canProceedToNext() || loading}\n          >\n            {wizardState.current_step === 1 ? 'Create Job' : \n             wizardState.current_step === 2 ? 'Upload File' : 'Next'}\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default MigrationWizard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ModernChart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'chartOptions' is assigned a value but never used.","line":37,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"chartOptions"},"fix":{"range":[1027,2474],"text":""},"desc":"Remove unused variable 'chartOptions'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Typography, Paper } from '@mui/material';\n\nexport interface ModernChartProps {\n  title: string;\n  data: any[];\n  type: 'bar' | 'line' | 'pie' | 'area';\n  height?: number;\n  color?: 'primary' | 'success' | 'warning' | 'error' | 'info';\n  loading?: boolean;\n}\n\nconst ModernChart: React.FC<ModernChartProps> = ({\n  title,\n  data,\n  type,\n  height = 300,\n  color = 'primary',\n  loading = false\n}) => {\n  const getColorScheme = () => {\n    switch (color) {\n      case 'success':\n        return ['var(--success-500)', 'var(--success-600)', 'var(--success-700)'];\n      case 'warning':\n        return ['var(--warning-500)', 'var(--warning-600)', 'var(--warning-700)'];\n      case 'error':\n        return ['var(--error-500)', 'var(--error-600)', 'var(--error-700)'];\n      case 'info':\n        return ['var(--info-500)', 'var(--info-600)', 'var(--info-700)'];\n      case 'primary':\n      default:\n        return ['var(--primary-500)', 'var(--primary-600)', 'var(--primary-700)'];\n    }\n  };\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n          font: {\n            family: 'var(--font-family-sans)',\n            size: 12,\n            weight: '500'\n          }\n        }\n      },\n      tooltip: {\n        backgroundColor: 'var(--bg-surface)',\n        titleColor: 'var(--text-primary)',\n        bodyColor: 'var(--text-secondary)',\n        borderColor: 'var(--border-primary)',\n        borderWidth: 1,\n        cornerRadius: 8,\n        padding: 12,\n        titleFont: {\n          family: 'var(--font-family-sans)',\n          size: 14,\n          weight: '600'\n        },\n        bodyFont: {\n          family: 'var(--font-family-sans)',\n          size: 13\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'var(--border-primary)',\n          borderDash: [3, 3]\n        },\n        ticks: {\n          color: 'var(--text-secondary)',\n          font: {\n            family: 'var(--font-family-sans)',\n            size: 11\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: 'var(--border-primary)',\n          borderDash: [3, 3]\n        },\n        ticks: {\n          color: 'var(--text-secondary)',\n          font: {\n            family: 'var(--font-family-sans)',\n            size: 11\n          }\n        }\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <Paper className=\"modern-card\" sx={{ p: 3 }}>\n        <Typography className=\"modern-card-title\" variant=\"h6\" gutterBottom>\n          {title}\n        </Typography>\n        <Box \n          className=\"modern-skeleton\"\n          sx={{ \n            height: height, \n            borderRadius: 'var(--radius-md)',\n            mt: 2\n          }} \n        />\n      </Paper>\n    );\n  }\n\n  return (\n    <Paper className=\"modern-card\" sx={{ p: 3 }}>\n      <Typography className=\"modern-card-title\" variant=\"h6\" gutterBottom>\n        {title}\n      </Typography>\n      <Box \n        sx={{ \n          height: height, \n          mt: 2,\n          '& canvas': {\n            borderRadius: 'var(--radius-md)'\n          }\n        }}\n      >\n        {/* Chart component would be rendered here */}\n        {/* This is a placeholder for chart libraries like Chart.js, Recharts, etc. */}\n        <Box\n          sx={{\n            width: '100%',\n            height: '100%',\n            background: `linear-gradient(135deg, ${getColorScheme()[0]}20, ${getColorScheme()[1]}10)`,\n            borderRadius: 'var(--radius-md)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            border: '1px solid var(--border-primary)'\n          }}\n        >\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {type.toUpperCase()} Chart - {data.length} data points\n          </Typography>\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default ModernChart;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ModernLoading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationBell.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[190,202],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Clear' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clear"},"fix":{"range":[474,483],"text":""},"desc":"Remove unused variable 'Clear'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":87,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[2330,2335],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 53 column 48.","line":87,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":87,"endColumn":20},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 53 column 48.","line":87,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":87,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/NotificationBell.tsx\n// Notification bell icon component with unread count badge\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  IconButton,\n  Badge,\n  Menu,\n  MenuItem,\n  Typography,\n  Box,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Avatar,\n  Chip,\n  Button,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Notifications,\n  NotificationsNone,\n  Email,\n  Sms,\n  NotificationImportant,\n  Settings,\n  MarkEmailRead,\n  Clear\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport {\n  getNotificationLogs,\n  notificationQueryKeys,\n  NotificationLog,\n  getChannelDisplayName,\n  getStatusDisplayName,\n  getStatusColor\n} from '../services/notificationService';\n\ninterface NotificationBellProps {\n  onSettingsClick?: () => void;\n}\n\nconst NotificationBell: React.FC<NotificationBellProps> = ({ onSettingsClick }) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const queryClient = useQueryClient();\n\n  // Fetch recent notifications\n  const { data: notifications = [], isLoading, error } = useQuery({\n    queryKey: notificationQueryKeys.logsFiltered({ \n      limit: 20, \n      status: undefined,\n      recipient_type: 'user'  // For current user notifications\n    }),\n    queryFn: () => getNotificationLogs({ \n      limit: 20, \n      recipient_type: 'user'\n    }),\n    refetchInterval: 30000, // Poll every 30 seconds for real-time updates\n  });\n\n  // Calculate unread count (notifications that haven't been opened)\n  useEffect(() => {\n    if (notifications) {\n      const unread = notifications.filter(notif => \n        !notif.opened_at && notif.status === 'delivered'\n      ).length;\n      setUnreadCount(unread);\n    }\n  }, [notifications]);\n\n  // Mark notification as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      // TODO: Implement mark as read API endpoint\n      console.log('Marking notification as read:', notificationId);\n      return Promise.resolve();\n    },\n    onSuccess: () => {\n      // Refresh notifications\n      queryClient.invalidateQueries({ queryKey: notificationQueryKeys.logs() });\n    },\n    onError: (error) => {\n      toast.error('Failed to mark notification as read');\n    }\n  });\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleNotificationClick = (notification: NotificationLog) => {\n    // Mark as read if not already read\n    if (!notification.opened_at) {\n      markAsReadMutation.mutate(notification.id);\n    }\n    \n    // TODO: Navigate to relevant page based on notification type\n    console.log('Clicked notification:', notification);\n    handleClose();\n  };\n\n  const handleMarkAllRead = () => {\n    // TODO: Implement mark all as read\n    console.log('Mark all as read');\n    handleClose();\n  };\n\n  const getNotificationIcon = (channel: string) => {\n    switch (channel) {\n      case 'email':\n        return <Email fontSize=\"small\" />;\n      case 'sms':\n        return <Sms fontSize=\"small\" />;\n      case 'push':\n      case 'in_app':\n        return <NotificationImportant fontSize=\"small\" />;\n      default:\n        return <Notifications fontSize=\"small\" />;\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMs = now.getTime() - date.getTime();\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    const diffInDays = Math.floor(diffInHours / 24);\n\n    if (diffInMinutes < 1) {return 'Just now';}\n    if (diffInMinutes < 60) {return `${diffInMinutes}m ago`;}\n    if (diffInHours < 24) {return `${diffInHours}h ago`;}\n    if (diffInDays < 7) {return `${diffInDays}d ago`;}\n    return date.toLocaleDateString();\n  };\n\n  const isOpen = Boolean(anchorEl);\n\n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        onClick={handleClick}\n        aria-label=\"notifications\"\n        aria-describedby={isOpen ? 'notification-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={isOpen ? 'true' : undefined}\n        sx={{\n          transition: 'all 0.2s ease-in-out',\n          '&:hover': {\n            transform: 'scale(1.1)',\n            backgroundColor: 'rgba(255, 255, 255, 0.1)',\n          },\n          '&:active': {\n            transform: 'scale(0.95)',\n          }\n        }}\n      >\n        <Badge \n          badgeContent={unreadCount} \n          color=\"error\" \n          max={99}\n          sx={{\n            '& .MuiBadge-badge': {\n              animation: unreadCount > 0 ? 'pulse 2s infinite' : 'none',\n              '@keyframes pulse': {\n                '0%': { transform: 'scale(1)' },\n                '50%': { transform: 'scale(1.2)' },\n                '100%': { transform: 'scale(1)' }\n              }\n            }\n          }}\n        >\n          <Box\n            sx={{\n              transition: 'all 0.3s ease',\n              transform: unreadCount > 0 ? 'rotate(10deg)' : 'rotate(0deg)',\n            }}\n          >\n            {unreadCount > 0 ? <Notifications /> : <NotificationsNone />}\n          </Box>\n        </Badge>\n      </IconButton>\n\n      <Menu\n        id=\"notification-menu\"\n        anchorEl={anchorEl}\n        open={isOpen}\n        onClose={handleClose}\n        PaperProps={{\n          sx: {\n            maxHeight: 400,\n            width: 360,\n            borderRadius: 2,\n            boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',\n            border: '1px solid',\n            borderColor: 'divider',\n            '& .MuiMenuItem-root': {\n              borderRadius: 1,\n              margin: '2px 8px',\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                backgroundColor: 'primary.50',\n                transform: 'translateX(4px)',\n              }\n            }\n          }\n        }}\n        MenuListProps={{\n          sx: { padding: 0 }\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Typography variant=\"h6\" component=\"div\">\n              Notifications\n            </Typography>\n            <Box>\n              {onSettingsClick && (\n                <IconButton size=\"small\" onClick={onSettingsClick} aria-label=\"notification settings\">\n                  <Settings />\n                </IconButton>\n              )}\n              {unreadCount > 0 && (\n                <IconButton size=\"small\" onClick={handleMarkAllRead} aria-label=\"mark all as read\">\n                  <MarkEmailRead />\n                </IconButton>\n              )}\n            </Box>\n          </Box>\n          {unreadCount > 0 && (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {unreadCount} unread notification{unreadCount !== 1 ? 's' : ''}\n            </Typography>\n          )}\n        </Box>\n\n        <Box sx={{ maxHeight: 300, overflow: 'auto' }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress size={24} />\n            </Box>\n          ) : error ? (\n            <Box sx={{ p: 2, textAlign: 'center' }}>\n              <Typography variant=\"body2\" color=\"error\">\n                Failed to load notifications\n              </Typography>\n            </Box>\n          ) : notifications.length === 0 ? (\n            <Box sx={{ p: 3, textAlign: 'center' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                No notifications\n              </Typography>\n            </Box>\n          ) : (\n            <List sx={{ p: 0 }}>\n              {notifications.map((notification, index) => (\n                <React.Fragment key={notification.id}>\n                  <ListItem\n                    button\n                    onClick={() => handleNotificationClick(notification)}\n                    sx={{\n                      backgroundColor: notification.opened_at ? 'transparent' : 'action.hover',\n                      '&:hover': {\n                        backgroundColor: 'action.selected',\n                      },\n                    }}\n                  >\n                    <ListItemIcon>\n                      <Avatar sx={{ width: 32, height: 32, bgcolor: 'primary.main' }}>\n                        {getNotificationIcon(notification.channel)}\n                      </Avatar>\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                          <Typography\n                            variant=\"body2\"\n                            sx={{\n                              fontWeight: notification.opened_at ? 'normal' : 'bold',\n                              flex: 1,\n                              mr: 1\n                            }}\n                          >\n                            {notification.subject || 'Notification'}\n                          </Typography>\n                          <Chip\n                            label={getChannelDisplayName(notification.channel as any)}\n                            size=\"small\"\n                            variant=\"outlined\"\n                            sx={{ fontSize: '0.7rem', height: 20 }}\n                          />\n                        </Box>\n                      }\n                      secondary={\n                        <Box>\n                          <Typography\n                            variant=\"body2\"\n                            color=\"text.secondary\"\n                            sx={{\n                              display: '-webkit-box',\n                              WebkitLineClamp: 2,\n                              WebkitBoxOrient: 'vertical',\n                              overflow: 'hidden',\n                              mb: 0.5\n                            }}\n                          >\n                            {notification.content}\n                          </Typography>\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {formatTimeAgo(notification.created_at)}\n                            </Typography>\n                            <Chip\n                              label={getStatusDisplayName(notification.status as any)}\n                              size=\"small\"\n                              sx={{\n                                fontSize: '0.6rem',\n                                height: 16,\n                                ...getStatusColor(notification.status as any).split(' ').reduce((acc, cls) => {\n                                  if (cls.startsWith('text-')) {\n                                    acc.color = cls.replace('text-', '');\n                                  } else if (cls.startsWith('bg-')) {\n                                    acc.backgroundColor = cls.replace('bg-', '');\n                                  }\n                                  return acc;\n                                }, {} as any)\n                              }}\n                            />\n                          </Box>\n                        </Box>\n                      }\n                    />\n                  </ListItem>\n                  {index < notifications.length - 1 && <Divider />}\n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n\n        <Divider />\n        <Box sx={{ p: 1 }}>\n          <Button\n            fullWidth\n            variant=\"text\"\n            onClick={() => {\n              // TODO: Navigate to notifications page\n              console.log('View all notifications');\n              handleClose();\n            }}\n          >\n            View All Notifications\n          </Button>\n        </Box>\n      </Menu>\n    </>\n  );\n};\n\nexport default NotificationBell;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Dashboard' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dashboard"},"fix":{"range":[253,263],"text":""},"desc":"Remove unused variable 'Dashboard'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"BarChart"},"fix":{"range":[291,303],"text":""},"desc":"Remove unused variable 'BarChart'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/NotificationDashboard.tsx\n// Main dashboard component for notification management\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Paper,\n  Tabs,\n  Tab,\n  Typography,\n  AppBar\n} from '@mui/material';\nimport {\n  Dashboard,\n  Create,\n  Send,\n  History,\n  BarChart\n} from '@mui/icons-material';\nimport NotificationTemplates from './NotificationTemplates';\nimport SendNotification from './SendNotification';\nimport NotificationLogs from './NotificationLogs';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`notification-tabpanel-${index}`}\n      aria-labelledby={`notification-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst NotificationDashboard: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setSelectedTab(newValue);\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Notification Management\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Manage notification templates, send messages, and view delivery logs\n        </Typography>\n      </Box>\n\n      <Paper sx={{ width: '100%' }}>\n        <AppBar position=\"static\" color=\"default\" elevation={0}>\n          <Tabs\n            value={selectedTab}\n            onChange={handleTabChange}\n            variant=\"fullWidth\"\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            sx={{ borderBottom: 1, borderColor: 'divider' }}\n          >\n            <Tab\n              label=\"Templates\"\n              icon={<Create />}\n              iconPosition=\"start\"\n              sx={{ textTransform: 'none' }}\n            />\n            <Tab\n              label=\"Send Notifications\"\n              icon={<Send />}\n              iconPosition=\"start\"\n              sx={{ textTransform: 'none' }}\n            />\n            <Tab\n              label=\"Logs & History\"\n              icon={<History />}\n              iconPosition=\"start\"\n              sx={{ textTransform: 'none' }}\n            />\n          </Tabs>\n        </AppBar>\n\n        <TabPanel value={selectedTab} index={0}>\n          <NotificationTemplates />\n        </TabPanel>\n\n        <TabPanel value={selectedTab} index={1}>\n          <SendNotification />\n        </TabPanel>\n\n        <TabPanel value={selectedTab} index={2}>\n          <NotificationLogs />\n        </TabPanel>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default NotificationDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationLogs.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[548,559],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DatePicker' is defined but never used.","line":57,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"DatePicker"},"fix":{"range":[862,922],"text":""},"desc":"Remove unused variable 'DatePicker'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'LocalizationProvider' is defined but never used.","line":58,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"LocalizationProvider"},"fix":{"range":[923,1003],"text":""},"desc":"Remove unused variable 'LocalizationProvider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AdapterDateFns' is defined but never used.","line":59,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"AdapterDateFns"},"fix":{"range":[1004,1072],"text":""},"desc":"Remove unused variable 'AdapterDateFns'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAnalyticsDays' is assigned a value but never used.","line":89,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAnalyticsDays"},"fix":{"range":[1864,1882],"text":""},"desc":"Remove unused variable 'setAnalyticsDays'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'analyticsLoading' is assigned a value but never used.","line":115,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"analyticsLoading"},"fix":{"range":[2514,2547],"text":""},"desc":"Remove unused variable 'analyticsLoading'."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/NotificationLogs.tsx\n// Component for viewing notification history and logs\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  CircularProgress,\n  Alert,\n  Chip,\n  IconButton,\n  Tooltip,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Grid,\n  TablePagination,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider\n} from '@mui/material';\nimport {\n  Visibility,\n  Email,\n  Sms,\n  NotificationImportant,\n  Notifications,\n  Person,\n  Group,\n  Refresh,\n  FilterList,\n  TrendingUp,\n  Schedule,\n  CheckCircle,\n  Error as ErrorIcon,\n  Warning\n} from '@mui/icons-material';\nimport { useQuery } from '@tanstack/react-query';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport {\n  getNotificationLogs,\n  getNotificationLog,\n  getNotificationAnalytics,\n  NotificationLog,\n  NOTIFICATION_CHANNELS,\n  NOTIFICATION_STATUSES,\n  getChannelDisplayName,\n  getStatusDisplayName,\n  getStatusColor,\n  notificationQueryKeys\n} from '../services/notificationService';\nimport { format } from 'date-fns';\n\nconst NotificationLogs: React.FC = () => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n  const [selectedLog, setSelectedLog] = useState<NotificationLog | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  \n  // Filter state\n  const [filters, setFilters] = useState({\n    recipient_type: '',\n    status: '',\n    channel: '',\n    search: ''\n  });\n\n  // Analytics state\n  const [analyticsDays, setAnalyticsDays] = useState(30);\n\n  // Get notification logs\n  const { \n    data: logs = [], \n    isLoading: logsLoading,\n    error: logsError,\n    refetch: refetchLogs\n  } = useQuery({\n    queryKey: notificationQueryKeys.logsFiltered({\n      ...filters,\n      limit: rowsPerPage,\n      offset: page * rowsPerPage\n    }),\n    queryFn: () => getNotificationLogs({\n      recipient_type: filters.recipient_type || undefined,\n      status: filters.status as any || undefined,\n      channel: filters.channel as any || undefined,\n      limit: rowsPerPage,\n      offset: page * rowsPerPage\n    }),\n  });\n\n  // Get analytics\n  const { \n    data: analytics,\n    isLoading: analyticsLoading \n  } = useQuery({\n    queryKey: notificationQueryKeys.analytics(analyticsDays),\n    queryFn: () => getNotificationAnalytics(analyticsDays),\n  });\n\n  // Get detailed log when modal opens\n  const { \n    data: logDetail,\n    isLoading: logDetailLoading \n  } = useQuery({\n    queryKey: notificationQueryKeys.log(selectedLog?.id || 0),\n    queryFn: () => getNotificationLog(selectedLog!.id),\n    enabled: !!selectedLog\n  });\n\n  const handleViewDetails = (log: NotificationLog) => {\n    setSelectedLog(log);\n    setIsDetailModalOpen(true);\n  };\n\n  const handleFilterChange = (field: string, value: string) => {\n    setFilters(prev => ({ ...prev, [field]: value }));\n    setPage(0); // Reset to first page when filtering\n  };\n\n  const resetFilters = () => {\n    setFilters({\n      recipient_type: '',\n      status: '',\n      channel: '',\n      search: ''\n    });\n    setPage(0);\n  };\n\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case 'email': return <Email fontSize=\"small\" />;\n      case 'sms': return <Sms fontSize=\"small\" />;\n      case 'push': return <NotificationImportant fontSize=\"small\" />;\n      case 'in_app': return <Notifications fontSize=\"small\" />;\n      default: return <Notifications fontSize=\"small\" />;\n    }\n  };\n\n  const getRecipientTypeIcon = (type: string) => {\n    return type === 'customer' ? <Person fontSize=\"small\" /> : <Group fontSize=\"small\" />;\n  };\n\n  const formatDate = (dateString: string) => {\n    return format(new Date(dateString), 'MMM dd, yyyy HH:mm');\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'sent':\n      case 'delivered':\n        return <CheckCircle fontSize=\"small\" color=\"success\" />;\n      case 'failed':\n      case 'bounced':\n        return <ErrorIcon fontSize=\"small\" color=\"error\" />;\n      case 'pending':\n        return <Schedule fontSize=\"small\" color=\"warning\" />;\n      default:\n        return <Warning fontSize=\"small\" />;\n    }\n  };\n\n  if (logsError) {\n    return (\n      <Alert severity=\"error\">\n        Failed to load notification logs. Please try again.\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Analytics Cards */}\n      {analytics && (\n        <Grid container spacing={3} mb={3}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                      Total Notifications\n                    </Typography>\n                    <Typography variant=\"h5\">\n                      {analytics.total_notifications.toLocaleString()}\n                    </Typography>\n                  </Box>\n                  <TrendingUp color=\"primary\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                      Success Rate\n                    </Typography>\n                    <Typography variant=\"h5\">\n                      {analytics.total_notifications > 0 \n                        ? Math.round(((analytics.status_breakdown?.delivered || 0) + (analytics.status_breakdown?.sent || 0)) / analytics.total_notifications * 100)\n                        : 0}%\n                    </Typography>\n                  </Box>\n                  <CheckCircle color=\"success\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                      Email Notifications\n                    </Typography>\n                    <Typography variant=\"h5\">\n                      {analytics.channel_breakdown?.email || 0}\n                    </Typography>\n                  </Box>\n                  <Email color=\"primary\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                      Failed Notifications\n                    </Typography>\n                    <Typography variant=\"h5\">\n                      {(analytics.status_breakdown?.failed || 0) + (analytics.status_breakdown?.bounced || 0)}\n                    </Typography>\n                  </Box>\n                  <ErrorIcon color=\"error\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Main Content */}\n      <Card>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h5\" component=\"h2\">\n              Notification Logs\n            </Typography>\n            <Box display=\"flex\" gap={1}>\n              <Tooltip title=\"Refresh\">\n                <IconButton onClick={() => refetchLogs()}>\n                  <Refresh />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          </Box>\n\n          {/* Filters */}\n          <Grid container spacing={2} mb={3}>\n            <Grid item xs={12} sm={6} md={2}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Channel</InputLabel>\n                <Select\n                  value={filters.channel}\n                  label=\"Channel\"\n                  onChange={(e) => handleFilterChange('channel', e.target.value)}\n                >\n                  <MenuItem value=\"\">All Channels</MenuItem>\n                  {NOTIFICATION_CHANNELS.map(channel => (\n                    <MenuItem key={channel} value={channel}>\n                      {getChannelDisplayName(channel)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={2}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Status</InputLabel>\n                <Select\n                  value={filters.status}\n                  label=\"Status\"\n                  onChange={(e) => handleFilterChange('status', e.target.value)}\n                >\n                  <MenuItem value=\"\">All Statuses</MenuItem>\n                  {NOTIFICATION_STATUSES.map(status => (\n                    <MenuItem key={status} value={status}>\n                      {getStatusDisplayName(status)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={2}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Recipient Type</InputLabel>\n                <Select\n                  value={filters.recipient_type}\n                  label=\"Recipient Type\"\n                  onChange={(e) => handleFilterChange('recipient_type', e.target.value)}\n                >\n                  <MenuItem value=\"\">All Types</MenuItem>\n                  <MenuItem value=\"customer\">Customer</MenuItem>\n                  <MenuItem value=\"user\">User</MenuItem>\n                  <MenuItem value=\"segment\">Segment</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={3}>\n              <TextField\n                fullWidth\n                size=\"small\"\n                label=\"Search recipient\"\n                value={filters.search}\n                onChange={(e) => handleFilterChange('search', e.target.value)}\n                placeholder=\"Search by email, name...\"\n              />\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={3}>\n              <Box display=\"flex\" gap={1}>\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  startIcon={<FilterList />}\n                  onClick={resetFilters}\n                >\n                  Clear Filters\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n\n          {/* Table */}\n          {logsLoading ? (\n            <Box display=\"flex\" justifyContent=\"center\" py={4}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Recipient</TableCell>\n                      <TableCell>Channel</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Subject/Content</TableCell>\n                      <TableCell>Sent At</TableCell>\n                      <TableCell>Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {logs.map((log) => (\n                      <TableRow key={log.id}>\n                        <TableCell>\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                            {getRecipientTypeIcon(log.recipient_type)}\n                            <Box>\n                              <Typography variant=\"body2\">\n                                {log.recipient_identifier}\n                              </Typography>\n                              <Typography variant=\"caption\" color=\"text.secondary\">\n                                {log.recipient_type}\n                              </Typography>\n                            </Box>\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                            {getChannelIcon(log.channel)}\n                            {getChannelDisplayName(log.channel as any)}\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                            {getStatusIcon(log.status)}\n                            <Chip\n                              label={getStatusDisplayName(log.status as any)}\n                              size=\"small\"\n                              className={getStatusColor(log.status as any)}\n                            />\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          <Box>\n                            {log.subject && (\n                              <Typography variant=\"body2\" fontWeight=\"medium\">\n                                {log.subject.length > 50 ? `${log.subject.substring(0, 50)}...` : log.subject}\n                              </Typography>\n                            )}\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {log.content.length > 80 ? `${log.content.substring(0, 80)}...` : log.content}\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          {log.sent_at ? (\n                            <Box>\n                              <Typography variant=\"body2\">\n                                {formatDate(log.sent_at)}\n                              </Typography>\n                              {log.delivered_at && (\n                                <Typography variant=\"caption\" color=\"text.secondary\">\n                                  Delivered: {formatDate(log.delivered_at)}\n                                </Typography>\n                              )}\n                            </Box>\n                          ) : (\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              {formatDate(log.created_at)}\n                            </Typography>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Tooltip title=\"View Details\">\n                            <IconButton \n                              size=\"small\" \n                              onClick={() => handleViewDetails(log)}\n                            >\n                              <Visibility />\n                            </IconButton>\n                          </Tooltip>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                    {logs.length === 0 && (\n                      <TableRow>\n                        <TableCell colSpan={6} align=\"center\" sx={{ py: 4 }}>\n                          <Typography color=\"text.secondary\">\n                            No notification logs found\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n\n              <TablePagination\n                component=\"div\"\n                count={-1} // Unknown total count\n                page={page}\n                onPageChange={(_, newPage) => setPage(newPage)}\n                rowsPerPage={rowsPerPage}\n                onRowsPerPageChange={(e) => {\n                  setRowsPerPage(parseInt(e.target.value, 10));\n                  setPage(0);\n                }}\n                rowsPerPageOptions={[10, 25, 50, 100]}\n              />\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Detail Modal */}\n      <Dialog \n        open={isDetailModalOpen} \n        onClose={() => setIsDetailModalOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Notification Details</DialogTitle>\n        <DialogContent>\n          {logDetailLoading ? (\n            <Box display=\"flex\" justifyContent=\"center\" py={4}>\n              <CircularProgress />\n            </Box>\n          ) : logDetail ? (\n            <Box>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Recipient\n                  </Typography>\n                  <Typography gutterBottom>\n                    {logDetail.recipient_identifier} ({logDetail.recipient_type})\n                  </Typography>\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Channel\n                  </Typography>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1} gutterBottom>\n                    {getChannelIcon(logDetail.channel)}\n                    {getChannelDisplayName(logDetail.channel as any)}\n                  </Box>\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Status\n                  </Typography>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1} gutterBottom>\n                    {getStatusIcon(logDetail.status)}\n                    <Chip\n                      label={getStatusDisplayName(logDetail.status as any)}\n                      size=\"small\"\n                      className={getStatusColor(logDetail.status as any)}\n                    />\n                  </Box>\n                </Grid>\n\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Created At\n                  </Typography>\n                  <Typography gutterBottom>\n                    {formatDate(logDetail.created_at)}\n                  </Typography>\n                </Grid>\n\n                {logDetail.subject && (\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                      Subject\n                    </Typography>\n                    <Typography gutterBottom>\n                      {logDetail.subject}\n                    </Typography>\n                  </Grid>\n                )}\n\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Content\n                  </Typography>\n                  <Paper sx={{ p: 2, bgcolor: 'grey.50', mt: 1 }}>\n                    <Typography style={{ whiteSpace: 'pre-wrap' }}>\n                      {logDetail.content}\n                    </Typography>\n                  </Paper>\n                </Grid>\n\n                {logDetail.error_message && (\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle2\" color=\"error\">\n                      Error Message\n                    </Typography>\n                    <Alert severity=\"error\" sx={{ mt: 1 }}>\n                      {logDetail.error_message}\n                    </Alert>\n                  </Grid>\n                )}\n\n                {logDetail.context_data && (\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                      Context Data\n                    </Typography>\n                    <Paper sx={{ p: 2, bgcolor: 'grey.50', mt: 1 }}>\n                      <pre>{JSON.stringify(logDetail.context_data, null, 2)}</pre>\n                    </Paper>\n                  </Grid>\n                )}\n\n                {/* Timeline */}\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                    Timeline\n                  </Typography>\n                  <List dense>\n                    <ListItem>\n                      <ListItemIcon>\n                        <Schedule fontSize=\"small\" />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary=\"Created\"\n                        secondary={formatDate(logDetail.created_at)}\n                      />\n                    </ListItem>\n                    {logDetail.sent_at && (\n                      <ListItem>\n                        <ListItemIcon>\n                          <CheckCircle fontSize=\"small\" color=\"primary\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Sent\"\n                          secondary={formatDate(logDetail.sent_at)}\n                        />\n                      </ListItem>\n                    )}\n                    {logDetail.delivered_at && (\n                      <ListItem>\n                        <ListItemIcon>\n                          <CheckCircle fontSize=\"small\" color=\"success\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Delivered\"\n                          secondary={formatDate(logDetail.delivered_at)}\n                        />\n                      </ListItem>\n                    )}\n                    {logDetail.opened_at && (\n                      <ListItem>\n                        <ListItemIcon>\n                          <Visibility fontSize=\"small\" color=\"info\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Opened\"\n                          secondary={formatDate(logDetail.opened_at)}\n                        />\n                      </ListItem>\n                    )}\n                    {logDetail.clicked_at && (\n                      <ListItem>\n                        <ListItemIcon>\n                          <TrendingUp fontSize=\"small\" color=\"success\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Clicked\"\n                          secondary={formatDate(logDetail.clicked_at)}\n                        />\n                      </ListItem>\n                    )}\n                  </List>\n                </Grid>\n              </Grid>\n            </Box>\n          ) : null}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDetailModalOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default NotificationLogs;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationSettingsModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[288,303],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[311,322],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getNotificationTemplates' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"getNotificationTemplates"},"fix":{"range":[742,767],"text":""},"desc":"Remove unused variable 'getNotificationTemplates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'createNotificationTemplate' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"createNotificationTemplate"},"fix":{"range":[766,796],"text":""},"desc":"Remove unused variable 'createNotificationTemplate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updateNotificationTemplate' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"updateNotificationTemplate"},"fix":{"range":[796,826],"text":""},"desc":"Remove unused variable 'updateNotificationTemplate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'notificationQueryKeys' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"notificationQueryKeys"},"fix":{"range":[826,851],"text":""},"desc":"Remove unused variable 'notificationQueryKeys'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'NotificationTemplate' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"NotificationTemplate"},"fix":{"range":[851,875],"text":""},"desc":"Remove unused variable 'NotificationTemplate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TEMPLATE_TYPES' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"TEMPLATE_TYPES"},"fix":{"range":[900,918],"text":""},"desc":"Remove unused variable 'TEMPLATE_TYPES'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getTemplateTypeDisplayName' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"getTemplateTypeDisplayName"},"fix":{"range":[943,973],"text":""},"desc":"Remove unused variable 'getTemplateTypeDisplayName'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":142,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[4773,4778],"text":""},"desc":"Remove unused variable 'error'."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/NotificationSettingsModal.tsx\n// Modal for managing user notification preferences\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  Switch,\n  FormControlLabel,\n  Card,\n  CardContent,\n  Grid,\n  Divider,\n  Alert,\n  CircularProgress,\n  Chip,\n  IconButton,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  Close,\n  Email,\n  Sms,\n  NotificationImportant,\n  Notifications,\n  ExpandMore,\n  Save,\n  RestoreDefaultsNone as Restore\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport {\n  getNotificationTemplates,\n  createNotificationTemplate,\n  updateNotificationTemplate,\n  notificationQueryKeys,\n  NotificationTemplate,\n  NOTIFICATION_CHANNELS,\n  TEMPLATE_TYPES,\n  getChannelDisplayName,\n  getTemplateTypeDisplayName\n} from '../services/notificationService';\n\ninterface NotificationSettingsModalProps {\n  open: boolean;\n  onClose: () => void;\n  userId: number;\n  userType?: 'user' | 'customer';\n}\n\ninterface PreferenceState {\n  [key: string]: {\n    [channel: string]: boolean;\n  };\n}\n\nconst NotificationSettingsModal: React.FC<NotificationSettingsModalProps> = ({\n  open,\n  onClose,\n  userId,\n  userType = 'user'\n}) => {\n  const [preferences, setPreferences] = useState<PreferenceState>({});\n  const [hasChanges, setHasChanges] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Available notification types\n  const notificationTypes = [\n    { key: 'job_assignment', label: 'Job Assignment', description: 'When a new job is assigned to you' },\n    { key: 'job_update', label: 'Job Updates', description: 'When job status or details change' },\n    { key: 'job_completion', label: 'Job Completion', description: 'When a job is completed' },\n    { key: 'feedback_request', label: 'Feedback Requests', description: 'When feedback is requested' },\n    { key: 'sla_breach', label: 'SLA Breach Alerts', description: 'When SLA deadlines are at risk' },\n    { key: 'appointment_reminder', label: 'Appointment Reminders', description: 'Reminders for upcoming appointments' },\n    { key: 'service_completion', label: 'Service Completion', description: 'When service work is completed' },\n    { key: 'follow_up', label: 'Follow-up Messages', description: 'Follow-up communications' },\n    { key: 'marketing', label: 'Marketing Messages', description: 'Promotional and marketing content' },\n    { key: 'system', label: 'System Notifications', description: 'Important system updates and alerts' }\n  ];\n\n  // Fetch current preferences\n  const { data: currentPreferences = [], isLoading } = useQuery({\n    queryKey: ['notification-preferences', userType, userId],\n    queryFn: async () => {\n      // TODO: Implement API call to get user preferences\n      // For now, return mock data\n      return [\n        { notification_type: 'job_assignment', channel: 'email', is_enabled: true },\n        { notification_type: 'job_assignment', channel: 'in_app', is_enabled: true },\n        { notification_type: 'sla_breach', channel: 'email', is_enabled: true },\n        { notification_type: 'sla_breach', channel: 'sms', is_enabled: true },\n        { notification_type: 'marketing', channel: 'email', is_enabled: false },\n      ];\n    },\n    enabled: open,\n  });\n\n  // Initialize preferences state from API data\n  useEffect(() => {\n    if (currentPreferences.length > 0) {\n      const prefState: PreferenceState = {};\n      \n      notificationTypes.forEach(type => {\n        prefState[type.key] = {};\n        NOTIFICATION_CHANNELS.forEach(channel => {\n          const existing = currentPreferences.find(\n            p => p.notification_type === type.key && p.channel === channel\n          );\n          // Default to enabled for important notifications, disabled for marketing\n          const defaultEnabled = !['marketing'].includes(type.key);\n          prefState[type.key][channel] = existing ? existing.is_enabled : defaultEnabled;\n        });\n      });\n      \n      setPreferences(prefState);\n    }\n  }, [currentPreferences]);\n\n  // Save preferences mutation\n  const savePreferencesMutation = useMutation({\n    mutationFn: async (prefs: PreferenceState) => {\n      // TODO: Implement API call to save preferences\n      console.log('Saving preferences:', prefs);\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      toast.success('Notification preferences saved successfully');\n      setHasChanges(false);\n      queryClient.invalidateQueries({ queryKey: ['notification-preferences'] });\n    },\n    onError: (error) => {\n      toast.error('Failed to save notification preferences');\n    }\n  });\n\n  const handlePreferenceChange = (notificationType: string, channel: string, enabled: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      [notificationType]: {\n        ...prev[notificationType],\n        [channel]: enabled\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleSelectAll = (notificationType: string, enabled: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      [notificationType]: NOTIFICATION_CHANNELS.reduce((acc, channel) => ({\n        ...acc,\n        [channel]: enabled\n      }), {})\n    }));\n    setHasChanges(true);\n  };\n\n  const handleSave = () => {\n    savePreferencesMutation.mutate(preferences);\n  };\n\n  const handleReset = () => {\n    // Reset to defaults\n    const defaultPrefs: PreferenceState = {};\n    notificationTypes.forEach(type => {\n      defaultPrefs[type.key] = {};\n      NOTIFICATION_CHANNELS.forEach(channel => {\n        defaultPrefs[type.key][channel] = !['marketing'].includes(type.key);\n      });\n    });\n    setPreferences(defaultPrefs);\n    setHasChanges(true);\n  };\n\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case 'email':\n        return <Email sx={{ fontSize: 16 }} />;\n      case 'sms':\n        return <Sms sx={{ fontSize: 16 }} />;\n      case 'push':\n        return <NotificationImportant sx={{ fontSize: 16 }} />;\n      case 'in_app':\n        return <Notifications sx={{ fontSize: 16 }} />;\n      default:\n        return null;\n    }\n  };\n\n  const getEnabledChannelsCount = (notificationType: string) => {\n    if (!preferences[notificationType]) {return 0;}\n    return Object.values(preferences[notificationType]).filter(Boolean).length;\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { height: '80vh' }\n      }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">Notification Settings</Typography>\n          <IconButton onClick={onClose} aria-label=\"close\">\n            <Close />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n\n      <DialogContent>\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          Choose how you want to be notified about different types of events. You can enable or disable \n          notifications for each channel (email, SMS, push, in-app).\n        </Alert>\n\n        {isLoading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : (\n          <Box>\n            {notificationTypes.map((type) => (\n              <Accordion key={type.key} defaultExpanded>\n                <AccordionSummary expandIcon={<ExpandMore />}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%', mr: 2 }}>\n                    <Box>\n                      <Typography variant=\"subtitle1\" sx={{ fontWeight: 'medium' }}>\n                        {type.label}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {type.description}\n                      </Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', gap: 1 }}>\n                      <Chip\n                        label={`${getEnabledChannelsCount(type.key)}/${NOTIFICATION_CHANNELS.length} enabled`}\n                        size=\"small\"\n                        color={getEnabledChannelsCount(type.key) > 0 ? 'primary' : 'default'}\n                        variant=\"outlined\"\n                      />\n                    </Box>\n                  </Box>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <Box sx={{ pl: 2 }}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={12}>\n                        <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n                          <Button\n                            size=\"small\"\n                            variant=\"outlined\"\n                            onClick={() => handleSelectAll(type.key, true)}\n                          >\n                            Enable All\n                          </Button>\n                          <Button\n                            size=\"small\"\n                            variant=\"outlined\"\n                            onClick={() => handleSelectAll(type.key, false)}\n                          >\n                            Disable All\n                          </Button>\n                        </Box>\n                      </Grid>\n                      {NOTIFICATION_CHANNELS.map((channel) => (\n                        <Grid item xs={6} sm={3} key={channel}>\n                          <Card variant=\"outlined\" sx={{ p: 1 }}>\n                            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\n                              {getChannelIcon(channel)}\n                              <Typography variant=\"body2\" align=\"center\">\n                                {getChannelDisplayName(channel)}\n                              </Typography>\n                              <FormControlLabel\n                                control={\n                                  <Switch\n                                    checked={preferences[type.key]?.[channel] || false}\n                                    onChange={(e) => handlePreferenceChange(type.key, channel, e.target.checked)}\n                                    size=\"small\"\n                                  />\n                                }\n                                label=\"\"\n                                sx={{ m: 0 }}\n                              />\n                            </Box>\n                          </Card>\n                        </Grid>\n                      ))}\n                    </Grid>\n                  </Box>\n                </AccordionDetails>\n              </Accordion>\n            ))}\n          </Box>\n        )}\n      </DialogContent>\n\n      <DialogActions sx={{ p: 3, gap: 1 }}>\n        <Button\n          onClick={handleReset}\n          startIcon={<Restore />}\n          variant=\"outlined\"\n        >\n          Reset to Defaults\n        </Button>\n        <Box sx={{ flex: 1 }} />\n        <Button onClick={onClose} variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          variant=\"contained\"\n          startIcon={<Save />}\n          disabled={!hasChanges || savePreferencesMutation.isPending}\n        >\n          {savePreferencesMutation.isPending ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default NotificationSettingsModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationTemplates.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'notificationQueryKeys' is not defined.","line":112,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":119,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[2672,2676],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-undef","severity":2,"message":"'notificationQueryKeys' is not defined.","line":120,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":120,"endColumn":70},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":122,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":122,"endColumn":16},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 110 column 5.","line":125,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":125,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 110 column 5.","line":125,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":125,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":134,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[3221,3225],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-undef","severity":2,"message":"'notificationQueryKeys' is not defined.","line":135,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":135,"endColumn":70},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":137,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":137,"endColumn":16},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 110 column 5.","line":140,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":140,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 110 column 5.","line":140,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":140,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":148,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":148,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[3683,3687],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-undef","severity":2,"message":"'notificationQueryKeys' is not defined.","line":149,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":149,"endColumn":70},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 110 column 5.","line":154,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":154,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 110 column 5.","line":154,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":154,"endColumn":25},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 110 column 5.","line":167,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":167,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 110 column 5.","line":167,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":167,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Assignment' is not defined.","line":247,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":247,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'Assignment' is not defined.","line":247,"column":17,"nodeType":"JSXIdentifier","messageId":"undef","endLine":247,"endColumn":27},{"ruleId":"no-shadow","severity":2,"message":"'templates' is already declared in the upper scope on line 108 column 11.","line":257,"column":77,"nodeType":"Identifier","messageId":"noShadow","endLine":257,"endColumn":86},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'templates' is already declared in the upper scope on line 108 column 11.","line":257,"column":77,"nodeType":"Identifier","messageId":"noShadow","endLine":257,"endColumn":86}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  CircularProgress,\n  Alert,\n  Chip,\n  IconButton,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Switch,\n  FormControlLabel,\n  Tabs,\n  Tab\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  PlayArrow,\n  Notifications,\n  Email,\n  Sms,\n  NotificationImportant\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport {\n  getNotificationTemplates,\n  createNotificationTemplate,\n  updateNotificationTemplate,\n  deleteNotificationTemplate,\n  testNotificationTemplate,\n  NotificationTemplate,\n  NotificationTemplateCreate,\n  NotificationTemplateUpdate,\n  NOTIFICATION_CHANNELS,\n  TEMPLATE_TYPES,\n  getChannelDisplayName,\n  getTemplateTypeDisplayName\n} from '../services/notificationService';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`template-tabpanel-${index}`}\n      aria-labelledby={`template-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst NotificationTemplates: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [editingTemplate, setEditingTemplate] = useState<NotificationTemplate | null>(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [templateToDelete, setTemplateToDelete] = useState<NotificationTemplate | null>(null);\n  \n  const queryClient = useQueryClient();\n\n  // Form state for create/edit\n  const [formData, setFormData] = useState<NotificationTemplateCreate>({\n    name: '',\n    description: '',\n    template_type: 'appointment_reminder',\n    channel: 'email',\n    subject: '',\n    body: '',\n    html_body: '',\n    trigger_event: '',\n    variables: [],\n    is_active: true\n  });\n\n  // Get templates data\n  const { \n    data: templates = [], \n    isLoading, \n    error \n  } = useQuery({\n    queryKey: notificationQueryKeys.templates(),\n    queryFn: () => getNotificationTemplates(),\n  });\n\n  // Create template mutation\n  const createMutation = useMutation({\n    mutationFn: createNotificationTemplate,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: notificationQueryKeys.templates() });\n      setIsCreateModalOpen(false);\n      resetForm();\n      toast.success('Template created successfully');\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to create template');\n    }\n  });\n\n  // Update template mutation\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: NotificationTemplateUpdate }) =>\n      updateNotificationTemplate(id, data),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: notificationQueryKeys.templates() });\n      setEditingTemplate(null);\n      resetForm();\n      toast.success('Template updated successfully');\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to update template');\n    }\n  });\n\n  // Delete template mutation\n  const deleteMutation = useMutation({\n    mutationFn: deleteNotificationTemplate,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: notificationQueryKeys.templates() });\n      setIsDeleteModalOpen(false);\n      setTemplateToDelete(null);\n      toast.success('Template deleted successfully');\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to delete template');\n    }\n  });\n\n  // Test template mutation\n  const testMutation = useMutation({\n    mutationFn: ({ id, testData }: { id: number; testData: any }) =>\n      testNotificationTemplate(id, testData),\n    onSuccess: (data) => {\n      toast.success('Template test completed successfully');\n      console.log('Test result:', data);\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to test template');\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      template_type: 'appointment_reminder',\n      channel: 'email',\n      subject: '',\n      body: '',\n      html_body: '',\n      trigger_event: '',\n      variables: [],\n      is_active: true\n    });\n  };\n\n  const handleEdit = (template: NotificationTemplate) => {\n    setEditingTemplate(template);\n    setFormData({\n      name: template.name,\n      description: template.description || '',\n      template_type: template.template_type,\n      channel: template.channel,\n      subject: template.subject || '',\n      body: template.body,\n      html_body: template.html_body || '',\n      trigger_event: template.trigger_event || '',\n      variables: template.variables || [],\n      is_active: template.is_active\n    });\n    setIsCreateModalOpen(true);\n  };\n\n  const handleSubmit = () => {\n    if (editingTemplate) {\n      updateMutation.mutate({ id: editingTemplate.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (template: NotificationTemplate) => {\n    setTemplateToDelete(template);\n    setIsDeleteModalOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (templateToDelete) {\n      deleteMutation.mutate(templateToDelete.id);\n    }\n  };\n\n  const handleTest = (template: NotificationTemplate) => {\n    testMutation.mutate({\n      id: template.id,\n      testData: {\n        variables: {\n          customer_name: 'John Doe',\n          appointment_date: '2024-01-15 10:00 AM',\n          service_type: 'AC Repair'\n        }\n      }\n    });\n  };\n\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case 'email':\n        return <Email />;\n      case 'sms':\n        return <Sms />;\n      case 'push':\n        return <NotificationImportant />;\n      case 'in_app':\n        return <Notifications />;\n      default:\n        return <Assignment />;\n    }\n  };\n\n  // Filter templates by channel for tabs\n  const emailTemplates = templates.filter(t => t.channel === 'email');\n  const smsTemplates = templates.filter(t => t.channel === 'sms');\n  const pushTemplates = templates.filter(t => t.channel === 'push');\n  const inAppTemplates = templates.filter(t => t.channel === 'in_app');\n\n  const TemplateTable: React.FC<{ templates: NotificationTemplate[] }> = ({ templates }) => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Type</TableCell>\n            <TableCell>Channel</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Variables</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {templates.map((template) => (\n            <TableRow key={template.id}>\n              <TableCell>\n                <Box>\n                  <Typography variant=\"subtitle2\">{template.name}</Typography>\n                  {template.description && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {template.description}\n                    </Typography>\n                  )}\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Chip \n                  label={getTemplateTypeDisplayName(template.template_type as any)} \n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              </TableCell>\n              <TableCell>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  {getChannelIcon(template.channel)}\n                  {getChannelDisplayName(template.channel as any)}\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Chip \n                  label={template.is_active ? 'Active' : 'Inactive'}\n                  color={template.is_active ? 'success' : 'default'}\n                  size=\"small\"\n                />\n              </TableCell>\n              <TableCell>\n                {template.variables && template.variables.length > 0 && (\n                  <Tooltip title={template.variables.join(', ')}>\n                    <Chip \n                      label={`${template.variables.length} variables`} \n                      size=\"small\"\n                      variant=\"outlined\"\n                    />\n                  </Tooltip>\n                )}\n              </TableCell>\n              <TableCell>\n                <Box display=\"flex\" gap={1}>\n                  <Tooltip title=\"Test Template\">\n                    <IconButton \n                      size=\"small\" \n                      onClick={() => handleTest(template)}\n                      disabled={testMutation.isPending}\n                    >\n                      <PlayArrow />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Edit Template\">\n                    <IconButton size=\"small\" onClick={() => handleEdit(template)}>\n                      <Edit />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Delete Template\">\n                    <IconButton \n                      size=\"small\" \n                      onClick={() => handleDelete(template)}\n                      color=\"error\"\n                    >\n                      <Delete />\n                    </IconButton>\n                  </Tooltip>\n                </Box>\n              </TableCell>\n            </TableRow>\n          ))}\n          {templates.length === 0 && (\n            <TableRow>\n              <TableCell colSpan={6} align=\"center\" sx={{ py: 4 }}>\n                <Typography color=\"text.secondary\">\n                  No templates found for this channel\n                </Typography>\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  if (error) {\n    return (\n      <Alert severity=\"error\">\n        Failed to load notification templates. Please try again.\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h5\" component=\"h2\">\n              Notification Templates\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              Create Template\n            </Button>\n          </Box>\n\n          {isLoading ? (\n            <Box display=\"flex\" justifyContent=\"center\" py={4}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <Box>\n              <Tabs \n                value={selectedTab} \n                onChange={(_, newValue) => setSelectedTab(newValue)}\n                sx={{ borderBottom: 1, borderColor: 'divider' }}\n              >\n                <Tab \n                  label={`Email (${emailTemplates.length})`} \n                  icon={<Email />}\n                  iconPosition=\"start\"\n                />\n                <Tab \n                  label={`SMS (${smsTemplates.length})`} \n                  icon={<Sms />}\n                  iconPosition=\"start\"\n                />\n                <Tab \n                  label={`Push (${pushTemplates.length})`} \n                  icon={<NotificationImportant />}\n                  iconPosition=\"start\"\n                />\n                <Tab \n                  label={`In-App (${inAppTemplates.length})`} \n                  icon={<Notifications />}\n                  iconPosition=\"start\"\n                />\n              </Tabs>\n\n              <TabPanel value={selectedTab} index={0}>\n                <TemplateTable templates={emailTemplates} />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={1}>\n                <TemplateTable templates={smsTemplates} />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={2}>\n                <TemplateTable templates={pushTemplates} />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={3}>\n                <TemplateTable templates={inAppTemplates} />\n              </TabPanel>\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Create/Edit Template Modal */}\n      <Dialog \n        open={isCreateModalOpen} \n        onClose={() => setIsCreateModalOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          {editingTemplate ? 'Edit Template' : 'Create Template'}\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Template Name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Template Type</InputLabel>\n                <Select\n                  value={formData.template_type}\n                  label=\"Template Type\"\n                  onChange={(e) => setFormData({ ...formData, template_type: e.target.value })}\n                >\n                  {TEMPLATE_TYPES.map(type => (\n                    <MenuItem key={type} value={type}>\n                      {getTemplateTypeDisplayName(type)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Channel</InputLabel>\n                <Select\n                  value={formData.channel}\n                  label=\"Channel\"\n                  onChange={(e) => setFormData({ ...formData, channel: e.target.value })}\n                >\n                  {NOTIFICATION_CHANNELS.map(channel => (\n                    <MenuItem key={channel} value={channel}>\n                      {getChannelDisplayName(channel)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={formData.is_active}\n                    onChange={(e) => setFormData({ ...formData, is_active: e.target.checked })}\n                  />\n                }\n                label=\"Active\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                multiline\n                rows={2}\n              />\n            </Grid>\n            {formData.channel === 'email' && (\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Subject\"\n                  value={formData.subject}\n                  onChange={(e) => setFormData({ ...formData, subject: e.target.value })}\n                />\n              </Grid>\n            )}\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Message Body\"\n                value={formData.body}\n                onChange={(e) => setFormData({ ...formData, body: e.target.value })}\n                multiline\n                rows={4}\n                required\n                helperText=\"Use {variable_name} for dynamic content (e.g., {customer_name}, {appointment_date})\"\n              />\n            </Grid>\n            {formData.channel === 'email' && (\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"HTML Body (Optional)\"\n                  value={formData.html_body}\n                  onChange={(e) => setFormData({ ...formData, html_body: e.target.value })}\n                  multiline\n                  rows={4}\n                  helperText=\"HTML version of the email for rich formatting\"\n                />\n              </Grid>\n            )}\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Trigger Event (Optional)\"\n                value={formData.trigger_event}\n                onChange={(e) => setFormData({ ...formData, trigger_event: e.target.value })}\n                helperText=\"Event that automatically triggers this notification (e.g., customer_interaction, appointment_scheduled)\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsCreateModalOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleSubmit}\n            variant=\"contained\"\n            disabled={createMutation.isPending || updateMutation.isPending}\n          >\n            {editingTemplate ? 'Update' : 'Create'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Delete Confirmation Modal */}\n      <Dialog open={isDeleteModalOpen} onClose={() => setIsDeleteModalOpen(false)}>\n        <DialogTitle>Confirm Delete</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete the template \"{templateToDelete?.name}\"?\n            This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDeleteModalOpen(false)}>Cancel</Button>\n          <Button \n            onClick={confirmDelete}\n            color=\"error\"\n            variant=\"contained\"\n            disabled={deleteMutation.isPending}\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default NotificationTemplates;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OTPLogin.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FieldErrors' is defined but never used.","line":16,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"FieldErrors"},"fix":{"range":[230,243],"text":""},"desc":"Remove unused variable 'FieldErrors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":21,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"token"},"fix":{"range":[409,423],"text":""},"desc":"Remove unused variable 'token'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":21,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[422,443],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'response' is assigned a value but never used.","line":51,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"response"},"fix":{"range":[1194,1252],"text":""},"desc":"Remove unused variable 'response'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":55,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":55,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":55,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":55,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":80,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":80,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":80,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":80,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":94,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":94,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":94,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":94,"endColumn":24}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  CircularProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  Container\n} from '@mui/material';\nimport { useForm, FieldErrors } from 'react-hook-form';\nimport { useRouter } from 'next/navigation';\nimport { authService } from '../services/authService';\n\ninterface OTPLoginProps {\n  onLogin: (token: string, loginResponse?: any) => void;\n}\n\ninterface EmailFormData {\n  email: string;\n}\n\ninterface OTPFormData {\n  otp: string;\n}\n\nconst OTPLogin: React.FC<OTPLoginProps> = ({ onLogin }) => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  \n  const emailForm = useForm<EmailFormData>();\n  const otpForm = useForm<OTPFormData>();\n  const router = useRouter(); // Removed underscore since it's used\n\n  const steps = ['Enter Email', 'Verify OTP'];\n\n  const handleEmailSubmit = async (data: EmailFormData) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      const response = await authService.requestOTP(data.email);\n      setUserEmail(data.email);\n      setSuccess(`OTP sent to ${data.email}. Please check your email.`);\n      setActiveStep(1);\n    } catch (error: any) {\n      setError(error.response?.data?.detail || 'Failed to send OTP. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOTPSubmit = async (data: OTPFormData) => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      const response = await authService.verifyOTP(userEmail, data.otp);\n      setSuccess('Login successful!');\n      \n      // Login successful!\n      localStorage.setItem('token', response.access_token);\n      localStorage.setItem('user_role', response.user_role);\n      // Organization context is managed by backend session only\n      \n      // Call parent callback with token and response\n      onLogin(response.access_token, response);\n      \n      // Redirect to dashboard\n      router.push('/dashboard');\n    } catch (error: any) {\n      setError(error.response?.data?.detail || 'Invalid OTP. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResendOTP = async () => {\n    setLoading(true);\n    setError('');\n    \n    try {\n      await authService.requestOTP(userEmail);\n      setSuccess('OTP resent successfully!');\n    } catch (error: any) {\n      setError(error.response?.data?.detail || 'Failed to resend OTP.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep(0);\n    setError('');\n    setSuccess('');\n    emailForm.reset();\n    otpForm.reset();\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box sx={{ mt: 8, mb: 4 }}>\n        <Card>\n          <CardContent sx={{ p: 4 }}>\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\">\n              TRITIQ ERP\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\" gutterBottom align=\"center\" color=\"textSecondary\">\n              OTP Authentication\n            </Typography>\n\n            <Stepper activeStep={activeStep} sx={{ mt: 3, mb: 4 }}>\n              {steps.map((label) => (\n                <Step key={label}>\n                  <StepLabel>{label}</StepLabel>\n                </Step>\n              ))}\n            </Stepper>\n\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\n                {error}\n              </Alert>\n            )}\n\n            {success && (\n              <Alert severity=\"success\" sx={{ mb: 2 }}>\n                {success}\n              </Alert>\n            )}\n\n            {activeStep === 0 && (\n              <Box component=\"form\" onSubmit={emailForm.handleSubmit(handleEmailSubmit)}>\n                <TextField\n                  fullWidth\n                  label=\"Email Address\"\n                  type=\"email\"\n                  {...emailForm.register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: 'Invalid email address'\n                    }\n                  })}\n                  error={!!emailForm.formState.errors.email}\n                  helperText={emailForm.formState.errors.email?.message}\n                  margin=\"normal\"\n                  autoFocus\n                />\n\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  sx={{ mt: 3, mb: 2 }}\n                  disabled={loading}\n                >\n                  {loading ? <CircularProgress size={24} /> : 'Send OTP'}\n                </Button>\n\n                <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n                  Enter your email address to receive an OTP for secure login.\n                </Typography>\n              </Box>\n            )}\n\n            {activeStep === 1 && (\n              <Box component=\"form\" onSubmit={otpForm.handleSubmit(handleOTPSubmit)}>\n                <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                  Enter the 6-digit OTP sent to: <strong>{userEmail}</strong>\n                </Typography>\n\n                <TextField\n                  fullWidth\n                  label=\"OTP Code\"\n                  type=\"text\"\n                  inputProps={{ maxLength: 6, pattern: '[0-9]*' }}\n                  {...otpForm.register('otp', {\n                    required: 'OTP is required',\n                    pattern: {\n                      value: /^\\d{6}$/,\n                      message: 'OTP must be 6 digits'\n                    }\n                  })}\n                  error={!!otpForm.formState.errors.otp}\n                  helperText={otpForm.formState.errors.otp?.message}\n                  margin=\"normal\"\n                  autoFocus\n                />\n\n                <Box sx={{ mt: 3, mb: 2, display: 'flex', gap: 2 }}>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={handleBack}\n                    disabled={loading}\n                    sx={{ flex: 1 }}\n                  >\n                    Back\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    disabled={loading}\n                    sx={{ flex: 1 }}\n                  >\n                    {loading ? <CircularProgress size={24} /> : 'Verify & Login'}\n                  </Button>\n                </Box>\n\n                <Button\n                  variant=\"text\"\n                  onClick={handleResendOTP}\n                  disabled={loading}\n                  fullWidth\n                  sx={{ mt: 1 }}\n                >\n                  Resend OTP\n                </Button>\n\n                <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" sx={{ mt: 2 }}>\n                  OTP is valid for 10 minutes.\n                </Typography>\n              </Box>\n            )}\n          </CardContent>\n        </Card>\n      </Box>\n    </Container>\n  );\n};\n\nexport default OTPLogin;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OrganizationForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":72,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[1917,1931],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { TextField, Button, CircularProgress, Grid, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport axios from 'axios';\n\n// State to GST state code map (mirrored from backend for autofill)\nconst STATE_CODE_MAP: { [key: string]: string } = {\n  \"Andaman & Nicobar Islands\": \"35\",\n  \"Andhra Pradesh\": \"37\",\n  \"Arunachal Pradesh\": \"12\",\n  \"Assam\": \"18\",\n  \"Bihar\": \"10\",\n  \"Chandigarh\": \"04\",\n  \"Chhattisgarh\": \"22\",\n  \"Dadra & Nagar Haveli & Daman & Diu\": \"26\",\n  \"Delhi\": \"07\",\n  \"Goa\": \"30\",\n  \"Gujarat\": \"24\",\n  \"Haryana\": \"06\",\n  \"Himachal Pradesh\": \"02\",\n  \"Jammu & Kashmir\": \"01\",\n  \"Jharkhand\": \"20\",\n  \"Karnataka\": \"29\",\n  \"Kerala\": \"32\",\n  \"Ladakh\": \"38\",\n  \"Lakshadweep\": \"31\",\n  \"Madhya Pradesh\": \"23\",\n  \"Maharashtra\": \"27\",\n  \"Manipur\": \"14\",\n  \"Meghalaya\": \"17\",\n  \"Mizoram\": \"15\",\n  \"Nagaland\": \"13\",\n  \"Odisha\": \"21\",\n  \"Puducherry\": \"34\",\n  \"Punjab\": \"03\",\n  \"Rajasthan\": \"08\",\n  \"Sikkim\": \"11\",\n  \"Tamil Nadu\": \"33\",\n  \"Telangana\": \"36\",\n  \"Tripura\": \"16\",\n  \"Uttar Pradesh\": \"09\",\n  \"Uttarakhand\": \"05\",\n  \"West Bengal\": \"19\",\n  \"Other Territory\": \"97\",\n  \"Other Country\": \"99\"\n};\n\ninterface FormData {\n  name?: string; // For direct organization creation\n  subdomain?: string; // For direct organization creation\n  organization_name?: string; // For license creation\n  admin_password?: string; // For license creation\n  superadmin_email?: string; // For license creation\n  primary_email?: string; // For direct organization creation\n  primary_phone: string;\n  address1?: string; // For license creation\n  address?: string; // For direct organization creation\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  gst_number: string;\n  business_type?: string;\n  industry?: string;\n  website?: string;\n  description?: string;\n  max_users?: number;\n}\n\ninterface OrganizationFormProps {\n  onSubmit: (data: FormData) => void;\n  mode?: 'license' | 'create'; // license = create license, create = direct org creation\n  initialData?: Partial<FormData>;\n  isEditing?: boolean;\n}\n\nconst OrganizationForm: React.FC<OrganizationFormProps> = ({ \n  onSubmit, \n  mode = 'license',\n  initialData = {},\n  isEditing = false \n}) => {\n  const [formData, setFormData] = useState<FormData>({\n    organization_name: '',\n    name: '',\n    subdomain: '',\n    admin_password: '',\n    superadmin_email: '',\n    primary_email: '',\n    primary_phone: '',\n    address1: '',\n    address: '',\n    city: '',\n    state: '',\n    pin_code: '',\n    state_code: '',\n    gst_number: '',\n    business_type: '',\n    industry: '',\n    website: '',\n    description: '',\n    max_users: 5,\n    ...initialData\n  });\n  const [pincodeLoading, setPincodeLoading] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | { target: { name: string; value: unknown } }) => {\n    const name = e.target.name as string;\n    const value = e.target.value as string;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n      ...(name === 'state' ? { state_code: STATE_CODE_MAP[value] || '' } : {}),  // Autofill state_code based on state change\n    }));\n  };\n\n  const handlePincodeChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    handleChange(e);\n    if (value.length === 6) {\n      setPincodeLoading(true);\n      try {\n        const response = await axios.get(`/api/pincode/lookup/${value}`);\n        const { city, state, state_code } = response.data;\n        setFormData((prev) => ({\n          ...prev,\n          city,\n          state,\n          state_code\n        }));\n      } catch (error) {\n        console.error('Failed to lookup pincode:', error);\n      } finally {\n        setPincodeLoading(false);\n      }\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Transform data based on mode\n    let submitData = { ...formData };\n    \n    if (mode === 'create') {\n      // For direct organization creation, map fields appropriately\n      submitData = {\n        name: formData.name || formData.organization_name,\n        subdomain: formData.subdomain,\n        primary_email: formData.primary_email || formData.superadmin_email,\n        primary_phone: formData.primary_phone,\n        address1: formData.address || formData.address1,\n        city: formData.city,\n        state: formData.state,\n        pin_code: formData.pin_code,\n        state_code: formData.state_code,\n        gst_number: formData.gst_number,\n        business_type: formData.business_type,\n        industry: formData.industry,\n        website: formData.website,\n        description: formData.description,\n        max_users: formData.max_users\n      };\n    }\n    \n    onSubmit(submitData);\n  };\n\n  const isLicenseMode = mode === 'license';\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"Organization Name\"\n            name={isLicenseMode ? \"organization_name\" : \"name\"}\n            value={isLicenseMode ? formData.organization_name : formData.name}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        \n        {!isLicenseMode && (\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <TextField\n              fullWidth\n              label=\"Subdomain\"\n              name=\"subdomain\"\n              value={formData.subdomain}\n              onChange={handleChange}\n              helperText=\"Used for organization-specific URLs\"\n              required\n            />\n          </Grid>\n        )}\n        \n        {isLicenseMode && (\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <TextField\n              fullWidth\n              label=\"Admin Password\"\n              name=\"admin_password\"\n              type=\"password\"\n              value={formData.admin_password}\n              onChange={handleChange}\n              required={!isEditing}\n            />\n          </Grid>\n        )}\n        \n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"Primary Email\"\n            name={isLicenseMode ? \"superadmin_email\" : \"primary_email\"}\n            type=\"email\"\n            value={isLicenseMode ? formData.superadmin_email : formData.primary_email}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        \n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"Primary Phone\"\n            name=\"primary_phone\"\n            value={formData.primary_phone}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        \n        {!isLicenseMode && (\n          <>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <FormControl fullWidth>\n                <InputLabel>Business Type</InputLabel>\n                <Select\n                  name=\"business_type\"\n                  value={formData.business_type || ''}\n                  label=\"Business Type\"\n                  onChange={handleChange}\n                >\n                  <MenuItem value=\"Manufacturing\">Manufacturing</MenuItem>\n                  <MenuItem value=\"Trading\">Trading</MenuItem>\n                  <MenuItem value=\"Service\">Service</MenuItem>\n                  <MenuItem value=\"Retail\">Retail</MenuItem>\n                  <MenuItem value=\"Other\">Other</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Industry\"\n                name=\"industry\"\n                value={formData.industry}\n                onChange={handleChange}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Website\"\n                name=\"website\"\n                type=\"url\"\n                value={formData.website}\n                onChange={handleChange}\n              />\n            </Grid>\n            \n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Max Users\"\n                name=\"max_users\"\n                type=\"number\"\n                value={formData.max_users}\n                onChange={handleChange}\n                inputProps={{ min: 1, max: 1000 }}\n              />\n            </Grid>\n          </>\n        )}\n        \n        <Grid size={12}>\n          <TextField\n            fullWidth\n            label=\"Address\"\n            name={isLicenseMode ? \"address1\" : \"address\"}\n            value={isLicenseMode ? formData.address1 : formData.address}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        \n        <Grid size={{ xs: 12, sm: 4 }}>\n          <TextField\n            fullWidth\n            label=\"City\"\n            name=\"city\"\n            value={formData.city}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        \n        <Grid size={{ xs: 12, sm: 4 }}>\n          <TextField\n            fullWidth\n            label=\"State\"\n            name=\"state\"\n            value={formData.state}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        \n        <Grid size={{ xs: 12, sm: 4 }}>\n          <TextField\n            fullWidth\n            label=\"PIN Code\"\n            name=\"pin_code\"\n            value={formData.pin_code}\n            onChange={handlePincodeChange}\n            required\n            InputProps={{\n              endAdornment: pincodeLoading ? <CircularProgress size={20} /> : null,\n            }}\n          />\n        </Grid>\n        \n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"State Code\"\n            name=\"state_code\"\n            value={formData.state_code}\n            onChange={handleChange}\n            disabled  // Autofilled, so disabled for user input\n          />\n        </Grid>\n        \n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"GST No.\"\n            name=\"gst_number\"\n            value={formData.gst_number}\n            onChange={handleChange}\n          />\n        </Grid>\n        \n        {!isLicenseMode && (\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Description\"\n              name=\"description\"\n              multiline\n              rows={3}\n              value={formData.description}\n              onChange={handleChange}\n            />\n          </Grid>\n        )}\n        \n        <Grid size={12}>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            {isEditing ? 'Update Organization' : (isLicenseMode ? 'Create License' : 'Create Organization')}\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n\nexport default OrganizationForm;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OrganizationMembersDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemSecondaryAction"},"fix":{"range":[179,206],"text":""},"desc":"Remove unused variable 'ListItemSecondaryAction'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[206,220],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchMembers' was used before it was defined.","line":65,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":65,"endColumn":19},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 52 column 10.","line":75,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":75,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 52 column 10.","line":75,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":75,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 52 column 10.","line":100,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":100,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 52 column 10.","line":100,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":100,"endColumn":24}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Typography,\n  Alert,\n  CircularProgress,\n  Box,\n  Chip,\n  TextField,\n  Grid\n} from '@mui/material';\nimport { Add, Email, Person } from '@mui/icons-material';\nimport { organizationService } from '../services/organizationService';\n\ninterface User {\n  id: number;\n  email: string;\n  full_name: string;\n  role: string;\n  is_active: boolean;\n  username: string;\n}\n\ninterface OrganizationMembersDialogProps {\n  open: boolean;\n  onClose: () => void;\n  organizationId: number;\n  organizationName: string;\n  canInvite?: boolean;\n}\n\nconst OrganizationMembersDialog: React.FC<OrganizationMembersDialogProps> = ({\n  open,\n  onClose,\n  organizationId,\n  organizationName,\n  canInvite = false\n}) => {\n  const [members, setMembers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showInviteForm, setShowInviteForm] = useState(false);\n  const [inviteData, setInviteData] = useState({\n    email: '',\n    username: '',\n    full_name: '',\n    password: '',\n    role: 'standard_user'\n  });\n  const [inviting, setInviting] = useState(false);\n\n  useEffect(() => {\n    if (open && organizationId) {\n      fetchMembers();\n    }\n  }, [open, organizationId]);\n\n  const fetchMembers = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const membersData = await organizationService.getOrganizationMembers(organizationId);\n      setMembers(membersData);\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInviteSubmit = async () => {\n    try {\n      setInviting(true);\n      setError(null);\n      \n      await organizationService.inviteUserToOrganization(organizationId, inviteData);\n      \n      // Reset form and refresh members\n      setInviteData({\n        email: '',\n        username: '',\n        full_name: '',\n        password: '',\n        role: 'standard_user'\n      });\n      setShowInviteForm(false);\n      await fetchMembers();\n      \n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setInviting(false);\n    }\n  };\n\n  const getRoleColor = (role: string): 'error' | 'warning' | 'info' | 'default' => {\n    switch (role) {\n      case 'super_admin':\n        return 'error';\n      case 'org_admin':\n        return 'warning';\n      case 'admin':\n        return 'info';\n      default:\n        return 'default';\n    }\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'super_admin':\n        return 'Super Admin';\n      case 'org_admin':\n        return 'Org Admin';\n      case 'admin':\n        return 'Admin';\n      case 'standard_user':\n        return 'User';\n      default:\n        return role;\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Typography variant=\"h6\">\n            {organizationName} - Members\n          </Typography>\n          {canInvite && (\n            <Button\n              startIcon={<Add />}\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={() => setShowInviteForm(!showInviteForm)}\n            >\n              Invite User\n            </Button>\n          )}\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {showInviteForm && (\n          <Box sx={{ mb: 3, p: 2, border: 1, borderColor: 'divider', borderRadius: 1 }}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Invite New User\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Email\"\n                  type=\"email\"\n                  value={inviteData.email}\n                  onChange={(e) => setInviteData(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Username\"\n                  value={inviteData.username}\n                  onChange={(e) => setInviteData(prev => ({ ...prev, username: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Full Name\"\n                  value={inviteData.full_name}\n                  onChange={(e) => setInviteData(prev => ({ ...prev, full_name: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Temporary Password\"\n                  type=\"password\"\n                  value={inviteData.password}\n                  onChange={(e) => setInviteData(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={12}>\n                <Box display=\"flex\" gap={1} justifyContent=\"flex-end\">\n                  <Button\n                    onClick={() => setShowInviteForm(false)}\n                    disabled={inviting}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleInviteSubmit}\n                    disabled={inviting || !inviteData.email || !inviteData.username || !inviteData.password}\n                  >\n                    {inviting ? <CircularProgress size={20} /> : 'Send Invitation'}\n                  </Button>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n\n        {loading ? (\n          <Box display=\"flex\" justifyContent=\"center\" p={3}>\n            <CircularProgress />\n          </Box>\n        ) : (\n          <List>\n            {members.length === 0 ? (\n              <ListItem>\n                <ListItemText\n                  primary=\"No members found\"\n                  secondary=\"This organization has no active members\"\n                />\n              </ListItem>\n            ) : (\n              members.map((member) => (\n                <ListItem key={member.id} divider>\n                  <ListItemText\n                    primary={\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <Person fontSize=\"small\" color=\"action\" />\n                        <Typography variant=\"body1\">\n                          {member.full_name}\n                        </Typography>\n                        <Chip\n                          label={getRoleLabel(member.role)}\n                          size=\"small\"\n                          color={getRoleColor(member.role)}\n                          variant=\"outlined\"\n                        />\n                        {!member.is_active && (\n                          <Chip label=\"Inactive\" size=\"small\" color=\"default\" />\n                        )}\n                      </Box>\n                    }\n                    secondary={\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          <Email fontSize=\"small\" sx={{ mr: 0.5, verticalAlign: 'text-bottom' }} />\n                          {member.email}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Username: {member.username}\n                        </Typography>\n                      </Box>\n                    }\n                  />\n                </ListItem>\n              ))\n            )}\n          </List>\n        )}\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default OrganizationMembersDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OrganizationSwitcher.tsx","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'fetchUserOrganizations' was used before it was defined.","line":31,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":31,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Box,\n  Typography,\n  Alert,\n  CircularProgress,\n  SelectChangeEvent\n} from '@mui/material';\nimport { organizationService } from '../services/organizationService';\n\ninterface Organization {\n  id: number;\n  name: string;\n  subdomain: string;\n  role: string;\n  is_current: boolean;\n}\n\nconst OrganizationSwitcher: React.FC = () => {\n  const [organizations, setOrganizations] = useState<Organization[]>([]);\n  const [currentOrganization, setCurrentOrganization] = useState<number | ''>('');\n  const [loading, setLoading] = useState(true);\n  const [switching, setSwitching] = useState(false);\n  const [err, setErr] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchUserOrganizations();\n  }, []);\n\n  const fetchUserOrganizations = async () => {\n    try {\n      setLoading(true);\n      const orgs = await organizationService.getUserOrganizations();\n      setOrganizations(orgs);\n      \n      // Find current organization\n      const current = orgs.find((org: Organization) => org.is_current);\n      if (current) {\n        setCurrentOrganization(current.id);\n      }\n    } catch (error: any) {\n      setErr(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOrganizationSwitch = async (event: SelectChangeEvent<number | ''>) => {\n    const organizationId = event.target.value as number;\n    \n    if (!organizationId || organizationId === currentOrganization) {\n      return;\n    }\n\n    try {\n      setSwitching(true);\n      setErr(null);\n      \n      await organizationService.switchOrganization(organizationId);\n      \n      // Update current organization state\n      setCurrentOrganization(organizationId);\n      setOrganizations(prev => \n        prev.map(org => ({\n          ...org,\n          is_current: org.id === organizationId\n        }))\n      );\n      \n      // Call the page to update all components with new organization context\n      window.location.reload();\n      \n    } catch (error: any) {\n      setErr(error.message);\n    } finally {\n      setSwitching(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n        <CircularProgress size={20} />\n        <Typography variant=\"caption\">Loading organizations...</Typography>\n      </Box>\n    );\n  }\n\n  if (organizations.length === 0) {\n    return (\n      <Typography variant=\"caption\" color=\"text.secondary\">\n        No organizations available\n      </Typography>\n    );\n  }\n\n  if (organizations.length === 1) {\n    const org = organizations[0];\n    return (\n      <Box>\n        <Typography variant=\"body2\" fontWeight=\"medium\">\n          {org.name}\n        </Typography>\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          Role: {org.role}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ minWidth: 200 }}>\n      {err && (\n        <Alert severity=\"error\" sx={{ mb: 1, fontSize: '0.8rem' }}>\n          {err}\n        </Alert>\n      )}\n      \n      <FormControl fullWidth size=\"small\">\n        <InputLabel id=\"organization-select-label\">Organization</InputLabel>\n        <Select\n          labelId=\"organization-select-label\"\n          value={currentOrganization}\n          label=\"Organization\"\n          onChange={handleOrganizationSwitch}\n          disabled={switching}\n        >\n          {organizations.map((org) => (\n            <MenuItem key={org.id} value={org.id}>\n              <Box>\n                <Typography variant=\"body2\" fontWeight=\"medium\">\n                  {org.name}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Role: {org.role} | {org.subdomain}\n                </Typography>\n              </Box>\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      \n      {switching && (\n        <Box display=\"flex\" alignItems=\"center\" gap={1} mt={1}>\n          <CircularProgress size={16} />\n          <Typography variant=\"caption\">Switching organization...</Typography>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default OrganizationSwitcher;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OrganizatonList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/PasswordChangeModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'passwordService' is defined but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"passwordService"},"fix":{"range":[271,329],"text":""},"desc":"Remove unused variable 'passwordService'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'shownRef' is assigned a value but never used.","line":42,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"shownRef"},"fix":{"range":[945,976],"text":""},"desc":"Remove unused variable 'shownRef'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getValues' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"getValues"},"fix":{"range":[1231,1246],"text":""},"desc":"Remove unused variable 'getValues'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Alert,\n  CircularProgress\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { passwordService } from '../services/authService';\nimport { getFeatureFlag } from '../utils/config';\n\ninterface PasswordChangeModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSuccess?: () => void;\n  isRequired?: boolean; // For mandatory password changes\n}\n\ninterface PasswordFormData {\n  current_password?: string;\n  new_password: string;\n  confirm_password: string;\n}\n\nconst PasswordChangeModal: React.FC<PasswordChangeModalProps> = ({\n  open,\n  onClose,\n  onSuccess,\n  isRequired = false\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const shownRef = useRef(false); // Prevent double show in strict mode\n  \n  // Check if password change functionality is enabled\n  const passwordChangeEnabled = getFeatureFlag('passwordChange');\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    watch,\n    getValues\n  } = useForm<PasswordFormData>();\n\n  const new_password = watch('new_password');\n\n  const handleClose = () => {\n    if (!isRequired || success) {\n      reset();\n      setError(null);\n      setSuccess(false);\n      onClose();\n    }\n  };\n\n  const onSubmit = async (data: PasswordFormData) => {\n    // Validation checks\n    if (data.new_password !== data.confirm_password) {\n      setError('New passwords do not match');\n      return;\n    }\n\n    if (!isRequired && !data.current_password) {\n      setError('Current password is required');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Call API for password change (mandatory or regular)\n      const endpoint = isRequired ? '/api/v1/password/change-mandatory' : '/api/v1/password/change';\n      const payload = isRequired ? { new_password: data.new_password } : data;\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {throw new Error('Failed to change password');}\n\n      setSuccess(true);\n      \n      if (onSuccess) {\n        onSuccess();\n      }\n      \n      if (!isRequired) {\n        setTimeout(() => {\n          handleClose();\n        }, 2000);\n      }\n    } catch (err: any) {\n      // Try to extract from various error structures\n      const detail = err.response?.data?.detail;\n      const message = err.response?.data?.message;\n      \n      let errorMessage = 'Failed to change password';\n      if (typeof detail === 'string' && detail) {\n        errorMessage = detail;\n      } else if (typeof message === 'string' && message) {\n        errorMessage = message;\n      } else if (Array.isArray(detail) && detail.length > 0) {\n        // Handle Pydantic validation errors\n        const messages = detail.map(e => e.msg || `${e.loc?.join(' -> ')}: ${e.type}`).filter(Boolean);\n        errorMessage = messages.length > 0 ? messages.join(', ') : 'Validation error';\n      } else if (detail && typeof detail === 'object') {\n        // Handle object error details\n        errorMessage = detail.error || detail.message || 'Invalid request format';\n      } else if (typeof err.message === 'string' && err.message) {\n        errorMessage = err.message;\n      } else if (err.status === 422) {\n        errorMessage = 'Invalid request. Please check your input fields.';\n      }\n      \n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose} \n      maxWidth=\"sm\" \n      fullWidth\n      disableEscapeKeyDown={isRequired && !success}\n    >\n      <DialogTitle>\n        {isRequired ? 'Change Your Password' : 'Change Password'}\n      </DialogTitle>\n      <DialogContent>\n        <Box sx={{ pt: 2 }}>\n          {isRequired && !success && (\n            <Alert severity=\"warning\" sx={{ mb: 2 }}>\n              You are required to change your password before continuing.\n            </Alert>\n          )}\n\n          {!passwordChangeEnabled && (\n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              Password change functionality is temporarily disabled. Please contact your administrator.\n            </Alert>\n          )}\n\n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error}\n            </Alert>\n          )}\n          \n          {success && (\n            <Alert severity=\"success\" sx={{ mb: 2 }}>\n              Password changed successfully!\n              {isRequired && (\n                <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                  You can now continue using the application.\n                </Typography>\n              )}\n            </Alert>\n          )}\n\n          {!success && passwordChangeEnabled && (\n            <form onSubmit={handleSubmit(onSubmit)}>\n              {!isRequired && (\n                <TextField\n                  fullWidth\n                  label=\"Current Password\"\n                  type=\"password\"\n                  margin=\"normal\"\n                  {...register('current_password', {\n                    required: 'Current password is required'\n                  })}\n                  error={!!errors.current_password}\n                  helperText={errors.current_password?.message}\n                  disabled={loading}\n                />\n              )}\n\n              <TextField\n                fullWidth\n                label=\"New Password\"\n                type=\"password\"\n                margin=\"normal\"\n                {...register('new_password', {\n                  required: 'New password is required',\n                  minLength: {\n                    value: 8,\n                    message: 'Password must be at least 8 characters long'\n                  },\n                  pattern: {\n                    value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&].+$/,\n                    message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\n                  }\n                })}\n                error={!!errors.new_password}\n                helperText={errors.new_password?.message}\n                disabled={loading}\n              />\n\n              <TextField\n                fullWidth\n                label=\"Confirm New Password\"\n                type=\"password\"\n                margin=\"normal\"\n                {...register('confirm_password', {\n                  required: 'Please confirm your new password',\n                  validate: (value) => value === new_password || 'Passwords do not match'\n                })}\n                error={!!errors.confirm_password}\n                helperText={errors.confirm_password?.message}\n                disabled={loading}\n              />\n\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Password must be at least 8 characters long and contain at least one uppercase letter, \n                  one lowercase letter, one number, and one special character (@$!%*?&).\n                </Typography>\n              </Box>\n            </form>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        {!isRequired && (\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n        )}\n        {success && isRequired && (\n          <Button onClick={handleClose} variant=\"contained\">\n            Continue\n          </Button>\n        )}\n        {!success && passwordChangeEnabled && (\n          <Button\n            onClick={handleSubmit(onSubmit)}\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            Change Password\n          </Button>\n        )}\n        {!passwordChangeEnabled && (isRequired ? (\n          <Button onClick={handleClose} variant=\"contained\">\n            Continue Without Changing Password\n          </Button>\n        ) : (\n          <Button onClick={handleClose}>\n            Close\n          </Button>\n        ))}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default PasswordChangeModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ProductAutocomplete.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"useCallback"},"fix":{"range":[66,79],"text":""},"desc":"Remove unused variable 'useCallback'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[173,181],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'keepPreviousData' is defined but never used.","line":12,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"keepPreviousData"},"fix":{"range":[306,324],"text":""},"desc":"Remove unused variable 'keepPreviousData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'product' is defined but never used.","line":32,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"product"},"fix":{"range":[868,891],"text":""},"desc":"Remove unused variable 'product'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 44 column 3.","line":74,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":74,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 44 column 3.","line":74,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":74,"endColumn":25},{"ruleId":"no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 42 column 3.","line":125,"column":40,"nodeType":"Identifier","messageId":"noShadow","endLine":125,"endColumn":45},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 42 column 3.","line":125,"column":40,"nodeType":"Identifier","messageId":"noShadow","endLine":125,"endColumn":45}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/ProductAutocomplete.tsx\nimport React, { useState, useCallback } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  CircularProgress,\n  Box,\n  Typography,\n  Chip\n} from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient, keepPreviousData } from '@tanstack/react-query';\nimport { getProducts, createProduct } from '../services/masterService';\nimport AddProductModal from './AddProductModal';\n\ninterface Product {\n  id: number;\n  product_name: string; // Updated to match API response format\n  hsn_code?: string;\n  part_number?: string;\n  unit: string;\n  unit_price: number;\n  gst_rate?: number;\n  is_gst_inclusive?: boolean;\n  reorder_level?: number;\n  description?: string;\n  is_manufactured?: boolean;\n}\n\ninterface ProductAutocompleteProps {\n  value: Product | null;\n  onChange: (product: Product | null) => void;\n  error?: boolean;\n  helperText?: string;\n  disabled?: boolean;\n  label?: string;\n  placeholder?: string;\n  size?: 'small' | 'medium';\n}\n\nconst ProductAutocomplete: React.FC<ProductAutocompleteProps> = ({\n  value,\n  onChange,\n  error = false,\n  helperText = '',\n  disabled = false,\n  label = 'Product',\n  placeholder = 'Search or add product...',\n  size = 'medium'\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [addModalOpen, setAddModalOpen] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Fetch all products\n  const { data: allProducts = [], isLoading } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts,\n    enabled: true,\n    staleTime: Infinity, // Cache indefinitely since it's all data\n  });\n\n  // Create product mutation\n  const createProductMutation = useMutation({\n    mutationFn: createProduct,\n    onSuccess: (newProduct) => {\n      // Invalidate queries\n      queryClient.invalidateQueries({queryKey: ['products']});\n      \n      // Auto-select the newly created product\n      onChange(newProduct);\n      setAddModalOpen(false);\n    },\n    onError: (error: any) => {\n      console.error('Failed to create product:', error);\n    }\n  });\n\n  // Filtered options based on input\n  const filteredOptions = React.useMemo(() => {\n    const lowerInput = inputValue.toLowerCase();\n    return allProducts.filter((product: any) => \n      product.product_name.toLowerCase().includes(lowerInput) ||\n      (product.hsn_code || '').toLowerCase().includes(lowerInput) ||\n      (product.part_number || '').toLowerCase().includes(lowerInput)\n    );\n  }, [allProducts, inputValue]);\n\n  // Create options array with \"Add Product\" option\n  const options = React.useMemo(() => {\n    const addOption = {\n      id: -1,\n      product_name: '➕ Add Product',\n      isAddOption: true,\n    };\n    \n    return [addOption, ...filteredOptions];\n  }, [filteredOptions]);\n\n  const handleSelectionChange = (_: any, newValue: any) => {\n    if (newValue?.isAddOption) {\n      setAddModalOpen(true);\n      return;\n    }\n    \n    onChange(newValue);\n  };\n\n  const handleAddProduct = async (productData: any) => {\n    await createProductMutation.mutateAsync(productData);\n  };\n\n  return (\n    <>\n      <Autocomplete\n        value={value}\n        onChange={handleSelectionChange}\n        inputValue={inputValue}\n        onInputChange={(_, newInputValue) => setInputValue(newInputValue)}\n        options={options}\n        getOptionLabel={(option) => {\n          if (option.isAddOption) {return option.product_name;}\n          return option.product_name;\n        }}\n        isOptionEqualToValue={(option, value) => option.id === value?.id}\n        loading={isLoading}\n        disabled={disabled}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={label}\n            placeholder={placeholder}\n            error={error}\n            helperText={helperText}\n            size={size}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <>\n                  {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                  {params.InputProps.endAdornment}\n                </>\n              ),\n            }}\n          />\n        )}\n        renderOption={(props, option) => {\n          if (option.isAddOption) {\n            return (\n              <Box component=\"li\" {...props} sx={{ \n                color: 'primary.main', \n                fontWeight: 'bold',\n                borderBottom: '1px solid #eee'\n              }}>\n                <AddIcon sx={{ mr: 1 }} />\n                {option.product_name}\n              </Box>\n            );\n          }\n\n          return (\n            <Box component=\"li\" {...props}>\n              <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\n                {option.product_name}\n              </Typography>\n            </Box>\n          );\n        }}\n        noOptionsText={\n          inputValue.length < 1 \n            ? \"Type to search or select from list...\" \n            : \"No products found\"\n        }\n      />\n\n      <AddProductModal\n        open={addModalOpen}\n        onClose={() => setAddModalOpen(false)}\n        onAdd={handleAddProduct}\n        loading={createProductMutation.isPending}\n        initialName={inputValue}\n      />\n    </>\n  );\n};\n\nexport default ProductAutocomplete;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ProductDropdown.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'productId' is defined but never used.","line":34,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"productId"},"fix":{"range":[722,740],"text":""},"desc":"Remove unused variable 'productId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'product' is defined but never used.","line":34,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"product"},"fix":{"range":[739,764],"text":""},"desc":"Remove unused variable 'product'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":61,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[1405,1415],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":61,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[1415,1430],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchProducts' was used before it was defined.","line":64,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":64,"endColumn":18},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 51 column 3.","line":89,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":89,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 51 column 3.","line":89,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":89,"endColumn":19}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  CircularProgress,\n  Box,\n  TextField,\n  Autocomplete\n} from '@mui/material';\n\nexport interface Product {\n  id: number;\n  product_name: string;  // Using product_name field for frontend consistency as per requirements\n  hsn_code?: string;\n  part_number?: string;\n  unit: string;\n  unit_price: number;\n  gst_rate: number;\n  is_gst_inclusive: boolean;\n  reorder_level: number;\n  description?: string;\n  is_manufactured: boolean;\n  organization_id: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\n\ninterface ProductDropdownProps {\n  value?: number;\n  onChange: (productId: number, product: Product | null) => void;\n  label?: string;\n  disabled?: boolean;\n  error?: boolean;\n  helperText?: string;\n  required?: boolean;\n  fullWidth?: boolean;\n  variant?: 'autocomplete' | 'select';\n  placeholder?: string;\n  showDetails?: boolean;\n}\n\nconst ProductDropdown: React.FC<ProductDropdownProps> = ({\n  value,\n  onChange,\n  label = 'Select Product',\n  disabled = false,\n  error = false,\n  helperText,\n  required = false,\n  fullWidth = true,\n  variant = 'autocomplete',\n  placeholder = 'Search products...',\n  showDetails = false\n}) => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n\n  const fetchProducts = async (search?: string) => {\n    try {\n      setLoading(true);\n      const queryParams = new URLSearchParams();\n      if (search) {\n        queryParams.append('search', search);\n      }\n      queryParams.append('active_only', 'true');\n      queryParams.append('limit', '100');\n\n      const response = await fetch(`/api/v1/products?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch products');\n      }\n\n      const data = await response.json();\n      setProducts(data);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (productId: number) => {\n    const selectedProduct = products.find(p => p.id === productId) || null;\n    onChange(productId, selectedProduct);\n  };\n\n  const selectedProduct = products.find(p => p.id === value);\n\n  if (variant === 'autocomplete') {\n    return (\n      <Autocomplete\n        fullWidth={fullWidth}\n        value={selectedProduct || null}\n        onChange={(_, newValue) => {\n          if (newValue) {\n            handleChange(newValue.id);\n          } else {\n            onChange(0, null);\n          }\n        }}\n        options={products}\n        getOptionLabel={(option) => option.product_name}\n        renderOption={(props, option) => (\n          <li {...props}>\n            <Box>\n              <div>{option.product_name}</div>\n              {showDetails && (\n                <div style={{ fontSize: '0.75rem', color: 'text.secondary' }}>\n                  {option.hsn_code && `HSN: ${option.hsn_code} • `}\n                  {option.part_number && `PN: ${option.part_number} • `}\n                  Unit: {option.unit} • ₹{option.unit_price}\n                </div>\n              )}\n            </Box>\n          </li>\n        )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={label}\n            placeholder={placeholder}\n            required={required}\n            error={error}\n            helperText={helperText}\n            disabled={disabled}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <>\n                  {loading ? <CircularProgress size={20} /> : null}\n                  {params.InputProps.endAdornment}\n                </>\n              ),\n            }}\n          />\n        )}\n        loading={loading}\n        disabled={disabled}\n        noOptionsText=\"No products found\"\n        isOptionEqualToValue={(option, selectedValue) => option.id === selectedValue.id}\n      />\n    );\n  }\n\n  // Select variant\n  return (\n    <FormControl \n      fullWidth={fullWidth} \n      error={error} \n      disabled={disabled}\n      required={required}\n    >\n      <InputLabel>{label}</InputLabel>\n      <Select\n        value={value || ''}\n        onChange={(e: SelectChangeEvent<number>) => {\n          const productId = e.target.value as number;\n          handleChange(productId);\n        }}\n        label={label}\n        disabled={disabled}\n      >\n        <MenuItem value=\"\">\n          <em>None</em>\n        </MenuItem>\n        {loading ? (\n          <MenuItem disabled>\n            <CircularProgress size={20} />\n            <Box ml={1}>Loading products...</Box>\n          </MenuItem>\n        ) : (\n          products.map((product) => (\n            <MenuItem key={product.id} value={product.id}>\n              {product.product_name}\n              {showDetails && (\n                <Box component=\"span\" sx={{ fontSize: '0.75rem', color: 'text.secondary', ml: 1 }}>\n                  ({product.unit} • ₹{product.unit_price})\n                </Box>\n              )}\n            </MenuItem>\n          ))\n        )}\n      </Select>\n      {helperText && (\n        <Box sx={{ fontSize: '0.75rem', color: error ? 'error.main' : 'text.secondary', mt: 0.5 }}>\n          {helperText}\n        </Box>\n      )}\n    </FormControl>\n  );\n};\n\nexport default ProductDropdown;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ProductFileUpload.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[63,73],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AttachFile' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"AttachFile"},"fix":{"range":[282,296],"text":""},"desc":"Remove unused variable 'AttachFile'."}]},{"ruleId":"no-shadow","severity":2,"message":"'files' is already declared in the upper scope on line 52 column 17.","line":100,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":100,"endColumn":51},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'files' is already declared in the upper scope on line 52 column 17.","line":100,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":100,"endColumn":51}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Paper,\n  LinearProgress,\n  Alert,\n  Tooltip,\n  Chip\n} from '@mui/material';\nimport {\n  CloudUpload,\n  AttachFile,\n  Delete,\n  Download,\n  FilePresent\n} from '@mui/icons-material';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport api from '../lib/api';\n\ninterface ProductFile {\n  id: number;\n  filename: string;\n  original_filename: string;\n  file_size: number;\n  content_type: string;\n  created_at: string;\n}\n\ninterface ProductFileUploadProps {\n  productId?: number;\n  disabled?: boolean;\n}\n\nconst ProductFileUpload: React.FC<ProductFileUploadProps> = ({\n  productId,\n  disabled = false\n}) => {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n\n  // Query to get existing files\n  const { data: files = [], isLoading } = useQuery({\n    queryKey: ['product-files', productId],\n    queryFn: async () => {\n      if (!productId) {return [];}\n      const response = await api.get(`/api/v1/products/${productId}/files`);\n      return response.data;\n    },\n    enabled: !!productId\n  });\n\n  // Upload mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      if (!productId) {throw new Error('Product ID is required');}\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await api.post(\n        `/api/v1/products/${productId}/files`,\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['product-files', productId] });\n      setUploadError(null);\n    },\n    onError: (error: any) => {\n      setUploadError(error.response?.data?.detail || 'Upload failed');\n    }\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (fileId: number) => {\n      await api.delete(`/api/v1/products/${productId}/files/${fileId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['product-files', productId] });\n    }\n  });\n\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files || files.length === 0) {return;}\n    \n    const file = files[0];\n    \n    // Validate file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      setUploadError('File size must be less than 10MB');\n      return;\n    }\n    \n    uploadMutation.mutate(file);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    if (disabled || !productId) {return;}\n    \n    handleFileSelect(e.dataTransfer.files);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (!disabled && productId) {\n      setIsDragOver(true);\n    }\n  };\n\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFileSelect(e.target.files);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleDownload = async (fileId: number, filename: string) => {\n    try {\n      const response = await api.get(\n        `/api/v1/products/${productId}/files/${fileId}/download`,\n        { responseType: 'blob' }\n      );\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Download failed:', error);\n    }\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) {return '0 Bytes';}\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (contentType: string) => {\n    if (contentType.startsWith('image/')) {return '🖼️';}\n    if (contentType.includes('pdf')) {return '📄';}\n    if (contentType.includes('word')) {return '📝';}\n    if (contentType.includes('excel') || contentType.includes('spreadsheet')) {return '📊';}\n    return '📎';\n  };\n\n  if (!productId) {\n    return (\n      <Alert severity=\"info\">\n        Save the product first to upload files\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Product Files\n        <Chip\n          label={`${files.length}/5`}\n          color={files.length >= 5 ? 'error' : 'primary'}\n          size=\"small\"\n          sx={{ ml: 1 }}\n        />\n      </Typography>\n\n      {uploadError && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {uploadError}\n        </Alert>\n      )}\n\n      {/* Upload Area */}\n      {files.length < 5 && !disabled && (\n        <Paper\n          sx={{\n            p: 3,\n            mb: 2,\n            border: '2px dashed',\n            borderColor: isDragOver ? 'primary.main' : 'grey.300',\n            bgcolor: isDragOver ? 'action.hover' : 'background.paper',\n            cursor: 'pointer',\n            textAlign: 'center',\n            transition: 'all 0.2s ease-in-out'\n          }}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onClick={() => fileInputRef.current?.click()}\n        >\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            hidden\n            onChange={handleFileInputChange}\n            accept=\"*/*\"\n          />\n          \n          {uploadMutation.isPending ? (\n            <Box>\n              <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                Uploading file...\n              </Typography>\n              <LinearProgress sx={{ mt: 1 }} />\n            </Box>\n          ) : (\n            <Box>\n              <CloudUpload sx={{ fontSize: 48, color: 'grey.400', mb: 1 }} />\n              <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                Click to upload or drag and drop files here\n              </Typography>\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                Maximum file size: 10MB • Maximum 5 files\n              </Typography>\n            </Box>\n          )}\n        </Paper>\n      )}\n\n      {/* Files List */}\n      {files.length > 0 && (\n        <Paper sx={{ mt: 2 }}>\n          <List>\n            {files.map((file: ProductFile) => (\n              <ListItem key={file.id} divider>\n                <ListItemIcon>\n                  <FilePresent color=\"primary\" />\n                </ListItemIcon>\n                <ListItemText\n                  primary={\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <span>{getFileIcon(file.content_type)}</span>\n                      <Typography variant=\"body2\">\n                        {file.original_filename}\n                      </Typography>\n                    </Box>\n                  }\n                  secondary={\n                    <Box>\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        {formatFileSize(file.file_size)} • {new Date(file.created_at).toLocaleDateString()}\n                      </Typography>\n                    </Box>\n                  }\n                />\n                <ListItemSecondaryAction>\n                  <Tooltip title=\"Download\">\n                    <IconButton\n                      edge=\"end\"\n                      onClick={() => handleDownload(file.id, file.original_filename)}\n                      sx={{ mr: 1 }}\n                    >\n                      <Download />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Delete\">\n                    <IconButton\n                      edge=\"end\"\n                      onClick={() => deleteMutation.mutate(file.id)}\n                      disabled={deleteMutation.isPending || disabled}\n                    >\n                      <Delete />\n                    </IconButton>\n                  </Tooltip>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n        </Paper>\n      )}\n\n      {files.length === 0 && productId && !isLoading && (\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\n          No files uploaded yet\n        </Typography>\n      )}\n    </Box>\n  );\n};\n\nexport default ProductFileUpload;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/QuickActions.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":2,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[66,78],"text":""},"desc":"Remove unused variable 'IconButton'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Button, Paper, Typography, IconButton } from '@mui/material';\nimport { Add, Edit, Delete, Download, Upload, Share } from '@mui/icons-material';\n\nexport interface QuickAction {\n  id: string;\n  label: string;\n  icon: React.ReactElement;\n  color?: 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'info';\n  variant?: 'contained' | 'outlined' | 'text';\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nexport interface QuickActionsProps {\n  title?: string;\n  actions: QuickAction[];\n  layout?: 'horizontal' | 'vertical' | 'grid';\n  size?: 'small' | 'medium' | 'large';\n  className?: string;\n}\n\nconst QuickActions: React.FC<QuickActionsProps> = ({\n  title = 'Quick Actions',\n  actions,\n  layout = 'grid',\n  size = 'medium',\n  className = ''\n}) => {\n  const getButtonSize = () => {\n    switch (size) {\n      case 'small':\n        return 'small' as const;\n      case 'large':\n        return 'large' as const;\n      case 'medium':\n      default:\n        return 'medium' as const;\n    }\n  };\n\n  const getLayoutStyles = () => {\n    switch (layout) {\n      case 'horizontal':\n        return {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: 2,\n          alignItems: 'center'\n        };\n      case 'vertical':\n        return {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2\n        };\n      case 'grid':\n      default:\n        return {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',\n          gap: 2\n        };\n    }\n  };\n\n  return (\n    <Paper className={`modern-card ${className}`} sx={{ p: 3 }}>\n      {title && (\n        <Typography className=\"modern-card-title\" variant=\"h6\" gutterBottom>\n          {title}\n        </Typography>\n      )}\n      \n      <Box sx={getLayoutStyles()}>\n        {actions.map((action) => (\n          <Button\n            key={action.id}\n            variant={action.variant || 'outlined'}\n            color={action.color || 'primary'}\n            size={getButtonSize()}\n            startIcon={action.icon}\n            onClick={action.onClick}\n            disabled={action.disabled}\n            className=\"modern-btn\"\n            sx={{\n              minHeight: size === 'large' ? 48 : size === 'small' ? 32 : 40,\n              justifyContent: layout === 'grid' ? 'flex-start' : 'center',\n              textTransform: 'none',\n              fontWeight: 500,\n              borderRadius: 'var(--radius-md)',\n              transition: 'all var(--transition-fast)',\n              '&:hover': {\n                transform: 'translateY(-1px)',\n                boxShadow: 'var(--shadow-md)'\n              },\n              '&.MuiButton-containedPrimary': {\n                backgroundColor: 'var(--primary-600)',\n                '&:hover': {\n                  backgroundColor: 'var(--primary-700)'\n                }\n              },\n              '&.MuiButton-containedSecondary': {\n                backgroundColor: 'var(--secondary-600)',\n                '&:hover': {\n                  backgroundColor: 'var(--secondary-700)'\n                }\n              },\n              '&.MuiButton-containedSuccess': {\n                backgroundColor: 'var(--success-600)',\n                '&:hover': {\n                  backgroundColor: 'var(--success-700)'\n                }\n              },\n              '&.MuiButton-containedWarning': {\n                backgroundColor: 'var(--warning-600)',\n                '&:hover': {\n                  backgroundColor: 'var(--warning-700)'\n                }\n              },\n              '&.MuiButton-containedError': {\n                backgroundColor: 'var(--error-600)',\n                '&:hover': {\n                  backgroundColor: 'var(--error-700)'\n                }\n              },\n              '&.MuiButton-outlinedPrimary': {\n                borderColor: 'var(--primary-600)',\n                color: 'var(--primary-600)',\n                '&:hover': {\n                  backgroundColor: 'var(--primary-50)',\n                  borderColor: 'var(--primary-700)'\n                }\n              }\n            }}\n          >\n            {action.label}\n          </Button>\n        ))}\n      </Box>\n    </Paper>\n  );\n};\n\n// Predefined common quick actions\nexport const commonQuickActions = {\n  add: (onClick: () => void): QuickAction => ({\n    id: 'add',\n    label: 'Add New',\n    icon: <Add />,\n    color: 'primary',\n    variant: 'contained',\n    onClick\n  }),\n  edit: (onClick: () => void): QuickAction => ({\n    id: 'edit',\n    label: 'Edit',\n    icon: <Edit />,\n    color: 'secondary',\n    variant: 'outlined',\n    onClick\n  }),\n  delete: (onClick: () => void): QuickAction => ({\n    id: 'delete',\n    label: 'Delete',\n    icon: <Delete />,\n    color: 'error',\n    variant: 'outlined',\n    onClick\n  }),\n  download: (onClick: () => void): QuickAction => ({\n    id: 'download',\n    label: 'Download',\n    icon: <Download />,\n    color: 'info',\n    variant: 'outlined',\n    onClick\n  }),\n  upload: (onClick: () => void): QuickAction => ({\n    id: 'upload',\n    label: 'Upload',\n    icon: <Upload />,\n    color: 'success',\n    variant: 'outlined',\n    onClick\n  }),\n  share: (onClick: () => void): QuickAction => ({\n    id: 'share',\n    label: 'Share',\n    icon: <Share />,\n    color: 'info',\n    variant: 'text',\n    onClick\n  })\n};\n\nexport default QuickActions;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ResetDialog.tsx","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'handleClose' was used before it was defined.","line":86,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":86,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// ResetDialog component for requirement #2 - Add Reset Option for Superadmins\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  TextField,\n  Checkbox,\n  FormControlLabel,\n  Alert,\n  CircularProgress,\n  Divider\n} from '@mui/material';\nimport { Warning as WarningIcon } from '@mui/icons-material';\nimport { toast } from 'react-toastify';\n\ninterface ResetDialogProps {\n  open: boolean;\n  onClose: () => void;\n  resetType: 'organization' | 'entity';\n  organizationName?: string;\n  entityId?: number;\n  onSuccess?: () => void;\n}\n\nconst ResetDialog: React.FC<ResetDialogProps> = ({\n  open,\n  onClose,\n  resetType,\n  organizationName = '',\n  entityId,\n  onSuccess\n}) => {\n  const [confirmText, setConfirmText] = useState('');\n  const [confirmChecked, setConfirmChecked] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const expectedConfirmText = resetType === 'organization' \n    ? 'RESET ORGANIZATION' \n    : 'RESET ENTITY';\n\n  const handleReset = async () => {\n    if (confirmText !== expectedConfirmText || !confirmChecked) {\n      toast.error('Please confirm the reset action properly');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      const endpoint = resetType === 'organization' \n        ? '/api/v1/settings/reset/organization'\n        : `/api/v1/settings/reset/entity`;\n\n      const body = resetType === 'entity' && entityId\n        ? { entity_id: entityId, confirm: true }\n        : { confirm: true };\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(body),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.detail || 'Reset failed');\n      }\n\n      const result = await response.json();\n      toast.success(result.message || 'Reset completed successfully');\n      \n      if (onSuccess) {\n        onSuccess();\n      }\n      \n      handleClose();\n    } catch (error) {\n      console.error('Reset error:', error);\n      toast.error(error instanceof Error ? error.message : 'Reset failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setConfirmText('');\n    setConfirmChecked(false);\n    setLoading(false);\n    onClose();\n  };\n\n  const isConfirmValid = confirmText === expectedConfirmText && confirmChecked;\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        <WarningIcon color=\"error\" />\n        {resetType === 'organization' ? 'Reset Organization Data' : 'Reset Entity Data'}\n      </DialogTitle>\n      \n      <DialogContent>\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            ⚠️ DANGER - This action cannot be undone!\n          </Typography>\n        </Alert>\n\n        <Typography variant=\"body1\" gutterBottom>\n          {resetType === 'organization' \n            ? `This will permanently delete ALL data for the current organization${organizationName ? ` &quot;${organizationName}&quot;` : ''}.`\n            : `This will permanently delete ALL data for the selected entity${organizationName ? ` &quot;${organizationName}&quot;` : ''}.`\n          }\n        </Typography>\n\n        <Box sx={{ my: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            The following data will be deleted:\n          </Typography>\n          <ul>\n            <li>All products and inventory</li>\n            <li>All stock records</li>\n            <li>All companies and customer/vendor data</li>\n            <li>All vouchers and transactions</li>\n            <li>All audit logs and notifications</li>\n            <li>Non-admin user accounts</li>\n          </ul>\n        </Box>\n\n        <Divider sx={{ my: 2 }} />\n\n        <Typography variant=\"body2\" fontWeight=\"bold\" gutterBottom>\n          To confirm this action:\n        </Typography>\n\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"body2\" gutterBottom>\n            1. Type &quot;{expectedConfirmText}&quot; in the box below:\n          </Typography>\n          <TextField\n            fullWidth\n            value={confirmText}\n            onChange={(e) => setConfirmText(e.target.value)}\n            placeholder={expectedConfirmText}\n            disabled={loading}\n            error={confirmText.length > 0 && confirmText !== expectedConfirmText}\n            helperText={\n              confirmText.length > 0 && confirmText !== expectedConfirmText\n                ? `Must type exactly: ${expectedConfirmText}`\n                : ''\n            }\n          />\n        </Box>\n\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={confirmChecked}\n              onChange={(e) => setConfirmChecked(e.target.checked)}\n              disabled={loading}\n            />\n          }\n          label=\"I understand this action is permanent and cannot be undone\"\n        />\n\n        {resetType === 'organization' && (\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\n            The organization itself and admin user accounts will be preserved.\n          </Alert>\n        )}\n      </DialogContent>\n\n      <DialogActions>\n        <Button \n          onClick={handleClose} \n          disabled={loading}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleReset}\n          variant=\"contained\"\n          color=\"error\"\n          disabled={!isConfirmValid || loading}\n          startIcon={loading ? <CircularProgress size={16} /> : null}\n        >\n          {loading ? 'Resetting...' : 'Reset Data'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ResetDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/RoleGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/RoleManagement/PermissionMatrixDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ServiceRole' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"ServiceRole"},"fix":{"range":[592,604],"text":""},"desc":"Remove unused variable 'ServiceRole'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  Checkbox,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  InputAdornment,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Switch,\n  FormControlLabel\n} from '@mui/material';\nimport {\n  Search as SearchIcon,\n  ExpandMore as ExpandMoreIcon,\n  Security as SecurityIcon\n} from '@mui/icons-material';\nimport {\n  ServiceRole,\n  ServiceRoleWithPermissions,\n  ServicePermission,\n  ServiceModule,\n  MODULE_DISPLAY_NAMES,\n  ROLE_BADGE_COLORS\n} from '../../types/rbac.types';\n\ninterface PermissionMatrixDialogProps {\n  open: boolean;\n  onClose: () => void;\n  roles: ServiceRoleWithPermissions[];\n  permissions: ServicePermission[];\n}\n\nconst PermissionMatrixDialog: React.FC<PermissionMatrixDialogProps> = ({\n  open,\n  onClose,\n  roles,\n  permissions\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedModule, setSelectedModule] = useState<ServiceModule | 'all'>('all');\n  const [showMatrixView, setShowMatrixView] = useState(true);\n  const [expandedRole, setExpandedRole] = useState<string | false>(false);\n\n  // Group permissions by module\n  const permissionsByModule = useMemo(() => {\n    return permissions.reduce((acc, permission) => {\n      if (!acc[permission.module]) {\n        acc[permission.module] = [];\n      }\n      acc[permission.module].push(permission);\n      return acc;\n    }, {} as Record<string, ServicePermission[]>);\n  }, [permissions]);\n\n  // Filter permissions based on search and module selection\n  const filteredPermissions = useMemo(() => {\n    let filtered = permissions;\n    \n    if (selectedModule !== 'all') {\n      filtered = filtered.filter(p => p.module === selectedModule);\n    }\n    \n    if (searchTerm) {\n      filtered = filtered.filter(p => \n        p.display_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        p.description?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n    \n    return filtered;\n  }, [permissions, selectedModule, searchTerm]);\n\n  // Check if a role has a specific permission\n  const roleHasPermission = (role: ServiceRoleWithPermissions, permissionId: number) => {\n    return role.permissions.some(p => p.id === permissionId);\n  };\n\n  // Get permission statistics for a role\n  const getRoleStats = (role: ServiceRoleWithPermissions) => {\n    const total = permissions.length;\n    const granted = role.permissions.length;\n    const percentage = total > 0 ? Math.round((granted / total) * 100) : 0;\n    \n    return { total, granted, percentage };\n  };\n\n  // Get module statistics for a role\n  const getModuleStats = (role: ServiceRoleWithPermissions, module: ServiceModule) => {\n    const modulePermissions = permissionsByModule[module] || [];\n    const grantedInModule = role.permissions.filter(p => p.module === module).length;\n    const totalInModule = modulePermissions.length;\n    \n    return {\n      granted: grantedInModule,\n      total: totalInModule,\n      percentage: totalInModule > 0 ? Math.round((grantedInModule / totalInModule) * 100) : 0\n    };\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"xl\" fullWidth>\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <SecurityIcon />\n          <Typography variant=\"h6\">Permission Matrix</Typography>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3, mt: 1 }}>\n          {/* Filters and Controls */}\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n            <TextField\n              size=\"small\"\n              placeholder=\"Search permissions...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n              sx={{ minWidth: 250 }}\n            />\n            \n            <FormControl size=\"small\" sx={{ minWidth: 200 }}>\n              <InputLabel>Filter by Module</InputLabel>\n              <Select\n                value={selectedModule}\n                onChange={(e) => setSelectedModule(e.target.value as ServiceModule | 'all')}\n                label=\"Filter by Module\"\n              >\n                <MenuItem value=\"all\">All Modules</MenuItem>\n                {Object.keys(permissionsByModule).map(module => (\n                  <MenuItem key={module} value={module}>\n                    {MODULE_DISPLAY_NAMES[module as ServiceModule] || module}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            \n            <FormControlLabel\n              control={\n                <Switch\n                  checked={showMatrixView}\n                  onChange={(e) => setShowMatrixView(e.target.checked)}\n                />\n              }\n              label=\"Matrix View\"\n            />\n          </Box>\n          \n          {showMatrixView ? (\n            /* Matrix View */\n            <TableContainer component={Paper} sx={{ maxHeight: 600 }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ minWidth: 250, position: 'sticky', left: 0, bgcolor: 'background.paper', zIndex: 1 }}>\n                      Permission\n                    </TableCell>\n                    {roles.map((role) => (\n                      <TableCell key={role.id} align=\"center\" sx={{ minWidth: 120 }}>\n                        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\n                          <Chip\n                            label={role.name}\n                            size=\"small\"\n                            color={ROLE_BADGE_COLORS[role.name] as any}\n                          />\n                          <Typography variant=\"caption\">\n                            {getRoleStats(role).granted}/{getRoleStats(role).total}\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {filteredPermissions.map((permission) => (\n                    <TableRow key={permission.id} hover>\n                      <TableCell sx={{ position: 'sticky', left: 0, bgcolor: 'background.paper', zIndex: 1 }}>\n                        <Box>\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\n                            {permission.display_name}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {MODULE_DISPLAY_NAMES[permission.module]} • {permission.action}\n                          </Typography>\n                          {permission.description && (\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block' }}>\n                              {permission.description}\n                            </Typography>\n                          )}\n                        </Box>\n                      </TableCell>\n                      {roles.map((role) => (\n                        <TableCell key={role.id} align=\"center\">\n                          <Checkbox\n                            checked={roleHasPermission(role, permission.id)}\n                            disabled\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          ) : (\n            /* Role-based View */\n            <Box>\n              {roles.map((role) => {\n                const stats = getRoleStats(role);\n                \n                return (\n                  <Accordion\n                    key={role.id}\n                    expanded={expandedRole === role.id.toString()}\n                    onChange={(_, isExpanded) => setExpandedRole(isExpanded ? role.id.toString() : false)}\n                  >\n                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>\n                        <Chip\n                          label={role.name}\n                          color={ROLE_BADGE_COLORS[role.name] as any}\n                          size=\"small\"\n                        />\n                        <Typography sx={{ flexGrow: 1 }}>\n                          {role.display_name}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {stats.granted}/{stats.total} permissions ({stats.percentage}%)\n                        </Typography>\n                      </Box>\n                    </AccordionSummary>\n                    \n                    <AccordionDetails>\n                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                        {/* Module breakdown */}\n                        <Box>\n                          <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Permissions by Module\n                          </Typography>\n                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n                            {Object.keys(permissionsByModule).map(module => {\n                              const moduleStats = getModuleStats(role, module as ServiceModule);\n                              return (\n                                <Chip\n                                  key={module}\n                                  label={`${MODULE_DISPLAY_NAMES[module as ServiceModule]}: ${moduleStats.granted}/${moduleStats.total}`}\n                                  size=\"small\"\n                                  variant=\"outlined\"\n                                  color={moduleStats.percentage === 100 ? 'primary' : moduleStats.percentage > 0 ? 'warning' : 'default'}\n                                />\n                              );\n                            })}\n                          </Box>\n                        </Box>\n                        \n                        {/* Detailed permissions */}\n                        <Box>\n                          <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>\n                            Granted Permissions\n                          </Typography>\n                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                            {role.permissions\n                              .filter(p => selectedModule === 'all' || p.module === selectedModule)\n                              .filter(p => !searchTerm || \n                                p.display_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                                p.name.toLowerCase().includes(searchTerm.toLowerCase())\n                              )\n                              .map(permission => (\n                                <Chip\n                                  key={permission.id}\n                                  label={permission.display_name}\n                                  size=\"small\"\n                                  variant=\"outlined\"\n                                />\n                              ))}\n                          </Box>\n                        </Box>\n                      </Box>\n                    </AccordionDetails>\n                  </Accordion>\n                );\n              })}\n            </Box>\n          )}\n          \n          {filteredPermissions.length === 0 && (\n            <Box sx={{ textAlign: 'center', py: 4 }}>\n              <Typography variant=\"h6\" color=\"text.secondary\">\n                No permissions found\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Try adjusting your search criteria.\n              </Typography>\n            </Box>\n          )}\n        </Box>\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={onClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default PermissionMatrixDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/RoleManagement/RoleFormDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ServiceRole' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"ServiceRole"},"fix":{"range":[459,471],"text":""},"desc":"Remove unused variable 'ServiceRole'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":48,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[874,917],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Switch,\n  Box,\n  Typography,\n  Chip,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Checkbox,\n  FormGroup,\n  Alert\n} from '@mui/material';\nimport {\n  ExpandMore as ExpandMoreIcon\n} from '@mui/icons-material';\nimport {\n  ServiceRole,\n  ServiceRoleWithPermissions,\n  ServicePermission,\n  ServiceRoleCreate,\n  ServiceRoleUpdate,\n  ServiceRoleType,\n  SERVICE_ROLE_DEFAULTS,\n  MODULE_DISPLAY_NAMES,\n  ServiceModule\n} from '../../types/rbac.types';\n\ninterface RoleFormDialogProps {\n  open: boolean;\n  onClose: () => void;\n  role?: ServiceRoleWithPermissions | null;\n  permissions: ServicePermission[];\n  organizationId: number;\n  onSubmit: (data: ServiceRoleCreate | ServiceRoleUpdate) => void;\n}\n\nconst RoleFormDialog: React.FC<RoleFormDialogProps> = ({\n  open,\n  onClose,\n  role,\n  permissions,\n  organizationId,\n  onSubmit\n}) => {\n  const [formData, setFormData] = useState({\n    name: ServiceRoleType.VIEWER,\n    display_name: '',\n    description: '',\n    is_active: true,\n    permission_ids: [] as number[]\n  });\n  \n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [expandedModule, setExpandedModule] = useState<string | false>(false);\n\n  useEffect(() => {\n    if (role) {\n      // Editing existing role\n      setFormData({\n        name: role.name,\n        display_name: role.display_name,\n        description: role.description || '',\n        is_active: role.is_active,\n        permission_ids: role.permissions.map(p => p.id)\n      });\n    } else {\n      // Creating new role - use defaults\n      setFormData({\n        name: ServiceRoleType.VIEWER,\n        display_name: SERVICE_ROLE_DEFAULTS[ServiceRoleType.VIEWER].display_name || '',\n        description: SERVICE_ROLE_DEFAULTS[ServiceRoleType.VIEWER].description || '',\n        is_active: true,\n        permission_ids: []\n      });\n    }\n    setErrors({});\n  }, [role, open]);\n\n  const handleRoleTypeChange = (roleType: ServiceRoleType) => {\n    const defaults = SERVICE_ROLE_DEFAULTS[roleType];\n    setFormData(prev => ({\n      ...prev,\n      name: roleType,\n      display_name: defaults.display_name || '',\n      description: defaults.description || ''\n    }));\n  };\n\n  const handlePermissionToggle = (permissionId: number) => {\n    setFormData(prev => ({\n      ...prev,\n      permission_ids: prev.permission_ids.includes(permissionId)\n        ? prev.permission_ids.filter(id => id !== permissionId)\n        : [...prev.permission_ids, permissionId]\n    }));\n  };\n\n  const handleModuleToggle = (module: ServiceModule) => {\n    const modulePermissions = permissions\n      .filter(p => p.module === module)\n      .map(p => p.id);\n    \n    const allSelected = modulePermissions.every(id => \n      formData.permission_ids.includes(id)\n    );\n    \n    if (allSelected) {\n      // Deselect all module permissions\n      setFormData(prev => ({\n        ...prev,\n        permission_ids: prev.permission_ids.filter(id => \n          !modulePermissions.includes(id)\n        )\n      }));\n    } else {\n      // Select all module permissions\n      setFormData(prev => ({\n        ...prev,\n        permission_ids: [\n          ...prev.permission_ids.filter(id => !modulePermissions.includes(id)),\n          ...modulePermissions\n        ]\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: Record<string, string> = {};\n    \n    if (!formData.display_name.trim()) {\n      newErrors.display_name = 'Display name is required';\n    }\n    \n    if (formData.permission_ids.length === 0) {\n      newErrors.permissions = 'At least one permission must be selected';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = () => {\n    if (!validateForm()) {return;}\n    \n    if (role) {\n      // Updating existing role\n      const updateData: ServiceRoleUpdate = {\n        display_name: formData.display_name,\n        description: formData.description || undefined,\n        is_active: formData.is_active,\n        permission_ids: formData.permission_ids\n      };\n      onSubmit(updateData);\n    } else {\n      // Creating new role\n      const createData: ServiceRoleCreate = {\n        name: formData.name,\n        display_name: formData.display_name,\n        description: formData.description || undefined,\n        organization_id: organizationId,\n        is_active: formData.is_active,\n        permission_ids: formData.permission_ids\n      };\n      onSubmit(createData);\n    }\n  };\n\n  // Group permissions by module\n  const permissionsByModule = permissions.reduce((acc, permission) => {\n    if (!acc[permission.module]) {\n      acc[permission.module] = [];\n    }\n    acc[permission.module].push(permission);\n    return acc;\n  }, {} as Record<string, ServicePermission[]>);\n\n  const getModuleSelectionStatus = (module: ServiceModule) => {\n    const modulePermissions = permissionsByModule[module] || [];\n    const selectedCount = modulePermissions.filter(p => \n      formData.permission_ids.includes(p.id)\n    ).length;\n    \n    if (selectedCount === 0) {return 'none';}\n    if (selectedCount === modulePermissions.length) {return 'all';}\n    return 'partial';\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        {role ? 'Edit Service Role' : 'Create Service Role'}\n      </DialogTitle>\n      \n      <DialogContent>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3, mt: 1 }}>\n          {/* Basic Information */}\n          <Box>\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\n              Basic Information\n            </Typography>\n            \n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n              <FormControl fullWidth disabled={!!role}>\n                <InputLabel>Role Type</InputLabel>\n                <Select\n                  value={formData.name}\n                  onChange={(e) => handleRoleTypeChange(e.target.value as ServiceRoleType)}\n                  label=\"Role Type\"\n                >\n                  {Object.values(ServiceRoleType).map(roleType => (\n                    <MenuItem key={roleType} value={roleType}>\n                      {roleType.charAt(0).toUpperCase() + roleType.slice(1)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              \n              <TextField\n                fullWidth\n                label=\"Display Name\"\n                value={formData.display_name}\n                onChange={(e) => setFormData(prev => ({ ...prev, display_name: e.target.value }))}\n                error={!!errors.display_name}\n                helperText={errors.display_name}\n                required\n              />\n              \n              <TextField\n                fullWidth\n                label=\"Description\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                multiline\n                rows={2}\n              />\n              \n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={formData.is_active}\n                    onChange={(e) => setFormData(prev => ({ ...prev, is_active: e.target.checked }))}\n                  />\n                }\n                label=\"Active\"\n              />\n            </Box>\n          </Box>\n          \n          {/* Permissions */}\n          <Box>\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\n              Permissions ({formData.permission_ids.length} selected)\n            </Typography>\n            \n            {errors.permissions && (\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\n                {errors.permissions}\n              </Alert>\n            )}\n            \n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Select permissions for this role. Permissions are organized by module.\n              </Typography>\n            </Box>\n            \n            {Object.entries(permissionsByModule).map(([module, modulePermissions]) => {\n              const selectionStatus = getModuleSelectionStatus(module as ServiceModule);\n              \n              return (\n                <Accordion\n                  key={module}\n                  expanded={expandedModule === module}\n                  onChange={(_, isExpanded) => setExpandedModule(isExpanded ? module : false)}\n                >\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            checked={selectionStatus === 'all'}\n                            indeterminate={selectionStatus === 'partial'}\n                            onChange={() => handleModuleToggle(module as ServiceModule)}\n                            onClick={(e) => e.stopPropagation()}\n                          />\n                        }\n                        label=\"\"\n                        sx={{ mr: 0 }}\n                      />\n                      <Typography sx={{ flexGrow: 1 }}>\n                        {MODULE_DISPLAY_NAMES[module as ServiceModule] || module}\n                      </Typography>\n                      <Chip\n                        label={`${modulePermissions.filter(p => formData.permission_ids.includes(p.id)).length}/${modulePermissions.length}`}\n                        size=\"small\"\n                        color={selectionStatus === 'all' ? 'primary' : selectionStatus === 'partial' ? 'warning' : 'default'}\n                      />\n                    </Box>\n                  </AccordionSummary>\n                  \n                  <AccordionDetails>\n                    <FormGroup>\n                      {modulePermissions.map((permission) => (\n                        <FormControlLabel\n                          key={permission.id}\n                          control={\n                            <Checkbox\n                              checked={formData.permission_ids.includes(permission.id)}\n                              onChange={() => handlePermissionToggle(permission.id)}\n                            />\n                          }\n                          label={\n                            <Box>\n                              <Typography variant=\"body2\">\n                                {permission.display_name}\n                              </Typography>\n                              {permission.description && (\n                                <Typography variant=\"caption\" color=\"text.secondary\">\n                                  {permission.description}\n                                </Typography>\n                              )}\n                            </Box>\n                          }\n                        />\n                      ))}\n                    </FormGroup>\n                  </AccordionDetails>\n                </Accordion>\n              );\n            })}\n          </Box>\n        </Box>\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={onClose}>\n          Cancel\n        </Button>\n        <Button onClick={handleSubmit} variant=\"contained\">\n          {role ? 'Update Role' : 'Create Role'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default RoleFormDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/RoleManagement/RoleManagement.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MODULE_DISPLAY_NAMES' is defined but never used.","line":53,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"MODULE_DISPLAY_NAMES"},"fix":{"range":[945,969],"text":""},"desc":"Remove unused variable 'MODULE_DISPLAY_NAMES'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PERMISSION_DISPLAY_NAMES' is defined but never used.","line":54,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"PERMISSION_DISPLAY_NAMES"},"fix":{"range":[969,997],"text":""},"desc":"Remove unused variable 'PERMISSION_DISPLAY_NAMES'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadData' was used before it was defined.","line":118,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":118,"endColumn":13},{"ruleId":"no-shadow","severity":2,"message":"'user' is already declared in the upper scope on line 87 column 11.","line":194,"column":33,"nodeType":"Identifier","messageId":"noShadow","endLine":194,"endColumn":59},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'user' is already declared in the upper scope on line 87 column 11.","line":194,"column":33,"nodeType":"Identifier","messageId":"noShadow","endLine":194,"endColumn":59},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ViewIcon' is not defined.","line":237,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":237,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'ViewIcon' is not defined.","line":237,"column":17,"nodeType":"JSXIdentifier","messageId":"undef","endLine":237,"endColumn":25},{"ruleId":"no-shadow","severity":2,"message":"'user' is already declared in the upper scope on line 87 column 11.","line":434,"column":28,"nodeType":"Identifier","messageId":"noShadow","endLine":434,"endColumn":32},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'user' is already declared in the upper scope on line 87 column 11.","line":434,"column":28,"nodeType":"Identifier","messageId":"noShadow","endLine":434,"endColumn":32}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Chip,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Tooltip,\n  Alert,\n  CircularProgress,\n  Tab,\n  Tabs,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  People as PeopleIcon,\n  Security as SecurityIcon,\n  Settings as SettingsIcon,\n  Assignment as AssignmentIcon,\n  AdminPanelSettings as AdminIcon\n} from '@mui/icons-material';\nimport { useAuth } from '../../context/AuthContext';\nimport { rbacService } from '../../services/rbacService';\nimport {\n  ServiceRole,\n  ServiceRoleWithPermissions,\n  ServicePermission,\n  UserWithServiceRoles,\n  ServiceRoleType,\n  ROLE_BADGE_COLORS,\n  MODULE_DISPLAY_NAMES,\n  PERMISSION_DISPLAY_NAMES\n} from '../../types/rbac.types';\nimport { canManageUsers } from '../../types/user.types';\nimport RoleFormDialog from './RoleFormDialog';\nimport UserRoleAssignmentDialog from './UserRoleAssignmentDialog';\nimport PermissionMatrixDialog from './PermissionMatrixDialog';\n\ninterface RoleManagementProps {\n  organizationId: number;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`role-tabpanel-${index}`}\n      aria-labelledby={`role-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst RoleManagement: React.FC<RoleManagementProps> = ({ organizationId }) => {\n  const { user } = useAuth();\n  const [currentTab, setCurrentTab] = useState(0);\n  const [roles, setRoles] = useState<ServiceRoleWithPermissions[]>([]);\n  const [permissions, setPermissions] = useState<ServicePermission[]>([]);\n  const [users, setUsers] = useState<UserWithServiceRoles[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Dialog states\n  const [roleFormOpen, setRoleFormOpen] = useState(false);\n  const [editingRole, setEditingRole] = useState<ServiceRoleWithPermissions | null>(null);\n  const [userAssignmentOpen, setUserAssignmentOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<UserWithServiceRoles | null>(null);\n  const [permissionMatrixOpen, setPermissionMatrixOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [roleToDelete, setRoleToDelete] = useState<ServiceRole | null>(null);\n  \n  // Filters\n  const [showInactiveRoles, setShowInactiveRoles] = useState(false);\n  const [filterByRole, setFilterByRole] = useState<ServiceRoleType | 'all'>('all');\n\n  // Check permissions\n  const canManage = canManageUsers(user);\n\n  useEffect(() => {\n    if (!canManage) {\n      setError('Insufficient permissions to access role management');\n      setLoading(false);\n      return;\n    }\n    \n    loadData();\n  }, [organizationId, canManage]);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [rolesData, permissionsData] = await Promise.all([\n        rbacService.getRolesWithPermissions(organizationId),\n        rbacService.getPermissions()\n      ]);\n      \n      setRoles(rolesData);\n      setPermissions(permissionsData);\n    } catch (err: any) {\n      setError(err.message || 'Failed to load role management data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadUsers = async () => {\n    try {\n      // For now, we'll need to get users from a different endpoint\n      // This would typically come from the user management service\n      setUsers([]);\n    } catch (err: any) {\n      console.warn('Failed to load users:', err);\n    }\n  };\n\n  const handleCreateRole = () => {\n    setEditingRole(null);\n    setRoleFormOpen(true);\n  };\n\n  const handleEditRole = (role: ServiceRoleWithPermissions) => {\n    setEditingRole(role);\n    setRoleFormOpen(true);\n  };\n\n  const handleDeleteRole = (role: ServiceRole) => {\n    setRoleToDelete(role);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDeleteRole = async () => {\n    if (!roleToDelete) {return;}\n    \n    try {\n      await rbacService.deleteRole(roleToDelete.id);\n      await loadData();\n      setDeleteDialogOpen(false);\n      setRoleToDelete(null);\n    } catch (err: any) {\n      setError(err.message || 'Failed to delete role');\n    }\n  };\n\n  const handleRoleSubmit = async (roleData: any) => {\n    try {\n      if (editingRole) {\n        await rbacService.updateRole(editingRole.id, roleData);\n      } else {\n        await rbacService.createRole(organizationId, roleData);\n      }\n      \n      await loadData();\n      setRoleFormOpen(false);\n      setEditingRole(null);\n    } catch (err: any) {\n      setError(err.message || 'Failed to save role');\n    }\n  };\n\n  const handleUserAssignment = (user: UserWithServiceRoles) => {\n    setSelectedUser(user);\n    setUserAssignmentOpen(true);\n  };\n\n  const handleAssignRoles = async (userId: number, roleIds: number[]) => {\n    try {\n      await rbacService.assignRolesToUser(userId, { user_id: userId, role_ids: roleIds });\n      await loadUsers();\n      setUserAssignmentOpen(false);\n      setSelectedUser(null);\n    } catch (err: any) {\n      setError(err.message || 'Failed to assign roles');\n    }\n  };\n\n  const handleRemoveRole = async (userId: number, roleId: number) => {\n    try {\n      await rbacService.removeRoleFromUser(userId, roleId);\n      await loadUsers();\n    } catch (err: any) {\n      setError(err.message || 'Failed to remove role');\n    }\n  };\n\n  const handleInitializeDefaults = async () => {\n    try {\n      await rbacService.initializeDefaultRoles(organizationId);\n      await loadData();\n    } catch (err: any) {\n      setError(err.message || 'Failed to initialize default roles');\n    }\n  };\n\n  const getRoleIcon = (roleType: ServiceRoleType) => {\n    switch (roleType) {\n      case ServiceRoleType.ADMIN:\n        return <AdminIcon />;\n      case ServiceRoleType.MANAGER:\n        return <SettingsIcon />;\n      case ServiceRoleType.SUPPORT:\n        return <PeopleIcon />;\n      case ServiceRoleType.VIEWER:\n        return <ViewIcon />;\n      default:\n        return <SecurityIcon />;\n    }\n  };\n\n  const filteredRoles = roles.filter(role => {\n    if (!showInactiveRoles && !role.is_active) {return false;}\n    if (filterByRole !== 'all' && role.name !== filterByRole) {return false;}\n    return true;\n  });\n\n  if (!canManage) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"error\">\n          You do not have permission to access role management.\n        </Alert>\n      </Box>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Service CRM Role Management\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"outlined\"\n            onClick={handleInitializeDefaults}\n            startIcon={<SecurityIcon />}\n          >\n            Initialize Defaults\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={handleCreateRole}\n            startIcon={<AddIcon />}\n          >\n            Create Role\n          </Button>\n        </Box>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      )}\n\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs value={currentTab} onChange={(_, newValue) => setCurrentTab(newValue)}>\n          <Tab label=\"Role Overview\" />\n          <Tab label=\"User Assignments\" />\n          <Tab label=\"Permission Matrix\" />\n        </Tabs>\n      </Box>\n\n      <TabPanel value={currentTab} index={0}>\n        {/* Role Overview Tab */}\n        <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center' }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showInactiveRoles}\n                onChange={(e) => setShowInactiveRoles(e.target.checked)}\n              />\n            }\n            label=\"Show Inactive Roles\"\n          />\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Filter by Role</InputLabel>\n            <Select\n              value={filterByRole}\n              onChange={(e) => setFilterByRole(e.target.value as ServiceRoleType | 'all')}\n              label=\"Filter by Role\"\n            >\n              <MenuItem value=\"all\">All Roles</MenuItem>\n              {Object.values(ServiceRoleType).map(role => (\n                <MenuItem key={role} value={role}>\n                  {role.charAt(0).toUpperCase() + role.slice(1)}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Box>\n\n        <Grid container spacing={3}>\n          {filteredRoles.map((role) => (\n            <Grid item xs={12} md={6} lg={4} key={role.id}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                    {getRoleIcon(role.name)}\n                    <Typography variant=\"h6\" sx={{ ml: 1, flexGrow: 1 }}>\n                      {role.display_name}\n                    </Typography>\n                    <Chip\n                      label={role.name}\n                      color={ROLE_BADGE_COLORS[role.name] as any}\n                      size=\"small\"\n                    />\n                  </Box>\n                  \n                  {role.description && (\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                      {role.description}\n                    </Typography>\n                  )}\n                  \n                  <Box sx={{ mb: 2 }}>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Permissions: {role.permissions.length}\n                    </Typography>\n                  </Box>\n                  \n                  <Box sx={{ display: 'flex', gap: 1 }}>\n                    <Tooltip title=\"Edit Role\">\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => handleEditRole(role)}\n                        color=\"primary\"\n                      >\n                        <EditIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Delete Role\">\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => handleDeleteRole(role)}\n                        color=\"error\"\n                        disabled={!role.is_active}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n\n        {filteredRoles.length === 0 && (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              No roles found\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {roles.length === 0 \n                ? 'Create your first service role or initialize default roles.'\n                : 'Try adjusting the filters or create a new role.'\n              }\n            </Typography>\n          </Box>\n        )}\n      </TabPanel>\n\n      <TabPanel value={currentTab} index={1}>\n        {/* User Assignments Tab */}\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"h6\">User Role Assignments</Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Manage service role assignments for users in your organization.\n          </Typography>\n        </Box>\n        \n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>User</TableCell>\n                <TableCell>Email</TableCell>\n                <TableCell>Service Roles</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {users.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={4} align=\"center\">\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      No users found. User assignments will be displayed here.\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                users.map((user) => (\n                  <TableRow key={user.id}>\n                    <TableCell>{user.full_name || 'Unknown'}</TableCell>\n                    <TableCell>{user.email}</TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                        {user.service_roles.map((role) => (\n                          <Chip\n                            key={role.id}\n                            label={role.display_name}\n                            size=\"small\"\n                            color={ROLE_BADGE_COLORS[role.name] as any}\n                          />\n                        ))}\n                        {user.service_roles.length === 0 && (\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            No service roles assigned\n                          </Typography>\n                        )}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => handleUserAssignment(user)}\n                        color=\"primary\"\n                      >\n                        <AssignmentIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      <TabPanel value={currentTab} index={2}>\n        {/* Permission Matrix Tab */}\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"h6\">Permission Matrix</Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            View and manage permissions for each role across different modules.\n          </Typography>\n        </Box>\n        \n        <Button\n          variant=\"outlined\"\n          onClick={() => setPermissionMatrixOpen(true)}\n          startIcon={<SecurityIcon />}\n          sx={{ mb: 3 }}\n        >\n          View Detailed Permission Matrix\n        </Button>\n        \n        {/* Simplified permission overview */}\n        <Grid container spacing={2}>\n          {roles.map((role) => (\n            <Grid item xs={12} md={6} key={role.id}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                    {role.display_name}\n                  </Typography>\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                    {role.permissions.slice(0, 6).map((permission) => (\n                      <Chip\n                        key={permission.id}\n                        label={permission.display_name}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    ))}\n                    {role.permissions.length > 6 && (\n                      <Chip\n                        label={`+${role.permissions.length - 6} more`}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        color=\"primary\"\n                      />\n                    )}\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </TabPanel>\n\n      {/* Dialogs */}\n      <RoleFormDialog\n        open={roleFormOpen}\n        onClose={() => setRoleFormOpen(false)}\n        role={editingRole}\n        permissions={permissions}\n        organizationId={organizationId}\n        onSubmit={handleRoleSubmit}\n      />\n\n      {selectedUser && (\n        <UserRoleAssignmentDialog\n          open={userAssignmentOpen}\n          onClose={() => setUserAssignmentOpen(false)}\n          user={selectedUser}\n          availableRoles={roles.filter(r => r.is_active)}\n          onAssign={handleAssignRoles}\n          onRemove={handleRemoveRole}\n        />\n      )}\n\n      <PermissionMatrixDialog\n        open={permissionMatrixOpen}\n        onClose={() => setPermissionMatrixOpen(false)}\n        roles={roles}\n        permissions={permissions}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n        <DialogTitle>Delete Role</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete the role \"{roleToDelete?.display_name}\"?\n            This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n          <Button onClick={confirmDeleteRole} color=\"error\" variant=\"contained\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default RoleManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/RoleManagement/UserRoleAssignmentDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":43,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[742,757],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'roleIds' is defined but never used.","line":43,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"roleIds"},"fix":{"range":[756,775],"text":""},"desc":"Remove unused variable 'roleIds'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":44,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[799,814],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'roleId' is defined but never used.","line":44,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"roleId"},"fix":{"range":[813,829],"text":""},"desc":"Remove unused variable 'roleId'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Box,\n  Typography,\n  Chip,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  OutlinedInput,\n  Checkbox,\n  ListItemText,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText as MuiListItemText,\n  Divider,\n  Alert\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Person as PersonIcon\n} from '@mui/icons-material';\nimport {\n  ServiceRole,\n  UserWithServiceRoles,\n  ROLE_BADGE_COLORS\n} from '../../types/rbac.types';\n\ninterface UserRoleAssignmentDialogProps {\n  open: boolean;\n  onClose: () => void;\n  user: UserWithServiceRoles;\n  availableRoles: ServiceRole[];\n  onAssign: (userId: number, roleIds: number[]) => void;\n  onRemove: (userId: number, roleId: number) => void;\n}\n\nconst UserRoleAssignmentDialog: React.FC<UserRoleAssignmentDialogProps> = ({\n  open,\n  onClose,\n  user,\n  availableRoles,\n  onAssign,\n  onRemove\n}) => {\n  const [selectedRoleIds, setSelectedRoleIds] = useState<number[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setSelectedRoleIds([]);\n  }, [user, open]);\n\n  const handleAssignRoles = async () => {\n    if (selectedRoleIds.length === 0) {return;}\n    \n    setLoading(true);\n    try {\n      await onAssign(user.id, selectedRoleIds);\n      setSelectedRoleIds([]);\n    } catch (error) {\n      console.error('Failed to assign roles:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRemoveRole = async (roleId: number) => {\n    setLoading(true);\n    try {\n      await onRemove(user.id, roleId);\n    } catch (error) {\n      console.error('Failed to remove role:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRoleSelectionChange = (event: any) => {\n    const value = event.target.value;\n    setSelectedRoleIds(typeof value === 'string' ? value.split(',').map(Number) : value);\n  };\n\n  // Filter out roles that the user already has\n  const assignableRoles = availableRoles.filter(role => \n    !user.service_roles.some(userRole => userRole.id === role.id)\n  );\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <PersonIcon />\n          <Box sx={{ flexGrow: 1 }}>\n            <Typography variant=\"h6\">\n              Manage Service Roles\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {user.full_name || user.email}\n            </Typography>\n          </Box>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\n          {/* Current Roles */}\n          <Box>\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\n              Current Service Roles\n            </Typography>\n            \n            {user.service_roles.length === 0 ? (\n              <Alert severity=\"info\">\n                This user has no service roles assigned.\n              </Alert>\n            ) : (\n              <List dense>\n                {user.service_roles.map((role) => (\n                  <ListItem\n                    key={role.id}\n                    secondaryAction={\n                      <IconButton\n                        edge=\"end\"\n                        size=\"small\"\n                        onClick={() => handleRemoveRole(role.id)}\n                        disabled={loading}\n                        color=\"error\"\n                      >\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                  >\n                    <ListItemIcon>\n                      <Chip\n                        label={role.name}\n                        size=\"small\"\n                        color={ROLE_BADGE_COLORS[role.name] as any}\n                      />\n                    </ListItemIcon>\n                    <MuiListItemText\n                      primary={role.display_name}\n                      secondary={role.description}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n            )}\n          </Box>\n          \n          <Divider />\n          \n          {/* Assign New Roles */}\n          <Box>\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\n              Assign New Roles\n            </Typography>\n            \n            {assignableRoles.length === 0 ? (\n              <Alert severity=\"warning\">\n                No additional roles available for assignment.\n              </Alert>\n            ) : (\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                <FormControl fullWidth>\n                  <InputLabel>Select Roles to Assign</InputLabel>\n                  <Select\n                    multiple\n                    value={selectedRoleIds}\n                    onChange={handleRoleSelectionChange}\n                    input={<OutlinedInput label=\"Select Roles to Assign\" />}\n                    renderValue={(selected) => (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {(selected as number[]).map((roleId) => {\n                          const role = assignableRoles.find(r => r.id === roleId);\n                          return role ? (\n                            <Chip\n                              key={roleId}\n                              label={role.display_name}\n                              size=\"small\"\n                              color={ROLE_BADGE_COLORS[role.name] as any}\n                            />\n                          ) : null;\n                        })}\n                      </Box>\n                    )}\n                  >\n                    {assignableRoles.map((role) => (\n                      <MenuItem key={role.id} value={role.id}>\n                        <Checkbox checked={selectedRoleIds.indexOf(role.id) > -1} />\n                        <ListItemText\n                          primary={role.display_name}\n                          secondary={role.description}\n                        />\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n                \n                <Button\n                  variant=\"contained\"\n                  onClick={handleAssignRoles}\n                  disabled={selectedRoleIds.length === 0 || loading}\n                  fullWidth\n                >\n                  Assign Selected Roles ({selectedRoleIds.length})\n                </Button>\n              </Box>\n            )}\n          </Box>\n          \n          {/* User Info */}\n          <Box sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block', mb: 1 }}>\n              User Information\n            </Typography>\n            <Typography variant=\"body2\">\n              <strong>Email:</strong> {user.email}\n            </Typography>\n            <Typography variant=\"body2\">\n              <strong>System Role:</strong> {user.role}\n            </Typography>\n            <Typography variant=\"body2\">\n              <strong>Status:</strong> {user.is_active ? 'Active' : 'Inactive'}\n            </Typography>\n          </Box>\n        </Box>\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={onClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default UserRoleAssignmentDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/RoleManagement/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SLAStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SearchableDropdown.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ClickAwayListener' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"ClickAwayListener"},"fix":{"range":[138,159],"text":""},"desc":"Remove unused variable 'ClickAwayListener'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":22,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[386,396],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'option' is defined but never used.","line":24,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"option"},"fix":{"range":[451,462],"text":""},"desc":"Remove unused variable 'option'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'option' is defined but never used.","line":25,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"option"},"fix":{"range":[494,505],"text":""},"desc":"Remove unused variable 'option'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Paper,\n  Popper,\n  ClickAwayListener,\n  List,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  ListItemButton\n} from '@mui/material';\nimport { Add, Search } from '@mui/icons-material';\n\ninterface SearchableDropdownProps {\n  options: any[];\n  value: any;\n  onChange: (value: any) => void;\n  onAddNew?: () => void;\n  getOptionLabel: (option: any) => string;\n  getOptionValue: (option: any) => any;\n  placeholder?: string;\n  label?: string;\n  disabled?: boolean;\n  error?: boolean;\n  helperText?: string;\n  required?: boolean;\n  noOptionsText?: string;\n  addNewText?: string;\n  searchFields?: string[]; // Fields to search in (e.g., ['name', 'email'])\n  fullWidth?: boolean;\n}\n\nconst SearchableDropdown: React.FC<SearchableDropdownProps> = ({\n  options = [],\n  value,\n  onChange,\n  onAddNew,\n  getOptionLabel,\n  getOptionValue,\n  placeholder = \"Search...\",\n  label,\n  disabled = false,\n  error = false,\n  helperText,\n  required = false,\n  noOptionsText = \"No options found\",\n  addNewText = \"Add New\",\n  searchFields = ['name'],\n  fullWidth = true\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [filteredOptions, setFilteredOptions] = useState(options);\n  const [showAddNew, setShowAddNew] = useState(false);\n\n  // Filter options based on input value\n  useEffect(() => {\n    if (!inputValue.trim()) {\n      setFilteredOptions(options);\n      setShowAddNew(false);\n      return;\n    }\n\n    const filtered = options.filter(option => {\n      const searchTerm = inputValue.toLowerCase();\n      return searchFields.some(field => {\n        const fieldValue = option[field]?.toString().toLowerCase() || '';\n        return fieldValue.includes(searchTerm);\n      });\n    });\n\n    setFilteredOptions(filtered);\n    \n    // Show \"Add New\" option if no results found and onAddNew is provided\n    setShowAddNew(filtered.length === 0 && !!onAddNew && inputValue.trim().length > 0);\n  }, [inputValue, options, searchFields, onAddNew]);\n\n  const handleOptionSelect = (option: any) => {\n    onChange(getOptionValue(option));\n    setInputValue(getOptionLabel(option));\n  };\n\n  const handleAddNew = () => {\n    if (onAddNew) {\n      onAddNew();\n    }\n  };\n\n  const CustomPopper = (props: any) => {\n    return (\n      <Popper {...props} style={{ width: props.anchorEl?.clientWidth || 'auto' }} placement=\"bottom-start\">\n        <Paper elevation={3} sx={{ maxHeight: 300, overflow: 'auto' }}>\n          <List dense>\n            {filteredOptions.map((option, index) => (\n              <ListItemButton\n                key={index}\n                onClick={() => handleOptionSelect(option)}\n                sx={{\n                  '&:hover': {\n                    backgroundColor: 'action.hover'\n                  }\n                }}\n              >\n                <ListItemText\n                  primary={getOptionLabel(option)}\n                  secondary={option.email || option.code || option.description || ''}\n                />\n              </ListItemButton>\n            ))}\n            \n            {filteredOptions.length === 0 && !showAddNew && (\n              <ListItemButton disabled>\n                <ListItemText\n                  primary={noOptionsText}\n                  sx={{ color: 'text.secondary', fontStyle: 'italic' }}\n                />\n              </ListItemButton>\n            )}\n            \n            {showAddNew && (\n              <>\n                {filteredOptions.length > 0 && <Divider />}\n                <ListItemButton\n                  onClick={handleAddNew}\n                  sx={{\n                    backgroundColor: 'primary.light',\n                    color: 'primary.contrastText',\n                    '&:hover': {\n                      backgroundColor: 'primary.main'\n                    }\n                  }}\n                >\n                  <ListItemIcon sx={{ color: 'inherit' }}>\n                    <Add />\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={`${addNewText} &quot;${inputValue}&quot;`}\n                    sx={{ fontWeight: 'medium' }}\n                  />\n                </ListItemButton>\n              </>\n            )}\n          </List>\n        </Paper>\n      </Popper>\n    );\n  };\n\n  return (\n    <Autocomplete\n      fullWidth={fullWidth}\n      options={filteredOptions}\n      getOptionLabel={getOptionLabel}\n      value={value ? options.find(option => getOptionValue(option) === value) || null : null}\n      onChange={(event, newValue) => {\n        if (newValue) {\n          onChange(getOptionValue(newValue));\n        } else {\n          onChange(null);\n        }\n      }}\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      disabled={disabled}\n      noOptionsText={\n        showAddNew ? (\n          <Box>\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 1 }}>\n              {noOptionsText}\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={handleAddNew}\n              size=\"small\"\n              fullWidth\n            >\n              {addNewText} &quot;{inputValue}&quot;\n            </Button>\n          </Box>\n        ) : (\n          noOptionsText\n        )\n      }\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={label}\n          placeholder={placeholder}\n          error={error}\n          helperText={helperText}\n          required={required}\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <Box sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>\n                <Search color=\"action\" fontSize=\"small\" />\n              </Box>\n            )\n          }}\n        />\n      )}\n      renderOption={(props, option) => (\n        <li {...props}>\n          <Box>\n            <Typography variant=\"body2\">\n              {getOptionLabel(option)}\n            </Typography>\n            {(option.email || option.code || option.description) && (\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                {option.email || option.code || option.description}\n              </Typography>\n            )}\n          </Box>\n        </li>\n      )}\n      PopperComponent={CustomPopper}\n      clearOnBlur={false}\n      selectOnFocus\n      handleHomeEndKeys\n      freeSolo={false}\n    />\n  );\n};\n\nexport default SearchableDropdown;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SendNotification.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[175,184],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"CircularProgress"},"fix":{"range":[184,204],"text":""},"desc":"Remove unused variable 'CircularProgress'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItem"},"fix":{"range":[213,225],"text":""},"desc":"Remove unused variable 'ListItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemText"},"fix":{"range":[225,241],"text":""},"desc":"Remove unused variable 'ListItemText'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemIcon"},"fix":{"range":[241,257],"text":""},"desc":"Remove unused variable 'ListItemIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Email' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Email"},"fix":{"range":[390,399],"text":""},"desc":"Remove unused variable 'Email'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Sms' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Sms"},"fix":{"range":[399,406],"text":""},"desc":"Remove unused variable 'Sms'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'NotificationImportant' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"NotificationImportant"},"fix":{"range":[406,431],"text":""},"desc":"Remove unused variable 'NotificationImportant'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Notifications' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"Notifications"},"fix":{"range":[431,448],"text":""},"desc":"Remove unused variable 'Notifications'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[459,474],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Error' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Error"},"fix":{"range":[474,483],"text":""},"desc":"Remove unused variable 'Error'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'NotificationTemplate' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"NotificationTemplate"},"fix":{"range":[696,720],"text":""},"desc":"Remove unused variable 'NotificationTemplate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'RECIPIENT_TYPES' is defined but never used.","line":49,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"RECIPIENT_TYPES"},"fix":{"range":[799,818],"text":""},"desc":"Remove unused variable 'RECIPIENT_TYPES'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BULK_RECIPIENT_TYPES' is defined but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"BULK_RECIPIENT_TYPES"},"fix":{"range":[818,842],"text":""},"desc":"Remove unused variable 'BULK_RECIPIENT_TYPES'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getTemplateTypeDisplayName' is defined but never used.","line":53,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"getTemplateTypeDisplayName"},"fix":{"range":[885,915],"text":""},"desc":"Remove unused variable 'getTemplateTypeDisplayName'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'templatesLoading' is assigned a value but never used.","line":110,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"templatesLoading"},"fix":{"range":[2414,2448],"text":""},"desc":"Remove unused variable 'templatesLoading'."}]},{"ruleId":"no-undef","severity":2,"message":"'getNotificationTemplates' is not defined.","line":113,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'entitiesLoading' is assigned a value but never used.","line":119,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"entitiesLoading"},"fix":{"range":[2659,2692],"text":""},"desc":"Remove unused variable 'entitiesLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":128,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[2907,2911],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'resetSingleForm' was used before it was defined.","line":130,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":130,"endColumn":22},{"ruleId":"no-use-before-define","severity":2,"message":"'resetBulkForm' was used before it was defined.","line":145,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":145,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":160,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[3942,3952],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":269,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":269,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'Card' is not defined.","line":269,"column":8,"nodeType":"JSXIdentifier","messageId":"undef","endLine":269,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":270,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":270,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'CardContent' is not defined.","line":270,"column":10,"nodeType":"JSXIdentifier","messageId":"undef","endLine":270,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'CardContent' is not defined.","line":640,"column":11,"nodeType":"JSXIdentifier","messageId":"undef","endLine":640,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'Card' is not defined.","line":641,"column":9,"nodeType":"JSXIdentifier","messageId":"undef","endLine":641,"endColumn":13}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Button,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Autocomplete,\n  Chip,\n  Alert,\n  CircularProgress,\n  Paper,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Tabs,\n  Tab\n} from '@mui/material';\nimport {\n  Send,\n  Person,\n  Group,\n  Email,\n  Sms,\n  NotificationImportant,\n  Notifications,\n  Preview,\n  CheckCircle,\n  Error\n} from '@mui/icons-material';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport {\n  sendNotification,\n  sendBulkNotification,\n  testNotificationTemplate,\n  NotificationTemplate,\n  NotificationSendRequest,\n  BulkNotificationRequest,\n  NOTIFICATION_CHANNELS,\n  RECIPIENT_TYPES,\n  BULK_RECIPIENT_TYPES,\n  getChannelDisplayName,\n  getChannelIcon,\n  getTemplateTypeDisplayName,\n  notificationQueryKeys\n} from '../services/notificationService';\nimport { getAllEntities } from '../services/entityService';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`send-tabpanel-${index}`}\n      aria-labelledby={`send-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst SendNotification: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n  const [previewContent, setPreviewContent] = useState<any>(null);\n  \n  // Single notification form state\n  const [singleForm, setSingleForm] = useState({\n    template_id: '',\n    recipient_type: 'customer' as 'customer' | 'user',\n    recipient_id: '',\n    channel: 'email',\n    variables: {} as Record<string, string>,\n    override_subject: '',\n    override_content: ''\n  });\n\n  // Bulk notification form state\n  const [bulkForm, setBulkForm] = useState({\n    template_id: '',\n    subject: '',\n    content: '',\n    channel: 'email',\n    recipient_type: 'customers' as 'customers' | 'segment' | 'users',\n    recipient_ids: [] as number[],\n    segment_name: '',\n    variables: {} as Record<string, string>\n  });\n\n  // Get templates\n  const { \n    data: templates = [], \n    isLoading: templatesLoading \n  } = useQuery({\n    queryKey: notificationQueryKeys.templates(),\n    queryFn: () => getNotificationTemplates({ is_active: true }),\n  });\n\n  // Get entities (customers/users)\n  const { \n    data: entities = [], \n    isLoading: entitiesLoading \n  } = useQuery({\n    queryKey: ['entities'],\n    queryFn: getAllEntities,\n  });\n\n  // Send single notification mutation\n  const sendSingleMutation = useMutation({\n    mutationFn: sendNotification,\n    onSuccess: (data) => {\n      toast.success('Notification sent successfully');\n      resetSingleForm();\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to send notification');\n    }\n  });\n\n  // Send bulk notification mutation\n  const sendBulkMutation = useMutation({\n    mutationFn: sendBulkNotification,\n    onSuccess: (data) => {\n      toast.success(`Bulk notification sent: ${data.successful_sends}/${data.total_recipients} successful`);\n      if (data.errors.length > 0) {\n        toast.warning(`${data.failed_sends} notifications failed`);\n      }\n      resetBulkForm();\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to send bulk notification');\n    }\n  });\n\n  // Preview mutation\n  const previewMutation = useMutation({\n    mutationFn: ({ id, testData }: { id: number; testData: any }) =>\n      testNotificationTemplate(id, testData),\n    onSuccess: (data) => {\n      setPreviewContent(data);\n      setIsPreviewOpen(true);\n    },\n    onError: (error: any) => {\n      toast.error('Failed to generate preview');\n    }\n  });\n\n  const resetSingleForm = () => {\n    setSingleForm({\n      template_id: '',\n      recipient_type: 'customer',\n      recipient_id: '',\n      channel: 'email',\n      variables: {},\n      override_subject: '',\n      override_content: ''\n    });\n  };\n\n  const resetBulkForm = () => {\n    setBulkForm({\n      template_id: '',\n      subject: '',\n      content: '',\n      channel: 'email',\n      recipient_type: 'customers',\n      recipient_ids: [],\n      segment_name: '',\n      variables: {}\n    });\n  };\n\n  const handleSendSingle = () => {\n    if (!singleForm.recipient_id) {\n      toast.error('Please select a recipient');\n      return;\n    }\n\n    if (!singleForm.template_id && !singleForm.override_content) {\n      toast.error('Please select a template or provide custom content');\n      return;\n    }\n\n    const request: NotificationSendRequest = {\n      template_id: singleForm.template_id ? parseInt(singleForm.template_id) : undefined,\n      recipient_type: singleForm.recipient_type,\n      recipient_id: parseInt(singleForm.recipient_id),\n      channel: singleForm.channel,\n      variables: Object.keys(singleForm.variables).length > 0 ? singleForm.variables : undefined,\n      override_subject: singleForm.override_subject || undefined,\n      override_content: singleForm.override_content || undefined\n    };\n\n    sendSingleMutation.mutate(request);\n  };\n\n  const handleSendBulk = () => {\n    if (bulkForm.recipient_type === 'customers' && bulkForm.recipient_ids.length === 0) {\n      toast.error('Please select customers');\n      return;\n    }\n\n    if (bulkForm.recipient_type === 'segment' && !bulkForm.segment_name) {\n      toast.error('Please enter segment name');\n      return;\n    }\n\n    if (!bulkForm.template_id && !bulkForm.content) {\n      toast.error('Please select a template or provide custom content');\n      return;\n    }\n\n    const request: BulkNotificationRequest = {\n      template_id: bulkForm.template_id ? parseInt(bulkForm.template_id) : undefined,\n      subject: bulkForm.subject || undefined,\n      content: bulkForm.content,\n      channel: bulkForm.channel,\n      recipient_type: bulkForm.recipient_type,\n      recipient_ids: bulkForm.recipient_ids.length > 0 ? bulkForm.recipient_ids : undefined,\n      segment_name: bulkForm.segment_name || undefined,\n      variables: Object.keys(bulkForm.variables).length > 0 ? bulkForm.variables : undefined\n    };\n\n    sendBulkMutation.mutate(request);\n  };\n\n  const handlePreview = (isForBulk: boolean = false) => {\n    const templateId = isForBulk ? bulkForm.template_id : singleForm.template_id;\n    const variables = isForBulk ? bulkForm.variables : singleForm.variables;\n\n    if (!templateId) {\n      toast.error('Please select a template to preview');\n      return;\n    }\n\n    previewMutation.mutate({\n      id: parseInt(templateId),\n      testData: { variables }\n    });\n  };\n\n  const selectedTemplate = templates.find(t => \n    t.id === parseInt(selectedTab === 0 ? singleForm.template_id : bulkForm.template_id)\n  );\n\n  // Filter entities based on recipient type\n  const customers = entities.filter(e => e.type === 'Customer');\n  const users = entities.filter(e => e.type === 'User');\n\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h5\" component=\"h2\">\n              Send Notifications\n            </Typography>\n          </Box>\n\n          <Tabs \n            value={selectedTab} \n            onChange={(_, newValue) => setSelectedTab(newValue)}\n            sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}\n          >\n            <Tab \n              label=\"Single Notification\" \n              icon={<Person />}\n              iconPosition=\"start\"\n            />\n            <Tab \n              label=\"Bulk Notification\" \n              icon={<Group />}\n              iconPosition=\"start\"\n            />\n          </Tabs>\n\n          {/* Single Notification Tab */}\n          <TabPanel value={selectedTab} index={0}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Template (Optional)</InputLabel>\n                  <Select\n                    value={singleForm.template_id}\n                    label=\"Template (Optional)\"\n                    onChange={(e) => setSingleForm({ ...singleForm, template_id: e.target.value })}\n                  >\n                    <MenuItem value=\"\">Custom Message</MenuItem>\n                    {templates.map(template => (\n                      <MenuItem key={template.id} value={template.id.toString()}>\n                        {template.name} ({getChannelDisplayName(template.channel as any)})\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Channel</InputLabel>\n                  <Select\n                    value={singleForm.channel}\n                    label=\"Channel\"\n                    onChange={(e) => setSingleForm({ ...singleForm, channel: e.target.value })}\n                  >\n                    {NOTIFICATION_CHANNELS.map(channel => (\n                      <MenuItem key={channel} value={channel}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {getChannelIcon(channel)}\n                          {getChannelDisplayName(channel)}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Recipient Type</InputLabel>\n                  <Select\n                    value={singleForm.recipient_type}\n                    label=\"Recipient Type\"\n                    onChange={(e) => setSingleForm({ \n                      ...singleForm, \n                      recipient_type: e.target.value as any,\n                      recipient_id: '' \n                    })}\n                  >\n                    <MenuItem value=\"customer\">Customer</MenuItem>\n                    <MenuItem value=\"user\">User</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={6}>\n                <Autocomplete\n                  options={singleForm.recipient_type === 'customer' ? customers : users}\n                  getOptionLabel={(option) => option.name}\n                  value={entities.find(e => e.id.toString() === singleForm.recipient_id) || null}\n                  onChange={(_, value) => setSingleForm({ \n                    ...singleForm, \n                    recipient_id: value?.id.toString() || '' \n                  })}\n                  renderInput={(params) => (\n                    <TextField \n                      {...params} \n                      label={`Select ${singleForm.recipient_type}`}\n                      margin=\"normal\"\n                      fullWidth\n                    />\n                  )}\n                />\n              </Grid>\n\n              {!singleForm.template_id && (\n                <>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Subject\"\n                      value={singleForm.override_subject}\n                      onChange={(e) => setSingleForm({ ...singleForm, override_subject: e.target.value })}\n                      margin=\"normal\"\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Message Content\"\n                      value={singleForm.override_content}\n                      onChange={(e) => setSingleForm({ ...singleForm, override_content: e.target.value })}\n                      multiline\n                      rows={4}\n                      margin=\"normal\"\n                      required\n                    />\n                  </Grid>\n                </>\n              )}\n\n              {selectedTemplate && selectedTemplate.variables && (\n                <Grid item xs={12}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Template Variables\n                  </Typography>\n                  <Grid container spacing={2}>\n                    {selectedTemplate.variables.map(variable => (\n                      <Grid item xs={12} sm={6} key={variable}>\n                        <TextField\n                          fullWidth\n                          label={variable}\n                          value={singleForm.variables[variable] || ''}\n                          onChange={(e) => setSingleForm({\n                            ...singleForm,\n                            variables: {\n                              ...singleForm.variables,\n                              [variable]: e.target.value\n                            }\n                          })}\n                        />\n                      </Grid>\n                    ))}\n                  </Grid>\n                </Grid>\n              )}\n\n              <Grid item xs={12}>\n                <Box display=\"flex\" gap={2}>\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<Send />}\n                    onClick={handleSendSingle}\n                    disabled={sendSingleMutation.isPending}\n                  >\n                    Send Notification\n                  </Button>\n                  {singleForm.template_id && (\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Preview />}\n                      onClick={() => handlePreview(false)}\n                      disabled={previewMutation.isPending}\n                    >\n                      Preview\n                    </Button>\n                  )}\n                </Box>\n              </Grid>\n            </Grid>\n          </TabPanel>\n\n          {/* Bulk Notification Tab */}\n          <TabPanel value={selectedTab} index={1}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Template (Optional)</InputLabel>\n                  <Select\n                    value={bulkForm.template_id}\n                    label=\"Template (Optional)\"\n                    onChange={(e) => setBulkForm({ ...bulkForm, template_id: e.target.value })}\n                  >\n                    <MenuItem value=\"\">Custom Message</MenuItem>\n                    {templates.map(template => (\n                      <MenuItem key={template.id} value={template.id.toString()}>\n                        {template.name} ({getChannelDisplayName(template.channel as any)})\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Channel</InputLabel>\n                  <Select\n                    value={bulkForm.channel}\n                    label=\"Channel\"\n                    onChange={(e) => setBulkForm({ ...bulkForm, channel: e.target.value })}\n                  >\n                    {NOTIFICATION_CHANNELS.map(channel => (\n                      <MenuItem key={channel} value={channel}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {getChannelIcon(channel)}\n                          {getChannelDisplayName(channel)}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Recipient Type</InputLabel>\n                  <Select\n                    value={bulkForm.recipient_type}\n                    label=\"Recipient Type\"\n                    onChange={(e) => setBulkForm({ \n                      ...bulkForm, \n                      recipient_type: e.target.value as any,\n                      recipient_ids: [],\n                      segment_name: ''\n                    })}\n                  >\n                    <MenuItem value=\"customers\">Select Customers</MenuItem>\n                    <MenuItem value=\"segment\">Customer Segment</MenuItem>\n                    <MenuItem value=\"users\">Select Users</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n\n              {bulkForm.recipient_type === 'customers' && (\n                <Grid item xs={12}>\n                  <Autocomplete\n                    multiple\n                    options={customers}\n                    getOptionLabel={(option) => option.name}\n                    value={customers.filter(c => bulkForm.recipient_ids.includes(c.id))}\n                    onChange={(_, value) => setBulkForm({ \n                      ...bulkForm, \n                      recipient_ids: value.map(v => v.id) \n                    })}\n                    renderInput={(params) => (\n                      <TextField \n                        {...params} \n                        label=\"Select Customers\"\n                        margin=\"normal\"\n                        fullWidth\n                      />\n                    )}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip\n                          variant=\"outlined\"\n                          label={option.name}\n                          {...getTagProps({ index })}\n                          key={option.id}\n                        />\n                      ))\n                    }\n                  />\n                </Grid>\n              )}\n\n              {bulkForm.recipient_type === 'segment' && (\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Segment Name\"\n                    value={bulkForm.segment_name}\n                    onChange={(e) => setBulkForm({ ...bulkForm, segment_name: e.target.value })}\n                    margin=\"normal\"\n                    helperText=\"e.g., 'vip', 'premium', 'new_customers'\"\n                  />\n                </Grid>\n              )}\n\n              {bulkForm.recipient_type === 'users' && (\n                <Grid item xs={12}>\n                  <Autocomplete\n                    multiple\n                    options={users}\n                    getOptionLabel={(option) => option.name}\n                    value={users.filter(u => bulkForm.recipient_ids.includes(u.id))}\n                    onChange={(_, value) => setBulkForm({ \n                      ...bulkForm, \n                      recipient_ids: value.map(v => v.id) \n                    })}\n                    renderInput={(params) => (\n                      <TextField \n                        {...params} \n                        label=\"Select Users\"\n                        margin=\"normal\"\n                        fullWidth\n                      />\n                    )}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip\n                          variant=\"outlined\"\n                          label={option.name}\n                          {...getTagProps({ index })}\n                          key={option.id}\n                        />\n                      ))\n                    }\n                  />\n                </Grid>\n              )}\n\n              {!bulkForm.template_id && (\n                <>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Subject\"\n                      value={bulkForm.subject}\n                      onChange={(e) => setBulkForm({ ...bulkForm, subject: e.target.value })}\n                      margin=\"normal\"\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Message Content\"\n                      value={bulkForm.content}\n                      onChange={(e) => setBulkForm({ ...bulkForm, content: e.target.value })}\n                      multiline\n                      rows={4}\n                      margin=\"normal\"\n                      required\n                    />\n                  </Grid>\n                </>\n              )}\n\n              <Grid item xs={12}>\n                <Box display=\"flex\" gap={2}>\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<Send />}\n                    onClick={handleSendBulk}\n                    disabled={sendBulkMutation.isPending}\n                  >\n                    Send Bulk Notification\n                  </Button>\n                  {bulkForm.template_id && (\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Preview />}\n                      onClick={() => handlePreview(true)}\n                      disabled={previewMutation.isPending}\n                    >\n                      Preview\n                    </Button>\n                  )}\n                </Box>\n              </Grid>\n            </Grid>\n          </TabPanel>\n        </CardContent>\n      </Card>\n\n      {/* Preview Modal */}\n      <Dialog open={isPreviewOpen} onClose={() => setIsPreviewOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Template Preview</DialogTitle>\n        <DialogContent>\n          {previewContent && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                {previewContent.template_name} ({getChannelDisplayName(previewContent.channel)})\n              </Typography>\n              {previewContent.test_subject && (\n                <Box mb={2}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Subject:</Typography>\n                  <Typography>{previewContent.test_subject}</Typography>\n                </Box>\n              )}\n              <Box mb={2}>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\">Content:</Typography>\n                <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>\n                  <Typography style={{ whiteSpace: 'pre-wrap' }}>\n                    {previewContent.test_content}\n                  </Typography>\n                </Paper>\n              </Box>\n              <Box>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\">Variables used:</Typography>\n                <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mt={1}>\n                  {Object.entries(previewContent.variables_used).map(([key, value]) => (\n                    <Chip \n                      key={key} \n                      label={`${key}: ${value}`} \n                      size=\"small\" \n                      variant=\"outlined\" \n                    />\n                  ))}\n                </Box>\n              </Box>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsPreviewOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default SendNotification;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceAnalytics/AnalyticsFilters.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'filters' is defined but never used.","line":28,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"filters"},"fix":{"range":[684,709],"text":""},"desc":"Remove unused variable 'filters'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/ServiceAnalytics/AnalyticsFilters.tsx\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Button,\n  TextField,\n  Typography,\n  Autocomplete\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport {\n  ReportPeriod,\n  AnalyticsRequest,\n  TechnicianOption,\n  CustomerOption\n} from '../../services/serviceAnalyticsService';\n\ninterface AnalyticsFiltersProps {\n  filters: AnalyticsRequest;\n  onFiltersChange: (filters: AnalyticsRequest) => void;\n  technicians: TechnicianOption[];\n  customers: CustomerOption[];\n}\n\nconst AnalyticsFilters: React.FC<AnalyticsFiltersProps> = ({\n  filters,\n  onFiltersChange,\n  technicians,\n  customers\n}) => {\n  const [localFilters, setLocalFilters] = useState<AnalyticsRequest>(filters);\n\n  const handleApplyFilters = () => {\n    onFiltersChange(localFilters);\n  };\n\n  const handleResetFilters = () => {\n    const resetFilters: AnalyticsRequest = {\n      period: ReportPeriod.MONTH\n    };\n    setLocalFilters(resetFilters);\n    onFiltersChange(resetFilters);\n  };\n\n  const handlePeriodChange = (period: ReportPeriod) => {\n    const updatedFilters = {\n      ...localFilters,\n      period,\n      // Clear custom dates when selecting predefined period\n      start_date: period === ReportPeriod.CUSTOM ? localFilters.start_date : undefined,\n      end_date: period === ReportPeriod.CUSTOM ? localFilters.end_date : undefined\n    };\n    setLocalFilters(updatedFilters);\n  };\n\n  const handleTechnicianChange = (technicianId: number | null) => {\n    setLocalFilters({\n      ...localFilters,\n      technician_id: technicianId || undefined\n    });\n  };\n\n  const handleCustomerChange = (customerId: number | null) => {\n    setLocalFilters({\n      ...localFilters,\n      customer_id: customerId || undefined\n    });\n  };\n\n  const selectedTechnician = technicians.find(t => t.id === localFilters.technician_id) || null;\n  const selectedCustomer = customers.find(c => c.id === localFilters.customer_id) || null;\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <Box>\n        <Typography variant=\"h6\" gutterBottom>\n          Analytics Filters\n        </Typography>\n        \n        <Grid container spacing={3}>\n          {/* Period Selection */}\n          <Grid item xs={12} sm={6} md={3}>\n            <FormControl fullWidth>\n              <InputLabel>Period</InputLabel>\n              <Select\n                value={localFilters.period || ReportPeriod.MONTH}\n                label=\"Period\"\n                onChange={(e) => handlePeriodChange(e.target.value as ReportPeriod)}\n              >\n                <MenuItem value={ReportPeriod.TODAY}>Today</MenuItem>\n                <MenuItem value={ReportPeriod.WEEK}>This Week</MenuItem>\n                <MenuItem value={ReportPeriod.MONTH}>This Month</MenuItem>\n                <MenuItem value={ReportPeriod.QUARTER}>This Quarter</MenuItem>\n                <MenuItem value={ReportPeriod.YEAR}>This Year</MenuItem>\n                <MenuItem value={ReportPeriod.CUSTOM}>Custom Range</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n\n          {/* Custom Date Range - Only show when Custom is selected */}\n          {localFilters.period === ReportPeriod.CUSTOM && (\n            <>\n              <Grid item xs={12} sm={6} md={3}>\n                <DatePicker\n                  label=\"Start Date\"\n                  value={localFilters.start_date ? new Date(localFilters.start_date) : null}\n                  onChange={(date) => {\n                    setLocalFilters({\n                      ...localFilters,\n                      start_date: date ? date.toISOString().split('T')[0] : undefined\n                    });\n                  }}\n                  renderInput={(params) => <TextField {...params} fullWidth />}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6} md={3}>\n                <DatePicker\n                  label=\"End Date\"\n                  value={localFilters.end_date ? new Date(localFilters.end_date) : null}\n                  onChange={(date) => {\n                    setLocalFilters({\n                      ...localFilters,\n                      end_date: date ? date.toISOString().split('T')[0] : undefined\n                    });\n                  }}\n                  minDate={localFilters.start_date ? new Date(localFilters.start_date) : undefined}\n                  renderInput={(params) => <TextField {...params} fullWidth />}\n                />\n              </Grid>\n            </>\n          )}\n\n          {/* Technician Filter */}\n          <Grid item xs={12} sm={6} md={3}>\n            <Autocomplete\n              options={technicians}\n              getOptionLabel={(option) => option.name}\n              value={selectedTechnician}\n              onChange={(_, newValue) => handleTechnicianChange(newValue?.id || null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Technician\"\n                  placeholder=\"All Technicians\"\n                />\n              )}\n              renderOption={(props, option) => (\n                <li {...props}>\n                  <Box>\n                    <Typography variant=\"body2\">{option.name}</Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {option.email}\n                    </Typography>\n                  </Box>\n                </li>\n              )}\n            />\n          </Grid>\n\n          {/* Customer Filter */}\n          <Grid item xs={12} sm={6} md={3}>\n            <Autocomplete\n              options={customers}\n              getOptionLabel={(option) => option.name}\n              value={selectedCustomer}\n              onChange={(_, newValue) => handleCustomerChange(newValue?.id || null)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Customer\"\n                  placeholder=\"All Customers\"\n                />\n              )}\n              renderOption={(props, option) => (\n                <li {...props}>\n                  <Box>\n                    <Typography variant=\"body2\">{option.name}</Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {option.email}\n                    </Typography>\n                  </Box>\n                </li>\n              )}\n            />\n          </Grid>\n\n          {/* Action Buttons */}\n          <Grid item xs={12}>\n            <Box display=\"flex\" gap={2} justifyContent=\"flex-end\">\n              <Button \n                variant=\"outlined\" \n                onClick={handleResetFilters}\n              >\n                Reset\n              </Button>\n              <Button \n                variant=\"contained\" \n                onClick={handleApplyFilters}\n              >\n                Apply Filters\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n\n        {/* Active Filters Summary */}\n        {(localFilters.technician_id || localFilters.customer_id || localFilters.period === ReportPeriod.CUSTOM) && (\n          <Box mt={2}>\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n              Active Filters:\n            </Typography>\n            <Box display=\"flex\" flexWrap=\"wrap\" gap={1}>\n              {selectedTechnician && (\n                <Box component=\"span\" px={1} py={0.5} bgcolor=\"primary.light\" borderRadius={1}>\n                  <Typography variant=\"caption\" color=\"primary.contrastText\">\n                    Technician: {selectedTechnician.name}\n                  </Typography>\n                </Box>\n              )}\n              {selectedCustomer && (\n                <Box component=\"span\" px={1} py={0.5} bgcolor=\"secondary.light\" borderRadius={1}>\n                  <Typography variant=\"caption\" color=\"secondary.contrastText\">\n                    Customer: {selectedCustomer.name}\n                  </Typography>\n                </Box>\n              )}\n              {localFilters.period === ReportPeriod.CUSTOM && localFilters.start_date && localFilters.end_date && (\n                <Box component=\"span\" px={1} py={0.5} bgcolor=\"info.light\" borderRadius={1}>\n                  <Typography variant=\"caption\" color=\"info.contrastText\">\n                    Custom Range: {localFilters.start_date} to {localFilters.end_date}\n                  </Typography>\n                </Box>\n              )}\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </LocalizationProvider>\n  );\n};\n\nexport default AnalyticsFilters;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceAnalytics/CustomerSatisfactionChart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TrendIcon' is defined but never used.","line":22,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendIcon"},"fix":{"range":[433,460],"text":""},"desc":"Remove unused variable 'TrendIcon'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/ServiceAnalytics/CustomerSatisfactionChart.tsx\n\nimport React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Box,\n  Typography,\n  Grid,\n  LinearProgress,\n  Chip,\n  Paper,\n  Rating\n} from '@mui/material';\nimport {\n  SentimentVerySatisfied as VeryHappyIcon,\n  SentimentSatisfied as HappyIcon,\n  SentimentNeutral as NeutralIcon,\n  SentimentDissatisfied as UnhappyIcon,\n  ThumbUp as RecommendIcon,\n  TrendingUp as TrendIcon\n} from '@mui/icons-material';\nimport { CustomerSatisfactionMetrics } from '../../services/serviceAnalyticsService';\n\ninterface CustomerSatisfactionChartProps {\n  data: CustomerSatisfactionMetrics;\n}\n\nconst CustomerSatisfactionChart: React.FC<CustomerSatisfactionChartProps> = ({ data }) => {\n  const getSatisfactionColor = (level: string) => {\n    switch (level.toLowerCase()) {\n      case 'satisfied':\n        return 'success';\n      case 'neutral':\n        return 'warning';\n      case 'dissatisfied':\n        return 'error';\n      default:\n        return 'info';\n    }\n  };\n\n  const getSatisfactionIcon = (level: string) => {\n    switch (level.toLowerCase()) {\n      case 'satisfied':\n        return <VeryHappyIcon />;\n      case 'neutral':\n        return <NeutralIcon />;\n      case 'dissatisfied':\n        return <UnhappyIcon />;\n      default:\n        return <HappyIcon />;\n    }\n  };\n\n  const getRatingColor = (rating: number) => {\n    if (rating >= 4) {return 'success.main';}\n    if (rating >= 3) {return 'warning.main';}\n    return 'error.main';\n  };\n\n  const formatRating = (rating?: number) => {\n    return rating ? rating.toFixed(1) : 'N/A';\n  };\n\n  return (\n    <Card>\n      <CardHeader \n        title=\"Customer Satisfaction\" \n        subheader={`${data.total_feedback_received} feedback responses analyzed`}\n      />\n      <CardContent>\n        {/* Overall Rating */}\n        <Box sx={{ mb: 3, textAlign: 'center' }}>\n          <Typography variant=\"h3\" sx={{ color: getRatingColor(data.average_overall_rating) }}>\n            {formatRating(data.average_overall_rating)}\n          </Typography>\n          <Rating \n            value={data.average_overall_rating} \n            readOnly \n            precision={0.1}\n            size=\"large\"\n          />\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Overall Rating (out of 5)\n          </Typography>\n        </Box>\n\n        {/* Rating Breakdown */}\n        <Grid container spacing={2} sx={{ mb: 3 }}>\n          <Grid item xs={6} sm={3}>\n            <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n              <Typography variant=\"h6\" sx={{ color: getRatingColor(data.average_service_quality || 0) }}>\n                {formatRating(data.average_service_quality)}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Service Quality\n              </Typography>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={6} sm={3}>\n            <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n              <Typography variant=\"h6\" sx={{ color: getRatingColor(data.average_technician_rating || 0) }}>\n                {formatRating(data.average_technician_rating)}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Technician\n              </Typography>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={6} sm={3}>\n            <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n              <Typography variant=\"h6\" sx={{ color: getRatingColor(data.average_timeliness_rating || 0) }}>\n                {formatRating(data.average_timeliness_rating)}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Timeliness\n              </Typography>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={6} sm={3}>\n            <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n              <Typography variant=\"h6\" sx={{ color: getRatingColor(data.average_communication_rating || 0) }}>\n                {formatRating(data.average_communication_rating)}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Communication\n              </Typography>\n            </Paper>\n          </Grid>\n        </Grid>\n\n        {/* NPS Score */}\n        {data.nps_score !== null && data.nps_score !== undefined && (\n          <Box sx={{ mb: 3 }}>\n            <Paper elevation={1} sx={{ p: 2, bgcolor: 'background.default' }}>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Box>\n                  <Typography variant=\"h6\">\n                    Net Promoter Score (NPS)\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Customer recommendation likelihood\n                  </Typography>\n                </Box>\n                <Chip\n                  label={`${data.nps_score.toFixed(1)}`}\n                  color={data.nps_score > 0 ? 'success' : data.nps_score < 0 ? 'error' : 'warning'}\n                  size=\"large\"\n                />\n              </Box>\n            </Paper>\n          </Box>\n        )}\n\n        {/* Recommendation Rate */}\n        {data.recommendation_rate !== null && data.recommendation_rate !== undefined && (\n          <Box sx={{ mb: 3 }}>\n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\n              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                <RecommendIcon color=\"primary\" />\n                <Typography variant=\"body2\">\n                  Would Recommend\n                </Typography>\n              </Box>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {data.recommendation_rate.toFixed(1)}%\n              </Typography>\n            </Box>\n            <LinearProgress\n              variant=\"determinate\"\n              value={data.recommendation_rate}\n              sx={{ height: 8, borderRadius: 4 }}\n              color=\"success\"\n            />\n          </Box>\n        )}\n\n        {/* Satisfaction Distribution */}\n        {Object.keys(data.satisfaction_distribution).length > 0 && (\n          <Box sx={{ mb: 3 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Satisfaction Distribution\n            </Typography>\n            <Grid container spacing={1}>\n              {Object.entries(data.satisfaction_distribution).map(([level, count]) => (\n                <Grid item xs={12} sm={4} key={level}>\n                  <Paper \n                    elevation={1} \n                    sx={{ \n                      p: 2, \n                      display: 'flex', \n                      alignItems: 'center',\n                      gap: 1,\n                      bgcolor: 'background.default'\n                    }}\n                  >\n                    <Box \n                      sx={{ \n                        color: `${getSatisfactionColor(level)}.main`,\n                        display: 'flex',\n                        alignItems: 'center'\n                      }}\n                    >\n                      {getSatisfactionIcon(level)}\n                    </Box>\n                    <Box flexGrow={1}>\n                      <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                        {level}\n                      </Typography>\n                      <Typography variant=\"h6\">\n                        {count}\n                      </Typography>\n                    </Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {data.total_feedback_received > 0 \n                        ? ((count / data.total_feedback_received) * 100).toFixed(1)\n                        : 0}%\n                    </Typography>\n                  </Paper>\n                </Grid>\n              ))}\n            </Grid>\n          </Box>\n        )}\n\n        {/* Satisfaction Trend Preview */}\n        {data.satisfaction_trend.length > 0 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Recent Satisfaction Trend\n            </Typography>\n            <Paper elevation={1} sx={{ p: 2, bgcolor: 'background.default' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Average daily satisfaction ratings\n              </Typography>\n              <Box display=\"flex\" gap={1} mt={1} flexWrap=\"wrap\">\n                {data.satisfaction_trend.slice(-7).map((point, index) => (\n                  <Chip\n                    key={index}\n                    label={`${new Date(point.date).toLocaleDateString('en-US', { \n                      month: 'short', \n                      day: 'numeric' \n                    })}: ${point.value}/5`}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    color={point.value >= 4 ? 'success' : point.value >= 3 ? 'warning' : 'error'}\n                  />\n                ))}\n              </Box>\n            </Paper>\n          </Box>\n        )}\n\n        {/* No Data State */}\n        {data.total_feedback_received === 0 && (\n          <Box textAlign=\"center\" py={4}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              No customer feedback data available for the selected period.\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Encourage customers to provide feedback after job completion.\n            </Typography>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CustomerSatisfactionChart;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceAnalytics/JobCompletionChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceAnalytics/JobVolumeChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceAnalytics/SLAComplianceChart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getPriorityColor' is assigned a value but never used.","line":42,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"getPriorityColor"},"fix":{"range":[897,1213],"text":""},"desc":"Remove unused variable 'getPriorityColor'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/ServiceAnalytics/SLAComplianceChart.tsx\n\nimport React from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Box,\n  Typography,\n  Grid,\n  LinearProgress,\n  Chip,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow\n} from '@mui/material';\nimport {\n  CheckCircle as ComplianceIcon,\n  Warning as BreachIcon,\n  Speed as PerformanceIcon,\n  Error as ErrorIcon,\n  Schedule as TimeIcon\n} from '@mui/icons-material';\nimport { SLAComplianceMetrics } from '../../services/serviceAnalyticsService';\n\ninterface SLAComplianceChartProps {\n  data: SLAComplianceMetrics;\n}\n\nconst SLAComplianceChart: React.FC<SLAComplianceChartProps> = ({ data }) => {\n  const getComplianceColor = (rate: number) => {\n    if (rate >= 95) {return 'success';}\n    if (rate >= 85) {return 'info';}\n    if (rate >= 70) {return 'warning';}\n    return 'error';\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority.toLowerCase()) {\n      case 'urgent':\n        return 'error';\n      case 'high':\n        return 'warning';\n      case 'medium':\n        return 'info';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  const formatTime = (hours?: number) => {\n    if (!hours) {return 'N/A';}\n    if (hours < 1) {return `${(hours * 60).toFixed(0)}m`;}\n    if (hours < 24) {return `${hours.toFixed(1)}h`;}\n    return `${(hours / 24).toFixed(1)}d`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader \n        title=\"SLA Compliance\" \n        subheader={`${data.total_jobs_with_sla} jobs with SLA requirements analyzed`}\n      />\n      <CardContent>\n        {data.total_jobs_with_sla === 0 ? (\n          <Box textAlign=\"center\" py={4}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              No SLA compliance data available for the selected period.\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              SLA metrics will appear here once SLA policies are configured and jobs are tracked.\n            </Typography>\n          </Box>\n        ) : (\n          <>\n            {/* Overall Compliance Rate */}\n            <Box sx={{ mb: 3, textAlign: 'center' }}>\n              <Typography variant=\"h3\" sx={{ color: `${getComplianceColor(data.overall_compliance_rate)}.main` }}>\n                {data.overall_compliance_rate.toFixed(1)}%\n              </Typography>\n              <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n                Overall SLA Compliance Rate\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={data.overall_compliance_rate}\n                sx={{ height: 12, borderRadius: 6, maxWidth: 300, mx: 'auto' }}\n                color={getComplianceColor(data.overall_compliance_rate)}\n              />\n            </Box>\n\n            {/* Key Metrics Summary */}\n            <Grid container spacing={2} sx={{ mb: 3 }}>\n              <Grid item xs={6} sm={3}>\n                <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n                  <Typography variant=\"h5\" color=\"success.main\">\n                    {data.sla_met_count}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    SLA Met\n                  </Typography>\n                </Paper>\n              </Grid>\n              \n              <Grid item xs={6} sm={3}>\n                <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n                  <Typography variant=\"h5\" color=\"error.main\">\n                    {data.sla_breached_count}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    SLA Breached\n                  </Typography>\n                </Paper>\n              </Grid>\n              \n              <Grid item xs={6} sm={3}>\n                <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n                  <Typography variant=\"h5\" color=\"primary.main\">\n                    {data.total_jobs_with_sla}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Total with SLA\n                  </Typography>\n                </Paper>\n              </Grid>\n              \n              <Grid item xs={6} sm={3}>\n                <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n                  <Typography variant=\"h5\" color=\"info.main\">\n                    {formatTime(data.average_resolution_time_hours)}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Avg Resolution\n                  </Typography>\n                </Paper>\n              </Grid>\n            </Grid>\n\n            {/* Compliance by Priority */}\n            {Object.keys(data.compliance_by_priority).length > 0 && (\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Compliance by Priority\n                </Typography>\n                <Grid container spacing={1}>\n                  {Object.entries(data.compliance_by_priority).map(([priority, rate]) => (\n                    <Grid item xs={12} sm={6} md={3} key={priority}>\n                      <Paper \n                        elevation={1} \n                        sx={{ \n                          p: 2, \n                          bgcolor: 'background.default'\n                        }}\n                      >\n                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\n                          <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                            {priority}\n                          </Typography>\n                          <Chip\n                            size=\"small\"\n                            label={`${rate.toFixed(1)}%`}\n                            color={getComplianceColor(rate)}\n                          />\n                        </Box>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={rate}\n                          sx={{ height: 6, borderRadius: 3 }}\n                          color={getComplianceColor(rate)}\n                        />\n                      </Paper>\n                    </Grid>\n                  ))}\n                </Grid>\n              </Box>\n            )}\n\n            {/* SLA Breach Reasons */}\n            {Object.keys(data.breach_reasons).length > 0 && (\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Common Breach Reasons\n                </Typography>\n                <TableContainer component={Paper} elevation={1}>\n                  <Table size=\"small\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Reason</TableCell>\n                        <TableCell align=\"center\">Occurrences</TableCell>\n                        <TableCell align=\"center\">% of Breaches</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {Object.entries(data.breach_reasons)\n                        .sort(([, a], [, b]) => b - a)\n                        .map(([reason, count]) => (\n                          <TableRow key={reason}>\n                            <TableCell>\n                              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                                <ErrorIcon fontSize=\"small\" color=\"error\" />\n                                <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                                  {reason.replace('_', ' ')}\n                                </Typography>\n                              </Box>\n                            </TableCell>\n                            <TableCell align=\"center\">\n                              <Chip \n                                label={count}\n                                size=\"small\"\n                                color=\"error\"\n                                variant=\"outlined\"\n                              />\n                            </TableCell>\n                            <TableCell align=\"center\">\n                              <Typography variant=\"body2\" color=\"text.secondary\">\n                                {data.sla_breached_count > 0 \n                                  ? ((count / data.sla_breached_count) * 100).toFixed(1)\n                                  : 0}%\n                              </Typography>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Box>\n            )}\n\n            {/* Compliance Trend Preview */}\n            {data.compliance_trend.length > 0 && (\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Recent Compliance Trend\n                </Typography>\n                <Paper elevation={1} sx={{ p: 2, bgcolor: 'background.default' }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    Daily SLA compliance rates\n                  </Typography>\n                  <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                    {data.compliance_trend.slice(-7).map((point, index) => (\n                      <Chip\n                        key={index}\n                        label={`${formatDate(point.date)}: ${point.value.toFixed(1)}%`}\n                        size=\"small\"\n                        variant=\"outlined\"\n                        color={getComplianceColor(point.value)}\n                        icon={point.value >= 85 ? <ComplianceIcon /> : <BreachIcon />}\n                      />\n                    ))}\n                  </Box>\n                  \n                  {/* Trend Analysis */}\n                  <Box mt={2}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Trend Analysis:\n                    </Typography>\n                    {(() => {\n                      const recentTrend = data.compliance_trend.slice(-7);\n                      const avgRecent = recentTrend.reduce((sum, point) => sum + point.value, 0) / recentTrend.length;\n                      const trendDirection = avgRecent > data.overall_compliance_rate ? 'improving' : 'declining';\n                      const trendColor = avgRecent > data.overall_compliance_rate ? 'success.main' : 'warning.main';\n                      \n                      return (\n                        <Typography variant=\"body2\" sx={{ color: trendColor }}>\n                          Recent 7-day average ({avgRecent.toFixed(1)}%) shows {trendDirection} trend\n                        </Typography>\n                      );\n                    })()}\n                  </Box>\n                </Paper>\n              </Box>\n            )}\n\n            {/* Performance Indicators */}\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                Performance Indicators\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <Paper elevation={1} sx={{ p: 2, bgcolor: 'background.default' }}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                      <PerformanceIcon color={getComplianceColor(data.overall_compliance_rate)} />\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Compliance Status\n                        </Typography>\n                        <Typography variant=\"body1\" fontWeight=\"medium\">\n                          {data.overall_compliance_rate >= 95 ? 'Excellent' :\n                           data.overall_compliance_rate >= 85 ? 'Good' :\n                           data.overall_compliance_rate >= 70 ? 'Needs Improvement' : 'Critical'}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12} sm={6}>\n                  <Paper elevation={1} sx={{ p: 2, bgcolor: 'background.default' }}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                      <TimeIcon color=\"action\" />\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Resolution Performance\n                        </Typography>\n                        <Typography variant=\"body1\" fontWeight=\"medium\">\n                          {data.average_resolution_time_hours \n                            ? `${formatTime(data.average_resolution_time_hours)} average`\n                            : 'No data available'}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Paper>\n                </Grid>\n              </Grid>\n            </Box>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SLAComplianceChart;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceAnalytics/ServiceAnalyticsDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[99,110],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[229,239],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[239,251],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[251,266],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[266,280],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[290,303],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DatePicker' is defined but never used.","line":29,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"DatePicker"},"fix":{"range":[511,571],"text":""},"desc":"Remove unused variable 'DatePicker'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AnalyticsDashboard' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"AnalyticsDashboard"},"fix":{"range":[690,713],"text":""},"desc":"Remove unused variable 'AnalyticsDashboard'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TechnicianOption' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"TechnicianOption"},"fix":{"range":[733,753],"text":""},"desc":"Remove unused variable 'TechnicianOption'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CustomerOption' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"CustomerOption"},"fix":{"range":[753,771],"text":""},"desc":"Remove unused variable 'CustomerOption'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 71 column 5.","line":123,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":123,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 71 column 5.","line":123,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":123,"endColumn":19}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/ServiceAnalytics/ServiceAnalyticsDashboard.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  CardHeader,\n  Grid,\n  Typography,\n  CircularProgress,\n  Alert,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Button,\n  TextField,\n  IconButton,\n  Tooltip,\n  Chip\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  FilterList as FilterIcon,\n  Download as DownloadIcon,\n  DateRange as DateRangeIcon\n} from '@mui/icons-material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { \n  serviceAnalyticsService, \n  ReportPeriod, \n  AnalyticsDashboard,\n  AnalyticsRequest,\n  TechnicianOption,\n  CustomerOption\n} from '../../services/serviceAnalyticsService';\nimport { useAuth } from '../../hooks/useAuth';\nimport JobCompletionChart from './JobCompletionChart';\nimport TechnicianPerformanceChart from './TechnicianPerformanceChart';\nimport CustomerSatisfactionChart from './CustomerSatisfactionChart';\nimport JobVolumeChart from './JobVolumeChart';\nimport SLAComplianceChart from './SLAComplianceChart';\nimport AnalyticsFilters from './AnalyticsFilters';\n\ninterface ServiceAnalyticsDashboardProps {\n  organizationId?: number;\n}\n\nconst ServiceAnalyticsDashboard: React.FC<ServiceAnalyticsDashboardProps> = ({\n  organizationId: propOrganizationId\n}) => {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // Use the organization ID from props or fall back to the user's organization\n  const organizationId = propOrganizationId || user?.organization_id;\n  \n  // State for filters\n  const [filters, setFilters] = useState<AnalyticsRequest>({\n    period: ReportPeriod.MONTH\n  });\n  \n  const [showFilters, setShowFilters] = useState(false);\n\n  // Query for dashboard data\n  const {\n    data: dashboardData,\n    isLoading,\n    error,\n    refetch\n  } = useQuery({\n    queryKey: ['service-analytics-dashboard', organizationId, filters],\n    queryFn: () => serviceAnalyticsService.getAnalyticsDashboard(organizationId!, filters),\n    enabled: !!organizationId,\n    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes\n    staleTime: 2 * 60 * 1000 // Consider data stale after 2 minutes\n  });\n\n  // Query for filter options\n  const { data: technicians } = useQuery({\n    queryKey: ['analytics-technicians', organizationId],\n    queryFn: () => serviceAnalyticsService.getAvailableTechnicians(organizationId!),\n    enabled: !!organizationId\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: ['analytics-customers', organizationId],\n    queryFn: () => serviceAnalyticsService.getAvailableCustomers(organizationId!),\n    enabled: !!organizationId\n  });\n\n  const handleFilterChange = (newFilters: AnalyticsRequest) => {\n    setFilters(newFilters);\n  };\n\n  const handleRefresh = () => {\n    queryClient.invalidateQueries({ queryKey: ['service-analytics-dashboard'] });\n    refetch();\n  };\n\n  const handleExport = async () => {\n    if (!organizationId) {return;}\n    \n    try {\n      const blob = await serviceAnalyticsService.exportAnalyticsData(organizationId, {\n        format: 'csv',\n        metric_types: ['job_completion', 'technician_performance', 'customer_satisfaction', 'job_volume'],\n        filters: filters,\n        include_raw_data: false\n      });\n      \n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `service-analytics-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Failed to export analytics data:', error);\n    }\n  };\n\n  if (!organizationId) {\n    return (\n      <Alert severity=\"error\">\n        No organization ID available. Please ensure you are logged in.\n      </Alert>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress size={60} />\n        <Typography variant=\"h6\" sx={{ ml: 2 }}>\n          Loading analytics dashboard...\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" action={\n        <Button color=\"inherit\" size=\"small\" onClick={handleRefresh}>\n          Retry\n        </Button>\n      }>\n        Failed to load analytics dashboard: {(error as Error).message}\n      </Alert>\n    );\n  }\n\n  if (!dashboardData) {\n    return (\n      <Alert severity=\"info\">\n        No analytics data available for the selected period.\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Service Analytics Dashboard\n        </Typography>\n        \n        <Box display=\"flex\" gap={1}>\n          <Tooltip title=\"Toggle Filters\">\n            <IconButton \n              onClick={() => setShowFilters(!showFilters)}\n              color={showFilters ? 'primary' : 'default'}\n            >\n              <FilterIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Tooltip title=\"Export Data\">\n            <IconButton onClick={handleExport}>\n              <DownloadIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Tooltip title=\"Refresh Data\">\n            <IconButton onClick={handleRefresh}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      {/* Filters */}\n      {showFilters && (\n        <Card sx={{ mb: 3 }}>\n          <CardContent>\n            <AnalyticsFilters\n              filters={filters}\n              onFiltersChange={handleFilterChange}\n              technicians={technicians || []}\n              customers={customers || []}\n            />\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Dashboard Info */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box display=\"flex\" flexWrap=\"wrap\" gap={2} alignItems=\"center\">\n            <Chip \n              icon={<DateRangeIcon />}\n              label={`Period: ${dashboardData.report_period.toUpperCase()}`}\n              color=\"primary\"\n            />\n            <Chip \n              label={`${dashboardData.start_date} to ${dashboardData.end_date}`}\n              variant=\"outlined\"\n            />\n            <Chip \n              label={`Generated: ${new Date(dashboardData.generated_at).toLocaleString()}`}\n              variant=\"outlined\"\n              size=\"small\"\n            />\n          </Box>\n        </CardContent>\n      </Card>\n\n      {/* Analytics Charts Grid */}\n      <Grid container spacing={3}>\n        {/* Job Completion Metrics */}\n        <Grid item xs={12} md={6}>\n          <JobCompletionChart data={dashboardData.job_completion} />\n        </Grid>\n\n        {/* Customer Satisfaction Metrics */}\n        <Grid item xs={12} md={6}>\n          <CustomerSatisfactionChart data={dashboardData.customer_satisfaction} />\n        </Grid>\n\n        {/* Job Volume Chart */}\n        <Grid item xs={12} md={6}>\n          <JobVolumeChart data={dashboardData.job_volume} />\n        </Grid>\n\n        {/* SLA Compliance Chart */}\n        <Grid item xs={12} md={6}>\n          <SLAComplianceChart data={dashboardData.sla_compliance} />\n        </Grid>\n\n        {/* Technician Performance - Full width if data available */}\n        {dashboardData.technician_performance.length > 0 && (\n          <Grid item xs={12}>\n            <TechnicianPerformanceChart data={dashboardData.technician_performance} />\n          </Grid>\n        )}\n      </Grid>\n\n      {/* Summary Statistics */}\n      <Card sx={{ mt: 3 }}>\n        <CardHeader title=\"Summary Statistics\" />\n        <CardContent>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\">\n                <Typography variant=\"h4\" color=\"primary\">\n                  {dashboardData.job_completion.total_jobs}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Total Jobs\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\">\n                <Typography variant=\"h4\" color=\"success.main\">\n                  {dashboardData.job_completion.completion_rate.toFixed(1)}%\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Completion Rate\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\">\n                <Typography variant=\"h4\" color=\"info.main\">\n                  {dashboardData.customer_satisfaction.average_overall_rating.toFixed(1)}/5\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Customer Rating\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\">\n                <Typography variant=\"h4\" color=\"warning.main\">\n                  {dashboardData.technician_performance.length}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Active Technicians\n                </Typography>\n              </Box>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default ServiceAnalyticsDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceAnalytics/TechnicianPerformanceChart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'RatingIcon' is defined but never used.","line":32,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"RatingIcon"},"fix":{"range":[543,565],"text":""},"desc":"Remove unused variable 'RatingIcon'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/ServiceAnalytics/TechnicianPerformanceChart.tsx\n\nimport React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Box,\n  Typography,\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  LinearProgress,\n  Avatar,\n  IconButton,\n  Collapse,\n  Rating\n} from '@mui/material';\nimport {\n  Person as TechnicianIcon,\n  ExpandMore as ExpandIcon,\n  ExpandLess as CollapseIcon,\n  Schedule as TimeIcon,\n  Assignment as JobIcon,\n  Speed as EfficiencyIcon,\n  Star as RatingIcon\n} from '@mui/icons-material';\nimport { TechnicianPerformanceMetrics } from '../../services/serviceAnalyticsService';\n\ninterface TechnicianPerformanceChartProps {\n  data: TechnicianPerformanceMetrics[];\n}\n\nconst TechnicianPerformanceChart: React.FC<TechnicianPerformanceChartProps> = ({ data }) => {\n  const [expandedTechnician, setExpandedTechnician] = useState<number | null>(null);\n\n  const getPerformanceColor = (score: number) => {\n    if (score >= 80) {return 'success';}\n    if (score >= 60) {return 'warning';}\n    return 'error';\n  };\n\n  const getUtilizationColor = (rate: number) => {\n    if (rate >= 80) {return 'success';}\n    if (rate >= 60) {return 'info';}\n    if (rate >= 40) {return 'warning';}\n    return 'error';\n  };\n\n  const handleTechnicianExpand = (technicianId: number) => {\n    setExpandedTechnician(expandedTechnician === technicianId ? null : technicianId);\n  };\n\n  // Calculate summary statistics\n  const totalJobsAssigned = data.reduce((sum, tech) => sum + tech.total_jobs_assigned, 0);\n  const totalJobsCompleted = data.reduce((sum, tech) => sum + tech.jobs_completed, 0);\n  const averageUtilization = data.length > 0 \n    ? data.reduce((sum, tech) => sum + tech.utilization_rate, 0) / data.length \n    : 0;\n  const averageEfficiency = data.length > 0 \n    ? data.reduce((sum, tech) => sum + tech.efficiency_score, 0) / data.length \n    : 0;\n\n  if (data.length === 0) {\n    return (\n      <Card>\n        <CardHeader title=\"Technician Performance\" />\n        <CardContent>\n          <Box textAlign=\"center\" py={4}>\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              No technician performance data available for the selected period.\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Performance metrics will appear here once technicians are assigned to jobs.\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader \n        title=\"Technician Performance\" \n        subheader={`${data.length} technicians analyzed`}\n      />\n      <CardContent>\n        {/* Summary Statistics */}\n        <Grid container spacing={2} sx={{ mb: 3 }}>\n          <Grid item xs={6} sm={3}>\n            <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n              <Typography variant=\"h5\" color=\"primary.main\">\n                {data.length}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Active Technicians\n              </Typography>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={6} sm={3}>\n            <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n              <Typography variant=\"h5\" color=\"info.main\">\n                {totalJobsAssigned}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Total Jobs Assigned\n              </Typography>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={6} sm={3}>\n            <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n              <Typography variant=\"h5\" color=\"success.main\">\n                {totalJobsCompleted}\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Total Jobs Completed\n              </Typography>\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={6} sm={3}>\n            <Paper elevation={1} sx={{ p: 2, textAlign: 'center', bgcolor: 'background.default' }}>\n              <Typography variant=\"h5\" color=\"warning.main\">\n                {averageEfficiency.toFixed(1)}%\n              </Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Avg Efficiency\n              </Typography>\n            </Paper>\n          </Grid>\n        </Grid>\n\n        {/* Team Performance Overview */}\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Team Performance Overview\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <Paper elevation={1} sx={{ p: 2, bgcolor: 'background.default' }}>\n                <Typography variant=\"body2\" gutterBottom>\n                  Average Team Utilization\n                </Typography>\n                <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={averageUtilization}\n                    sx={{ flexGrow: 1, height: 8, borderRadius: 4 }}\n                    color={getUtilizationColor(averageUtilization)}\n                  />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {averageUtilization.toFixed(1)}%\n                  </Typography>\n                </Box>\n              </Paper>\n            </Grid>\n            \n            <Grid item xs={12} sm={6}>\n              <Paper elevation={1} sx={{ p: 2, bgcolor: 'background.default' }}>\n                <Typography variant=\"body2\" gutterBottom>\n                  Team Completion Rate\n                </Typography>\n                <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={(totalJobsCompleted / totalJobsAssigned) * 100}\n                    sx={{ flexGrow: 1, height: 8, borderRadius: 4 }}\n                    color=\"success\"\n                  />\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {totalJobsAssigned > 0 ? ((totalJobsCompleted / totalJobsAssigned) * 100).toFixed(1) : 0}%\n                  </Typography>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Box>\n\n        {/* Individual Technician Performance */}\n        <Typography variant=\"h6\" gutterBottom>\n          Individual Performance\n        </Typography>\n        <TableContainer component={Paper} elevation={1}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Technician</TableCell>\n                <TableCell align=\"center\">Jobs</TableCell>\n                <TableCell align=\"center\">Completed</TableCell>\n                <TableCell align=\"center\">Utilization</TableCell>\n                <TableCell align=\"center\">Efficiency</TableCell>\n                <TableCell align=\"center\">Rating</TableCell>\n                <TableCell align=\"center\">Details</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.map((technician) => (\n                <React.Fragment key={technician.technician_id}>\n                  <TableRow>\n                    <TableCell>\n                      <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                        <Avatar sx={{ width: 32, height: 32 }}>\n                          <TechnicianIcon />\n                        </Avatar>\n                        <Box>\n                          <Typography variant=\"body2\" fontWeight=\"medium\">\n                            {technician.technician_name}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            ID: {technician.technician_id}\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    \n                    <TableCell align=\"center\">\n                      <Chip \n                        label={technician.total_jobs_assigned}\n                        size=\"small\"\n                        color=\"primary\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    \n                    <TableCell align=\"center\">\n                      <Chip \n                        label={technician.jobs_completed}\n                        size=\"small\"\n                        color=\"success\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    \n                    <TableCell align=\"center\">\n                      <Box>\n                        <Typography variant=\"body2\" color={`${getUtilizationColor(technician.utilization_rate)}.main`}>\n                          {technician.utilization_rate.toFixed(1)}%\n                        </Typography>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={technician.utilization_rate}\n                          size=\"small\"\n                          sx={{ width: 60, height: 4 }}\n                          color={getUtilizationColor(technician.utilization_rate)}\n                        />\n                      </Box>\n                    </TableCell>\n                    \n                    <TableCell align=\"center\">\n                      <Chip \n                        label={`${technician.efficiency_score.toFixed(1)}%`}\n                        size=\"small\"\n                        color={getPerformanceColor(technician.efficiency_score)}\n                      />\n                    </TableCell>\n                    \n                    <TableCell align=\"center\">\n                      {technician.customer_rating_average ? (\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Rating \n                            value={technician.customer_rating_average} \n                            readOnly \n                            size=\"small\"\n                            precision={0.1}\n                          />\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {technician.customer_rating_average.toFixed(1)}\n                          </Typography>\n                        </Box>\n                      ) : (\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          No ratings\n                        </Typography>\n                      )}\n                    </TableCell>\n                    \n                    <TableCell align=\"center\">\n                      <IconButton \n                        size=\"small\"\n                        onClick={() => handleTechnicianExpand(technician.technician_id)}\n                      >\n                        {expandedTechnician === technician.technician_id ? <CollapseIcon /> : <ExpandIcon />}\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                  \n                  {/* Expanded Details */}\n                  <TableRow>\n                    <TableCell colSpan={7} sx={{ py: 0 }}>\n                      <Collapse in={expandedTechnician === technician.technician_id}>\n                        <Box sx={{ p: 2, bgcolor: 'background.default' }}>\n                          <Grid container spacing={2}>\n                            <Grid item xs={12} sm={4}>\n                              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                                <JobIcon color=\"action\" fontSize=\"small\" />\n                                <Typography variant=\"body2\">\n                                  In Progress: {technician.jobs_in_progress}\n                                </Typography>\n                              </Box>\n                            </Grid>\n                            \n                            {technician.average_completion_time_hours && (\n                              <Grid item xs={12} sm={4}>\n                                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                                  <TimeIcon color=\"action\" fontSize=\"small\" />\n                                  <Typography variant=\"body2\">\n                                    Avg Time: {technician.average_completion_time_hours.toFixed(1)}h\n                                  </Typography>\n                                </Box>\n                              </Grid>\n                            )}\n                            \n                            <Grid item xs={12} sm={4}>\n                              <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                                <EfficiencyIcon color=\"action\" fontSize=\"small\" />\n                                <Typography variant=\"body2\">\n                                  Completion Rate: {technician.total_jobs_assigned > 0 \n                                    ? ((technician.jobs_completed / technician.total_jobs_assigned) * 100).toFixed(1)\n                                    : 0}%\n                                </Typography>\n                              </Box>\n                            </Grid>\n                          </Grid>\n                        </Box>\n                      </Collapse>\n                    </TableCell>\n                  </TableRow>\n                </React.Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {/* Performance Insights */}\n        <Box sx={{ mt: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Performance Insights\n          </Typography>\n          <Grid container spacing={2}>\n            {(() => {\n              const topPerformer = data.reduce((prev, current) => \n                prev.efficiency_score > current.efficiency_score ? prev : current\n              );\n              const mostUtilized = data.reduce((prev, current) => \n                prev.utilization_rate > current.utilization_rate ? prev : current\n              );\n              \n              return (\n                <>\n                  <Grid item xs={12} sm={6}>\n                    <Paper elevation={1} sx={{ p: 2, bgcolor: 'success.light', color: 'success.contrastText' }}>\n                      <Typography variant=\"body2\" gutterBottom>\n                        Top Performer\n                      </Typography>\n                      <Typography variant=\"h6\">\n                        {topPerformer.technician_name}\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        Efficiency Score: {topPerformer.efficiency_score.toFixed(1)}%\n                      </Typography>\n                    </Paper>\n                  </Grid>\n                  \n                  <Grid item xs={12} sm={6}>\n                    <Paper elevation={1} sx={{ p: 2, bgcolor: 'info.light', color: 'info.contrastText' }}>\n                      <Typography variant=\"body2\" gutterBottom>\n                        Highest Utilization\n                      </Typography>\n                      <Typography variant=\"h6\">\n                        {mostUtilized.technician_name}\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        Utilization Rate: {mostUtilized.utilization_rate.toFixed(1)}%\n                      </Typography>\n                    </Paper>\n                  </Grid>\n                </>\n              );\n            })()}\n          </Grid>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TechnicianPerformanceChart;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceAnalytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceRoleGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SortableTable.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":27,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[580,591],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'row' is defined but never used.","line":27,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"row"},"fix":{"range":[590,598],"text":""},"desc":"Remove unused variable 'row'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'row' is defined but never used.","line":36,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"row"},"fix":{"range":[784,790],"text":""},"desc":"Remove unused variable 'row'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'row' is defined but never used.","line":42,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"row"},"fix":{"range":[936,942],"text":""},"desc":"Remove unused variable 'row'."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":50,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":50,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1134,1136],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":50,"column":28,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":50,"endColumn":30,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1150,1152],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":51,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":51,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1182,1184],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":52,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":52,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1215,1217],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'a' is defined but never used.","line":81,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"a"},"fix":{"range":[2114,2119],"text":""},"desc":"Remove unused variable 'a'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'b' is defined but never used.","line":81,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"b"},"fix":{"range":[2118,2124],"text":""},"desc":"Remove unused variable 'b'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'a' is defined but never used.","line":87,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":62,"suggestions":[{"messageId":"removeVar","data":{"varName":"a"},"fix":{"range":[2330,2335],"text":""},"desc":"Remove unused variable 'a'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'b' is defined but never used.","line":87,"column":64,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":68,"suggestions":[{"messageId":"removeVar","data":{"varName":"b"},"fix":{"range":[2334,2340],"text":""},"desc":"Remove unused variable 'b'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'property' is defined but never used.","line":103,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"property"},"fix":{"range":[2756,2773],"text":""},"desc":"Remove unused variable 'property'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":157,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":157,"endColumn":26}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// SortableTable component for requirement #3 - Table Sorting on Header Click\nimport React, { useState, useMemo } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Paper,\n  Box,\n  Typography\n} from '@mui/material';\nimport { visuallyHidden } from '@mui/utils';\n\nexport type Order = 'asc' | 'desc';\n\nexport interface HeadCell<T> {\n  id: keyof T;\n  label: string;\n  numeric: boolean;\n  disablePadding?: boolean;\n  sortable?: boolean;\n  width?: string | number;\n  align?: 'left' | 'right' | 'center';\n  render?: (value: any, row: T) => React.ReactNode;\n}\n\ninterface SortableTableProps<T> {\n  data: T[];\n  headCells: HeadCell<T>[];\n  title?: string;\n  defaultOrderBy?: keyof T;\n  defaultOrder?: Order;\n  onRowClick?: (row: T) => void;\n  dense?: boolean;\n  stickyHeader?: boolean;\n  maxHeight?: string | number;\n  emptyMessage?: string;\n  loading?: boolean;\n  actions?: (row: T) => React.ReactNode;\n}\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  const aVal = a[orderBy];\n  const bVal = b[orderBy];\n  \n  // Handle null/undefined values\n  if (bVal == null && aVal == null) {return 0;}\n  if (bVal == null) {return -1;}\n  if (aVal == null) {return 1;}\n  \n  // Handle different types\n  if (typeof aVal === 'number' && typeof bVal === 'number') {\n    return bVal - aVal;\n  }\n  \n  if (typeof aVal === 'string' && typeof bVal === 'string') {\n    return bVal.localeCompare(aVal, undefined, { numeric: true, sensitivity: 'base' });\n  }\n  \n  // Handle dates\n  if (aVal instanceof Date && bVal instanceof Date) {\n    return bVal.getTime() - aVal.getTime();\n  }\n  \n  // Handle date strings\n  if (typeof aVal === 'string' && typeof bVal === 'string') {\n    const aDate = new Date(aVal);\n    const bDate = new Date(bVal);\n    if (!isNaN(aDate.getTime()) && !isNaN(bDate.getTime())) {\n      return bDate.getTime() - aDate.getTime();\n    }\n  }\n  \n  // Default string comparison\n  return String(bVal).localeCompare(String(aVal), undefined, { numeric: true, sensitivity: 'base' });\n}\n\nfunction getComparator<T>(order: Order, orderBy: keyof T): (a: T, b: T) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface SortableTableHeadProps<T> {\n  headCells: HeadCell<T>[];\n  order: Order;\n  orderBy: keyof T;\n  onRequestSort: (property: keyof T) => void;\n  hasActions: boolean;\n}\n\nfunction SortableTableHead<T>(props: SortableTableHeadProps<T>) {\n  const { headCells, order, orderBy, onRequestSort, hasActions } = props;\n  \n  const createSortHandler = (property: keyof T) => () => {\n    onRequestSort(property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={String(headCell.id)}\n            align={headCell.align || (headCell.numeric ? 'right' : 'left')}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n            sx={{ \n              fontWeight: 'bold',\n              width: headCell.width,\n              backgroundColor: 'grey.50'\n            }}\n          >\n            {headCell.sortable !== false ? (\n              <TableSortLabel\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : 'asc'}\n                onClick={createSortHandler(headCell.id)}\n              >\n                {headCell.label}\n                {orderBy === headCell.id ? (\n                  <Box component=\"span\" sx={visuallyHidden}>\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                  </Box>\n                ) : null}\n              </TableSortLabel>\n            ) : (\n              headCell.label\n            )}\n          </TableCell>\n        ))}\n        {hasActions && (\n          <TableCell align=\"center\" sx={{ fontWeight: 'bold', backgroundColor: 'grey.50' }}>\n            Actions\n          </TableCell>\n        )}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nfunction SortableTable<T>({\n  data,\n  headCells,\n  title,\n  defaultOrderBy,\n  defaultOrder = 'asc',\n  onRowClick,\n  dense = false,\n  stickyHeader = false,\n  maxHeight,\n  emptyMessage = 'No data available',\n  loading = false,\n  actions\n}: SortableTableProps<T>) {\n  const [order, setOrder] = useState<Order>(defaultOrder);\n  const [orderBy, setOrderBy] = useState<keyof T>(defaultOrderBy || headCells[0]?.id);\n\n  const handleRequestSort = (property: keyof T) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const sortedData = useMemo(() => {\n    if (!data?.length) {return [];}\n    return stableSort(data, getComparator(order, orderBy));\n  }, [data, order, orderBy]);\n\n  const hasActions = Boolean(actions);\n\n  if (loading) {\n    return (\n      <Paper sx={{ p: 3, textAlign: 'center' }}>\n        <Typography>Loading...</Typography>\n      </Paper>\n    );\n  }\n\n  return (\n    <Paper sx={{ width: '100%', mb: 2 }}>\n      {title && (\n        <Box sx={{ p: 2 }}>\n          <Typography variant=\"h6\" component=\"div\">\n            {title}\n          </Typography>\n        </Box>\n      )}\n      <TableContainer sx={{ maxHeight }}>\n        <Table\n          stickyHeader={stickyHeader}\n          size={dense ? 'small' : 'medium'}\n          aria-label=\"sortable table\"\n        >\n          <SortableTableHead\n            headCells={headCells}\n            order={order}\n            orderBy={orderBy}\n            onRequestSort={handleRequestSort}\n            hasActions={hasActions}\n          />\n          <TableBody>\n            {sortedData.length === 0 ? (\n              <TableRow>\n                <TableCell \n                  colSpan={headCells.length + (hasActions ? 1 : 0)} \n                  align=\"center\"\n                  sx={{ py: 3 }}\n                >\n                  <Typography color=\"textSecondary\">\n                    {emptyMessage}\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            ) : (\n              sortedData.map((row, index) => (\n                <TableRow\n                  hover={Boolean(onRowClick)}\n                  onClick={onRowClick ? () => onRowClick(row) : undefined}\n                  key={index}\n                  sx={{ \n                    cursor: onRowClick ? 'pointer' : 'default',\n                    '&:hover': onRowClick ? { backgroundColor: 'action.hover' } : {}\n                  }}\n                >\n                  {headCells.map((headCell) => (\n                    <TableCell\n                      key={String(headCell.id)}\n                      align={headCell.align || (headCell.numeric ? 'right' : 'left')}\n                      padding={headCell.disablePadding ? 'none' : 'normal'}\n                    >\n                      {headCell.render \n                        ? headCell.render(row[headCell.id], row)\n                        : String(row[headCell.id] ?? '')\n                      }\n                    </TableCell>\n                  ))}\n                  {hasActions && (\n                    <TableCell align=\"center\">\n                      {actions!(row)}\n                    </TableCell>\n                  )}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}\n\nexport default SortableTable;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/StickyNotes/StickyNote.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[78,89],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":40,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[679,690],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":40,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":139,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[689,804],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":41,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[837,847],"text":""},"desc":"Remove unused variable 'id'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/StickyNotes/StickyNote.tsx\nimport React, { useState, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  TextField,\n  IconButton,\n  Box,\n  Menu,\n  MenuItem,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button\n} from '@mui/material';\nimport {\n  Edit,\n  Delete,\n  Save,\n  Cancel,\n  MoreVert,\n  Palette,\n  PushPin,\n  PushPinOutlined\n} from '@mui/icons-material';\n\ninterface StickyNoteProps {\n  id: number;\n  title: string;\n  content: string;\n  color: string;\n  created_at: string;\n  position?: { x: number; y: number };\n  pinned?: boolean;\n  onUpdate: (id: number, data: { title?: string; content?: string; color?: string; position?: { x: number; y: number }; pinned?: boolean }) => Promise<void>;\n  onDelete: (id: number) => Promise<void>;\n}\n\nconst COLORS = [\n  { name: 'yellow', color: '#fff59d', border: '#fff176' },\n  { name: 'blue', color: '#81d4fa', border: '#4fc3f7' },\n  { name: 'green', color: '#a5d6a7', border: '#81c784' },\n  { name: 'pink', color: '#f8bbd9', border: '#f48fb1' },\n  { name: 'purple', color: '#ce93d8', border: '#ba68c8' },\n  { name: 'orange', color: '#ffcc80', border: '#ffb74d' }\n];\n\nconst StickyNote: React.FC<StickyNoteProps> = ({\n  id,\n  title,\n  content,\n  color,\n  created_at,\n  position = { x: 0, y: 0 },\n  pinned = false,\n  onUpdate,\n  onDelete\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editTitle, setEditTitle] = useState(title);\n  const [editContent, setEditContent] = useState(content);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [colorMenuAnchor, setColorMenuAnchor] = useState<null | HTMLElement>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const colorConfig = COLORS.find(c => c.name === color) || COLORS[0];\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setAnchorEl(null);\n  };\n\n  const handleSave = async () => {\n    if (!editTitle.trim() || !editContent.trim()) {\n      return;\n    }\n    setLoading(true);\n    try {\n      await onUpdate(id, {\n        title: editTitle.trim(),\n        content: editContent.trim()\n      });\n      setIsEditing(false);\n    } catch (error) {\n      console.error('Error updating note:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setEditTitle(title);\n    setEditContent(content);\n    setIsEditing(false);\n  };\n\n  const handleColorChange = async (newColor: string) => {\n    setLoading(true);\n    try {\n      await onUpdate(id, { color: newColor });\n      setColorMenuAnchor(null);\n    } catch (error) {\n      console.error('Error updating note color:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTogglePin = async () => {\n    setLoading(true);\n    try {\n      await onUpdate(id, { pinned: !pinned });\n    } catch (error) {\n      console.error('Error toggling pin:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    setLoading(true);\n    try {\n      await onDelete(id);\n      setDeleteDialogOpen(false);\n    } catch (error) {\n      console.error('Error deleting note:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDragStop = (e: any, data: any) => {\n    const newPosition = { x: data.x, y: data.y };\n    onUpdate(id, { position: newPosition }).catch(error => {\n      console.error('Error saving note position:', error);\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <>\n      <Draggable\n        bounds=\"body\"\n        defaultPosition={position}\n        onStop={handleDragStop}\n        disabled={isEditing || pinned} // Disable drag if editing or pinned\n      >\n        <Card\n          sx={{\n            width: pinned ? '2in' : '2.5in',\n            minHeight: pinned ? '2in' : '2.5in',\n            backgroundColor: colorConfig.color,\n            border: `2px solid ${colorConfig.border}`,\n            borderRadius: 2,\n            boxShadow: '0 4px 8px rgba(0,0,0,0.1)',\n            transition: 'opacity var(--transition-normal)',\n            opacity: 0.9,\n            zIndex: 1400,\n            '&:hover': {\n              opacity: 1,\n              boxShadow: '0 6px 16px rgba(0,0,0,0.15)',\n              transform: 'translateY(-2px)'\n            }\n          }}\n        >\n          <CardContent sx={{ pb: 1 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>\n              {isEditing ? (\n                <TextField\n                  fullWidth\n                  value={editTitle}\n                  onChange={(e) => setEditTitle(e.target.value)}\n                  variant=\"standard\"\n                  placeholder=\"Note title...\"\n                  InputProps={{\n                    disableUnderline: true,\n                    sx: {\n                      fontSize: '1.1rem',\n                      fontWeight: 600,\n                      backgroundColor: 'rgba(255,255,255,0.3)',\n                      borderRadius: 1,\n                      px: 1,\n                      py: 0.5\n                    }\n                  }}\n                  autoFocus\n                />\n              ) : (\n                <Typography variant=\"h6\" sx={{ fontWeight: 600, color: 'rgba(0,0,0,0.8)' }}>\n                  {title}\n                </Typography>\n              )}\n              {!isEditing && (\n                <Box>\n                  <IconButton\n                    size=\"small\"\n                    onClick={handleTogglePin}\n                    sx={{ color: 'rgba(0,0,0,0.6)', mr: 1 }}\n                  >\n                    {pinned ? <PushPin fontSize=\"small\" /> : <PushPinOutlined fontSize=\"small\" />}\n                  </IconButton>\n                  <IconButton\n                    size=\"small\"\n                    onClick={(e) => setAnchorEl(e.currentTarget)}\n                    sx={{ color: 'rgba(0,0,0,0.6)' }}\n                  >\n                    <MoreVert fontSize=\"small\" />\n                  </IconButton>\n                </Box>\n              )}\n            </Box>\n            {isEditing ? (\n              <TextField\n                fullWidth\n                multiline\n                rows={4}\n                value={editContent}\n                onChange={(e) => setEditContent(e.target.value)}\n                variant=\"outlined\"\n                placeholder=\"Write your note content here...\"\n                sx={{\n                  '& .MuiOutlinedInput-root': {\n                    backgroundColor: 'rgba(255,255,255,0.3)',\n                    '& fieldset': { border: 'none' }\n                  }\n                }}\n              />\n            ) : (\n              <Typography variant=\"body2\" sx={{ color: 'rgba(0,0,0,0.7)', whiteSpace: 'pre-wrap' }}>\n                {content}\n              </Typography>\n            )}\n          </CardContent>\n          <CardActions sx={{ justifyContent: 'space-between', px: 2, pb: 2 }}>\n            <Chip\n              label={formatDate(created_at)}\n              size=\"small\"\n              sx={{\n                backgroundColor: 'rgba(255,255,255,0.4)',\n                color: 'rgba(0,0,0,0.6)',\n                fontSize: '0.7rem'\n              }}\n            />\n            {isEditing && (\n              <Box>\n                <IconButton\n                  size=\"small\"\n                  onClick={handleCancel}\n                  disabled={loading}\n                  sx={{ color: 'rgba(0,0,0,0.6)', mr: 1 }}\n                >\n                  <Cancel fontSize=\"small\" />\n                </IconButton>\n                <IconButton\n                  size=\"small\"\n                  onClick={handleSave}\n                  disabled={loading || !editTitle.trim() || !editContent.trim()}\n                  sx={{ color: 'green' }}\n                >\n                  <Save fontSize=\"small\" />\n                </IconButton>\n              </Box>\n            )}\n          </CardActions>\n        </Card>\n      </Draggable>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={() => setAnchorEl(null)}\n      >\n        <MenuItem onClick={handleEdit}>\n          <Edit fontSize=\"small\" sx={{ mr: 1 }} />\n          Edit\n        </MenuItem>\n        <MenuItem onClick={(e) => setColorMenuAnchor(e.currentTarget)}>\n          <Palette fontSize=\"small\" sx={{ mr: 1 }} />\n          Change Color\n        </MenuItem>\n        <MenuItem onClick={() => { setDeleteDialogOpen(true); setAnchorEl(null); }}>\n          <Delete fontSize=\"small\" sx={{ mr: 1 }} />\n          Delete\n        </MenuItem>\n      </Menu>\n      <Menu\n        anchorEl={colorMenuAnchor}\n        open={Boolean(colorMenuAnchor)}\n        onClose={() => setColorMenuAnchor(null)}\n      >\n        {COLORS.map((colorOption) => (\n          <MenuItem\n            key={colorOption.name}\n            onClick={() => handleColorChange(colorOption.name)}\n            sx={{ minWidth: 120 }}\n          >\n            <Box\n              sx={{\n                width: 20,\n                height: 20,\n                backgroundColor: colorOption.color,\n                border: `2px solid ${colorOption.border}`,\n                borderRadius: 1,\n                mr: 1\n              }}\n            />\n            {colorOption.name.charAt(0).toUpperCase() + colorOption.name.slice(1)}\n          </MenuItem>\n        ))}\n      </Menu>\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n        <DialogTitle>Delete Note</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete \"{title}\"? This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleDelete} color=\"error\" disabled={loading}>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default StickyNote;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/StickyNotes/StickyNotesPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[390,394],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":48,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1166,1193],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchNotes' was used before it was defined.","line":66,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":66,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/StickyNotes/StickyNotesPanel.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  MenuItem,\n  CircularProgress,\n  Alert,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Typography // Added import\n} from '@mui/material';\nimport { Add, PushPin, PushPinOutlined } from '@mui/icons-material';\nimport StickyNote from './StickyNote';\nimport { useAuth } from '../../context/AuthContext';\nimport { stickyNotesService } from '../../services/stickyNotesService';\nimport { useStickyNotes } from '../../hooks/useStickyNotes';\n\ninterface StickyNoteData {\n  id: number;\n  title: string;\n  content: string;\n  color: string;\n  created_at: string;\n  updated_at?: string;\n  position?: { x: number; y: number };\n  pinned?: boolean;\n}\n\nconst COLORS = [\n  { name: 'yellow', label: 'Yellow' },\n  { name: 'blue', label: 'Blue' },\n  { name: 'green', label: 'Green' },\n  { name: 'pink', label: 'Pink' },\n  { name: 'purple', label: 'Purple' },\n  { name: 'orange', label: 'Orange' }\n];\n\nconst StickyNotesPanel: React.FC = () => {\n  const { user } = useAuth();\n  const { userSettings } = useStickyNotes();\n  const [notes, setNotes] = useState<StickyNoteData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [popupOpen, setPopupOpen] = useState(false);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [newNote, setNewNote] = useState({\n    title: '',\n    content: '',\n    color: 'yellow',\n    position: { x: window.innerWidth - 300, y: 100 },\n    pinned: false\n  });\n  const [creating, setCreating] = useState(false);\n\n  useEffect(() => {\n    if (userSettings.sticky_notes_enabled) {\n      fetchNotes();\n    }\n  }, [userSettings.sticky_notes_enabled]);\n\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      const data = await stickyNotesService.getNotes();\n      setNotes(data);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching notes:', err);\n      setError('Failed to load sticky notes');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createNote = async () => {\n    if (!newNote.title.trim() || !newNote.content.trim()) {\n      return;\n    }\n    try {\n      setCreating(true);\n      const createdNote = await stickyNotesService.createNote(newNote);\n      setNotes(prev => [createdNote, ...prev]);\n      setNewNote({ title: '', content: '', color: 'yellow', position: { x: window.innerWidth - 300, y: 100 }, pinned: false });\n      setCreateDialogOpen(false);\n      setError(null);\n    } catch (err) {\n      console.error('Error creating note:', err);\n      setError('Failed to create sticky note');\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  const updateNote = async (id: number, updateData: { title?: string; content?: string; color?: string; position?: { x: number; y: number }; pinned?: boolean }) => {\n    try {\n      const updatedNote = await stickyNotesService.updateNote(id, updateData);\n      setNotes(prev => prev.map(note => note.id === id ? updatedNote : note));\n      setError(null);\n    } catch (err) {\n      console.error('Error updating note:', err);\n      setError('Failed to update sticky note');\n      throw err;\n    }\n  };\n\n  const togglePin = (note: StickyNoteData) => {\n    updateNote(note.id, { pinned: !note.pinned });\n  };\n\n  const deleteNote = async (id: number) => {\n    try {\n      await stickyNotesService.deleteNote(id);\n      setNotes(prev => prev.filter(note => note.id !== id));\n      setError(null);\n    } catch (err) {\n      console.error('Error deleting note:', err);\n      setError('Failed to delete sticky note');\n      throw err;\n    }\n  };\n\n  // Always show icon, regardless of settings, but disable functionality if not enabled\n  return (\n    <>\n      <Box\n        className=\"sticky-notes-icon\"\n        sx={{\n          position: 'fixed',\n          bottom: 'var(--space-4)',\n          right: 'var(--space-4)',\n          width: '1in',\n          height: '1in',\n          zIndex: 1500,\n          opacity: 0.2,\n          '&:hover': {\n            opacity: 1,\n          },\n          cursor: 'pointer'\n        }}\n        onClick={() => {\n          if (!userSettings.sticky_notes_enabled) {\n            setError('Sticky notes feature is disabled. Please enable in settings.');\n            return;\n          }\n          setPopupOpen(true);\n        }}\n      >\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n          <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"yellow\" rx=\"10\" ry=\"10\" />\n          <polygon points=\"100,50 100,100 50,100\" fill=\"#4b5563\" />\n          <polygon points=\"100,60 100,100 60,100\" fill=\"#b45309\" />\n        </svg>\n      </Box>\n\n      {/* Pinned notes - rendered separately at top right */}\n      {notes.filter(note => note.pinned).map((note) => (\n        <Box\n          key={note.id}\n          sx={{\n            position: 'fixed',\n            top: 'var(--space-4)',\n            right: 'var(--space-4)',\n            zIndex: 1400,\n            opacity: 0.9,\n            '&:hover': { opacity: 1 }\n          }}\n        >\n          <StickyNote\n            id={note.id}\n            title={note.title}\n            content={note.content}\n            color={note.color}\n            created_at={note.created_at}\n            position={{ x: 0, y: 0 }} // Fixed position\n            pinned={note.pinned}\n            onUpdate={updateNote}\n            onDelete={deleteNote}\n          />\n        </Box>\n      ))}\n\n      {/* Unpinned notes - draggable as before */}\n      {notes.filter(note => !note.pinned).map((note) => (\n        <StickyNote\n          key={note.id}\n          id={note.id}\n          title={note.title}\n          content={note.content}\n          color={note.color}\n          created_at={note.created_at}\n          position={note.position}\n          pinned={note.pinned}\n          onUpdate={updateNote}\n          onDelete={deleteNote}\n        />\n      ))}\n\n      {/* Popup dialog for notes list */}\n      <Dialog\n        open={popupOpen}\n        onClose={() => setPopupOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Sticky Notes</DialogTitle>\n        <DialogContent>\n          {loading ? (\n            <CircularProgress />\n          ) : error ? (\n            <Alert severity=\"error\">{error}</Alert>\n          ) : notes.length === 0 ? (\n            <Typography>No notes yet. Add one!</Typography>\n          ) : (\n            <List>\n              {notes.map((note) => (\n                <ListItem key={note.id}>\n                  <ListItemText primary={note.title} secondary={note.content} />\n                  <ListItemSecondaryAction>\n                    <IconButton onClick={() => togglePin(note)}>\n                      {note.pinned ? <PushPin /> : <PushPinOutlined />}\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(true)} variant=\"contained\">Add Note</Button>\n          <Button onClick={() => setPopupOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Create note dialog */}\n      <Dialog\n        open={createDialogOpen}\n        onClose={() => setCreateDialogOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>Create New Sticky Note</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            label=\"Title\"\n            value={newNote.title}\n            onChange={(e) => setNewNote(prev => ({ ...prev, title: e.target.value }))}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            fullWidth\n            label=\"Content\"\n            value={newNote.content}\n            onChange={(e) => setNewNote(prev => ({ ...prev, content: e.target.value }))}\n            margin=\"normal\"\n            variant=\"outlined\"\n            multiline\n            rows={4}\n          />\n          <TextField\n            fullWidth\n            label=\"Color\"\n            value={newNote.color}\n            onChange={(e) => setNewNote(prev => ({ ...prev, color: e.target.value }))}\n            margin=\"normal\"\n            variant=\"outlined\"\n            select\n          >\n            {COLORS.map((color) => (\n              <MenuItem key={color.name} value={color.name}>\n                {color.label}\n              </MenuItem>\n            ))}\n          </TextField>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={createNote}\n            variant=\"contained\"\n            disabled={creating || !newNote.title.trim() || !newNote.content.trim()}\n          >\n            {creating ? <CircularProgress size={20} /> : 'Create Note'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {error && (\n        <Alert severity=\"error\" sx={{ position: 'fixed', top: 'var(--space-4)', right: 'var(--space-4)', zIndex: 1600 }}>\n          {error}\n        </Alert>\n      )}\n    </>\n  );\n};\n\nexport default StickyNotesPanel;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/StickyNotes/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/StockBulkImport.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":8,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button, Box, Typography, Input, Alert } from '@mui/material';\nimport { masterDataService } from '../services/authService'; // Import the service\nimport { handleApiError } from '../utils/errorHandling';\nimport { useAuth } from '../context/AuthContext';\nimport { useCompany } from '../context/CompanyContext';\n\nconst StockBulkImport = () => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const { user } = useAuth();\n  const { isCompanySetupNeeded } = useCompany();\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      setSelectedFile(event.target.files[0]);\n      setError(null); // Clear previous errors\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!selectedFile) {\n      setError('Please select an Excel file to upload.');\n      return;\n    }\n\n    // Check if user is authenticated\n    if (!user) {\n      setError('Please log in before importing inventory.');\n      return;\n    }\n\n    // Check if company setup is needed\n    if (isCompanySetupNeeded) {\n      setError('Company setup required before importing inventory. Please complete company setup first.');\n      return;\n    }\n\n    setIsUploading(true);\n    setError(null);\n\n    try {\n      const res = await masterDataService.bulkImportStock(selectedFile);\n      setResponse(res);\n      setError(null);\n    } catch (err: any) {\n      handleApiError(err, 'Failed to import Excel file. Check the file format and try again.');\n      setResponse(null);\n      \n      // Also set local error for display\n      if (err.status === 412) {\n        setError('Company setup required before importing inventory.');\n      } else if (err.status === 400) {\n        setError(err.userMessage || 'Invalid request. Please check your data and try again.');\n      } else if (err.status === 404) {\n        setError(err.userMessage || 'Resource not found. Please contact support if this continues.');\n      } else {\n        setError(err.userMessage || 'Failed to import Excel file. Check the file format and try again.');\n      }\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h6\">Bulk Import Stock from Excel</Typography>\n      \n      {isCompanySetupNeeded && (\n        <Alert severity=\"warning\" sx={{ mb: 2 }}>\n          Please complete company setup before importing inventory.\n        </Alert>\n      )}\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n      \n      <Input\n        type=\"file\"\n        onChange={handleFileChange}\n        inputProps={{ accept: '.xlsx, .xls' }}\n        sx={{ mb: 2 }}\n        disabled={isUploading || isCompanySetupNeeded}\n      />\n      \n      <Button \n        variant=\"contained\" \n        onClick={handleSubmit}\n        disabled={!selectedFile || isUploading || isCompanySetupNeeded}\n      >\n        {isUploading ? 'Importing...' : isCompanySetupNeeded ? 'Company Setup Required' : 'Import'}\n      </Button>\n      \n      {response && (\n        <Alert severity=\"success\" sx={{ mt: 2 }}>\n          <pre>{JSON.stringify(response, null, 2)}</pre>\n        </Alert>\n      )}\n    </Box>\n  );\n};\n\nexport default StockBulkImport;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/StockDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SuspendDialog.tsx","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'handleClose' was used before it was defined.","line":89,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":89,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// SuspendDialog component for requirement #5 - Account Suspension & License Pause\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  TextField,\n  Box,\n  Alert,\n  CircularProgress,\n  FormControlLabel,\n  Checkbox\n} from '@mui/material';\nimport { Block as BlockIcon, PlayArrow as ActivateIcon } from '@mui/icons-material';\nimport { toast } from 'react-toastify';\n\ninterface SuspendDialogProps {\n  open: boolean;\n  onClose: () => void;\n  organizationId: number;\n  organizationName: string;\n  currentStatus: string;\n  onSuccess?: () => void;\n}\n\nconst SuspendDialog: React.FC<SuspendDialogProps> = ({\n  open,\n  onClose,\n  organizationId,\n  organizationName,\n  currentStatus,\n  onSuccess\n}) => {\n  const [reason, setReason] = useState('');\n  const [confirmChecked, setConfirmChecked] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const isCurrentlySuspended = currentStatus === 'suspended';\n  const action = isCurrentlySuspended ? 'activate' : 'suspend';\n\n  const handleAction = async () => {\n    if (!isCurrentlySuspended && !reason.trim()) {\n      toast.error('Please provide a reason for suspension');\n      return;\n    }\n\n    if (!confirmChecked) {\n      toast.error('Please confirm the action');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      const endpoint = isCurrentlySuspended\n        ? `/api/v1/settings/settings/organization/${organizationId}/activate`\n        : `/api/v1/settings/organization/${organizationId}/suspend`;\n\n      const body = isCurrentlySuspended \n        ? {} \n        : { reason: reason.trim() };\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(body),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.detail || `Failed to ${action} organization`);\n      }\n\n      const result = await response.json();\n      toast.success(result.message || `Organization ${action}d successfully`);\n      \n      if (onSuccess) {\n        onSuccess();\n      }\n      \n      handleClose();\n    } catch (error) {\n      console.error(`${action} error:`, error);\n      toast.error(error instanceof Error ? error.message : `Failed to ${action} organization`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setReason('');\n    setConfirmChecked(false);\n    setLoading(false);\n    onClose();\n  };\n\n  const isValid = isCurrentlySuspended ? confirmChecked : (reason.trim().length > 0 && confirmChecked);\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        {isCurrentlySuspended ? (\n          <>\n            <ActivateIcon color=\"success\" />\n            Activate Organization\n          </>\n        ) : (\n          <>\n            <BlockIcon color=\"error\" />\n            Suspend Organization\n          </>\n        )}\n      </DialogTitle>\n      \n      <DialogContent>\n        <Alert severity={isCurrentlySuspended ? \"info\" : \"warning\"} sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            {isCurrentlySuspended \n              ? 'Activate Organization Account'\n              : '⚠️ Suspend Organization Account'\n            }\n          </Typography>\n        </Alert>\n\n        <Typography variant=\"body1\" gutterBottom>\n          {isCurrentlySuspended \n            ? `Are you sure you want to activate \"${organizationName}\"? This will restore full access to all users in this organization.`\n            : `Are you sure you want to suspend \"${organizationName}\"? This will immediately block access for all users in this organization.`\n          }\n        </Typography>\n\n        {!isCurrentlySuspended && (\n          <Box sx={{ my: 2 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n              Effects of suspension:\n            </Typography>\n            <ul>\n              <li>All users will be logged out immediately</li>\n              <li>Users cannot log in until reactivated</li>\n              <li>Data is preserved but not accessible</li>\n              <li>All API access is blocked</li>\n            </ul>\n          </Box>\n        )}\n\n        {!isCurrentlySuspended && (\n          <Box sx={{ my: 2 }}>\n            <TextField\n              fullWidth\n              label=\"Reason for Suspension\"\n              multiline\n              rows={3}\n              value={reason}\n              onChange={(e) => setReason(e.target.value)}\n              disabled={loading}\n              placeholder=\"Enter the reason for suspending this organization...\"\n              required\n            />\n          </Box>\n        )}\n\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={confirmChecked}\n              onChange={(e) => setConfirmChecked(e.target.checked)}\n              disabled={loading}\n            />\n          }\n          label={isCurrentlySuspended \n            ? `I confirm that I want to activate \"${organizationName}\"`\n            : `I confirm that I want to suspend \"${organizationName}\"`\n          }\n        />\n\n        {!isCurrentlySuspended && (\n          <Alert severity=\"error\" sx={{ mt: 2 }}>\n            This action takes effect immediately and will affect all users in the organization.\n          </Alert>\n        )}\n      </DialogContent>\n\n      <DialogActions>\n        <Button \n          onClick={handleClose} \n          disabled={loading}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleAction}\n          variant=\"contained\"\n          color={isCurrentlySuspended ? \"success\" : \"error\"}\n          disabled={!isValid || loading}\n          startIcon={loading ? <CircularProgress size={16} /> : null}\n        >\n          {loading \n            ? `${isCurrentlySuspended ? 'Activating' : 'Suspending'}...`\n            : `${isCurrentlySuspended ? 'Activate' : 'Suspend'} Organization`\n          }\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default SuspendDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/UnifiedLoginForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":27,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"token"},"fix":{"range":[551,565],"text":""},"desc":"Remove unused variable 'token'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":27,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[564,585],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'reset' is assigned a value but never used.","line":46,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":79,"suggestions":[{"messageId":"removeVar","data":{"varName":"reset"},"fix":{"range":[1221,1228],"text":""},"desc":"Remove unused variable 'reset'."}]},{"ruleId":"no-shadow","severity":2,"message":"'email' is already declared in the upper scope on line 55 column 9.","line":73,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":73,"endColumn":42},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'email' is already declared in the upper scope on line 55 column 9.","line":73,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":73,"endColumn":42},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 39 column 10.","line":87,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":87,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 39 column 10.","line":87,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":87,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 39 column 10.","line":124,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":124,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 39 column 10.","line":124,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":124,"endColumn":24}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/UnifiedLoginForm.tsx\n'use client';\n\nimport React, { useState } from 'react';\nimport { \n  Box,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  CircularProgress,\n  FormControlLabel,\n  Checkbox,\n  IconButton,\n  InputAdornment,\n  Stepper,\n  Step,\n  StepLabel\n} from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { authService } from '../services/authService';\n\ninterface UnifiedLoginFormProps {\n  onLogin: (token: string, loginResponse?: any) => void;\n}\n\ninterface LoginFormData {\n  email: string;\n  password: string;\n  phoneNumber: string;\n  otp: string;\n}\n\nconst UnifiedLoginForm: React.FC<UnifiedLoginFormProps> = ({ onLogin }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [useOTP, setUseOTP] = useState(false);\n  const [otpStep, setOtpStep] = useState(0); // 0: credentials, 1: OTP entry\n  const [otpSent, setOtpSent] = useState(false);\n\n  const { control, handleSubmit, formState: { errors }, watch, setValue, reset } = useForm<LoginFormData>({\n    defaultValues: {\n      email: '',\n      password: '',\n      phoneNumber: '',\n      otp: ''\n    }\n  });\n\n  const email = watch('email');\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleOTPToggle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUseOTP(event.target.checked);\n    setError('');\n    setSuccess('');\n    if (!event.target.checked) {\n      setOtpStep(0);\n      setOtpSent(false);\n      setValue('otp', '');\n      setValue('phoneNumber', '');\n    }\n  };\n\n  const requestOTP = async (email: string, phoneNumber: string) => {\n    try {\n      setLoading(true);\n      setError('');\n      \n      // Determine delivery method based on phone number\n      const deliveryMethod = phoneNumber ? 'auto' : 'email';\n      \n      const response = await authService.requestOTP(email, phoneNumber, deliveryMethod);\n      setSuccess(response.delivery_method \n        ? `OTP sent via ${response.delivery_method}. Please check your messages.`\n        : `OTP sent to ${email}. Please check your email.`);\n      setOtpSent(true);\n      setOtpStep(1);\n    } catch (error: any) {\n      setError(error.response?.data?.detail || 'Failed to send OTP. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onSubmit = async (data: LoginFormData) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    \n    try {\n      if (useOTP) {\n        if (!otpSent) {\n          // Step 1: Request OTP\n          await requestOTP(data.email, data.phoneNumber);\n          return; // Don't continue to login yet\n        } else {\n          // Step 2: Verify OTP and login\n          const response = await authService.verifyOTP(data.email, data.otp);\n          setSuccess('Login successful!');\n          \n          // Add flag to indicate OTP login (so password change is not mandatory)\n          response.otp_login = true;\n          \n          // Call parent callback with token and response\n          onLogin(response.access_token, response);\n        }\n      } else {\n        // Standard email/password login\n        // Clear any existing invalid token before login attempt\n        localStorage.removeItem('token');\n        \n        const response = await authService.loginWithEmail(data.email, data.password);\n        onLogin(response.access_token, response);\n      }\n    } catch (error: any) {\n      const errorMessage = error.message || error.response?.data?.detail || 'Login failed. Please check your credentials.';\n      setError(errorMessage);\n      // Clear potentially invalid token on failure\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBackToCredentials = () => {\n    setOtpStep(0);\n    setOtpSent(false);\n    setError('');\n    setSuccess('');\n    setValue('otp', '');\n  };\n\n  const handleResendOTP = async () => {\n    const phoneNumber = watch('phoneNumber');\n    await requestOTP(email, phoneNumber);\n  };\n\n  const steps = ['Login Details', 'Verify OTP'];\n\n  return (\n    <Card>\n      <CardContent sx={{ p: 4 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom align=\"center\">\n          {useOTP ? 'OTP Login' : 'Login'}\n        </Typography>\n\n        {useOTP && (\n          <Stepper activeStep={otpStep} sx={{ mt: 2, mb: 3 }}>\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n        )}\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {success && (\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\n            {success}\n          </Alert>\n        )}\n\n        <Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>\n          {/* Email field - always visible */}\n          <Controller\n            name=\"email\"\n            control={control}\n            rules={{\n              required: 'Email is required',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: 'Invalid email address'\n              }\n            }}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                fullWidth\n                label=\"Email Address\"\n                type=\"email\"\n                variant=\"outlined\"\n                slotProps={{\n                  inputLabel: {\n                    shrink: field.value ? true : undefined\n                  }\n                }}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n                margin=\"normal\"\n                autoComplete=\"email\"\n                autoFocus\n                disabled={otpSent && useOTP}\n              />\n            )}\n          />\n\n          {/* Password field - hidden when OTP is active and step > 0 */}\n          {!useOTP && (\n            <Controller\n              name=\"password\"\n              control={control}\n              rules={{\n                required: 'Password is required'\n              }}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"Password\"\n                  type={showPassword ? 'text' : 'password'}\n                  variant=\"outlined\"\n                  slotProps={{\n                    inputLabel: {\n                      shrink: field.value ? true : undefined\n                    }\n                  }}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={togglePasswordVisibility}\n                          edge=\"end\"\n                        >\n                          {showPassword ? <VisibilityOff /> : <Visibility />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                  error={!!errors.password}\n                  helperText={errors.password?.message}\n                  margin=\"normal\"\n                  autoComplete=\"current-password\"\n                />\n              )}\n            />\n          )}\n\n          {/* Phone number field - shown when OTP is enabled and not yet sent */}\n          {useOTP && !otpSent && (\n            <Controller\n              name=\"phoneNumber\"\n              control={control}\n              rules={{\n                pattern: {\n                  value: /^[\\+]?[1-9][\\d]{0,15}$/,\n                  message: 'Enter a valid phone number with country code (e.g., +91XXXXXXXXXX)'\n                }\n              }}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"Phone Number (Optional for WhatsApp OTP)\"\n                  type=\"tel\"\n                  variant=\"outlined\"\n                  placeholder=\"+91XXXXXXXXXX\"\n                  slotProps={{\n                    inputLabel: {\n                      shrink: field.value ? true : undefined\n                    }\n                  }}\n                  error={!!errors.phoneNumber}\n                  helperText={errors.phoneNumber?.message || \"Include country code for WhatsApp OTP, or leave blank for email OTP\"}\n                  margin=\"normal\"\n                  autoComplete=\"tel\"\n                />\n              )}\n            />\n          )}\n\n          {/* OTP field - shown when OTP step is active */}\n          {useOTP && otpSent && (\n            <Controller\n              name=\"otp\"\n              control={control}\n              rules={{\n                required: 'OTP is required',\n                pattern: {\n                  value: /^\\d{6}$/,\n                  message: 'OTP must be 6 digits'\n                }\n              }}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"OTP Code\"\n                  type=\"text\"\n                  inputProps={{ maxLength: 6, pattern: '[0-9]*' }}\n                  variant=\"outlined\"\n                  slotProps={{\n                    inputLabel: {\n                      shrink: field.value ? true : undefined\n                    }\n                  }}\n                  error={!!errors.otp}\n                  helperText={errors.otp?.message}\n                  margin=\"normal\"\n                  autoFocus\n                />\n              )}\n            />\n          )}\n\n          {/* Login with OTP checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={useOTP}\n                onChange={handleOTPToggle}\n                name=\"useOTP\"\n                color=\"primary\"\n                disabled={loading}\n              />\n            }\n            label=\"Login with OTP\"\n            sx={{ mt: 2, mb: 1 }}\n          />\n\n          {/* Action buttons */}\n          {!useOTP || !otpSent ? (\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n              disabled={loading}\n            >\n              {loading ? (\n                <CircularProgress size={24} />\n              ) : (\n                useOTP ? 'Send OTP' : 'Login'\n              )}\n            </Button>\n          ) : (\n            <Box sx={{ mt: 3, mb: 2, display: 'flex', gap: 2 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleBackToCredentials}\n                disabled={loading}\n                sx={{ flex: 1 }}\n              >\n                Back\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                disabled={loading}\n                sx={{ flex: 1 }}\n              >\n                {loading ? <CircularProgress size={24} /> : 'Verify & Login'}\n              </Button>\n            </Box>\n          )}\n\n          {/* Resend OTP button */}\n          {useOTP && otpSent && (\n            <Button\n              variant=\"text\"\n              onClick={handleResendOTP}\n              disabled={loading}\n              fullWidth\n              sx={{ mt: 1 }}\n            >\n              Resend OTP\n            </Button>\n          )}\n        </Box>\n\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" sx={{ mt: 2 }}>\n          {useOTP \n            ? \"Enter your email and optional phone number to receive an OTP for secure login.\"\n            : \"Use your email and password to login, or try OTP authentication for enhanced security.\"\n          }\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default UnifiedLoginForm;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherContextMenu.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":20,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[408,418],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":21,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[440,450],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":22,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[474,484],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":23,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[508,519],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'mode' is defined but never used.","line":23,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"mode"},"fix":{"range":[518,546],"text":""},"desc":"Remove unused variable 'mode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":24,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[570,580],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":25,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[608,618],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":26,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[651,661],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":65,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1599,1609],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isPurchaseOrder' is assigned a value but never used.","line":120,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"isPurchaseOrder"},"fix":{"range":[3230,3307],"text":""},"desc":"Remove unused variable 'isPurchaseOrder'."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherContextMenu.tsx\n\nimport React, { useState } from 'react';\nimport { Menu, MenuItem, IconButton } from '@mui/material';\nimport { \n  MoreVert as MoreVertIcon, \n  Visibility, \n  Edit, \n  Delete, \n  Print, \n  SaveAlt, \n  Email, \n  ContentCopy,\n  LocalShipping \n} from '@mui/icons-material';\n\ninterface VoucherContextMenuProps {\n  voucher?: any;\n  voucherType: string;\n  onView: (id: number) => void;\n  onEdit: (id: number) => void;\n  onDelete: (id: number) => void;\n  onPrint?: (id: number, mode: 'print' | 'download') => void;\n  onEmail?: (id: number) => void;\n  onDuplicate?: (id: number) => void;\n  onCreateDispatch?: (id: number) => void;\n  showKebab?: boolean;\n  contextMenu?: { mouseX: number; mouseY: number; voucher: any } | null;\n  onClose: () => void;\n  open?: boolean;\n  anchorPosition?: { left: number; top: number };\n  anchorReference?: 'anchorPosition' | 'anchorEl' | 'none';\n}\n\nconst VoucherContextMenu: React.FC<VoucherContextMenuProps> = ({\n  voucher,\n  voucherType,\n  onView,\n  onEdit,\n  onDelete,\n  onPrint,\n  onEmail,\n  onDuplicate,\n  onCreateDispatch,\n  showKebab = false,\n  contextMenu = null,\n  onClose,\n  open = false,\n  anchorPosition = null,\n  anchorReference,\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const effectiveVoucher = voucher || (contextMenu ? contextMenu.voucher : null);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    onClose();\n  };\n\n  const handleAction = (action: (id: number) => void) => () => {\n    if (effectiveVoucher) {\n      action(effectiveVoucher.id);\n    }\n    handleMenuClose();\n  };\n\n  const handlePrintAction = (mode: 'print' | 'download') => () => {\n    if (onPrint && effectiveVoucher) {\n      onPrint(effectiveVoucher.id, mode);\n    }\n    handleMenuClose();\n  };\n\n  // Determine email recipient based on voucher type\n  const getEmailRecipient = () => {\n    if (!effectiveVoucher) {return '';}\n    if (!voucherType) {return '';}\n\n    const lowerType = voucherType.toLowerCase();\n    if (lowerType.includes('sales')) {\n      return effectiveVoucher.customer?.email || '';\n    } else if (lowerType.includes('purchase') || lowerType.includes('financial') || lowerType.includes('payment')) {\n      return effectiveVoucher.vendor?.email || '';\n    } else if (lowerType.includes('receipt')) {\n      return effectiveVoucher.customer?.email || '';\n    }\n    return '';\n  };\n\n  const handleEmailClick = () => {\n    if (onEmail && effectiveVoucher) {\n      const recipient = getEmailRecipient();\n      if (recipient) {\n        onEmail(effectiveVoucher.id);\n      } else {\n        alert('No email recipient found for this voucher type.');\n      }\n    }\n    handleMenuClose();\n  };\n\n  const menuProps = anchorPosition && anchorReference ? {\n    open: open || Boolean(anchorEl),\n    onClose: handleMenuClose,\n    anchorReference: anchorReference,\n    anchorPosition,\n  } : {\n    open: Boolean(anchorEl),\n    anchorEl,\n    onClose: handleMenuClose,\n  };\n\n  const hasEmail = !!onEmail && !!getEmailRecipient();\n  const isDeliveryChallan = voucherType.toLowerCase().includes('delivery challan');\n  const isPurchaseOrder = voucherType.toLowerCase().includes('purchase order');\n\n  return (\n    <>\n      {showKebab && (\n        <IconButton onClick={handleClick}>\n          <MoreVertIcon />\n        </IconButton>\n      )}\n      <Menu {...menuProps}>\n        <MenuItem onClick={handleAction(onView)}>\n          <Visibility sx={{ mr: 1 }} /> View {voucherType}\n        </MenuItem>\n        <MenuItem onClick={handleAction(onEdit)}>\n          <Edit sx={{ mr: 1 }} /> Edit {voucherType}\n        </MenuItem>\n        {onDuplicate && (\n          <MenuItem onClick={handleAction(onDuplicate)}>\n            <ContentCopy sx={{ mr: 1 }} /> Duplicate {voucherType}\n          </MenuItem>\n        )}\n        <MenuItem onClick={handleAction(onDelete)}>\n          <Delete sx={{ mr: 1 }} /> Delete {voucherType}\n        </MenuItem>\n        {onPrint && (\n          <MenuItem onClick={handlePrintAction('print')}>\n            <Print sx={{ mr: 1 }} /> Print {voucherType}\n          </MenuItem>\n        )}\n        {onPrint && (\n          <MenuItem onClick={handlePrintAction('download')}>\n            <SaveAlt sx={{ mr: 1 }} /> Save {voucherType} as PDF\n          </MenuItem>\n        )}\n        {hasEmail && (\n          <MenuItem onClick={handleEmailClick}>\n            <Email sx={{ mr: 1 }} /> Email {voucherType}\n          </MenuItem>\n        )}\n        {isDeliveryChallan && onCreateDispatch && (\n          <MenuItem onClick={handleAction(onCreateDispatch)}>\n            <LocalShipping sx={{ mr: 1 }} /> Create Dispatch Order\n          </MenuItem>\n        )}\n      </Menu>\n    </>\n  );\n};\n\nexport default VoucherContextMenu;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherHeaderActions.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'mode' is defined but never used.","line":18,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"mode"},"fix":{"range":[679,711],"text":""},"desc":"Remove unused variable 'mode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":21,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[785,797],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onModeChange' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"onModeChange"},"fix":{"range":[987,1061],"text":""},"desc":"Remove unused variable 'onModeChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onModalOpen' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"onModalOpen"},"fix":{"range":[1061,1076],"text":""},"desc":"Remove unused variable 'onModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1076,1091],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onView' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"onView"},"fix":{"range":[1091,1101],"text":""},"desc":"Remove unused variable 'onView'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isLoading' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"isLoading"},"fix":{"range":[1101,1114],"text":""},"desc":"Remove unused variable 'isLoading'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherHeaderActions.tsx\n'use client';\n\nimport React from 'react';\nimport { Box, Button } from '@mui/material';\nimport { Add as AddIcon, Edit as EditIcon, Close as CloseIcon } from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\n\ninterface VoucherHeaderActionsProps {\n  mode: 'create' | 'edit' | 'view';\n  voucherType: string; // e.g., 'Purchase Order', 'Sales Voucher', etc.\n  voucherRoute: string; // The base route for this voucher type\n  currentId?: number; // Current voucher ID (for edit route)\n  onEdit?: () => void;\n  onCreate?: () => void;\n  onCancel?: () => void;\n  // Additional props for compatibility\n  onModeChange?: (mode: 'create' | 'edit' | 'view') => void;\n  onModalOpen?: () => void;\n  voucherList?: any[];\n  onView?: (voucher: any) => void;\n  isLoading?: boolean;\n}\n\nconst VoucherHeaderActions: React.FC<VoucherHeaderActionsProps> = ({\n  mode,\n  voucherType,\n  voucherRoute,\n  currentId,\n  onEdit,\n  onCreate,\n  onCancel,\n  // Additional props for compatibility (ignored for now)\n  onModeChange,\n  onModalOpen,\n  voucherList,\n  onView,\n  isLoading,\n}) => {\n  const router = useRouter();\n\n  const handleEditFallback = () => {\n    if (currentId) {\n      router.push(`${voucherRoute}?mode=edit&id=${currentId}`);\n    }\n  };\n\n  const handleCreateFallback = () => {\n    router.push(`${voucherRoute}?mode=create`);\n  };\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n      {mode === 'view' && (\n        <>\n          <Button \n            variant=\"contained\" \n            color=\"success\" \n            startIcon={<AddIcon />}\n            onClick={onCreate ? onCreate : handleCreateFallback}\n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Create {voucherType.toLowerCase()}\n          </Button>\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            startIcon={<EditIcon />}\n            onClick={onEdit ? onEdit : handleEditFallback}\n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Edit {voucherType.toLowerCase()}\n          </Button>\n        </>\n      )}\n      {mode === 'edit' && (\n        <>\n          <Button \n            variant=\"contained\" \n            color=\"success\" \n            startIcon={<AddIcon />}\n            onClick={onCreate ? onCreate : handleCreateFallback}\n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Create {voucherType.toLowerCase()}\n          </Button>\n          <Button \n            form=\"voucherForm\" \n            type=\"submit\" \n            variant=\"contained\" \n            color=\"primary\" \n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Save\n          </Button>\n          <Button \n            variant=\"outlined\" \n            startIcon={<CloseIcon />}\n            onClick={onCancel}\n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Cancel\n          </Button>\n        </>\n      )}\n      {mode === 'create' && (\n        <Button \n          form=\"voucherForm\" \n          type=\"submit\" \n          variant=\"contained\" \n          color=\"primary\" \n          sx={{ fontSize: 12, textTransform: 'uppercase' }}\n        >\n          Save\n        </Button>\n      )}\n    </Box>\n  );\n};\n\nexport default VoucherHeaderActions;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherLayout.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'page' is defined but never used.","line":18,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"page"},"fix":{"range":[608,620],"text":""},"desc":"Remove unused variable 'page'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherTitle' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherTitle"},"fix":{"range":[920,936],"text":""},"desc":"Remove unused variable 'voucherTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showModal' is assigned a value but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"showModal"},"fix":{"range":[1018,1039],"text":""},"desc":"Remove unused variable 'showModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onCloseModal' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"onCloseModal"},"fix":{"range":[1039,1055],"text":""},"desc":"Remove unused variable 'onCloseModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'centerAligned' is assigned a value but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"centerAligned"},"fix":{"range":[1071,1095],"text":""},"desc":"Remove unused variable 'centerAligned'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherLayout.tsx\n// Enhanced VoucherLayout component with comprehensive UI improvements\nimport React from 'react';\nimport { Container, Grid, Paper, Box, Typography, Button, Pagination } from '@mui/material';\nimport { getVoucherStyles } from '../utils/voucherUtils';\n\ninterface VoucherLayoutProps {\n  voucherType: string;\n  voucherTitle?: string;\n  indexContent: React.ReactNode;\n  formContent: React.ReactNode;\n  onShowAll?: () => void;\n  showAllButton?: boolean;\n  // Enhanced pagination props\n  pagination?: {\n    currentPage: number;\n    totalPages: number;\n    onPageChange: (page: number) => void;\n    totalItems: number;\n  };\n  // Additional props for modal functionality\n  showModal?: boolean;\n  onCloseModal?: () => void;\n  modalContent?: React.ReactNode;\n  // Center alignment control\n  centerAligned?: boolean;\n}\n\nconst VoucherLayout: React.FC<VoucherLayoutProps> = ({\n  voucherType,\n  voucherTitle,\n  indexContent,\n  formContent,\n  onShowAll,\n  showAllButton = true,\n  pagination,\n  showModal = false,\n  onCloseModal,\n  modalContent,\n  centerAligned = true\n}) => {\n  const voucherStyles = getVoucherStyles();\n  \n  return (\n    <>\n      <Box sx={{ \n        ...voucherStyles.edgeToEdgeContainer, \n        width: '100%',\n        maxWidth: '100%', \n        overflowX: 'hidden',\n        boxSizing: 'border-box'\n      }}>\n        <Container \n          maxWidth={false} \n          sx={{ \n            padding: 0, \n            margin: 0, \n            width: '100%',\n            maxWidth: '100%', \n            overflowX: 'hidden',\n            boxSizing: 'border-box'\n          }}\n        >\n          {/* Remove redundant top-level title per requirements */}\n          \n          <Grid container spacing={0} sx={{ \n            minHeight: '100vh',\n            width: '100%',\n            margin: 0,\n            '& .MuiGrid-item': {\n              paddingLeft: 0,\n              paddingTop: 0\n            }\n          }}>\n            {/* Index Panel - approximately 40% */}\n            <Grid size={{ xs: 12, md: 5, lg: 4 }} sx={{ \n              borderRight: '1px solid #e0e0e0',\n              maxWidth: { xs: '100%', md: '40%', lg: '33.333%' }\n            }}>\n              <Paper sx={{ \n                p: 1,\n                height: '100vh',\n                borderRadius: 0,\n                boxShadow: 'none',\n                overflow: 'auto',\n                width: '100%',\n                ...voucherStyles.indexContainer\n              }}>\n                <Box \n                  display=\"flex\" \n                  justifyContent=\"space-between\" \n                  alignItems=\"center\" \n                  mb={1}\n                  sx={{ width: '100%' }}\n                >\n                  <Typography \n                    variant=\"h6\" \n                    sx={{ \n                      fontSize: 18, \n                      fontWeight: 'bold', \n                      flex: 1,\n                      ...voucherStyles.centerText\n                    }}\n                  >\n                    {voucherType}\n                  </Typography>\n                  {showAllButton && (\n                    <Button \n                      variant=\"outlined\" \n                      size=\"small\" \n                      onClick={onShowAll}\n                      sx={{ ml: 1 }}\n                    >\n                      Show All\n                    </Button>\n                  )}\n                </Box>\n                \n                {/* Index Content */}\n                <Box sx={{ width: '100%' }}>\n                  {indexContent}\n                </Box>\n                \n                {/* Pagination for index if provided */}\n                {pagination && (\n                  <Box sx={voucherStyles.paginationContainer}>\n                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\n                      <Typography variant=\"caption\" sx={{ fontSize: '0.75rem', color: 'text.secondary' }}>\n                        Page {pagination.currentPage} of {pagination.totalPages} \n                        ({pagination.totalItems} total items)\n                      </Typography>\n                      <Pagination\n                        count={pagination.totalPages}\n                        page={pagination.currentPage}\n                        onChange={(_, page) => pagination.onPageChange(page)}\n                        size=\"small\"\n                        color=\"primary\"\n                        showFirstButton\n                        showLastButton\n                      />\n                    </Box>\n                  </Box>\n                )}\n              </Paper>\n            </Grid>\n\n            {/* Form Panel - approximately 60% */}\n            <Grid size={{ xs: 12, md: 7, lg: 8 }} sx={{\n              maxWidth: { xs: '100%', md: '60%', lg: '66.667%' }\n            }}>\n              <Paper sx={{ \n                p: 1,\n                height: '100vh',\n                borderRadius: 0,\n                boxShadow: 'none',\n                overflow: 'auto',\n                width: '100%',\n                ...voucherStyles.formContainer\n              }}>\n                {formContent}\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n      \n      {/* Modal Content */}\n      {modalContent}\n    </>\n  );\n};\n\nexport default VoucherLayout;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherListModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":30,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[623,635],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":31,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[658,668],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":32,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[691,701],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":33,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[726,736],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":34,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[766,778],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":251,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":251,"endColumn":38},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":252,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":252,"endColumn":38},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":253,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":253,"endColumn":42}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherListModal.tsx\n// Reusable modal component for displaying voucher lists with clickable functionality\n\nimport React, { useState } from 'react';\nimport {\n  Modal,\n  Box,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  TextField,\n  Button,\n  Grid,\n  Chip,\n  IconButton,\n} from '@mui/material';\nimport { Close, Search } from '@mui/icons-material';\nimport VoucherContextMenu from './VoucherContextMenu';\n\ninterface VoucherListModalProps {\n  open: boolean;\n  onClose: () => void;\n  voucherType: string;\n  vouchers: any[];\n  onVoucherClick: (voucher: any) => void;\n  onEdit?: (id: number) => void;\n  onView?: (id: number) => void;\n  onDelete?: (id: number) => void;\n  onGeneratePDF?: (voucher: any) => void;\n  customerList?: any[];\n  vendorList?: any[];\n}\n\nconst VoucherListModal: React.FC<VoucherListModalProps> = ({\n  open,\n  onClose,\n  voucherType,\n  vouchers,\n  onVoucherClick,\n  onEdit,\n  onView,\n  onDelete,\n  onGeneratePDF,\n  customerList = [],\n  vendorList = [],\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n  const [contextMenu, setContextMenu] = useState<{ mouseX: number; mouseY: number; voucher: any } | null>(null);\n\n  // Filter vouchers based on search criteria\n  const filteredVouchers = vouchers.filter((voucher) => {\n    const matchesSearch = searchTerm === '' || \n      voucher.voucher_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      voucher.reference?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      voucher.notes?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesFromDate = fromDate === '' || new Date(voucher.date) >= new Date(fromDate);\n    const matchesToDate = toDate === '' || new Date(voucher.date) <= new Date(toDate);\n    \n    return matchesSearch && matchesFromDate && matchesToDate;\n  });\n\n  const handleContextMenu = (event: React.MouseEvent, voucher: any) => {\n    event.preventDefault();\n    setContextMenu(\n      contextMenu === null\n        ? { mouseX: event.clientX, mouseY: event.clientY, voucher }\n        : null,\n    );\n  };\n\n  const handleCloseContextMenu = () => {\n    setContextMenu(null);\n  };\n\n  const handleVoucherClick = (voucher: any, event: React.MouseEvent) => {\n    // Don't trigger if right-click (context menu)\n    if (event.button === 2) {return;}\n    \n    onVoucherClick(voucher);\n    onClose(); // Close modal after selection\n  };\n\n  const getEntityName = (voucher: any) => {\n    if (voucher.customer_id && customerList.length > 0) {\n      return customerList.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A';\n    }\n    if (voucher.vendor_id && vendorList.length > 0) {\n      return vendorList.find((v: any) => v.id === voucher.vendor_id)?.name || 'N/A';\n    }\n    return 'N/A';\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) {return 'N/A';}\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const modalStyle = {\n    position: 'absolute' as const,\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '90%',\n    maxWidth: 1000,\n    bgcolor: 'background.paper',\n    boxShadow: 24,\n    p: 4,\n    borderRadius: 2,\n    maxHeight: '90vh',\n    overflow: 'auto',\n  };\n\n  return (\n    <>\n      <Modal open={open} onClose={onClose}>\n        <Box sx={modalStyle}>\n          {/* Header */}\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">\n              All {voucherType}\n            </Typography>\n            <IconButton onClick={onClose}>\n              <Close />\n            </IconButton>\n          </Box>\n\n          {/* Search Filters */}\n          <Grid container spacing={2} sx={{ mb: 3 }}>\n            <Grid size={{ xs: 12, md: 4 }}>\n              <TextField\n                label=\"Search\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                fullWidth\n                placeholder=\"Voucher number, reference, notes...\"\n                InputProps={{\n                  startAdornment: <Search sx={{ mr: 1, color: 'text.secondary' }} />\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 6, md: 3 }}>\n              <TextField\n                label=\"From Date\"\n                type=\"date\"\n                value={fromDate}\n                onChange={(e) => setFromDate(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                fullWidth\n              />\n            </Grid>\n            <Grid size={{ xs: 6, md: 3 }}>\n              <TextField\n                label=\"To Date\"\n                type=\"date\"\n                value={toDate}\n                onChange={(e) => setToDate(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                fullWidth\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 2 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={() => {\n                  setSearchTerm('');\n                  setFromDate('');\n                  setToDate('');\n                }}\n                fullWidth\n                sx={{ height: '56px' }}\n              >\n                Clear\n              </Button>\n            </Grid>\n          </Grid>\n\n          {/* Results Summary */}\n          <Box sx={{ mb: 2 }}>\n            <Chip\n              label={`${filteredVouchers.length} of ${vouchers.length} vouchers`}\n              color=\"primary\"\n              variant=\"outlined\"\n            />\n          </Box>\n\n          {/* Voucher Table */}\n          <TableContainer component={Paper} sx={{ maxHeight: 400 }}>\n            <Table stickyHeader size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold' }}>Voucher No.</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold' }}>Date</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold' }}>Customer</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold' }}>Amount</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredVouchers.map((voucher) => (\n                  <TableRow\n                    key={voucher.id}\n                    hover\n                    onClick={(e) => handleVoucherClick(voucher, e)}\n                    onContextMenu={(e) => handleContextMenu(e, voucher)}\n                    sx={{\n                      cursor: 'pointer',\n                      '&:hover': {\n                        backgroundColor: 'action.hover',\n                      },\n                    }}\n                  >\n                    <TableCell align=\"center\">\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {voucher.voucher_number}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"center\">{formatDate(voucher.date)}</TableCell>\n                    <TableCell align=\"center\">{getEntityName(voucher)}</TableCell>\n                    <TableCell align=\"center\">\n                      ₹{voucher.total_amount?.toLocaleString() || '0'}\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredVouchers.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={4} align=\"center\">\n                      <Typography color=\"text.secondary\">\n                        No vouchers found matching your criteria\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      </Modal>\n\n      {/* Context Menu */}\n      {contextMenu && (\n        <VoucherContextMenu\n          voucher={contextMenu.voucher}\n          voucherType={voucherType}\n          onView={onView || (() => {})}\n          onEdit={onEdit || (() => {})}\n          onDelete={onDelete || (() => {})}\n          onPrint={onGeneratePDF ? () => onGeneratePDF(contextMenu.voucher) : undefined}\n          open={true}\n          onClose={handleCloseContextMenu}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{ top: contextMenu.mouseY, left: contextMenu.mouseX }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default VoucherListModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherReferenceDropdown.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'reference' is defined but never used.","line":29,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":4,"suggestions":[{"messageId":"removeVar","data":{"varName":"reference"},"fix":{"range":[642,742],"text":""},"desc":"Remove unused variable 'reference'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceData' is defined but never used.","line":35,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceData"},"fix":{"range":[800,818],"text":""},"desc":"Remove unused variable 'referenceData'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchReferenceDocuments' was used before it was defined.","line":55,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":55,"endColumn":30},{"ruleId":"no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 40 column 3.","line":169,"column":46,"nodeType":"Identifier","messageId":"noShadow","endLine":169,"endColumn":51},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 40 column 3.","line":169,"column":46,"nodeType":"Identifier","messageId":"noShadow","endLine":169,"endColumn":51}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherReferenceDropdown.tsx\n// Reference column dropdown component for voucher types\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  TextField,\n  Autocomplete,\n  Typography,\n  Grid,\n  CircularProgress,\n  Alert,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel,\n  Popper\n} from '@mui/material';\nimport { getReferenceVoucherOptions, getVoucherConfig } from '../utils/voucherUtils';\nimport api from '../lib/api';\n\ninterface VoucherReferenceDropdownProps {\n  voucherType: string;\n  value?: {\n    referenceType?: string;\n    referenceId?: number;\n    referenceNumber?: string;\n  };\n  onChange: (reference: {\n    referenceType?: string;\n    referenceId?: number;\n    referenceNumber?: string;\n  }) => void;\n  disabled?: boolean;\n  onReferenceSelected?: (referenceData: any) => void;\n}\n\nconst VoucherReferenceDropdown: React.FC<VoucherReferenceDropdownProps> = ({\n  voucherType,\n  value = {},\n  onChange,\n  disabled = false,\n  onReferenceSelected\n}) => {\n  const [referenceOptions, setReferenceOptions] = useState<any[]>([]);\n  const [loadingReferences, setLoadingReferences] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const config = getVoucherConfig(voucherType as any);\n  const allowedTypes = getReferenceVoucherOptions(voucherType as any);\n\n  // Fetch reference documents when reference type changes\n  useEffect(() => {\n    if (value.referenceType && config.referenceConfig) {\n      fetchReferenceDocuments(value.referenceType);\n    }\n  }, [value.referenceType, config.referenceConfig]);\n\n  // If this voucher type doesn't support references, don't render\n  if (!config.referenceConfig) {\n    return null;\n  }\n\n  const fetchReferenceDocuments = async (referenceType: string) => {\n    setLoadingReferences(true);\n    setError(null);\n    \n    try {\n      const typeConfig = getVoucherConfig(referenceType as any);\n      const response = await api.get(`${typeConfig.endpoint}?limit=100&sort=desc`);\n      \n      if (response.data) {\n        const documents = Array.isArray(response.data) ? response.data : [response.data];\n        setReferenceOptions(documents.map((doc: any) => ({\n          id: doc.id,\n          label: `${doc.voucher_number || doc.number}`,\n          value: doc.id,\n          data: doc\n        })));\n      }\n    } catch (err) {\n      console.error('Error fetching reference documents:', err);\n      setError('Failed to load reference documents');\n      setReferenceOptions([]);\n    } finally {\n      setLoadingReferences(false);\n    }\n  };\n\n  const handleTypeChange = (newType: string) => {\n    onChange({\n      referenceType: newType,\n      referenceId: undefined,\n      referenceNumber: undefined\n    });\n    setReferenceOptions([]);\n  };\n\n  const handleDocumentChange = (selectedOption: any) => {\n    if (selectedOption) {\n      const newReference = {\n        referenceType: value.referenceType,\n        referenceId: selectedOption.value,\n        referenceNumber: selectedOption.data.voucher_number || selectedOption.data.number\n      };\n      \n      onChange(newReference);\n      \n      // Call callback with full reference data for auto-population\n      if (onReferenceSelected) {\n        onReferenceSelected(selectedOption.data);\n      }\n    } else {\n      onChange({\n        referenceType: value.referenceType,\n        referenceId: undefined,\n        referenceNumber: undefined\n      });\n    }\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Grid container spacing={2}>\n        {/* Reference Type Selection */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel \n              id=\"reference-type-label\"\n              style={{ fontSize: 12 }}\n              shrink\n            >\n              Reference Type\n            </InputLabel>\n            <Select\n              labelId=\"reference-type-label\"\n              value={value.referenceType || ''}\n              onChange={(e) => handleTypeChange(e.target.value)}\n              disabled={disabled}\n              label=\"Reference Type\"\n              sx={{ \n                height: 27,\n                '& .MuiSelect-select': { \n                  fontSize: 14,\n                  textAlign: 'center'\n                }\n              }}\n            >\n              {allowedTypes.map((type) => (\n                <MenuItem key={type.value} value={type.value}>\n                  {type.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        {/* Reference Document Selection */}\n        {value.referenceType && (\n          <Grid size={{ xs: 12, md: 6 }}>\n            <Autocomplete\n              size=\"small\"\n              options={referenceOptions}\n              value={referenceOptions.find(opt => opt.value === value.referenceId) || null}\n              onChange={(_, newValue) => handleDocumentChange(newValue)}\n              disabled={disabled || loadingReferences}\n              loading={loadingReferences}\n              getOptionLabel={(option) => option.label || ''}\n              isOptionEqualToValue={(option, value) => option.value === value.value}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label={config.referenceConfig?.label || 'Reference Document'}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ \n                    ...params.inputProps,\n                    style: { fontSize: 14, textAlign: 'center' }\n                  }}\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                      <>\n                        {loadingReferences ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                        {params.InputProps.endAdornment}\n                      </>\n                    ),\n                  }}\n                />\n              )}\n              renderOption={(props, option) => (\n                <Box component=\"li\" {...props} key={option.value}>\n                  <Typography variant=\"body2\" sx={{ fontSize: 13 }}>\n                    {option.label}\n                  </Typography>\n                </Box>\n              )}\n              noOptionsText={\n                value.referenceType \n                  ? `No ${allowedTypes.find(t => t.value === value.referenceType)?.label || 'documents'} found`\n                  : 'Select reference type first'\n              }\n              PopperComponent={(props) => <Popper {...props} sx={{ width: '400px !important' }} />}\n            />\n          </Grid>\n        )}\n      </Grid>\n\n      {/* Error Display */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mt: 1, fontSize: 12 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Selected Reference Info */}\n      {value.referenceId && value.referenceNumber && (\n        <Typography \n          variant=\"body2\" \n          sx={{ \n            mt: 1, \n            fontSize: 12, \n            textAlign: 'center',\n            color: 'primary.main',\n            fontWeight: 'medium'\n          }}\n        >\n          Referenced: {value.referenceNumber}\n        </Typography>\n      )}\n    </Box>\n  );\n};\n\nexport default VoucherReferenceDropdown;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/AddUserDialog.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/BalanceDisplay.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/CompanyLogoUpload.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/ContactManagement.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'render' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"render"},"fix":{"range":[9,16],"text":""},"desc":"Remove unused variable 'render'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'screen' is defined but never used.","line":1,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"screen"},"fix":{"range":[15,23],"text":""},"desc":"Remove unused variable 'screen'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\n\n// Simple utility function test for sales CRM\ndescribe('Sales CRM Utilities', () => {\n  it('should format currency correctly', () => {\n    const formatCurrency = (amount: number): string => {\n      return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(amount);\n    };\n\n    expect(formatCurrency(1000)).toBe('$1,000.00');\n    expect(formatCurrency(150000)).toBe('$150,000.00');\n  });\n\n  it('should calculate commission correctly', () => {\n    const calculateCommission = (dealAmount: number, rate: number): number => {\n      return dealAmount * (rate / 100);\n    };\n\n    expect(calculateCommission(100000, 8)).toBe(8000);\n    expect(calculateCommission(50000, 10)).toBe(5000);\n  });\n\n  it('should validate PAN number format', () => {\n    const validatePAN = (pan: string): boolean => {\n      const panRegex = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;\n      return panRegex.test(pan);\n    };\n\n    expect(validatePAN('ABCDE1234F')).toBe(true);\n    expect(validatePAN('INVALID')).toBe(false);\n    expect(validatePAN('abcde1234f')).toBe(false);\n  });\n\n  it('should validate Aadhaar number format', () => {\n    const validateAadhaar = (aadhaar: string): boolean => {\n      const aadhaarRegex = /^[0-9]{12}$/;\n      return aadhaarRegex.test(aadhaar);\n    };\n\n    expect(validateAadhaar('123456789012')).toBe(true);\n    expect(validateAadhaar('12345678901')).toBe(false); // 11 digits\n    expect(validateAadhaar('1234567890123')).toBe(false); // 13 digits\n    expect(validateAadhaar('12345678901a')).toBe(false); // contains letter\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/CreateVoucherButton.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/EmployeeKYC.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'render' is defined but never used.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"render"},"fix":{"range":[9,16],"text":""},"desc":"Remove unused variable 'render'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'screen' is defined but never used.","line":1,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"screen"},"fix":{"range":[15,23],"text":""},"desc":"Remove unused variable 'screen'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\n\n// Employee management utility functions test\ndescribe('Employee Management Utilities', () => {\n  it('should generate employee code correctly', () => {\n    const generateEmployeeCode = (department: string, sequence: number): string => {\n      const deptCode = department.substring(0, 3).toUpperCase();\n      const seqCode = sequence.toString().padStart(3, '0');\n      return `${deptCode}${seqCode}`;\n    };\n\n    expect(generateEmployeeCode('Engineering', 1)).toBe('ENG001');\n    expect(generateEmployeeCode('Human Resources', 25)).toBe('HUM025');\n    expect(generateEmployeeCode('IT', 123)).toBe('IT123');\n  });\n\n  it('should validate Indian KYC fields', () => {\n    // PAN validation\n    const validatePAN = (pan: string): boolean => {\n      const panRegex = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;\n      return panRegex.test(pan);\n    };\n\n    // Aadhaar validation\n    const validateAadhaar = (aadhaar: string): boolean => {\n      const aadhaarRegex = /^[0-9]{12}$/;\n      return aadhaarRegex.test(aadhaar);\n    };\n\n    // IFSC validation\n    const validateIFSC = (ifsc: string): boolean => {\n      const ifscRegex = /^[A-Z]{4}0[A-Z0-9]{6}$/;\n      return ifscRegex.test(ifsc);\n    };\n\n    // Test PAN validation\n    expect(validatePAN('ABCDE1234F')).toBe(true);\n    expect(validatePAN('INVALID')).toBe(false);\n\n    // Test Aadhaar validation\n    expect(validateAadhaar('123456789012')).toBe(true);\n    expect(validateAadhaar('12345678901')).toBe(false);\n\n    // Test IFSC validation\n    expect(validateIFSC('SBIN0001234')).toBe(true);\n    expect(validateIFSC('INVALID')).toBe(false);\n  });\n\n  it('should calculate employee tenure correctly', () => {\n    const calculateTenure = (hireDate: string): number => {\n      const hire = new Date(hireDate);\n      const now = new Date('2024-01-01'); // Fixed date for testing\n      const diffTime = Math.abs(now.getTime() - hire.getTime());\n      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n      return Math.floor(diffDays / 365); // Years\n    };\n\n    expect(calculateTenure('2022-01-01')).toBe(2);\n    expect(calculateTenure('2023-01-01')).toBe(1);\n    expect(calculateTenure('2024-01-01')).toBe(0);\n  });\n\n  it('should format employee status correctly', () => {\n    const getStatusDisplayName = (status: string): string => {\n      const statusMap: Record<string, string> = {\n        'active': 'Active',\n        'inactive': 'Inactive',\n        'on_leave': 'On Leave',\n        'terminated': 'Terminated'\n      };\n      return statusMap[status] || status;\n    };\n\n    expect(getStatusDisplayName('active')).toBe('Active');\n    expect(getStatusDisplayName('on_leave')).toBe('On Leave');\n    expect(getStatusDisplayName('unknown')).toBe('unknown');\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/ExportPrintToolbar.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":113,"column":80,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":113,"endColumn":82}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test file for ExportPrintToolbar component\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport ExportPrintToolbar from '../ExportPrintToolbar';\nimport { saveAs } from 'file-saver';\n\n// Mock file-saver\njest.mock('file-saver', () => ({\n  saveAs: jest.fn()\n}));\n\nconst mockSaveAs = saveAs as jest.MockedFunction<typeof saveAs>;\n\ndescribe('ExportPrintToolbar', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock window.print\n    Object.defineProperty(window, 'print', {\n      value: jest.fn(),\n      writable: true\n    });\n  });\n\n  describe('Default Behavior', () => {\n    it('should render export and print buttons by default', () => {\n      const mockExportExcel = jest.fn();\n      const mockExportCSV = jest.fn();\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n          onExportCSV={mockExportCSV}\n        />\n      );\n      \n      expect(screen.getByText('Export')).toBeInTheDocument();\n      expect(screen.getByLabelText('Print report')).toBeInTheDocument();\n    });\n\n    it('should show export menu when export button is clicked', async () => {\n      const mockExportExcel = jest.fn();\n      const mockExportCSV = jest.fn();\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n          onExportCSV={mockExportCSV}\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Export to Excel')).toBeInTheDocument();\n        expect(screen.getByText('Export to CSV')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Excel Export', () => {\n    it('should call onExportExcel when Excel option is clicked', async () => {\n      const mockExportExcel = jest.fn().mockResolvedValue(new Blob(['test'], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }));\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n          filename=\"test_report\"\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n      \n      expect(mockExportExcel).toHaveBeenCalled();\n    });\n\n    it('should save file with correct filename', async () => {\n      const mockBlob = new Blob(['test'], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n      const mockExportExcel = jest.fn().mockResolvedValue(mockBlob);\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n          filename=\"sales_report\"\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n      \n      await waitFor(() => {\n        expect(mockSaveAs).toHaveBeenCalledWith(mockBlob, 'sales_report.xlsx');\n      });\n    });\n\n    it('should handle export errors gracefully', async () => {\n      const mockExportExcel = jest.fn().mockRejectedValue(new Error('Export failed'));\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n      \n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith('Error exporting Excel:', expect.any(Error));\n      });\n      \n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('CSV Export', () => {\n    it('should call onExportCSV when CSV option is clicked', async () => {\n      const mockExportCSV = jest.fn().mockResolvedValue(new Blob(['test'], { type: 'text/csv' }));\n      \n      render(\n        <ExportPrintToolbar\n          onExportCSV={mockExportCSV}\n          filename=\"test_report\"\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        const csvOption = screen.getByText('Export to CSV');\n        fireEvent.click(csvOption);\n      });\n      \n      expect(mockExportCSV).toHaveBeenCalled();\n    });\n\n    it('should save CSV file with correct filename', async () => {\n      const mockBlob = new Blob(['test'], { type: 'text/csv' });\n      const mockExportCSV = jest.fn().mockResolvedValue(mockBlob);\n      \n      render(\n        <ExportPrintToolbar\n          onExportCSV={mockExportCSV}\n          filename=\"inventory_report\"\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        const csvOption = screen.getByText('Export to CSV');\n        fireEvent.click(csvOption);\n      });\n      \n      await waitFor(() => {\n        expect(mockSaveAs).toHaveBeenCalledWith(mockBlob, 'inventory_report.csv');\n      });\n    });\n  });\n\n  describe('Print Functionality', () => {\n    it('should call window.print by default when print button is clicked', () => {\n      render(<ExportPrintToolbar />);\n      \n      const printButton = screen.getByLabelText('Print report');\n      fireEvent.click(printButton);\n      \n      expect(window.print).toHaveBeenCalled();\n    });\n\n    it('should call custom onPrint function when provided', () => {\n      const mockOnPrint = jest.fn();\n      \n      render(<ExportPrintToolbar onPrint={mockOnPrint} />);\n      \n      const printButton = screen.getByLabelText('Print report');\n      fireEvent.click(printButton);\n      \n      expect(mockOnPrint).toHaveBeenCalled();\n      expect(window.print).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Conditional Rendering', () => {\n    it('should not show export button when no export handlers provided', () => {\n      render(<ExportPrintToolbar showExcel={false} showCSV={false} />);\n      \n      expect(screen.queryByText('Export')).not.toBeInTheDocument();\n      expect(screen.getByLabelText('Print report')).toBeInTheDocument();\n    });\n\n    it('should not show print button when showPrint is false', () => {\n      render(<ExportPrintToolbar showPrint={false} />);\n      \n      expect(screen.queryByLabelText('Print report')).not.toBeInTheDocument();\n    });\n\n    it('should only show Excel option when showCSV is false', async () => {\n      const mockExportExcel = jest.fn();\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n          showCSV={false}\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Export to Excel')).toBeInTheDocument();\n        expect(screen.queryByText('Export to CSV')).not.toBeInTheDocument();\n      });\n    });\n\n    it('should only show CSV option when showExcel is false', async () => {\n      const mockExportCSV = jest.fn();\n      \n      render(\n        <ExportPrintToolbar\n          onExportCSV={mockExportCSV}\n          showExcel={false}\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Export to CSV')).toBeInTheDocument();\n        expect(screen.queryByText('Export to Excel')).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Loading and Disabled States', () => {\n    it('should disable buttons when disabled prop is true', () => {\n      const mockExportExcel = jest.fn();\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n          disabled={true}\n        />\n      );\n      \n      expect(screen.getByText('Export')).toBeDisabled();\n      expect(screen.getByLabelText('Print report')).toBeDisabled();\n    });\n\n    it('should show loading indicator when loading is true', () => {\n      const mockExportExcel = jest.fn();\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n          loading={true}\n        />\n      );\n      \n      expect(screen.getByText('Export')).toBeDisabled();\n      expect(screen.getByLabelText('Print report')).toBeDisabled();\n      // Check for loading indicator (CircularProgress)\n      expect(document.querySelector('.MuiCircularProgress-root')).toBeInTheDocument();\n    });\n\n    it('should disable export options during export', async () => {\n      const mockExportExcel = jest.fn().mockImplementation(() => \n        new Promise(resolve => setTimeout(() => resolve(new Blob(['test'])), 100))\n      );\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      fireEvent.click(exportButton);\n      \n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n      \n      // Menu should close and buttons should be disabled during export\n      expect(screen.queryByText('Export to Excel')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA labels', () => {\n      const mockExportExcel = jest.fn();\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n        />\n      );\n      \n      expect(screen.getByLabelText('Export options')).toBeInTheDocument();\n      expect(screen.getByLabelText('Print report')).toBeInTheDocument();\n    });\n\n    it('should be keyboard accessible', () => {\n      const mockExportExcel = jest.fn();\n      \n      render(\n        <ExportPrintToolbar\n          onExportExcel={mockExportExcel}\n        />\n      );\n      \n      const exportButton = screen.getByText('Export');\n      \n      // Should be focusable\n      exportButton.focus();\n      expect(exportButton).toHaveFocus();\n      \n      // Should work with Enter key\n      fireEvent.keyDown(exportButton, { key: 'Enter', code: 'Enter' });\n      // Menu should open (we can test this by checking if menu items are rendered)\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/FactoryReset.test.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"message"},"fix":{"range":[538,569],"text":""},"desc":"Remove unused variable 'message'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// New: v1/frontend/src/components/__tests__/FactoryReset.test.tsx\n\nimport React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react';\n// Update the import path below if FactoryReset is located elsewhere\nimport FactoryReset from '../../pages/settings/FactoryReset';\n// Update the path below to the correct location of AuthContext\nimport { useAuth } from '../../context/AuthContext';\n// Update the path below to the correct location of resetService\nimport * as resetService from '../../services/resetService';\nimport { message } from 'antd';\n\njest.mock('../../../context/AuthContext');\njest.mock('../../../services/resetService');\njest.mock('antd', () => ({\n  ...jest.requireActual('antd'),\n  message: { success: jest.fn(), error: jest.fn() },\n}));\n\ndescribe('FactoryReset Component', () => {\n  const mockRequestResetOTP = jest.spyOn(resetService, 'requestResetOTP');\n  const mockConfirmReset = jest.spyOn(resetService, 'confirmReset');\n\n  beforeEach(() => {\n    (useAuth as jest.Mock).mockReturnValue({\n      user: { is_super_admin: true },\n    });\n  });\n\n  test('renders button for super admin', () => {\n    const { getByText } = render(<FactoryReset />);\n    expect(getByText('Factory Reset')).toBeInTheDocument();\n  });\n\n  test('requests OTP on button click', async () => {\n    mockRequestResetOTP.mockResolvedValue({});\n    const { getByText } = render(<FactoryReset />);\n    fireEvent.click(getByText('Factory Reset'));\n    await waitFor(() => expect(mockRequestResetOTP).toHaveBeenCalled());\n  });\n\n  test('confirms reset with OTP', async () => {\n    mockConfirmReset.mockResolvedValue({});\n    const { getByPlaceholderText, getByText } = render(<FactoryReset />);\n    // Simulate modal open\n    fireEvent.change(getByPlaceholderText('OTP'), { target: { value: '123456' } });\n    fireEvent.click(getByText('OK'));\n    await waitFor(() => expect(mockConfirmReset).toHaveBeenCalledWith('123456'));\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/MegaMenu.logo.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/StockDisplay.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/UnifiedLoginForm.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/UserManagement.test.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":51,"column":51,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":56}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test file for organization-scoped user management components\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport UserManagement from '../pages/settings/user-management';\nimport { organizationService } from '../services/organizationService';\n\n// Mock the services\njest.mock('../services/organizationService');\njest.mock('../services/authService');\njest.mock('../context/AuthContext');\njest.mock('next/router', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    pathname: '/settings/user-management'\n  })\n}));\n\nconst mockOrganizationService = organizationService as jest.Mocked<typeof organizationService>;\n\n// Mock auth context\nconst mockAuthContext = {\n  user: {\n    id: 1,\n    email: 'admin@testorg.com',\n    role: 'org_admin',\n    organization_id: 1,\n    is_super_admin: false,\n    full_name: 'Test Admin'\n  },\n  isAuthenticated: true,\n  login: jest.fn(),\n  logout: jest.fn()\n};\n\njest.mock('../context/AuthContext', () => ({\n  useAuth: () => mockAuthContext\n}));\n\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false }\n    }\n  });\n  \n  const TestProvider = ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n  \n  TestProvider.displayName = 'TestProvider';\n  \n  return TestProvider;\n};\n\ndescribe('UserManagement Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock successful API responses\n    mockOrganizationService.getOrganizationUsers.mockResolvedValue([\n      {\n        id: 2,\n        email: 'user@testorg.com',\n        username: 'testuser',\n        full_name: 'Test User',\n        role: 'standard_user',\n        is_active: true,\n        created_at: '2024-01-01T00:00:00Z',\n        department: 'IT',\n        designation: 'Developer'\n      }\n    ]);\n  });\n\n  test('should render user management page with organization context', async () => {\n    render(<UserManagement />, { wrapper: createWrapper() });\n    \n    // Check for organization context in header\n    expect(screen.getByText('User Management')).toBeInTheDocument();\n    expect(screen.getByText(/Managing users for your organization/)).toBeInTheDocument();\n    \n    // Check for add user button (org admin should have access)\n    expect(screen.getByText('Add New User')).toBeInTheDocument();\n  });\n\n  test('should call organization-scoped API to fetch users', async () => {\n    render(<UserManagement />, { wrapper: createWrapper() });\n    \n    await waitFor(() => {\n      expect(mockOrganizationService.getOrganizationUsers).toHaveBeenCalledWith(1);\n    });\n  });\n\n  test('should display users from organization', async () => {\n    render(<UserManagement />, { wrapper: createWrapper() });\n    \n    await waitFor(() => {\n      expect(screen.getByText('user@testorg.com')).toBeInTheDocument();\n      expect(screen.getByText('Test User')).toBeInTheDocument();\n      expect(screen.getByText('standard_user')).toBeInTheDocument();\n    });\n  });\n\n  test('should open create user dialog when add button is clicked', async () => {\n    render(<UserManagement />, { wrapper: createWrapper() });\n    \n    const addButton = screen.getByText('Add New User');\n    fireEvent.click(addButton);\n    \n    await waitFor(() => {\n      expect(screen.getByText(/Create New User/i)).toBeInTheDocument();\n    });\n  });\n\n  test('should call organization-scoped API to create user', async () => {\n    mockOrganizationService.createUserInOrganization.mockResolvedValue({\n      id: 3,\n      email: 'newuser@testorg.com',\n      username: 'newuser',\n      full_name: 'New User',\n      role: 'standard_user',\n      is_active: true,\n      organization_id: 1\n    });\n\n    render(<UserManagement />, { wrapper: createWrapper() });\n    \n    // Open create dialog\n    fireEvent.click(screen.getByText('Add New User'));\n    \n    await waitFor(() => {\n      expect(screen.getByText(/Create New User/i)).toBeInTheDocument();\n    });\n    \n    // Fill form (simplified - would need to find actual form fields)\n    // In a real test, you'd fill the form fields and submit\n    \n    // Simulate form submission\n    // This would trigger createUserInOrganization with organization ID\n    // expect(mockOrganizationService.createUserInOrganization).toHaveBeenCalledWith(1, expect.any(Object));\n  });\n\n  test('should show access denied for standard users', () => {\n    // Mock as standard user\n    const standardUserContext = {\n      ...mockAuthContext,\n      user: {\n        ...mockAuthContext.user,\n        role: 'standard_user'\n      }\n    };\n\n     \n    jest.mocked(require('../context/AuthContext').useAuth).mockReturnValue(standardUserContext);\n    \n    render(<UserManagement />, { wrapper: createWrapper() });\n    \n    expect(screen.getByText(/You don't have permission to manage users/)).toBeInTheDocument();\n  });\n});\n\ndescribe('OrganizationService Integration', () => {\n  test('should call correct organization-scoped endpoints', () => {\n    const orgId = 123;\n    const userId = 456;\n    const userData = { name: 'Test User' };\n\n    // Test all the new methods\n    mockOrganizationService.getOrganizationUsers(orgId);\n    expect(mockOrganizationService.getOrganizationUsers).toHaveBeenCalledWith(orgId);\n\n    mockOrganizationService.createUserInOrganization(orgId, userData);\n    expect(mockOrganizationService.createUserInOrganization).toHaveBeenCalledWith(orgId, userData);\n\n    mockOrganizationService.updateUserInOrganization(orgId, userId, userData);\n    expect(mockOrganizationService.updateUserInOrganization).toHaveBeenCalledWith(orgId, userId, userData);\n\n    mockOrganizationService.deleteUserFromOrganization(orgId, userId);\n    expect(mockOrganizationService.deleteUserFromOrganization).toHaveBeenCalledWith(orgId, userId);\n\n    mockOrganizationService.getOrganizationInvitations(orgId);\n    expect(mockOrganizationService.getOrganizationInvitations).toHaveBeenCalledWith(orgId);\n\n    mockOrganizationService.resendInvitation(orgId, 789);\n    expect(mockOrganizationService.resendInvitation).toHaveBeenCalledWith(orgId, 789);\n\n    mockOrganizationService.cancelInvitation(orgId, 789);\n    expect(mockOrganizationService.cancelInvitation).toHaveBeenCalledWith(orgId, 789);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/__tests__/VoucherContextMenu.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/constants/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/AuthContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":13,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[487,505],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updatedData' is defined but never used.","line":16,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"updatedData"},"fix":{"range":[598,624],"text":""},"desc":"Remove unused variable 'updatedData'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":22,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":22,"endColumn":29},{"ruleId":"no-use-before-define","severity":2,"message":"'handlePostLoginRedirect' was used before it was defined.","line":82,"column":9,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":82,"endColumn":32},{"ruleId":"no-use-before-define","severity":2,"message":"'restoreFormData' was used before it was defined.","line":162,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":162,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'formKey' is defined but never used.","line":187,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"formKey"},"fix":{"range":[7152,7159],"text":""},"desc":"Remove unused variable 'formKey'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":414,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":414,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":422,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":422,"endColumn":43}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/AuthContext.tsx\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useRouter } from 'next/router';\nimport { toast } from 'react-toastify';\nimport { authService } from '../services/authService';\nimport { User, getDisplayRole } from '../types/user.types';\nimport { markAuthReady, resetAuthReady } from '../lib/api';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  displayRole: string | null;\n  login: (loginResponse: any) => Promise<void>;\n  logout: () => void;\n  refreshUser: () => Promise<void>;\n  updateUser: (updatedData: Partial<User>) => void;\n  isOrgContextReady: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  // -- Fetch the current user from API using the token in localStorage --\n  // NOTE: This should only be called for:\n  // 1. Initial auth state check on app mount\n  // 2. Manual user refresh (e.g., after profile updates)  \n  // DO NOT call this during login - use the user data from login response instead\n  const fetchUser = async (retryCount = 0) => {\n    const maxRetries = 2;\n    console.log(`[AuthProvider] fetchUser started - attempt ${retryCount + 1}/${maxRetries + 1}`, {\n      hasToken: !!localStorage.getItem('token'),\n      timestamp: new Date().toISOString()\n    });\n    \n    try {\n      const currentToken = localStorage.getItem('token');\n      if (!currentToken) {\n        console.log('[AuthProvider] No token found in localStorage');\n        throw new Error('No token found');\n      }\n      \n      console.log('[AuthProvider] Token found, fetching user data from API');\n      const userData = await authService.getCurrentUser();\n      \n      console.log('[AuthProvider] User data received from API:', {\n        userId: userData.id,\n        email: userData.email,\n        role: userData.role,\n        isSuperAdmin: userData.is_super_admin,\n        hasOrgId: !!userData.organization_id,\n        mustChangePassword: userData.must_change_password\n      });\n\n      // Defensive: org ID should never be leaked between users\n      const newUser = {\n        id: userData.id,\n        email: userData.email,\n        role: userData.role,\n        is_super_admin: userData.is_super_admin,\n        organization_id: userData.organization_id,\n        must_change_password: userData.must_change_password,\n      };\n      \n      setUser(newUser);\n      console.log('[AuthProvider] User state updated successfully');\n\n      // Check org context for non-super-admins\n      if (!userData.is_super_admin && !userData.organization_id) {\n        console.error('[AuthProvider] Organization context missing for regular user');\n        throw new Error('User account is not properly configured with organization context');\n      }\n      \n      markAuthReady();\n      console.log('[AuthProvider] Auth context marked as ready');\n\n      // If on login page after successful fetch, redirect to dashboard\n      if (router.pathname === '/login') {\n        handlePostLoginRedirect();\n      }\n    } catch (error: any) {\n      console.error(`[AuthProvider] fetchUser error on attempt ${retryCount + 1}:`, {\n        error: error.message,\n        status: error?.status,\n        willRetry: retryCount < maxRetries && (error?.status !== 401 && error?.status !== 403)\n      });\n      \n      // Only retry on non-auth errors\n      if (retryCount < maxRetries && (error?.status !== 401 && error?.status !== 403)) {\n        const retryDelay = Math.pow(2, retryCount) * 1000;\n        console.log(`[AuthProvider] Retrying fetchUser in ${retryDelay}ms`);\n        setTimeout(() => fetchUser(retryCount + 1), retryDelay);\n        return;\n      }\n      \n      // On error, clear sensitive data and force re-auth\n      console.log('[AuthProvider] Auth error - clearing data');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user_role');\n      localStorage.removeItem('is_super_admin');\n      setUser(null);\n      resetAuthReady();\n      \n      if (error?.userMessage) {\n        toast.error(`Authentication failed: ${error.userMessage}`, { position: \"top-right\", autoClose: 5000 });\n      } else {\n        toast.error('Failed to establish secure session. Please log in again.', { position: \"top-right\", autoClose: 5000 });\n      }\n\n      // Only redirect if not already on login page to prevent loop\n      if (router.pathname !== '/login') {\n        console.log('[AuthProvider] Redirecting to login');\n        router.push('/login');\n      } else {\n        console.log('[AuthProvider] Already on login - no redirect needed');\n      }\n    }\n  };\n\n  // -- On mount, check for token and initialize user session --\n  useEffect(() => {\n    console.log('[AuthProvider] Component mounted, initializing auth state');\n    \n    const token = localStorage.getItem('token');\n    console.log('[AuthProvider] Token check result:', {\n      hasToken: !!token,\n      pathname: router.pathname,\n      timestamp: new Date().toISOString()\n    });\n    \n    if (token) {\n      console.log('[AuthProvider] Token found - starting user fetch');\n      // Critical fix: Don't set loading to false until we have a definitive result\n      fetchUser().finally(() => {\n        console.log('[AuthProvider] User fetch completed - setting loading to false');\n        setLoading(false);\n      });\n    } else {\n      console.log('[AuthProvider] No token found - marking auth ready and stopping loading');\n      markAuthReady();\n      setLoading(false);\n    }\n  }, [router.pathname]);  // Add pathname dependency to re-run on route changes\n\n  // -- Handle post-login redirect with state preservation --\n  const handlePostLoginRedirect = () => {\n    try {\n      // Check for return URL\n      const returnUrl = sessionStorage.getItem('returnUrlAfterLogin');\n      if (returnUrl) {\n        console.log('[AuthProvider] Redirecting to saved URL:', returnUrl);\n        sessionStorage.removeItem('returnUrlAfterLogin');\n        \n        // Use router.replace to avoid adding to history\n        router.replace(returnUrl);\n        \n        // Attempt to restore form data after a short delay\n        setTimeout(() => {\n          restoreFormData();\n        }, 500);\n        \n        return;\n      }\n      \n      // Default redirect to dashboard\n      console.log('[AuthProvider] No return URL found, redirecting to dashboard');\n      router.push('/dashboard');\n    } catch (error) {\n      console.error('[AuthProvider] Error during post-login redirect:', error);\n      // Fallback to dashboard\n      router.push('/dashboard');\n    }\n  };\n\n  // -- Attempt to restore form data after login --\n  const restoreFormData = () => {\n    try {\n      const savedFormData = sessionStorage.getItem('formDataBeforeExpiry');\n      if (savedFormData) {\n        const formData = JSON.parse(savedFormData);\n        console.log('[AuthProvider] Attempting to restore form data:', formData);\n        \n        // Attempt to restore form values\n        Object.entries(formData).forEach(([formKey, formValues]: [string, any]) => {\n          if (formValues && typeof formValues === 'object') {\n            Object.entries(formValues).forEach(([fieldName, fieldValue]) => {\n              const field = document.querySelector(`[name=\"${fieldName}\"]`) as HTMLInputElement;\n              if (field && typeof fieldValue === 'string') {\n                field.value = fieldValue;\n                // Trigger input event to update React state\n                field.dispatchEvent(new Event('input', { bubbles: true }));\n              }\n            });\n          }\n        });\n        \n        // Clean up saved form data\n        sessionStorage.removeItem('formDataBeforeExpiry');\n        \n        // Show notification to user\n        toast.info('Form data has been restored from before session expiry.', {\n          position: \"top-right\",\n          autoClose: 5000,\n        });\n      }\n    } catch (error) {\n      console.warn('[AuthProvider] Could not restore form data:', error);\n    }\n  };\n\n  // -- Force password reset if required --\n  useEffect(() => {\n    if (user && user.must_change_password && router.pathname !== '/password-reset') {\n      router.push('/password-reset');\n    }\n  }, [user, router]);\n\n  // -- Login: store token, hydrate user, and mark ready --\n  const login = async (loginResponse: any) => {\n    console.log('[AuthProvider] Login process started:', {\n      hasToken: !!loginResponse.access_token,\n      userRole: loginResponse.user_role,\n      isSuperAdmin: loginResponse.user?.is_super_admin,\n      hasOrgId: !!loginResponse.organization_id,\n      mustChangePassword: loginResponse.must_change_password,\n      timestamp: new Date().toISOString()\n    });\n    \n    localStorage.setItem('token', loginResponse.access_token);\n    console.log('[AuthProvider] Token stored in localStorage');\n    \n    if (loginResponse.user_role) {\n      localStorage.setItem('user_role', loginResponse.user_role);\n      console.log('[AuthProvider] User role stored:', loginResponse.user_role);\n    }\n    \n    localStorage.setItem('is_super_admin', loginResponse.user?.is_super_admin ? 'true' : 'false');\n    console.log('[AuthProvider] Super admin flag stored:', loginResponse.user?.is_super_admin);\n    \n    // Defensive: never store org_id in localStorage\n    const userData = loginResponse.user;\n    \n    // Validate org context for regular users\n    if (!userData.is_super_admin && !loginResponse.organization_id) {\n      console.error('[AuthProvider] Organization context validation failed for regular user');\n      throw new Error('Login failed: User account is not properly configured with organization context');\n    }\n    \n    const newUser = {\n      id: userData.id,\n      email: userData.email,\n      role: userData.role,\n      is_super_admin: userData.is_super_admin,\n      organization_id: loginResponse.organization_id,\n      must_change_password: loginResponse.must_change_password,\n    };\n    \n    setUser(newUser);\n    console.log('[AuthProvider] User state set from login response');\n    \n    resetAuthReady();\n    markAuthReady();\n    console.log('[AuthProvider] Auth ready state reset and marked');\n    \n    // Handle post-login redirect and form state restoration\n    handlePostLoginRedirect();\n    \n    // NOTE: No need to call fetchUser() here as we already have fresh user data from login response\n    // This prevents duplicate /users/me API calls that can cause session instability\n    console.log('[AuthProvider] Login process completed successfully - user context established from login response');\n  };\n\n  // -- Logout: clear all sensitive data and redirect --\n  const logout = () => {\n    console.log('[AuthProvider] Logout initiated');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user_role');\n    localStorage.removeItem('is_super_admin');\n    setUser(null);\n    resetAuthReady();\n    console.log('[AuthProvider] Auth data cleared');\n\n    // Only redirect if not already on login\n    if (router.pathname !== '/login') {\n      console.log('[AuthProvider] Redirecting to login');\n      router.push('/login');\n    } else {\n      console.log('[AuthProvider] Already on login - no redirect needed');\n    }\n  };\n\n  // -- Manual refresh of user (e.g., after profile update) --\n  const refreshUser = async () => {\n    await fetchUser();\n  };\n\n  // -- Update the user object in memory only --\n  const updateUser = (updatedData: Partial<User>) => {\n    setUser(prev => prev ? { ...prev, ...updatedData } : null);\n  };\n\n  // -- Only ready if user is super admin or has org context --\n  const isOrgContextReady = !user || user.is_super_admin || !!user.organization_id;\n  \n  console.log('[AuthProvider] Render phase:', {\n    loading,\n    hasUser: !!user,\n    userEmail: user?.email,\n    isOrgContextReady,\n    willRenderChildren: !loading,\n    timestamp: new Date().toISOString()\n  });\n\n  // Show loading spinner while auth state is being determined\n  if (loading) {\n    console.log('[AuthProvider] Rendering loading state');\n    \n    // CSS for enhanced spinner animation with app branding\n    const spinnerStyles = `\n      @keyframes authSpinner {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n      .auth-spinner {\n        width: 40px;\n        height: 40px;\n        border: 4px solid #f3f3f3;\n        border-top: 4px solid #3498db;\n        border-radius: 50%;\n        animation: authSpinner 2s linear infinite;\n        margin-bottom: 15px;\n      }\n      @keyframes pulse {\n        0% { opacity: 0.6; }\n        50% { opacity: 1; }\n        100% { opacity: 0.6; }\n      }\n      .auth-pulse {\n        animation: pulse 2s ease-in-out infinite;\n      }\n    `;\n    \n    return (\n      <>\n        <style dangerouslySetInnerHTML={{ __html: spinnerStyles }} />\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          flexDirection: 'column',\n          backgroundColor: '#f8fafc',\n          backgroundImage: 'linear-gradient(to bottom right, #f8fafc, #e2e8f0)'\n        }}>\n          <div style={{ \n            fontSize: '24px', \n            fontWeight: 600,\n            marginBottom: '10px',\n            color: '#1e293b',\n            textAlign: 'center'\n          }}>\n            TritIQ ERP\n          </div>\n          <div style={{ \n            fontSize: '14px', \n            marginBottom: '30px',\n            color: '#64748b',\n            textAlign: 'center'\n          }}>\n            Business Management System\n          </div>\n          <div className=\"auth-spinner\"></div>\n          <div style={{ \n            marginTop: '20px', \n            fontSize: '14px', \n            color: '#475569',\n            fontWeight: 500,\n            textAlign: 'center'\n          }} className=\"auth-pulse\">\n            Loading your workspace...\n          </div>\n          <div style={{ \n            marginTop: '5px', \n            fontSize: '12px', \n            color: '#94a3b8',\n            textAlign: 'center'\n          }}>\n            Establishing secure connection\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      loading,\n      displayRole: user ? getDisplayRole(user.role, user.is_super_admin) : null,\n      login,\n      logout,\n      refreshUser,\n      updateUser,\n      isOrgContextReady\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\n\nexport const useAuthWithOrgContext = () => {\n  const auth = useAuth();\n  return {\n    ...auth,\n    isReady: !auth.loading && auth.isOrgContextReady\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/CompanyContext.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'toast' is not defined.","line":38,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":52,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":52,"endColumn":32}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/context/CompanyContext.tsx\n\nimport React, { createContext, useContext } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { companyService } from '../services/authService';\nimport { useAuth } from './AuthContext';\nimport { useRouter } from 'next/router';\n\ninterface CompanyContextType {\n  isCompanySetupNeeded: boolean;\n  company: any;  // Replace with proper type\n  isLoading: boolean;\n  error: any;\n  refetch: () => void;\n}\n\nconst CompanyContext = createContext<CompanyContextType | undefined>(undefined);\n\nexport const CompanyProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const router = useRouter();\n  const { user, loading } = useAuth();\n\n  const enabled = !loading && !!user && !!localStorage.getItem('token') && router.pathname !== '/login';\n\n  const { data: company, isLoading, error, refetch } = useQuery({\n    queryKey: ['currentCompany'],\n    queryFn: companyService.getCurrentCompany,\n    enabled: enabled,  // Only fetch when authenticated and not on login\n    retry: false,  // Don't retry on failure\n    onError: (err: any) => {\n      if (err.message === 'No authentication token available' || err.status === 401) {\n        // Silent handling for no token\n        console.log('[CompanyContext] No auth token - skipping setup check silently');\n      } else if (err.status === 404 || err.isCompanySetupRequired) {\n        console.log('[CompanyContext] Company setup needed due to 404/missing company');\n      } else {\n        console.error('[CompanyContext] Unexpected error fetching company:', err);\n        toast.error(`Error fetching company details: ${err.message}`);\n      }\n    },\n  });\n\n  const isCompanySetupNeeded = enabled && !isLoading && company === null && !error;\n\n  return (\n    <CompanyContext.Provider value={{ isCompanySetupNeeded, company, isLoading, error, refetch }}>\n      {children}\n    </CompanyContext.Provider>\n  );\n};\n\nexport const useCompany = () => {\n  const context = useContext(CompanyContext);\n  if (undefined === context) {\n    throw new Error('useCompany must be used within a CompanyProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/ErrorContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":11,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"message"},"fix":{"range":[283,299],"text":""},"desc":"Remove unused variable 'message'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":11,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":79,"suggestions":[{"messageId":"removeVar","data":{"varName":"type"},"fix":{"range":[298,347],"text":""},"desc":"Remove unused variable 'type'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":12,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[372,382],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":17,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":30},{"ruleId":"no-use-before-define","severity":2,"message":"'hideError' was used before it was defined.","line":40,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":40,"endColumn":16}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { Alert, Snackbar } from '@mui/material';\n\ninterface ErrorMessage {\n  id: string;\n  message: string;\n  type: 'error' | 'warning' | 'info' | 'success';\n}\n\ninterface ErrorContextType {\n  showError: (message: string, type?: 'error' | 'warning' | 'info' | 'success') => void;\n  hideError: (id: string) => void;\n}\n\nconst ErrorContext = createContext<ErrorContextType | undefined>(undefined);\n\nexport const useError = () => {\n  const context = useContext(ErrorContext);\n  if (!context) {\n    throw new Error('useError must be used within an ErrorProvider');\n  }\n  return context;\n};\n\ninterface ErrorProviderProps {\n  children: ReactNode;\n}\n\nexport const ErrorProvider: React.FC<ErrorProviderProps> = ({ children }) => {\n  const [errors, setErrors] = useState<ErrorMessage[]>([]);\n\n  const showError = (message: string, type: 'error' | 'warning' | 'info' | 'success' = 'error') => {\n    const id = Date.now().toString();\n    const newError: ErrorMessage = { id, message, type };\n    \n    setErrors(prev => [...prev, newError]);\n    \n    // Auto-hide after 6 seconds\n    setTimeout(() => {\n      hideError(id);\n    }, 6000);\n  };\n\n  const hideError = (id: string) => {\n    setErrors(prev => prev.filter(error => error.id !== id));\n  };\n\n  return (\n    <ErrorContext.Provider value={{ showError, hideError }}>\n      {children}\n      \n      {/* Render error snackbars */}\n      {errors.map((error, index) => (\n        <Snackbar\n          key={error.id}\n          open={true}\n          autoHideDuration={6000}\n          onClose={() => hideError(error.id)}\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          sx={{ mt: index * 7 }} // Stack multiple errors\n        >\n          <Alert \n            onClose={() => hideError(error.id)} \n            severity={error.type}\n            sx={{ width: '100%' }}\n          >\n            {error.message}\n          </Alert>\n        </Snackbar>\n      ))}\n    </ErrorContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/VoucherContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":8,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[249,261],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":9,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[290,301],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updatedVoucher' is defined but never used.","line":9,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"updatedVoucher"},"fix":{"range":[300,321],"text":""},"desc":"Remove unused variable 'updatedVoucher'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/context/VoucherContext.tsx\n\nimport React, { createContext, useState, ReactNode, useContext } from 'react';\n\ninterface VoucherContextType {\n  vouchers: any[];\n  setVouchers: React.Dispatch<React.SetStateAction<any[]>>;\n  addVoucher: (voucher: any) => void;\n  updateVoucher: (id: number, updatedVoucher: any) => void;\n}\n\nconst VoucherContext = createContext<VoucherContextType | undefined>(undefined);\n\nexport const VoucherProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [vouchers, setVouchers] = useState<any[]>([]);\n\n  const addVoucher = (voucher: any) => {\n    setVouchers((prev) => [...prev, voucher]);\n  };\n\n  const updateVoucher = (id: number, updatedVoucher: any) => {\n    setVouchers((prev) =>\n      prev.map((v) => (v.id === id ? { ...v, ...updatedVoucher } : v))\n    );\n  };\n\n  const value = {\n    vouchers,\n    setVouchers,\n    addVoucher,\n    updateVoucher\n  };\n\n  return (\n    <VoucherContext.Provider value={value}>\n      {children}\n    </VoucherContext.Provider>\n  );\n};\n\nexport const useVoucherContext = (): VoucherContextType => {\n  const context = useContext(VoucherContext);\n  if (!context) {\n    throw new Error('useVoucherContext must be used within a VoucherProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/__tests__/AuthContext.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":151,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":151,"endColumn":83},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":172,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[5135,5145],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":211,"column":73,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":211,"endColumn":75}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test file for AuthProvider race condition fix\n */\n\nimport React from 'react';\nimport { render, screen, waitFor, act } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { AuthProvider, useAuth } from '../AuthContext';\nimport { authService } from '../../services/authService';\n\n// Mock dependencies\njest.mock('../../services/authService');\njest.mock('next/router', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    pathname: '/dashboard'\n  })\n}));\njest.mock('../../lib/api', () => ({\n  markAuthReady: jest.fn(),\n  resetAuthReady: jest.fn()\n}));\njest.mock('react-toastify', () => ({\n  toast: {\n    error: jest.fn()\n  }\n}));\n\nconst mockedAuthService = authService as jest.Mocked<typeof authService>;\n\n// Test component to access auth context\nconst TestComponent = () => {\n  const { user, loading } = useAuth();\n  \n  if (loading) {\n    return <div data-testid=\"loading\">Loading...</div>;\n  }\n  \n  if (user) {\n    return <div data-testid=\"user-info\">{user.email}</div>;\n  }\n  \n  return <div data-testid=\"no-user\">No user</div>;\n};\n\ndescribe('AuthProvider Race Condition Fix', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Clear localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n        clear: jest.fn(),\n      },\n      writable: true,\n    });\n  });\n\n  it('should show loading spinner while fetching user data', async () => {\n    // Mock localStorage to have a token\n    (window.localStorage.getItem as jest.Mock).mockReturnValue('fake-token');\n    \n    // Mock authService to return user data after a delay\n    mockedAuthService.getCurrentUser.mockImplementation(\n      () => new Promise(resolve => {\n        setTimeout(() => resolve({\n          id: 1,\n          email: 'test@example.com',\n          role: 'user',\n          is_super_admin: false,\n          organization_id: 1,\n          must_change_password: false\n        }), 100);\n      })\n    );\n\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Should show loading initially\n    expect(screen.getByTestId('loading')).toBeInTheDocument();\n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n    // Should show user info after loading completes\n    await waitFor(() => {\n      expect(screen.getByTestId('user-info')).toBeInTheDocument();\n      expect(screen.getByText('test@example.com')).toBeInTheDocument();\n    }, { timeout: 2000 });\n\n    // Loading should be gone\n    expect(screen.queryByTestId('loading')).not.toBeInTheDocument();\n  });\n\n  it('should show proper loading state when no token is present', async () => {\n    // Mock localStorage to have no token\n    (window.localStorage.getItem as jest.Mock).mockReturnValue(null);\n\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Should show loading initially\n    expect(screen.getByTestId('loading')).toBeInTheDocument();\n\n    // Should show no user after loading completes\n    await waitFor(() => {\n      expect(screen.getByTestId('no-user')).toBeInTheDocument();\n    });\n\n    // Loading should be gone\n    expect(screen.queryByTestId('loading')).not.toBeInTheDocument();\n  });\n\n  it('should handle auth service errors gracefully', async () => {\n    // Mock localStorage to have a token\n    (window.localStorage.getItem as jest.Mock).mockReturnValue('fake-token');\n    \n    // Mock authService to throw an error\n    mockedAuthService.getCurrentUser.mockRejectedValue(new Error('Auth failed'));\n\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Should show loading initially\n    expect(screen.getByTestId('loading')).toBeInTheDocument();\n\n    // Should handle error and show no user\n    await waitFor(() => {\n      expect(screen.getByTestId('no-user')).toBeInTheDocument();\n    }, { timeout: 2000 });\n\n    // Token should be removed from localStorage on error\n    expect(window.localStorage.removeItem).toHaveBeenCalledWith('token');\n  });\n\n  it('should show loading fallback UI with proper styling', () => {\n    // Mock localStorage to have a token\n    (window.localStorage.getItem as jest.Mock).mockReturnValue('fake-token');\n    \n    // Mock authService to never resolve (simulate loading state)\n    mockedAuthService.getCurrentUser.mockImplementation(() => new Promise(() => {}));\n\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Check that the loading UI elements are present\n    expect(screen.getByText('Loading authentication...')).toBeInTheDocument();\n    expect(screen.getByText('Establishing secure session...')).toBeInTheDocument();\n    \n    // Check for the spinner element (should have the auth-spinner class)\n    const spinner = document.querySelector('.auth-spinner');\n    expect(spinner).toBeInTheDocument();\n  });\n\n  it('should not render children until loading is complete', async () => {\n    // Mock localStorage to have a token\n    (window.localStorage.getItem as jest.Mock).mockReturnValue('fake-token');\n    \n    let resolveAuthService: (value: any) => void;\n    const authPromise = new Promise(resolve => {\n      resolveAuthService = resolve;\n    });\n    \n    mockedAuthService.getCurrentUser.mockReturnValue(authPromise);\n\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Children should not be rendered while loading\n    expect(screen.queryByTestId('user-info')).not.toBeInTheDocument();\n    expect(screen.queryByTestId('no-user')).not.toBeInTheDocument();\n    expect(screen.getByTestId('loading')).toBeInTheDocument();\n\n    // Resolve the auth service\n    act(() => {\n      resolveAuthService!({\n        id: 1,\n        email: 'test@example.com',\n        role: 'user',\n        is_super_admin: false,\n        organization_id: 1,\n        must_change_password: false\n      });\n    });\n\n    // Now children should render\n    await waitFor(() => {\n      expect(screen.getByTestId('user-info')).toBeInTheDocument();\n    });\n  });\n\n  it('should not make duplicate getCurrentUser calls during login', async () => {\n    // Mock localStorage to have no token initially\n    (window.localStorage.getItem as jest.Mock).mockReturnValue(null);\n    (window.localStorage.setItem as jest.Mock).mockImplementation(() => {});\n    \n    // Mock login response with user data\n    const loginResponse = {\n      access_token: 'new-token',\n      user: {\n        id: 1,\n        email: 'test@example.com',\n        role: 'user',\n        is_super_admin: false\n      },\n      organization_id: 1,\n      must_change_password: false,\n      user_role: 'user'\n    };\n\n    let authProviderInstance: any;\n    \n    // Create a custom component that can access the login method\n    const LoginTestComponent = () => {\n      const auth = useAuth();\n      authProviderInstance = auth;\n      \n      return (\n        <div>\n          <div data-testid=\"user-email\">{auth.user?.email || 'no-user'}</div>\n          <div data-testid=\"loading\">{auth.loading.toString()}</div>\n        </div>\n      );\n    };\n\n    render(\n      <AuthProvider>\n        <LoginTestComponent />\n      </AuthProvider>\n    );\n\n    // Wait for initial render to complete (no token, so should not be loading)\n    await waitFor(() => {\n      expect(screen.getByTestId('loading')).toHaveTextContent('false');\n    });\n\n    // Now call login method\n    await act(async () => {\n      await authProviderInstance.login(loginResponse);\n    });\n\n    // Verify getCurrentUser was never called during login\n    expect(mockedAuthService.getCurrentUser).not.toHaveBeenCalled();\n    \n    // Verify user state was set from login response\n    expect(screen.getByTestId('user-email')).toHaveTextContent('test@example.com');\n    \n    // Verify token was stored\n    expect(window.localStorage.setItem).toHaveBeenCalledWith('token', 'new-token');\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/__tests__/usePincodeLookup.test.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'global' is not defined.","line":14,"column":6,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Test for enhanced usePincodeLookup hook with retry logic and caching\nimport { renderHook, act } from '@testing-library/react';\nimport axios from 'axios';\nimport { usePincodeLookup } from '../../hooks/usePincodeLookup';\n\n// Mock axios\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\ndescribe('usePincodeLookup', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Clear the cache before each test\n    (global as any).pincodeCache?.clear();\n  });\n\n  it('should successfully lookup and cache pincode data', async () => {\n    const mockResponse = {\n      data: {\n        city: 'Mumbai',\n        state: 'Maharashtra',\n        state_code: '27'\n      }\n    };\n\n    mockedAxios.get.mockResolvedValueOnce(mockResponse);\n\n    const { result } = renderHook(() => usePincodeLookup());\n\n    await act(async () => {\n      await result.current.lookupPincode('400001');\n    });\n\n    expect(result.current.pincodeData).toEqual(mockResponse.data);\n    expect(result.current.loading).toBe(false);\n    expect(result.current.error).toBe(null);\n    expect(mockedAxios.get).toHaveBeenCalledWith('/api/v1/pincode/lookup/400001');\n  });\n\n  it('should return cached data on subsequent requests', async () => {\n    const mockResponse = {\n      data: {\n        city: 'Mumbai',\n        state: 'Maharashtra',\n        state_code: '27'\n      }\n    };\n\n    mockedAxios.get.mockResolvedValueOnce(mockResponse);\n\n    const { result } = renderHook(() => usePincodeLookup());\n\n    // First call - should make API request\n    await act(async () => {\n      await result.current.lookupPincode('400001');\n    });\n\n    expect(mockedAxios.get).toHaveBeenCalledTimes(1);\n\n    // Second call - should use cache\n    await act(async () => {\n      await result.current.lookupPincode('400001');\n    });\n\n    expect(mockedAxios.get).toHaveBeenCalledTimes(1); // No additional API call\n    expect(result.current.pincodeData).toEqual(mockResponse.data);\n  });\n\n  it('should handle validation errors for invalid pincode format', async () => {\n    const { result } = renderHook(() => usePincodeLookup());\n\n    await act(async () => {\n      await result.current.lookupPincode('invalid');\n    });\n\n    expect(result.current.error).toBe('Please enter a valid 6-digit PIN code');\n    expect(result.current.pincodeData).toBe(null);\n    expect(mockedAxios.get).not.toHaveBeenCalled();\n  });\n\n  it('should handle 404 errors gracefully', async () => {\n    mockedAxios.get.mockRejectedValueOnce({\n      response: { status: 404 }\n    });\n\n    const { result } = renderHook(() => usePincodeLookup());\n\n    await act(async () => {\n      await result.current.lookupPincode('999999');\n    });\n\n    expect(result.current.error).toBe('PIN code not found. Please enter city and state manually.');\n    expect(result.current.pincodeData).toBe(null);\n    expect(result.current.loading).toBe(false);\n  });\n\n  it('should retry on server errors with exponential backoff', async () => {\n    // Mock multiple failures followed by success\n    mockedAxios.get\n      .mockRejectedValueOnce({ response: { status: 503 } })\n      .mockRejectedValueOnce({ response: { status: 503 } })\n      .mockResolvedValueOnce({\n        data: {\n          city: 'Delhi',\n          state: 'Delhi',\n          state_code: '07'\n        }\n      });\n\n    const { result } = renderHook(() => usePincodeLookup());\n\n    await act(async () => {\n      await result.current.lookupPincode('110001');\n    });\n\n    expect(mockedAxios.get).toHaveBeenCalledTimes(3); // Initial + 2 retries\n    expect(result.current.pincodeData).toEqual({\n      city: 'Delhi',\n      state: 'Delhi',\n      state_code: '07'\n    });\n    expect(result.current.error).toBe(null);\n  });\n\n  it('should not retry on client errors (4xx)', async () => {\n    mockedAxios.get.mockRejectedValueOnce({\n      response: { status: 400 }\n    });\n\n    const { result } = renderHook(() => usePincodeLookup());\n\n    await act(async () => {\n      await result.current.lookupPincode('400001');\n    });\n\n    expect(mockedAxios.get).toHaveBeenCalledTimes(1); // No retries for client errors\n    expect(result.current.error).toBe('Failed to lookup PIN code. Please enter details manually.');\n  });\n\n  it('should clear data correctly', async () => {\n    const mockResponse = {\n      data: {\n        city: 'Mumbai',\n        state: 'Maharashtra',\n        state_code: '27'\n      }\n    };\n\n    mockedAxios.get.mockResolvedValueOnce(mockResponse);\n\n    const { result } = renderHook(() => usePincodeLookup());\n\n    await act(async () => {\n      await result.current.lookupPincode('400001');\n    });\n\n    expect(result.current.pincodeData).toEqual(mockResponse.data);\n\n    act(() => {\n      result.current.clearData();\n    });\n\n    expect(result.current.pincodeData).toBe(null);\n    expect(result.current.error).toBe(null);\n    expect(result.current.loading).toBe(false);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useEntity.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":22,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":83},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":38,"column":86,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":38,"endColumn":88},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":57,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":57,"endColumn":5},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":69,"column":77,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":69,"endColumn":79},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":83,"column":84,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":86},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":98,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":98,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":138,"column":75,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":138,"endColumn":77},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":191,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":191,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":192,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":192,"endColumn":34}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useEntity.ts\n// React hooks for Entity abstraction system\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useState } from 'react';\nimport {\n  getAllEntities,\n  getEntitiesByType,\n  searchEntities,\n  getEntityById,\n  createEntity,\n  updateEntity,\n  deleteEntity,\n  getEntityBalance,\n  entitiesToOptions\n} from '../services/entityService';\nimport { Entity, EntityType, EntityOption } from '../types/entity.types';\n\n/**\n * Hook to get all entities with unified interface\n */\nexport const useEntities = (entityTypes: EntityType[] = ['Customer', 'Vendor']) => {\n  return useQuery({\n    queryKey: ['entities', entityTypes],\n    queryFn: ({ signal }) => {\n      if (entityTypes.length === 1) {\n        return getEntitiesByType(entityTypes[0], { signal });\n      }\n      return getAllEntities({ signal });\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n\n/**\n * Hook to get entity options for form dropdowns\n */\nexport const useEntityOptions = (entityTypes: EntityType[] = ['Customer', 'Vendor']) => {\n  const { data: entities, ...queryProps } = useEntities(entityTypes);\n  \n  const options: EntityOption[] = entities ? entitiesToOptions(entities) : [];\n  \n  return {\n    options,\n    entities,\n    ...queryProps\n  };\n};\n\n/**\n * Hook for entity search with debouncing\n */\nexport const useEntitySearch = (\n  searchTerm: string,\n  entityTypes: EntityType[] = ['Customer', 'Vendor'],\n  enabled: boolean = true\n) => {\n  return useQuery({\n    queryKey: ['entitySearch', searchTerm, entityTypes],\n    queryFn: ({ signal }) => searchEntities(searchTerm, entityTypes, { signal }),\n    enabled: enabled && searchTerm.length >= 2,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n};\n\n/**\n * Hook to get specific entity by ID and type\n */\nexport const useEntity = (id: number | null, entityType: EntityType | null) => {\n  return useQuery({\n    queryKey: ['entity', id, entityType],\n    queryFn: ({ signal }) => {\n      if (!id || !entityType) {return null;}\n      return getEntityById(id, entityType, { signal });\n    },\n    enabled: !!id && !!entityType,\n  });\n};\n\n/**\n * Hook for entity balance/outstanding amount\n */\nexport const useEntityBalance = (id: number | null, entityType: EntityType | null) => {\n  return useQuery({\n    queryKey: ['entityBalance', id, entityType],\n    queryFn: ({ signal }) => {\n      if (!id || !entityType) {return null;}\n      return getEntityBalance(id, entityType, { signal });\n    },\n    enabled: !!id && !!entityType && ['Customer', 'Vendor'].includes(entityType),\n    staleTime: 1 * 60 * 1000, // 1 minute\n  });\n};\n\n/**\n * Hook for entity mutations (create, update, delete)\n */\nexport const useEntityMutations = () => {\n  const queryClient = useQueryClient();\n\n  const createMutation = useMutation({\n    mutationFn: ({ entityType, data }: { entityType: EntityType; data: Partial<Entity> }) =>\n      createEntity(entityType, data),\n    onSuccess: (_, { entityType }) => {\n      queryClient.invalidateQueries({ queryKey: ['entities'] });\n      queryClient.invalidateQueries({ queryKey: ['entities', [entityType]] });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, entityType, data }: { id: number; entityType: EntityType; data: Partial<Entity> }) =>\n      updateEntity(id, entityType, data),\n    onSuccess: (_, { entityType }) => {\n      queryClient.invalidateQueries({ queryKey: ['entities'] });\n      queryClient.invalidateQueries({ queryKey: ['entities', [entityType]] });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: ({ id, entityType }: { id: number; entityType: EntityType }) =>\n      deleteEntity(id, entityType),\n    onSuccess: (_, { entityType }) => {\n      queryClient.invalidateQueries({ queryKey: ['entities'] });\n      queryClient.invalidateQueries({ queryKey: ['entities', [entityType]] });\n    },\n  });\n\n  return {\n    createEntity: createMutation,\n    updateEntity: updateMutation,\n    deleteEntity: deleteMutation,\n  };\n};\n\n/**\n * Hook for entity form state management\n */\nexport const useEntityForm = (initialEntityType: EntityType = 'Customer') => {\n  const [selectedEntityType, setSelectedEntityType] = useState<EntityType>(initialEntityType);\n  const [selectedEntityId, setSelectedEntityId] = useState<number | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { options, isLoading } = useEntityOptions([selectedEntityType]);\n  const { data: searchResults, isLoading: searchLoading } = useEntitySearch(\n    searchTerm,\n    [selectedEntityType],\n    searchTerm.length >= 2\n  );\n\n  const displayOptions = searchTerm.length >= 2 ? (searchResults || []) : options;\n\n  const handleEntitySelect = (entityOption: EntityOption | null) => {\n    if (entityOption) {\n      setSelectedEntityId(entityOption.id);\n      setSelectedEntityType(entityOption.type);\n    } else {\n      setSelectedEntityId(null);\n    }\n  };\n\n  const handleEntityTypeChange = (newType: EntityType) => {\n    setSelectedEntityType(newType);\n    setSelectedEntityId(null); // Reset selection when type changes\n    setSearchTerm(''); // Reset search\n  };\n\n  return {\n    // State\n    selectedEntityType,\n    selectedEntityId,\n    showCreateModal,\n    searchTerm,\n\n    // Options\n    options: displayOptions,\n    isLoading: isLoading || searchLoading,\n\n    // Handlers\n    setSelectedEntityType: handleEntityTypeChange,\n    setSelectedEntityId,\n    setShowCreateModal,\n    setSearchTerm,\n    handleEntitySelect,\n  };\n};\n\n/**\n * Legacy compatibility hooks\n */\nexport const useVendors = () => useEntities(['Vendor']);\nexport const useCustomers = () => useEntities(['Customer']);","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/usePincodeLookup.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[17,28],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pincode' is defined but never used.","line":11,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"pincode"},"fix":{"range":[208,223],"text":""},"desc":"Remove unused variable 'pincode'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\ninterface PincodeData {\n  city: string;\n  state: string;\n  state_code: string;\n}\n\ninterface UsePincodeLookupReturn {\n  lookupPincode: (pincode: string) => Promise<void>;\n  pincodeData: PincodeData | null;\n  loading: boolean;\n  error: string | null;\n  clearData: () => void;\n}\n\n// Session-based cache for pincode lookups\nconst pincodeCache = new Map<string, PincodeData>();\n\n// Retry utility with exponential backoff\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst retryWithBackoff = async <T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> => {\n  let lastError: Error;\n  \n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error: any) {\n      lastError = error;\n      \n      // Don't retry for client errors (4xx) or if it's the last attempt\n      if (error.response?.status >= 400 && error.response?.status < 500) {\n        throw error;\n      }\n      \n      if (attempt === maxRetries) {\n        throw error;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s\n      const delay = baseDelay * Math.pow(2, attempt);\n      await sleep(delay);\n    }\n  }\n  \n  throw lastError!;\n};\n\nexport const usePincodeLookup = (): UsePincodeLookupReturn => {\n  const [pincodeData, setPincodeData] = useState<PincodeData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const lookupPincode = async (pincode: string): Promise<void> => {\n    // Validate pincode format\n    if (!pincode || !/^\\d{6}$/.test(pincode)) {\n      setError('Please enter a valid 6-digit PIN code');\n      return;\n    }\n\n    // Check cache first\n    const cachedData = pincodeCache.get(pincode);\n    if (cachedData) {\n      setPincodeData(cachedData);\n      setError(null);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Use retry logic for better reliability\n      const response = await retryWithBackoff(\n        () => axios.get(`/api/v1/pincode/lookup/${pincode}`),\n        3, // 3 retries\n        1000 // 1 second base delay\n      );\n      \n      const data = response.data;\n      setPincodeData(data);\n      \n      // Cache successful lookup for the session\n      pincodeCache.set(pincode, data);\n    } catch (err: any) {\n      if (err.response?.status === 404) {\n        setError('PIN code not found. Please enter city and state manually.');\n      } else if (err.response?.status === 503) {\n        setError('PIN code lookup service is currently unavailable. Please try again later or enter details manually.');\n      } else {\n        setError('Failed to lookup PIN code. Please enter details manually.');\n      }\n      setPincodeData(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearData = () => {\n    setPincodeData(null);\n    setError(null);\n    setLoading(false);\n  };\n\n  return {\n    lookupPincode,\n    pincodeData,\n    loading,\n    error,\n    clearData\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useStickyNotes.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":7,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":7,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/hooks/useStickyNotes.ts\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport { stickyNotesService, StickyNote, UserSettings } from '../services/stickyNotesService';\n\nexport const useStickyNotes = () => {\n  const { user } = useAuth();\n  const [notes, setNotes] = useState<StickyNote[]>([]);\n  const [userSettings, setUserSettings] = useState<UserSettings>({ sticky_notes_enabled: false });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchUserSettings = async () => {\n    try {\n      const settings = await stickyNotesService.getUserSettings();\n      setUserSettings(settings);\n    } catch (err) {\n      console.error('Error fetching user settings:', err);\n      // Use disabled settings if fetch fails to prevent unauthorized fetches\n      setUserSettings({ sticky_notes_enabled: false });\n    }\n  };\n\n  const fetchNotes = async () => {\n    try {\n      setLoading(true);\n      const notesData = await stickyNotesService.getNotes();\n      setNotes(notesData);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching notes:', err);\n      setError('Failed to load sticky notes');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleStickyNotes = async (enabled: boolean) => {\n    try {\n      const updatedSettings = await stickyNotesService.updateUserSettings({\n        sticky_notes_enabled: enabled\n      });\n      setUserSettings(updatedSettings);\n      return updatedSettings;\n    } catch (err) {\n      console.error('Error updating user settings:', err);\n      throw err;\n    }\n  };\n\n  useEffect(() => {\n    if (user) {\n      fetchUserSettings();\n    } else {\n      setUserSettings({ sticky_notes_enabled: false });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (userSettings.sticky_notes_enabled && user) {\n      fetchNotes();\n    }\n  }, [userSettings.sticky_notes_enabled, user]);\n\n  return {\n    notes,\n    userSettings,\n    loading,\n    error,\n    fetchNotes,\n    toggleStickyNotes,\n    refreshSettings: fetchUserSettings\n  };\n};\n\nexport default useStickyNotes;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useUIConfig.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[17,28],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":12,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[311,323],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":13,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[352,364],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":14,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[394,406],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":15,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[441,453],"text":""},"desc":"Remove unused variable 'path'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport uiConfig from '../config/ui-config.json';\n\ninterface UIConfig {\n  tooltips: Record<string, any>;\n  help_text: Record<string, any>;\n  error_messages: Record<string, any>;\n  success_messages: Record<string, any>;\n}\n\ninterface UseUIConfigReturn {\n  getTooltip: (path: string) => string;\n  getHelpText: (path: string) => any;\n  getErrorMessage: (path: string) => string;\n  getSuccessMessage: (path: string) => string;\n  config: UIConfig;\n}\n\n/**\n * Hook to access centralized UI configuration including tooltips, help text, and messages\n * \n * @example\n * const { getTooltip, getHelpText } = useUIConfig();\n * const tooltip = getTooltip('masters.products.name');\n * const helpText = getHelpText('vouchers.pdf_extraction');\n */\nexport const useUIConfig = (): UseUIConfigReturn => {\n  const [config] = useState<UIConfig>(uiConfig);\n\n  const getNestedValue = (obj: any, path: string): any => {\n    return path.split('.').reduce((current, key) => {\n      return current && current[key] !== undefined ? current[key] : null;\n    }, obj);\n  };\n\n  const getTooltip = (path: string): string => {\n    const tooltip = getNestedValue(config.tooltips, path);\n    return tooltip || '';\n  };\n\n  const getHelpText = (path: string): any => {\n    const helpText = getNestedValue(config.help_text, path);\n    return helpText || null;\n  };\n\n  const getErrorMessage = (path: string): string => {\n    const errorMsg = getNestedValue(config.error_messages, path);\n    return errorMsg || 'An error occurred';\n  };\n\n  const getSuccessMessage = (path: string): string => {\n    const successMsg = getNestedValue(config.success_messages, path);\n    return successMsg || 'Operation completed successfully';\n  };\n\n  return {\n    getTooltip,\n    getHelpText,\n    getErrorMessage,\n    getSuccessMessage,\n    config\n  };\n};\n\nexport default useUIConfig;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useVoucherNumbering.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'name' is defined but never used.","line":9,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"name"},"fix":{"range":[266,279],"text":""},"desc":"Remove unused variable 'name'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":9,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[278,290],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":18,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Voucher numbering utilities and hooks\nimport { useQuery } from '@tanstack/react-query';\nimport { useEffect } from 'react';\nimport api from '../lib/api';\n\ninterface UseVoucherNumberingProps {\n  apiEndpoint: string;\n  mode: 'create' | 'edit' | 'view';\n  setValue: (name: string, value: any) => void;\n  voucherData?: any;\n}\n\nexport const useVoucherNumbering = ({ \n  apiEndpoint, \n  mode, \n  setValue, \n  voucherData \n}: UseVoucherNumberingProps) => {\n  // Fetch next voucher number for create mode\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: [`next${apiEndpoint}Number`],\n    queryFn: () => api.get(`/${apiEndpoint}/next-number`).then(res => res.data),\n    enabled: mode === 'create',\n  });\n\n  // Auto-set voucher number based on mode\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (voucherData && voucherData.voucher_number) {\n      setValue('voucher_number', voucherData.voucher_number);\n    }\n  }, [mode, nextVoucherNumber, voucherData, setValue]);\n\n  // Return refetch function for post-save increment\n  const refreshVoucherNumber = async () => {\n    if (mode === 'create') {\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n      return newNextNumber;\n    }\n  };\n\n  return {\n    nextVoucherNumber,\n    refreshVoucherNumber\n  };\n};\n\n// Get API endpoint from voucher config\nexport const getVoucherApiEndpoint = (voucherType: string): string => {\n  const endpointMap: Record<string, string> = {\n    'quotation': 'quotations',\n    'proforma-invoice': 'proforma-invoices',\n    'sales-order': 'sales-orders',\n    'sales-voucher': 'sales-vouchers',\n    'delivery-challan': 'delivery-challans',\n    'sales-return': 'sales-returns',\n    'purchase-order': 'purchase-orders',\n    'grn': 'goods-receipt-notes',\n    'purchase-voucher': 'purchase-vouchers',\n    'purchase-return': 'purchase-returns',\n    'payment-voucher': 'payment-vouchers',\n    'receipt-voucher': 'receipt-vouchers',\n    'journal-voucher': 'journal-vouchers',\n    'contra-voucher': 'contra-vouchers',\n    'credit-note': 'credit-notes',\n    'debit-note': 'debit-notes',\n    'non-sales-credit-note': 'non-sales-credit-notes'\n  };\n  \n  return endpointMap[voucherType] || voucherType;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useVoucherPage.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":23,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":324,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":324,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'totalVouchers' is assigned a value but never used.","line":387,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":387,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalVouchers"},"fix":{"range":[14859,14903],"text":""},"desc":"Remove unused variable 'totalVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'shippingData' is defined but never used.","line":582,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":582,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"shippingData"},"fix":{"range":[22371,22388],"text":""},"desc":"Remove unused variable 'shippingData'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useVoucherPage.ts\n// Enhanced comprehensive hook for voucher page logic with comprehensive overhaul features\n\nimport { useState, useCallback, useEffect, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray, useWatch } from 'react-hook-form';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { voucherService } from '../services/vouchersService';\nimport { getVendors, getProducts, getCustomers, getEmployees } from '../services/masterService';\nimport { useAuth } from '../context/AuthContext';\nimport { \n  calculateVoucherTotals, \n  getDefaultVoucherValues, \n  numberToWords,\n  voucherListUtils,\n  enhancedRateUtils,\n  VOUCHER_PAGINATION_DEFAULTS\n} from '../utils/voucherUtils';\nimport { generateVoucherPDF, getVoucherPdfConfig, VoucherPdfData } from '../utils/pdfUtils';\nimport { VoucherPageConfig } from '../types/voucher.types';\nimport api from '../lib/api';  // Direct import for list fetch\n\nexport const useVoucherPage = (config: VoucherPageConfig) => {\n  const router = useRouter();\n  const { id, mode: queryMode } = router.query;\n  const { isOrgContextReady, company } = useAuth();  // Get company from context\n  const queryClient = useQueryClient();\n\n  console.log('[useVoucherPage] Enhanced hook initialized for:', config.voucherType);\n  console.log('[useVoucherPage] config.endpoint:', config.endpoint);\n  console.log('[useVoucherPage] isOrgContextReady:', isOrgContextReady);\n\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>((queryMode as 'create' | 'edit' | 'view') || 'create');\n  const [selectedId, setSelectedId] = useState<number | null>(id ? Number(id) : null);\n  \n  // Modal states\n  const [showAddVendorModal, setShowAddVendorModal] = useState(false);\n  const [showAddCustomerModal, setShowAddCustomerModal] = useState(false);\n  const [showAddProductModal, setShowAddProductModal] = useState(false);\n  const [showShippingModal, setShowShippingModal] = useState(false);\n  const [showFullModal, setShowFullModal] = useState(false);\n  \n  // Loading states\n  const [addVendorLoading, setAddVendorLoading] = useState(false);\n  const [addCustomerLoading, setAddCustomerLoading] = useState(false);\n  const [addProductLoading, setAddProductLoading] = useState(false);\n  const [addShippingLoading, setAddShippingLoading] = useState(false);\n  const [addingItemIndex, setAddingItemIndex] = useState(-1);\n  \n  // UI states\n  const [contextMenu, setContextMenu] = useState<{ mouseX: number; mouseY: number; voucher: any } | null>(null);\n  const [useDifferentShipping, setUseDifferentShipping] = useState(false);\n  \n  // Enhanced pagination and filtering states\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(VOUCHER_PAGINATION_DEFAULTS.pageSize);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n  const [filteredVouchers, setFilteredVouchers] = useState<any[]>([]);\n  \n  // Reference document states\n  const [selectedReferenceType, setSelectedReferenceType] = useState<string | null>(null);\n  const [selectedReferenceId, setSelectedReferenceId] = useState<number | null>(null);\n  const [referenceDocument, setReferenceDocument] = useState<any>(null);\n\n  // Enhanced form management with reference support\n  const defaultValues = useMemo(() => {\n    const baseValues = {\n      voucher_number: '',\n      date: new Date().toISOString().slice(0, 10),\n      reference: '',\n      notes: '',\n      // Reference document fields\n      reference_type: '',\n      reference_id: null as number | null,\n      reference_number: '',\n    };\n\n    if (config.hasItems === false) {\n      // Financial vouchers - use financial defaults\n      return {\n        ...baseValues,\n        total_amount: 0,\n        from_account: '',\n        to_account: '',\n        payment_method: '',\n        receipt_method: '',\n        name_id: null as number | null,\n        name_type: '' as 'Vendor' | 'Customer'\n      };\n    } else {\n      // Vouchers with items - use standard defaults with enhanced rate formatting\n      const itemDefaults = getDefaultVoucherValues(config.entityType === 'purchase' ? 'purchase' : 'sales');\n      return {\n        ...baseValues,\n        ...itemDefaults,\n        items: [{\n          ...itemDefaults.items[0],\n          unit_price: 0.00, // Ensure 2 decimal places\n          original_unit_price: 0.00,\n          discount_amount: 0.00,\n          taxable_amount: 0.00,\n          cgst_amount: 0.00,\n          sgst_amount: 0.00,\n          igst_amount: 0.00,\n          total_amount: 0.00\n        }]\n      };\n    }\n  }, [config.entityType, config.hasItems]);\n\n  const { control, handleSubmit, reset, setValue, watch, formState: { errors } } = useForm<any>({\n    defaultValues\n  });\n\n  // Always create field array and watch, but use conditionally\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'items'\n  });\n\n  const itemsWatch = useWatch({ control, name: 'items' });\n\n  const { data: vendorList } = useQuery({\n    queryKey: ['vendors'],\n    queryFn: getVendors,\n    enabled: isOrgContextReady && (config.entityType === 'purchase' || config.entityType === 'financial'),\n  });\n\n  const { data: customerList } = useQuery({\n    queryKey: ['customers'],\n    queryFn: getCustomers,\n    enabled: isOrgContextReady && (config.entityType === 'sales' || config.entityType === 'financial'),\n  });\n\n  // Extract isIntrastate as separate memo for UI usage\n  const isIntrastate = useMemo(() => {\n    let isIntra = true;\n    try {\n      const selectedEntityId = watch('customer_id') || watch('vendor_id');\n      let selectedEntity = null;\n      \n      if (config.entityType === 'sales' && customerList && selectedEntityId) {\n        selectedEntity = customerList.find((c: any) => c.id === selectedEntityId);\n      } else if (config.entityType === 'purchase' && vendorList && selectedEntityId) {\n        selectedEntity = vendorList.find((v: any) => v.id === selectedEntityId);\n      }\n      \n      if (selectedEntity) {\n        const companyStateCode = company?.state_code;\n        if (!companyStateCode) {\n          throw new Error('Company state code is not available.');\n        }\n        const entityStateCode = selectedEntity.state_code || selectedEntity.gst_number?.slice(0, 2);\n        if (!entityStateCode) {\n          throw new Error('Entity state code or GST number is not available.');\n        }\n        isIntra = entityStateCode === companyStateCode;\n      }\n    } catch (error) {\n      console.error('Error determining transaction state:', error);\n      throw error; // Re-throw to propagate the error\n    }\n    return isIntra;\n  }, [watch('customer_id'), watch('vendor_id'), config.entityType, customerList, vendorList, company?.state_code]);\n\n  // Enhanced computed values using the extracted isIntrastate\n  const { computedItems, totalAmount, totalSubtotal, totalGst, totalCgst, totalSgst, totalIgst } = useMemo(() => {\n    if (config.hasItems === false || !itemsWatch) {\n      return {\n        computedItems: [],\n        totalAmount: watch('total_amount') || 0,\n        totalSubtotal: 0,\n        totalGst: 0,\n        totalCgst: 0,\n        totalSgst: 0,\n        totalIgst: 0,\n      };\n    }\n    \n    // Ensure all rates are properly formatted\n    const formattedItems = itemsWatch.map((item: any) => ({\n      ...item,\n      unit_price: enhancedRateUtils.parseRate(String(item.unit_price || 0))\n    }));\n    \n    return calculateVoucherTotals(formattedItems, isIntrastate);\n  }, [itemsWatch, config.hasItems, watch, isIntrastate]);\n\n  // Enhanced queries with pagination and sorting\n  const { data: voucherList, isLoading: isLoadingList, refetch: refetchVoucherList } = useQuery({\n    queryKey: [config.voucherType, currentPage, pageSize],\n    queryFn: () => voucherService.getVouchers(config.voucherType, { \n      skip: (currentPage - 1) * pageSize, \n      limit: pageSize,\n      sort: 'desc',\n      sortBy: 'created_at'\n    }),\n    enabled: isOrgContextReady\n  });\n\n  // Handle data sorting when vouchers data changes\n  useEffect(() => {\n    if (voucherList && Array.isArray(voucherList)) {\n      console.log(`[useVoucherPage] Successfully fetched vouchers for ${config.voucherType}:`, voucherList);\n      const sorted = voucherListUtils.sortLatestFirst(voucherList);\n      setFilteredVouchers(sorted);\n    }\n  }, [voucherList, config.voucherType]);\n\n  // Handle error logging\n  useEffect(() => {\n    if (isLoadingList === false && !voucherList) {\n      console.error(`[useVoucherPage] Error fetching vouchers for ${config.voucherType}`);\n    }\n  }, [isLoadingList, voucherList, config.voucherType]);\n\n  const { data: employeeList } = useQuery({\n    queryKey: ['employees'],\n    queryFn: getEmployees,\n    enabled: isOrgContextReady && config.entityType === 'financial',\n  });\n\n  const { data: productList } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts,\n    enabled: isOrgContextReady && config.hasItems !== false,\n  });\n\n  const { data: voucherData, isLoading: isFetching } = useQuery({\n    queryKey: [config.voucherType, selectedId],\n    queryFn: () => voucherService.getVoucherById(config.apiEndpoint || config.voucherType, selectedId!),\n    enabled: !!selectedId && isOrgContextReady && (mode === 'view' || mode === 'edit')\n  });\n\n  const { data: nextVoucherNumber, isLoading: isNextNumberLoading, refetch: refetchNextNumber } = useQuery({\n    queryKey: [`next${config.voucherType}Number`],\n    queryFn: () => voucherService.getNextVoucherNumber(config.nextNumberEndpoint),\n    enabled: mode === 'create' && isOrgContextReady,\n  });\n\n  // Enhanced mutations with auto-refresh and pagination support\n  const createMutation = useMutation({\n    mutationFn: (data: any) => voucherService.createVoucher(config.apiEndpoint || config.voucherType, data),\n    onSuccess: async (newVoucher) => {\n      console.log('[useVoucherPage] Voucher created successfully:', newVoucher);\n      // Optimistically update the voucher list by prepending the new voucher\n      queryClient.setQueryData([config.voucherType, currentPage, pageSize], (oldData: any) => {\n        if (!oldData) {return [newVoucher];}\n        return [newVoucher, ...oldData];\n      });\n      queryClient.invalidateQueries({ queryKey: [config.voucherType] });\n      await refetchVoucherList();  // Explicit refetch after invalidation\n      setMode('create');\n      setSelectedId(null);\n      setCurrentPage(1); // Reset to first page to see new voucher\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('[useVoucherPage] Error creating voucher:', error);\n      alert(error.response?.data?.detail || 'Failed to create voucher');\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: any) => voucherService.updateVoucher(config.apiEndpoint || config.voucherType, selectedId!, data),\n    onSuccess: () => {\n      console.log('[useVoucherPage] Voucher updated successfully');\n      queryClient.invalidateQueries({ queryKey: [config.voucherType] });\n      queryClient.invalidateQueries({ queryKey: [config.voucherType, selectedId] });\n      refetchVoucherList();  // Explicit refetch after invalidation\n    },\n    onError: (error: any) => {\n      console.error('[useVoucherPage] Error updating voucher:', error);\n      alert(error.response?.data?.detail || 'Failed to update voucher');\n    }\n  });\n\n  // Enhanced event handlers\n  const handleCreate = () => {\n    setSelectedId(null);\n    setMode('create');\n    setReferenceDocument(null); // Clear reference\n    router.push({ query: { mode: 'create' } }, undefined, { shallow: true });\n    reset(defaultValues);\n  };\n\n  const handleEdit = (voucherId: number) => {\n    setSelectedId(voucherId);\n    setMode('edit');\n    router.push({ query: { id: voucherId, mode: 'edit' } }, undefined, { shallow: true });\n  };\n\n  const handleView = (voucherId: number) => {\n    setSelectedId(voucherId);\n    setMode('view');\n    router.push({ query: { id: voucherId, mode: 'view' } }, undefined, { shallow: true });\n  };\n\n  const handleSubmitForm = (data: any) => {\n    // Enhanced data preparation with reference support\n    if (config.hasItems !== false) {\n      data.items = computedItems;\n      data.total_amount = totalAmount;\n    }\n\n    // Add reference document data if selected\n    if (referenceDocument) {\n      data.reference_type = selectedReferenceType;\n      data.reference_id = selectedReferenceId;\n      data.reference_number = referenceDocument.voucher_number || referenceDocument.number;\n    }\n\n    if (mode === 'create') {\n      createMutation.mutate(data);\n    } else if (mode === 'edit') {\n      updateMutation.mutate(data);\n    }\n  };\n\n  const handleContextMenu = (event: React.MouseEvent, voucher: any) => {\n    event.preventDefault();\n    setContextMenu({\n      mouseX: event.clientX + 2,\n      mouseY: event.clientY - 6,\n      voucher,\n    });\n  };\n\n  const handleCloseContextMenu = () => {\n    setContextMenu(null);\n  };\n\n  // Enhanced pagination handlers\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  // Enhanced reference document handling\n  const handleReferenceSelected = (referenceData: any) => {\n    setReferenceDocument(referenceData);\n    setSelectedReferenceType(referenceData.type);\n    setSelectedReferenceId(referenceData.id);\n    \n    // Auto-populate fields from reference document if applicable\n    if (referenceData.items && config.hasItems) {\n      // Auto-populate items from reference document\n      const referenceItems = referenceData.items.map((item: any) => ({\n        ...item,\n        quantity: item.quantity || 0,\n        unit_price: enhancedRateUtils.parseRate(String(item.unit_price || 0))\n      }));\n      \n      // Clear existing items and add reference items\n      fields.forEach((_, index) => remove(index));\n      referenceItems.forEach((item: any) => append(item));\n    }\n    \n    // Auto-populate customer/vendor if applicable\n    if (referenceData.customer_id && config.entityType === 'sales') {\n      setValue('customer_id', referenceData.customer_id);\n    }\n    if (referenceData.vendor_id && config.entityType === 'purchase') {\n      setValue('vendor_id', referenceData.vendor_id);\n    }\n  };\n\n  // Enhanced search and filter functionality with pagination\n  const sortedVouchers = useMemo(() => {\n    if (!Array.isArray(voucherList)) {\n      console.warn('[useVoucherPage] voucherList is not an array:', voucherList);\n      return [];\n    }\n    return voucherListUtils.sortLatestFirst(voucherList);\n  }, [voucherList]);\n\n  const latestVouchers = useMemo(() => \n    voucherListUtils.getLatestVouchers(sortedVouchers, 7), \n    [sortedVouchers]\n  );\n\n  // Enhanced pagination data\n  const paginationData = useMemo(() => {\n    const totalVouchers = sortedVouchers.length;\n    return voucherListUtils.paginate(sortedVouchers, currentPage, pageSize);\n  }, [sortedVouchers, currentPage, pageSize]);\n\n  const handleSearch = () => {\n    if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {\n      alert('To date cannot be earlier than from date');\n      return;\n    }\n    \n    const filtered = sortedVouchers.filter(v => {\n      const lowerSearch = searchTerm.toLowerCase();\n      \n      // Search in voucher number\n      let matchesSearch = v.voucher_number.toLowerCase().includes(lowerSearch);\n      \n      // Search in entity name based on voucher type\n      if (config.entityType === 'purchase' && v.vendor?.name) {\n        matchesSearch = matchesSearch || v.vendor.name.toLowerCase().includes(lowerSearch);\n      } else if (config.entityType === 'sales' && v.customer?.name) {\n        matchesSearch = matchesSearch || v.customer.name.toLowerCase().includes(lowerSearch);\n      }\n      \n      // Date filtering\n      let matchesDate = true;\n      if (fromDate) {\n        matchesDate = matchesDate && new Date(v.date) >= new Date(fromDate);\n      }\n      if (toDate) {\n        matchesDate = matchesDate && new Date(v.date) <= new Date(toDate);\n      }\n      \n      return (!searchTerm || matchesSearch) && matchesDate;\n    });\n    \n    setFilteredVouchers(filtered);\n    setCurrentPage(1); // Reset to first page when filtering\n  };\n\n  // Modal handlers (missing from original)\n  const handleModalOpen = useCallback(() => {\n    setShowFullModal(true);\n  }, []);\n\n  const handleModalClose = useCallback(() => {\n    setShowFullModal(false);\n  }, []);\n\n  // Enhanced PDF generation with proper config\n  const handleGeneratePDF = useCallback(async (voucher?: any) => {\n    const pdfConfig = getVoucherPdfConfig(config.voucherType);\n    const voucherToUse = voucher || voucherData || watch();\n    \n    const pdfData: VoucherPdfData = {\n      voucher_number: voucherToUse.voucher_number,\n      date: voucherToUse.date,\n      reference: voucherToUse.reference,\n      notes: voucherToUse.notes,\n      total_amount: totalAmount,\n      items: computedItems,\n      payment_terms: voucherToUse.payment_terms,\n      from_account: voucherToUse.from_account,\n      to_account: voucherToUse.to_account,\n      ...voucherToUse\n    };\n    \n    await generateVoucherPDF(pdfData, pdfConfig);\n  }, [config.voucherType, watch, voucherData, totalAmount, computedItems]);\n\n  // Delete functionality\n  const handleDelete = useCallback(async (voucher: any) => {\n    if (window.confirm(`Are you sure you want to delete voucher ${voucher.voucher_number}?`)) {\n      try {\n        await voucherService.deleteVoucher(config.apiEndpoint || config.voucherType, voucher.id);\n        queryClient.invalidateQueries({ queryKey: [config.voucherType] });\n        refetchVoucherList();  // Explicit refetch after deletion\n        console.log('Voucher deleted successfully');\n      } catch (error: any) {\n        console.error('Error deleting voucher:', error);\n        alert(error.response?.data?.detail || 'Failed to delete voucher');\n      }\n    }\n  }, [config.voucherType, config.apiEndpoint, queryClient, refetchVoucherList]);\n\n  // Number to words utility\n  const getAmountInWords = useCallback((amount: number) => {\n    return numberToWords(amount);\n  }, []);\n\n  // Master data refresh functionality\n  const refreshMasterData = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['vendors'] });\n    queryClient.invalidateQueries({ queryKey: ['customers'] });\n    queryClient.invalidateQueries({ queryKey: ['products'] });\n  }, [queryClient]);\n\n  // Import missing service (should be added to imports at top of file)\n  const masterDataService = {\n    createCustomer: (data: any) => api.post('/customers', data),\n    createVendor: (data: any) => api.post('/vendors', data),\n    createProduct: (data: any) => api.post('/products', data)\n  };\n\n  // Customer add handler with auto-selection\n  const handleAddCustomer = useCallback(async (customerData: any) => {\n    setAddCustomerLoading(true);\n    try {\n      const response = await masterDataService.createCustomer(customerData);\n      const newCustomer = response.data;\n      \n      // Update query data immediately\n      queryClient.setQueryData(['customers'], (old: any) => old ? [...old, newCustomer] : [newCustomer]);\n      queryClient.invalidateQueries({ queryKey: ['customers'] });\n      \n      // Auto-select the new customer (conditional on entity type)\n      if (config.entityType === 'sales') {\n        setValue('customer_id', newCustomer.id);\n      }\n      \n      setShowAddCustomerModal(false);\n      alert('Customer added successfully!');\n    } catch (error: any) {\n      console.error('Error adding customer:', error);\n      let errorMsg = 'Error adding customer';\n      if (error.response?.data?.detail) {\n        const detail = error.response.data.detail;\n        if (Array.isArray(detail)) {\n          errorMsg = detail.map((err: any) => err.msg || err).join(', ');\n        } else if (typeof detail === 'string') {\n          errorMsg = detail;\n        }\n      }\n      alert(errorMsg);\n    } finally {\n      setAddCustomerLoading(false);\n    }\n  }, [queryClient, setValue, setAddCustomerLoading, setShowAddCustomerModal, config.entityType]);\n\n  // Vendor add handler with auto-selection\n  const handleAddVendor = useCallback(async (vendorData: any) => {\n    setAddVendorLoading(true);\n    try {\n      const response = await masterDataService.createVendor(vendorData);\n      const newVendor = response.data;\n      \n      // Update query data immediately\n      queryClient.setQueryData(['vendors'], (old: any) => old ? [...old, newVendor] : [newVendor]);\n      queryClient.invalidateQueries({ queryKey: ['vendors'] });\n      \n      // Auto-select the new vendor (conditional on entity type)  \n      if (config.entityType === 'purchase') {\n        setValue('vendor_id', newVendor.id);\n      }\n      \n      setShowAddVendorModal(false);\n      alert('Vendor added successfully!');\n    } catch (error: any) {\n      console.error('Error adding vendor:', error);\n      let errorMsg = 'Error adding vendor';\n      if (error.response?.data?.detail) {\n        const detail = error.response.data.detail;\n        if (Array.isArray(detail)) {\n          errorMsg = detail.map((err: any) => err.msg || err).join(', ');\n        } else if (typeof detail === 'string') {\n          errorMsg = detail;\n        }\n      }\n      alert(errorMsg);\n    } finally {\n      setAddVendorLoading(false);\n    }\n  }, [queryClient, setValue, setAddVendorLoading, setShowAddVendorModal, config.entityType]);\n\n  // Product add handler  \n  const handleAddProduct = useCallback(async (productData: any) => {\n    setAddProductLoading(true);\n    try {\n      const response = await masterDataService.createProduct(productData);\n      const newProduct = response.data;\n      \n      // Update query data immediately\n      queryClient.setQueryData(['products'], (old: any) => old ? [...old, newProduct] : [newProduct]);\n      queryClient.invalidateQueries({ queryKey: ['products'] });\n      \n      setShowAddProductModal(false);\n      alert('Product added successfully!');\n    } catch (error: any) {\n      console.error('Error adding product:', error);\n      alert(error.response?.data?.detail || 'Error adding product');\n    } finally {\n      setAddProductLoading(false);\n    }\n  }, [queryClient, setAddProductLoading, setShowAddProductModal]);\n\n  // Shipping address add handler\n  const handleAddShipping = useCallback(async (shippingData: any) => {\n    setAddShippingLoading(true);\n    try {\n      // Add shipping logic here\n      setShowShippingModal(false);\n      alert('Shipping address added successfully!');\n    } catch (error: any) {\n      console.error('Error adding shipping address:', error);\n      alert('Error adding shipping address');\n    } finally {\n      setAddShippingLoading(false);\n    }\n  }, [setAddShippingLoading, setShowShippingModal]);\n\n  // Effects - Enhanced data loading to fix bug where vouchers don't load saved data properly\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (voucherData) {\n      console.log('[useVoucherPage] Loading voucher data:', voucherData);\n      // Reset with voucher data\n      reset(voucherData);\n      \n      // Ensure items array is properly loaded for vouchers with items\n      if (config.hasItems !== false && voucherData.items && Array.isArray(voucherData.items)) {\n        // Clear existing items first\n        while (fields.length > 0) {\n          remove(0);\n        }\n        // Add items from voucher data\n        voucherData.items.forEach((item: any) => {\n          append({\n            ...item,\n            // Ensure proper field mapping for UI\n            original_unit_price: item.unit_price || 0,\n            product_id: item.product_id,\n            product_name: item.product_name || item.product?.product_name || '',\n            unit: item.unit || item.product?.unit || '',\n            current_stock: item.current_stock || 0,\n            reorder_level: item.reorder_level || 0,\n          });\n        });\n        console.log('[useVoucherPage] Loaded items:', voucherData.items.length);\n      }\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [voucherData, mode, reset, nextVoucherNumber, setValue, defaultValues, config.hasItems, fields.length, remove, append]);\n\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'refreshMasterData') {\n        refreshMasterData();\n        localStorage.removeItem('refreshMasterData');\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [refreshMasterData]);\n\n  useEffect(() => {\n    if (mode === 'create' && isOrgContextReady) {\n      refetchNextNumber();\n    }\n  }, [mode, isOrgContextReady, refetchNextNumber]);\n\n  useEffect(() => {\n    console.log('Next Voucher Number:', nextVoucherNumber);\n    console.log('Is Next Number Loading:', isNextNumberLoading);\n    console.log('Is Org Context Ready:', isOrgContextReady);\n    console.log('Mode:', mode);\n  }, [nextVoucherNumber, isNextNumberLoading, isOrgContextReady, mode]);\n\n  // Loading state\n  const isLoading = isLoadingList || isFetching || !isOrgContextReady;\n\n  // Refetch voucher list when org context becomes ready\n  useEffect(() => {\n    if (isOrgContextReady) {\n      console.log('[useVoucherPage] Org context ready - refetching voucher list');\n      refetchVoucherList();\n    }\n  }, [isOrgContextReady, refetchVoucherList]);\n\n  // Refetch list after create/update - Enhanced for immediate refresh\n  useEffect(() => {\n    if (createMutation.isSuccess || updateMutation.isSuccess) {\n      // Immediate invalidation and refetch\n      queryClient.invalidateQueries({ queryKey: [config.voucherType] });\n      // Force immediate refetch\n      refetchVoucherList();\n      \n      // Additional immediate refresh after short delay to ensure backend has processed\n      setTimeout(() => {\n        refetchVoucherList();\n      }, 500);\n    }\n  }, [createMutation.isSuccess, updateMutation.isSuccess, queryClient, config.voucherType, refetchVoucherList]);\n\n  return {\n    // Enhanced state\n    mode,\n    setMode,\n    selectedId,\n    isLoading,\n    showAddVendorModal,\n    setShowAddVendorModal,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    showFullModal,\n    addVendorLoading,\n    setAddVendorLoading,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    contextMenu,\n    selectedReferenceType,\n    setSelectedReferenceType,\n    selectedReferenceId,\n    setSelectedReferenceId,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    errors,\n    fields,\n    append,\n    remove,\n\n    // Data\n    voucherList,\n    vendorList,\n    customerList,\n    employeeList,\n    productList,\n    voucherData,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n    totalCgst,\n    totalSgst,\n    totalIgst,\n    isIntrastate,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    handleAddCustomer,\n    handleAddVendor,\n    handleAddProduct,\n    handleAddShipping,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Enhanced utilities\n    isViewMode: mode === 'view',\n    enhancedRateUtils,\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useVouchers.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":6,"column":50,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":14,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":22,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":30,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":30,"endColumn":48}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/hooks/useVouchers.ts\n\nimport { useQuery } from '@tanstack/react-query';\nimport { voucherService } from '../services/vouchersService';\n\nexport const usePurchaseVouchers = (id?: number) => {\n  return useQuery({\n    queryKey: ['purchaseVoucher', id],\n    queryFn: () => voucherService.getPurchaseVoucherById(id!),\n    enabled: !!id\n  });\n};\n\nexport const usePurchaseOrders = (id?: number) => {\n  return useQuery({\n    queryKey: ['purchaseOrder', id],\n    queryFn: () => voucherService.getPurchaseOrderById(id!),\n    enabled: !!id\n  });\n};\n\nexport const useGrns = (id?: number) => {\n  return useQuery({\n    queryKey: ['grn', id],\n    queryFn: () => voucherService.getGrnById(id!),\n    enabled: !!id\n  });\n};\n\nexport const useRejectionIns = (id?: number) => {\n  return useQuery({\n    queryKey: ['rejectionIn', id],\n    queryFn: () => voucherService.getRejectionInById(id!),\n    enabled: !!id\n  });\n};\n\n// Mutations can be added similarly if needed","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/lib/api.ts","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'resetAuthReady' was used before it was defined.","line":59,"column":3,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":59,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":84,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":84,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":94,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":94,"endColumn":36}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Revised: frontend/src/lib/api.ts\n\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// API base URL from environment\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000';\n\n// Token expiry handling with state preservation\nconst handleTokenExpiry = () => {\n  console.log('[API] Handling token expiry - preserving application state');\n  \n  // Store current location for redirect after login\n  const currentPath = window.location.pathname;\n  const currentSearch = window.location.search;\n  const currentHash = window.location.hash;\n  const returnUrl = `${currentPath}${currentSearch}${currentHash}`;\n  \n  // Store form data if available (attempt to preserve form state)\n  try {\n    const forms = document.querySelectorAll('form');\n    const formData: { [key: string]: any } = {};\n    \n    forms.forEach((form, index) => {\n      const formDataObj = new FormData(form);\n      const formEntries: { [key: string]: any } = {};\n      \n      for (const [key, value] of formDataObj.entries()) {\n        if (typeof value === 'string' && value.trim()) {\n          formEntries[key] = value;\n        }\n      }\n      \n      if (Object.keys(formEntries).length > 0) {\n        formData[`form_${index}`] = formEntries;\n      }\n    });\n    \n    if (Object.keys(formData).length > 0) {\n      sessionStorage.setItem('formDataBeforeExpiry', JSON.stringify(formData));\n      console.log('[API] Preserved form data before logout');\n    }\n  } catch (error) {\n    console.warn('[API] Could not preserve form data:', error);\n  }\n  \n  // Store return URL for redirect after successful login\n  if (returnUrl !== '/' && !returnUrl.includes('/login')) {\n    sessionStorage.setItem('returnUrlAfterLogin', returnUrl);\n    console.log('[API] Stored return URL:', returnUrl);\n  }\n  \n  // Clear auth data\n  localStorage.removeItem('token');\n  localStorage.removeItem('user_role');\n  localStorage.removeItem('is_super_admin');\n  \n  // Reset auth ready state\n  resetAuthReady();\n  \n  // Add a small delay to allow logging and toast to complete, then redirect to login\n  setTimeout(() => {\n    window.location.href = '/login';\n  }, 100);\n};\n\n// Auth state management for request queuing\nlet isAuthReady = false;\nlet authReadyPromise: Promise<void> | null = null;\nlet authReadyResolve: (() => void) | null = null;\n\n// Initialize auth ready promise\nconst initializeAuthPromise = () => {\n  if (!authReadyPromise) {\n    authReadyPromise = new Promise((resolve) => {\n      authReadyResolve = resolve;\n    });\n  }\n};\n\ninitializeAuthPromise();\n\n// Mark auth as ready (called from AuthContext)\nexport const markAuthReady = () => {\n  console.log('[API] Auth context marked as ready');\n  isAuthReady = true;\n  if (authReadyResolve) {\n    authReadyResolve();\n    authReadyResolve = null;\n  }\n};\n\n// Reset auth ready state (called on logout)\nexport const resetAuthReady = () => {\n  console.log('[API] Auth context reset');\n  isAuthReady = false;\n  initializeAuthPromise();\n};\n\n// Wait for auth to be ready for protected endpoints\nconst waitForAuthIfNeeded = async (config: any) => {\n  // Skip auth waiting for public endpoints\n  const publicEndpoints = ['/auth/login', '/auth/otp/', '/auth/admin/setup'];\n  const isPublicEndpoint = publicEndpoints.some(endpoint => config.url?.includes(endpoint));\n  \n  if (isPublicEndpoint) {\n    console.log('[API] Public endpoint, skipping auth wait:', config.url);\n    return;\n  }\n  \n  // Wait for auth context if not ready, with timeout to prevent deadlocks\n  if (!isAuthReady && authReadyPromise) {\n    console.log('[API] Waiting for auth context to be ready for:', config.url);\n    \n    // Add timeout to prevent infinite waiting\n    const authTimeout = new Promise<void>((_, reject) => {\n      setTimeout(() => {\n        console.warn('[API] Auth wait timeout - proceeding without auth ready state');\n        reject(new Error('Auth wait timeout'));\n      }, 10000); // 10 second timeout\n    });\n    \n    try {\n      await Promise.race([authReadyPromise, authTimeout]);\n      console.log('[API] Auth context ready, proceeding with request:', config.url);\n    } catch (error: any) {\n      console.warn('[API] Auth wait failed or timed out, proceeding anyway:', error?.message || error);\n      // Continue with request even if auth wait fails\n    }\n  }\n};\n\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests - organization context derived from backend session\napi.interceptors.request.use(\n  async (config) => {\n    // Wait for auth context if needed before proceeding\n    await waitForAuthIfNeeded(config);\n    \n    const token = localStorage.getItem('token');\n    \n    // Debug logging for all requests\n    console.log(`[API] ${config.method?.toUpperCase()} ${config.url}`, {\n      hasToken: !!token,\n      authReady: isAuthReady,\n      timestamp: new Date().toISOString(),\n      note: 'Organization context derived from backend session'\n    });\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    // Log the full request URL for debugging 404 issues\n    const fullUrl = `${config.baseURL}${config.url}`;\n    console.log(`[API] Request URL: ${fullUrl}`, {\n      method: config.method?.toUpperCase(),\n      hasAuth: !!token,\n    });\n    return config;\n  },\n  (error) => {\n    console.error('[API] Request interceptor error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Handle token expiration and network errors with enhanced debugging and refresh\napi.interceptors.response.use(\n  (response) => {\n    // Log successful responses for protected endpoints\n    if (response.config.headers?.Authorization) {\n      console.log(`[API] Success ${response.config.method?.toUpperCase()} ${response.config.url}`, {\n        status: response.status,\n        hasData: !!response.data,\n        timestamp: new Date().toISOString()\n      });\n    }\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    const method = error.config?.method?.toUpperCase();\n    const url = error.config?.url;\n    const status = error.response?.status;\n    \n    console.error(`[API] Error ${method} ${url}`, {\n      status,\n      error: error.response?.data,\n      timestamp: new Date().toISOString()\n    });\n    \n    if ((status === 401 || status === 403) && !originalRequest._retry) {\n      if (originalRequest.headers?.Authorization) {\n        // Only handle as expired token if it had one\n        console.log(`[API] ${status} Auth error - attempting token refresh`);\n        originalRequest._retry = true;\n        try {\n          // Import authService here to avoid circular dependency\n          const { authService } = await import('../services/authService');\n          \n          // Check if we have a refresh token\n          const refreshToken = localStorage.getItem('refresh_token');\n          if (!refreshToken) {\n            throw new Error('No refresh token available');\n          }\n          \n          // Use authService's refresh method\n          const refreshData = await authService.refreshToken();\n          console.log('[API] Token refreshed successfully');\n          \n          // Update original request with new token and retry\n          originalRequest.headers.Authorization = `Bearer ${refreshData.access_token}`;\n          return api(originalRequest);\n        } catch (refreshError) {\n          console.error('[API] Token refresh failed:', refreshError);\n          \n          // Show specific error message if available before redirect\n          const errorDetail = error.response?.data?.detail;\n          if (errorDetail && typeof errorDetail === 'string') {\n            console.log(`[API] ${status} Error reason:`, errorDetail);\n            // Show toast notification with error reason before redirect\n            toast.error(`Session expired: ${errorDetail}`, {\n              position: \"top-right\",\n              autoClose: 3000,\n            });\n          } else {\n            toast.error('Session expired. Please login again.', {\n              position: \"top-right\",\n              autoClose: 3000,\n            });\n          }\n          \n          // Store current location and form state before logout\n          handleTokenExpiry();\n        }\n      } else {\n        // No token: Just log and reject (don't refresh or reset auth)\n        console.log(`[API] ${status} Error - No token present, not refreshing`);\n        return Promise.reject(error);\n      }\n    } else if (status === 404 && url?.includes('/companies/current')) {\n      // Special handling for company missing scenario - DO NOT logout\n      console.log('[API] 404 on /companies/current - company setup required, not an auth error');\n      \n      // Add a flag to indicate this is a company setup scenario\n      const enhancedError = {\n        ...error,\n        isCompanySetupRequired: true,\n        userMessage: 'Company setup required'\n      };\n      \n      // Don't clear auth data or redirect - let the component handle company onboarding\n      return Promise.reject(enhancedError);\n    }\n    \n    // Extract error message with proper handling for arrays and objects\n    let errorMessage = 'An unexpected error occurred';\n    \n    const detail = error.response?.data?.detail;\n    const message = error.response?.data?.message;\n    \n    if (typeof detail === 'string' && detail) {\n      errorMessage = detail;\n    } else if (typeof message === 'string' && message) {\n      errorMessage = message;\n    } else if (Array.isArray(detail) && detail.length > 0) {\n      // Handle Pydantic validation errors (array of objects)\n      const messages = detail.map(err => err.msg || `${err.loc?.join(' -> ')}: ${err.type}`).filter(Boolean);\n      errorMessage = messages.length > 0 ? messages.join(', ') : 'Validation error';\n    } else if (detail && typeof detail === 'object') {\n      // Handle object error details\n      errorMessage = detail.error || detail.message || JSON.stringify(detail);\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    \n    console.error('[API] Processed error message:', errorMessage);\n    return Promise.reject({\n      ...error,\n      userMessage: errorMessage,\n      status: status\n    });\n  }\n);\n\nexport default api;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/lib/excelUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":6,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":70}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/excelUtils.ts\nimport ExcelJS from 'exceljs';  // New library for creating/reading Excel files\nimport saveAs from 'file-saver';  // Library to handle file downloads in the browser\n\n// Function to export data (array of objects) to an Excel file\nexport const exportToExcel = async (data: any[], filename: string) => {\n  // Create a new Excel workbook\n  const workbook = new ExcelJS.Workbook();\n  // Add a worksheet to it\n  const worksheet = workbook.addWorksheet('Sheet1');\n\n  // If there's data, add headers (column names) as the first row\n  if (data.length > 0) {\n    worksheet.addRow(Object.keys(data[0]));  // e.g., ['id', 'name', 'price']\n    // Then add each row of data\n    data.forEach(item => {\n      worksheet.addRow(Object.values(item));  // e.g., [1, 'Product A', 10.99]\n    });\n  }\n\n  // Generate the Excel file as a buffer (binary data)\n  const buffer = await workbook.xlsx.writeBuffer();\n  // Create a Blob (file-like object) from the buffer\n  const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  // Trigger download with the given filename\n  saveAs(blob, `${filename}.xlsx`);\n};\n\n// Function to import data from an uploaded Excel file\nexport const importFromExcel = async (file: File): Promise<any[]> => {\n  // Create a new workbook\n  const workbook = new ExcelJS.Workbook();\n  // Read the file's contents into a buffer\n  const buffer = await file.arrayBuffer();\n  // Load the buffer into the workbook\n  await workbook.xlsx.load(buffer);\n  // Get the first worksheet\n  const worksheet = workbook.getWorksheet(1);\n  const json: any[] = [];\n  \n  if (!worksheet) {\n    throw new Error('No worksheet found in the Excel file');\n  }\n  \n  // Get headers from the first row\n  const headers = worksheet.getRow(1).values as string[];\n\n  // Loop through each row (skip header row)\n  worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {\n    if (rowNumber > 1) {\n      const rowData: { [key: string]: any } = {};\n      // Loop through each cell in the row\n      row.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n        if (headers[colNumber]) {\n          rowData[headers[colNumber]] = cell.value;  // Map cell value to header key\n        }\n      });\n      json.push(rowData);  // Add the row object to the result array\n    }\n  });\n\n  return json;  // Return array of objects (e.g., [{id:1, name:'Product A'}, ...])\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/lib/jwtUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/__tests__/ExportPrint.test.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":37,"column":51,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":56}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test file for Export and Print functionality\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport ReportsPage from '../reports';\nimport { reportsService } from '../../services/authService';\nimport { canAccessLedger } from '../../types/user.types';\n\n// Mock the services\njest.mock('../../services/authService');\njest.mock('../../types/user.types');\njest.mock('../../components/MegaMenu', () => {\n  return function MockMegaMenu() {\n    return <div data-testid=\"mega-menu\">Mock MegaMenu</div>;\n  };\n});\n\n// Mock file-saver\njest.mock('file-saver', () => ({\n  saveAs: jest.fn()\n}));\n\nconst mockReportsService = reportsService as jest.Mocked<typeof reportsService>;\nconst mockCanAccessLedger = canAccessLedger as jest.MockedFunction<typeof canAccessLedger>;\n\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false }\n    }\n  });\n  \n  const TestProvider = ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n  \n  TestProvider.displayName = 'TestProvider';\n  \n  return TestProvider;\n};\n\ndescribe('Export and Print Functionality', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock default service responses\n    mockReportsService.getDashboardStats.mockResolvedValue({\n      masters: { vendors: 10, customers: 15, products: 50 }\n    });\n    \n    mockReportsService.getSalesReport.mockResolvedValue({\n      vouchers: [\n        {\n          id: 1,\n          voucher_number: 'SV001',\n          date: '2024-01-15',\n          customer_name: 'Test Customer',\n          total_amount: 1000,\n          gst_amount: 180,\n          status: 'confirmed'\n        }\n      ],\n      summary: {\n        total_vouchers: 1,\n        total_sales: 1000,\n        total_gst: 180\n      }\n    });\n\n    mockReportsService.getPurchaseReport.mockResolvedValue({\n      vouchers: [\n        {\n          id: 1,\n          voucher_number: 'PV001',\n          date: '2024-01-15',\n          vendor_name: 'Test Vendor',\n          total_amount: 2000,\n          gst_amount: 360,\n          status: 'confirmed'\n        }\n      ],\n      summary: {\n        total_vouchers: 1,\n        total_purchases: 2000,\n        total_gst: 360\n      }\n    });\n\n    mockReportsService.getInventoryReport.mockResolvedValue({\n      items: [\n        {\n          product_id: 1,\n          product_name: 'Test Product',\n          quantity: 100,\n          unit: 'pcs',\n          unit_price: 50,\n          total_value: 5000,\n          is_low_stock: false\n        }\n      ],\n      summary: {\n        total_items: 1,\n        total_value: 5000,\n        low_stock_items: 0\n      }\n    });\n\n    mockReportsService.getPendingOrders.mockResolvedValue({\n      orders: [\n        {\n          id: 1,\n          type: 'Purchase Order',\n          number: 'PO001',\n          date: '2024-01-15',\n          party: 'Test Vendor',\n          amount: 1500,\n          status: 'pending'\n        }\n      ],\n      summary: {\n        total_orders: 1,\n        total_value: 1500\n      }\n    });\n\n    // Mock export functions\n    mockReportsService.exportSalesReportExcel.mockResolvedValue(new Blob(['test'], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }));\n    mockReportsService.exportPurchaseReportExcel.mockResolvedValue(new Blob(['test'], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }));\n    mockReportsService.exportInventoryReportExcel.mockResolvedValue(new Blob(['test'], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }));\n    mockReportsService.exportPendingOrdersExcel.mockResolvedValue(new Blob(['test'], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }));\n    \n    mockCanAccessLedger.mockReturnValue(true);\n  });\n\n  describe('Sales Report Export', () => {\n    it('should show export button in sales report', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Sales Report tab\n      const salesTab = screen.getByText('Sales Report');\n      fireEvent.click(salesTab);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Export')).toBeInTheDocument();\n      });\n    });\n\n    it('should call export function when export button is clicked', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Sales Report tab\n      const salesTab = screen.getByText('Sales Report');\n      fireEvent.click(salesTab);\n      \n      await waitFor(() => {\n        const exportButton = screen.getByText('Export');\n        fireEvent.click(exportButton);\n      });\n\n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n\n      await waitFor(() => {\n        expect(mockReportsService.exportSalesReportExcel).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Purchase Report Export', () => {\n    it('should show export button in purchase report', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Purchase Report tab\n      const purchaseTab = screen.getByText('Purchase Report');\n      fireEvent.click(purchaseTab);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Export')).toBeInTheDocument();\n      });\n    });\n\n    it('should call export function when export button is clicked', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Purchase Report tab\n      const purchaseTab = screen.getByText('Purchase Report');\n      fireEvent.click(purchaseTab);\n      \n      await waitFor(() => {\n        const exportButton = screen.getByText('Export');\n        fireEvent.click(exportButton);\n      });\n\n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n\n      await waitFor(() => {\n        expect(mockReportsService.exportPurchaseReportExcel).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Inventory Report Export', () => {\n    it('should show export button in inventory report', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Inventory Report tab\n      const inventoryTab = screen.getByText('Inventory Report');\n      fireEvent.click(inventoryTab);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Export')).toBeInTheDocument();\n      });\n    });\n\n    it('should call export function when export button is clicked', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Inventory Report tab\n      const inventoryTab = screen.getByText('Inventory Report');\n      fireEvent.click(inventoryTab);\n      \n      await waitFor(() => {\n        const exportButton = screen.getByText('Export');\n        fireEvent.click(exportButton);\n      });\n\n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n\n      await waitFor(() => {\n        expect(mockReportsService.exportInventoryReportExcel).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Pending Orders Export', () => {\n    it('should show export button in pending orders report', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Pending Orders tab\n      const ordersTab = screen.getByText('Pending Orders');\n      fireEvent.click(ordersTab);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Export')).toBeInTheDocument();\n      });\n    });\n\n    it('should call export function when export button is clicked', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Pending Orders tab\n      const ordersTab = screen.getByText('Pending Orders');\n      fireEvent.click(ordersTab);\n      \n      await waitFor(() => {\n        const exportButton = screen.getByText('Export');\n        fireEvent.click(exportButton);\n      });\n\n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n\n      await waitFor(() => {\n        expect(mockReportsService.exportPendingOrdersExcel).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Print Functionality', () => {\n    beforeEach(() => {\n      // Mock window.print\n      Object.defineProperty(window, 'print', {\n        value: jest.fn(),\n        writable: true\n      });\n    });\n\n    it('should show print button in all reports', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Check Sales Report\n      const salesTab = screen.getByText('Sales Report');\n      fireEvent.click(salesTab);\n      \n      await waitFor(() => {\n        expect(screen.getByLabelText('Print report')).toBeInTheDocument();\n      });\n\n      // Check Purchase Report\n      const purchaseTab = screen.getByText('Purchase Report');\n      fireEvent.click(purchaseTab);\n      \n      await waitFor(() => {\n        expect(screen.getByLabelText('Print report')).toBeInTheDocument();\n      });\n\n      // Check Inventory Report\n      const inventoryTab = screen.getByText('Inventory Report');\n      fireEvent.click(inventoryTab);\n      \n      await waitFor(() => {\n        expect(screen.getByLabelText('Print report')).toBeInTheDocument();\n      });\n\n      // Check Pending Orders\n      const ordersTab = screen.getByText('Pending Orders');\n      fireEvent.click(ordersTab);\n      \n      await waitFor(() => {\n        expect(screen.getByLabelText('Print report')).toBeInTheDocument();\n      });\n    });\n\n    it('should call window.print when print button is clicked', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Sales Report tab\n      const salesTab = screen.getByText('Sales Report');\n      fireEvent.click(salesTab);\n      \n      await waitFor(() => {\n        const printButton = screen.getByLabelText('Print report');\n        fireEvent.click(printButton);\n      });\n\n      expect(window.print).toHaveBeenCalled();\n    });\n  });\n\n  describe('Advanced Filtering', () => {\n    it('should show search filters in sales report', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Sales Report tab\n      const salesTab = screen.getByText('Sales Report');\n      fireEvent.click(salesTab);\n      \n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Search vouchers...')).toBeInTheDocument();\n      });\n    });\n\n    it('should show search filters in purchase report', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Purchase Report tab\n      const purchaseTab = screen.getByText('Purchase Report');\n      fireEvent.click(purchaseTab);\n      \n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Search vouchers...')).toBeInTheDocument();\n      });\n    });\n\n    it('should show search and toggle filters in inventory report', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Inventory Report tab\n      const inventoryTab = screen.getByText('Inventory Report');\n      fireEvent.click(inventoryTab);\n      \n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Search products...')).toBeInTheDocument();\n        expect(screen.getByText('Include Zero Stock')).toBeInTheDocument();\n      });\n    });\n\n    it('should show order type and search filters in pending orders', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Pending Orders tab\n      const ordersTab = screen.getByText('Pending Orders');\n      fireEvent.click(ordersTab);\n      \n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Search orders...')).toBeInTheDocument();\n        expect(screen.getByText('Order Type')).toBeInTheDocument();\n      });\n    });\n\n    it('should update search filter when typing', async () => {\n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Sales Report tab\n      const salesTab = screen.getByText('Sales Report');\n      fireEvent.click(salesTab);\n      \n      await waitFor(() => {\n        const searchInput = screen.getByPlaceholderText('Search vouchers...');\n        fireEvent.change(searchInput, { target: { value: 'test search' } });\n        expect(searchInput).toHaveValue('test search');\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle export errors gracefully', async () => {\n      mockReportsService.exportSalesReportExcel.mockRejectedValue(new Error('Export failed'));\n      \n      render(<ReportsPage />, { wrapper: createWrapper() });\n      \n      // Switch to Sales Report tab\n      const salesTab = screen.getByText('Sales Report');\n      fireEvent.click(salesTab);\n      \n      await waitFor(() => {\n        const exportButton = screen.getByText('Export');\n        fireEvent.click(exportButton);\n      });\n\n      await waitFor(() => {\n        const excelOption = screen.getByText('Export to Excel');\n        fireEvent.click(excelOption);\n      });\n\n      // Should not throw an error and the component should still be functional\n      await waitFor(() => {\n        expect(screen.getByText('Sales Report')).toBeInTheDocument();\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/__tests__/LedgerReport.test.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":32,"column":51,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":56}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Test file for Ledger Report functionality\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport ReportsPage from '../reports';\nimport { reportsService } from '../../services/authService';\nimport { canAccessLedger } from '../../types/user.types';\n\n// Mock the services\njest.mock('../../services/authService');\njest.mock('../../types/user.types');\njest.mock('../../components/MegaMenu', () => {\n  return function MockMegaMenu() {\n    return <div data-testid=\"mega-menu\">Mock MegaMenu</div>;\n  };\n});\n\nconst mockReportsService = reportsService as jest.Mocked<typeof reportsService>;\nconst mockCanAccessLedger = canAccessLedger as jest.MockedFunction<typeof canAccessLedger>;\n\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false }\n    }\n  });\n  \n  const TestProvider = ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n  \n  TestProvider.displayName = 'TestProvider';\n  \n  return TestProvider;\n};\n\ndescribe('Ledger Report', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock default service responses\n    mockReportsService.getDashboardStats.mockResolvedValue({\n      masters: { vendors: 10, customers: 15, products: 50 }\n    });\n    mockReportsService.getCompleteLedger.mockResolvedValue({\n      transactions: [\n        {\n          id: 1,\n          voucher_type: 'sales_voucher',\n          voucher_number: 'SV001',\n          date: '2024-01-15T10:30:00Z',\n          account_type: 'customer',\n          account_id: 1,\n          account_name: 'Test Customer',\n          debit_amount: 0,\n          credit_amount: 5000,\n          balance: 5000,\n          status: 'confirmed'\n        }\n      ],\n      summary: { transaction_count: 1 },\n      total_debit: 0,\n      total_credit: 5000,\n      net_balance: 5000,\n      filters_applied: {}\n    });\n    mockReportsService.getOutstandingLedger.mockResolvedValue({\n      outstanding_balances: [\n        {\n          account_type: 'customer',\n          account_id: 1,\n          account_name: 'Test Customer',\n          outstanding_amount: 5000,\n          last_transaction_date: '2024-01-15T10:30:00Z',\n          transaction_count: 1,\n          contact_info: 'test@customer.com'\n        },\n        {\n          account_type: 'vendor',\n          account_id: 1,\n          account_name: 'Test Vendor',\n          outstanding_amount: -3000,\n          last_transaction_date: '2024-01-10T09:00:00Z',\n          transaction_count: 2,\n          contact_info: 'vendor@test.com'\n        }\n      ],\n      summary: { total_accounts: 2 },\n      total_payable: -3000,\n      total_receivable: 5000,\n      net_outstanding: 2000,\n      filters_applied: {}\n    });\n  });\n\n  describe('Ledger Tab Access', () => {\n    it('shows ledger tab when user has access', async () => {\n      mockCanAccessLedger.mockReturnValue(true);\n      \n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Check if Ledger tab is present\n      expect(screen.getByText('Ledger')).toBeInTheDocument();\n    });\n\n    it('shows access denied message when user lacks permission', async () => {\n      mockCanAccessLedger.mockReturnValue(false);\n      \n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      await waitFor(() => {\n        expect(screen.getByText(/You don't have permission to access the Ledger report/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Ledger Type Toggle', () => {\n    beforeEach(() => {\n      mockCanAccessLedger.mockReturnValue(true);\n    });\n\n    it('defaults to Complete Ledger view', async () => {\n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      await waitFor(() => {\n        expect(screen.getByText('Complete Ledger')).toBeInTheDocument();\n      });\n    });\n\n    it('toggles to Outstanding Ledger when switch is clicked', async () => {\n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      // Find and click the toggle switch\n      await waitFor(() => {\n        const toggle = screen.getByRole('checkbox');\n        fireEvent.click(toggle);\n      });\n      \n      await waitFor(() => {\n        expect(screen.getByText('Outstanding Ledger')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Complete Ledger View', () => {\n    beforeEach(() => {\n      mockCanAccessLedger.mockReturnValue(true);\n    });\n\n    it('displays complete ledger data correctly', async () => {\n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      await waitFor(() => {\n        // Check summary\n        expect(screen.getByText('Total Transactions: 1')).toBeInTheDocument();\n        expect(screen.getByText('Total Credit: ₹5,000')).toBeInTheDocument();\n        expect(screen.getByText('Net Balance: ₹5,000')).toBeInTheDocument();\n        \n        // Check transaction data\n        expect(screen.getByText('SV001')).toBeInTheDocument();\n        expect(screen.getByText('Test Customer')).toBeInTheDocument();\n        expect(screen.getByText('SALES VOUCHER')).toBeInTheDocument();\n      });\n    });\n\n    it('applies filters correctly', async () => {\n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      await waitFor(() => {\n        // Find and change account type filter\n        const accountTypeSelect = screen.getByLabelText('Account Type');\n        fireEvent.mouseDown(accountTypeSelect);\n      });\n      \n      // Select 'Customers' option\n      fireEvent.click(screen.getByText('Customers'));\n      \n      // Verify the filter was applied\n      await waitFor(() => {\n        expect(mockReportsService.getCompleteLedger).toHaveBeenCalledWith(\n          expect.objectContaining({\n            account_type: 'customer'\n          })\n        );\n      });\n    });\n  });\n\n  describe('Outstanding Ledger View', () => {\n    beforeEach(() => {\n      mockCanAccessLedger.mockReturnValue(true);\n    });\n\n    it('displays outstanding ledger data with proper visual distinction', async () => {\n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      // Toggle to outstanding ledger\n      await waitFor(() => {\n        const toggle = screen.getByRole('checkbox');\n        fireEvent.click(toggle);\n      });\n      \n      await waitFor(() => {\n        // Check summary\n        expect(screen.getByText('Total Accounts: 2')).toBeInTheDocument();\n        expect(screen.getByText('Total Payable: ₹3,000 (Amount owed to vendors)')).toBeInTheDocument();\n        expect(screen.getByText('Total Receivable: ₹5,000 (Amount owed by customers)')).toBeInTheDocument();\n        \n        // Check account data\n        expect(screen.getByText('Test Customer')).toBeInTheDocument();\n        expect(screen.getByText('Test Vendor')).toBeInTheDocument();\n        expect(screen.getByText('₹5,000 (Receivable)')).toBeInTheDocument();\n        expect(screen.getByText('₹3,000 (Payable)')).toBeInTheDocument();\n      });\n    });\n\n    it('displays different chips for vendor and customer accounts', async () => {\n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      // Toggle to outstanding ledger\n      await waitFor(() => {\n        const toggle = screen.getByRole('checkbox');\n        fireEvent.click(toggle);\n      });\n      \n      await waitFor(() => {\n        expect(screen.getByText('CUSTOMER')).toBeInTheDocument();\n        expect(screen.getByText('VENDOR')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Filter Functionality', () => {\n    beforeEach(() => {\n      mockCanAccessLedger.mockReturnValue(true);\n    });\n\n    it('updates filters when date range is changed', async () => {\n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      await waitFor(() => {\n        // Find start date input\n        const startDateInput = screen.getByLabelText('Start Date');\n        fireEvent.change(startDateInput, { target: { value: '2024-01-01' } });\n        \n        const endDateInput = screen.getByLabelText('End Date');\n        fireEvent.change(endDateInput, { target: { value: '2024-01-31' } });\n      });\n      \n      // Verify the filters were updated\n      await waitFor(() => {\n        expect(mockReportsService.getCompleteLedger).toHaveBeenCalledWith(\n          expect.objectContaining({\n            start_date: '2024-01-01',\n            end_date: '2024-01-31'\n          })\n        );\n      });\n    });\n\n    it('refreshes data when refresh button is clicked', async () => {\n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      await waitFor(() => {\n        const refreshButton = screen.getByText('Refresh');\n        fireEvent.click(refreshButton);\n      });\n      \n      // Verify service was called again\n      expect(mockReportsService.getCompleteLedger).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(() => {\n      mockCanAccessLedger.mockReturnValue(true);\n    });\n\n    it('displays error message when complete ledger fails to load', async () => {\n      mockReportsService.getCompleteLedger.mockRejectedValue(new Error('API Error'));\n      \n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      await waitFor(() => {\n        expect(screen.getByText('No complete ledger data available')).toBeInTheDocument();\n      });\n    });\n\n    it('displays error message when outstanding ledger fails to load', async () => {\n      mockReportsService.getOutstandingLedger.mockRejectedValue(new Error('API Error'));\n      \n      const Wrapper = createWrapper();\n      render(<ReportsPage />, { wrapper: Wrapper });\n      \n      // Click on Ledger tab\n      fireEvent.click(screen.getByText('Ledger'));\n      \n      // Toggle to outstanding ledger\n      await waitFor(() => {\n        const toggle = screen.getByRole('checkbox');\n        fireEvent.click(toggle);\n      });\n      \n      await waitFor(() => {\n        expect(screen.getByText('No outstanding ledger data available')).toBeInTheDocument();\n      });\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/_app.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":159,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":159,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppProps } from 'next/app';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../styles/modern-theme.css';\nimport Layout from '../components/layout'; // Use lowercase layout\nimport { useRouter } from 'next/router';\nimport { AuthProvider, useAuth } from '../context/AuthContext';\n\n// Create modern theme using our design system\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#2563eb', // var(--primary-600)\n      light: '#3b82f6', // var(--primary-500)\n      dark: '#1d4ed8', // var(--primary-700)\n    },\n    secondary: {\n      main: '#7c3aed', // var(--secondary-600)\n      light: '#8b5cf6', // var(--secondary-500)\n      dark: '#6d28d9', // var(--secondary-700)\n    },\n    success: {\n      main: '#059669', // var(--success-600)\n      light: '#10b981', // var(--success-500)\n      dark: '#047857', // var(--success-700)\n    },\n    warning: {\n      main: '#d97706', // var(--warning-600)\n      light: '#f59e0b', // var(--warning-500)\n      dark: '#b45309', // var(--warning-700)\n    },\n    error: {\n      main: '#dc2626', // var(--error-600)\n      light: '#ef4444', // var(--error-500)\n      dark: '#b91c1c', // var(--error-700)\n    },\n    info: {\n      main: '#0891b2', // var(--info-600)\n      light: '#06b6d4', // var(--info-500)\n      dark: '#0e7490', // var(--info-700)\n    },\n    background: {\n      default: '#f8fafc', // var(--bg-secondary)\n      paper: '#ffffff', // var(--bg-surface)\n    },\n    text: {\n      primary: '#111827', // var(--text-primary)\n      secondary: '#4b5563', // var(--text-secondary)\n    },\n  },\n  typography: {\n    fontFamily: 'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif',\n    h1: {\n      fontSize: '2.25rem', // var(--font-size-4xl)\n      fontWeight: 700,\n      lineHeight: 1.25, // var(--leading-tight)\n    },\n    h2: {\n      fontSize: '1.875rem', // var(--font-size-3xl)\n      fontWeight: 700,\n      lineHeight: 1.25,\n    },\n    h3: {\n      fontSize: '1.5rem', // var(--font-size-2xl)\n      fontWeight: 600,\n      lineHeight: 1.25,\n    },\n    h4: {\n      fontSize: '1.25rem', // var(--font-size-xl)\n      fontWeight: 600,\n      lineHeight: 1.25,\n    },\n    h5: {\n      fontSize: '1.125rem', // var(--font-size-lg)\n      fontWeight: 600,\n      lineHeight: 1.25,\n    },\n    h6: {\n      fontSize: '1rem', // var(--font-size-base)\n      fontWeight: 500,\n      lineHeight: 1.25,\n    },\n    body1: {\n      fontSize: '1rem', // var(--font-size-base)\n      lineHeight: 1.5, // var(--leading-normal)\n    },\n    body2: {\n      fontSize: '0.875rem', // var(--font-size-sm)\n      lineHeight: 1.5,\n    },\n    caption: {\n      fontSize: '0.75rem', // var(--font-size-xs)\n      lineHeight: 1.5,\n    },\n  },\n  shape: {\n    borderRadius: 8, // var(--radius-md) converted to px\n  },\n  shadows: [\n    'none',\n    '0 1px 2px 0 rgba(0, 0, 0, 0.05)', // var(--shadow-sm)\n    '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)', // var(--shadow-md)\n    '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)', // var(--shadow-lg)\n    '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)', // var(--shadow-xl)\n    // Continue with defaults for higher indices\n    ...Array(20).fill('0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)')\n  ],\n  components: {\n    // Set global defaults for TextField: small size and outlined variant\n    MuiTextField: {\n      defaultProps: {\n        variant: 'outlined',\n        size: 'small',\n      },\n      styleOverrides: {\n        root: {\n          // Removed custom height (27px) to avoid overlap - use MUI's small size (~40px) for proper animation space\n          // Removed custom input padding - let MUI handle for floating labels\n          // Removed custom label transforms - let MUI animate naturally\n          '& .MuiInputBase-input': {\n            fontSize: '12px', // Keep custom input font size\n          },\n          '& .MuiInputLabel-root': {\n            fontSize: '12px', // Keep custom label font size\n          },\n          '& .MuiFormHelperText-root': {\n            fontSize: '10px', // Keep custom helper text size\n          },\n        },\n      },\n    },\n    // Dialog title styling (unchanged)\n    MuiDialogTitle: {\n      styleOverrides: {\n        root: {\n          '& .MuiTypography-h6': {\n            fontSize: '18px',\n            fontWeight: 600,\n          },\n        },\n      },\n    },\n  },\n});\n\n// Create query client (unchanged)\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const router = useRouter();\n\n  const LayoutWrapper = () => {\n    const { user, logout } = useAuth();\n    const showMegaMenu = !!user && router.pathname !== '/login' && router.pathname !== '/';\n\n    return (\n      <Layout user={user} onLogout={logout} showMegaMenu={showMegaMenu}>\n        <Component {...pageProps} />\n      </Layout>\n    );\n  };\n\n  return (\n    <AuthProvider>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <LayoutWrapper />\n          <ToastContainer\n            position=\"top-right\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n          />\n        </ThemeProvider>\n      </QueryClientProvider>\n    </AuthProvider>\n  );\n}\n\nexport default MyApp;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/_error.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ctx' is defined but never used.","line":23,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"ctx"},"fix":{"range":[463,483],"text":""},"desc":"Remove unused variable 'ctx'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Paper,\n  Alert\n} from '@mui/material';\nimport { Home, Refresh, ArrowBack } from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\nimport { NextPageContext } from 'next';\n\ninterface ErrorProps {\n  statusCode?: number;\n  hasGetInitialProps?: boolean;\n  err?: Error;\n}\n\ninterface ErrorPageComponent extends React.FC<ErrorProps> {\n  getInitialProps?: (ctx: NextPageContext) => Promise<ErrorProps> | ErrorProps;\n}\n\nconst ErrorPage: ErrorPageComponent = ({ statusCode, err }) => {\n  const router = useRouter();\n\n  const handleGoHome = () => {\n    router.push('/');\n  };\n\n  const handleRefresh = () => {\n    window.location.reload();\n  };\n\n  const handleGoBack = () => {\n    router.back();\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 8 }}>\n      <Paper sx={{ p: 4, textAlign: 'center' }}>\n        <Typography variant=\"h3\" color=\"error\" gutterBottom>\n          {statusCode ? `Error ${statusCode}` : 'Application Error'}\n        </Typography>\n        \n        <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n          {statusCode === 404\n            ? 'The page you are looking for was not found.'\n            : statusCode === 500\n            ? 'An internal server error occurred.'\n            : 'An unexpected error occurred.'}\n        </Typography>\n\n        {err && process.env.NODE_ENV === 'development' && (\n          <Alert severity=\"error\" sx={{ mt: 2, mb: 2, textAlign: 'left' }}>\n            <Typography variant=\"body2\">\n              <strong>Debug Information:</strong><br />\n              {err.message}\n            </Typography>\n          </Alert>\n        )}\n\n        <Box sx={{ mt: 4, display: 'flex', gap: 2, justifyContent: 'center' }}>\n          <Button\n            variant=\"contained\"\n            startIcon={<Home />}\n            onClick={handleGoHome}\n          >\n            Go Home\n          </Button>\n          \n          <Button\n            variant=\"outlined\"\n            startIcon={<ArrowBack />}\n            onClick={handleGoBack}\n          >\n            Go Back\n          </Button>\n          \n          <Button\n            variant=\"outlined\"\n            startIcon={<Refresh />}\n            onClick={handleRefresh}\n          >\n            Refresh\n          </Button>\n        </Box>\n\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 3 }}>\n          If this problem persists, please contact support.\n        </Typography>\n      </Paper>\n    </Container>\n  );\n};\n\nErrorPage.getInitialProps = ({ res, err }: NextPageContext) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n  return { statusCode };\n};\n\nexport default ErrorPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/app-user-management.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[279,294],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[294,308],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[308,318],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[318,330],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Switch"},"fix":{"range":[330,340],"text":""},"desc":"Remove unused variable 'Switch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[340,360],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[445,453],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used.","line":73,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":73,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"setLoading"},"fix":{"range":[1208,1220],"text":""},"desc":"Remove unused variable 'setLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'editDialogOpen' is assigned a value but never used.","line":76,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"editDialogOpen"},"fix":{"range":[1375,1389],"text":""},"desc":"Remove unused variable 'editDialogOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setEditDialogOpen' is assigned a value but never used.","line":76,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"setEditDialogOpen"},"fix":{"range":[1389,1408],"text":""},"desc":"Remove unused variable 'setEditDialogOpen'."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Tooltip,\n  TableContainer,\n  Grid as Grid,\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Lock,\n  LockOpen,\n  RestartAlt,\n  AdminPanelSettings,\n  Security,\n  AccountCircle,\n  Shield\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '../../context/AuthContext';\n\ninterface AppUser {\n  id: number;\n  email: string;\n  username: string;\n  full_name: string;\n  role: string;\n  department?: string;\n  designation?: string;\n  phone?: string;\n  is_active: boolean;\n  created_at: string;\n  last_login?: string;\n}\n\ninterface CreateUserData {\n  email: string;\n  password: string;\n  full_name: string;\n  department?: string;\n  designation?: string;\n  phone?: string;\n}\n\nconst AppUserManagement: React.FC = () => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<AppUser | null>(null);\n  const [createUserData, setCreateUserData] = useState<CreateUserData>({\n    email: '',\n    password: '',\n    full_name: '',\n    department: '',\n    designation: '',\n    phone: ''\n  });\n\n  // Check if current user is the god account\n  const isGodAccount = user?.email === 'naughty@grok.com';\n\n  const queryClient = useQueryClient();\n\n  const { data: appUsers } = useQuery({\n    queryKey: ['appUsers'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/v1/app-users/', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch app users');\n      }\n\n      const data = await response.json();\n      return data as AppUser[];\n    }\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserData) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/v1/app-users/', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...data,\n          role: 'super_admin'\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to create user');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['appUsers'] });\n      setCreateDialogOpen(false);\n      setCreateUserData({\n        email: '',\n        password: '',\n        full_name: '',\n        department: '',\n        designation: '',\n        phone: ''\n      });\n    }\n  });\n\n  const toggleUserStatusMutation = useMutation({\n    mutationFn: async (userId: number) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/app-users/${userId}/toggle-status`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to toggle user status');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['appUsers'] });\n    }\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (userId: number) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/app-users/${userId}/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to reset password');\n      }\n\n      return response.json();\n    }\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: number) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/app-users/${userId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to delete user');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['appUsers'] });\n      setDeleteDialogOpen(false);\n      setSelectedUser(null);\n    }\n  });\n\n  const handleCreateUser = () => {\n    createUserMutation.mutate(createUserData);\n  };\n\n  const handleToggleUserStatus = (userId: number) => {\n    toggleUserStatusMutation.mutate(userId);\n  };\n\n  const handleResetPassword = (userId: number) => {\n    resetPasswordMutation.mutate(userId, {\n      onSuccess: (result) => {\n        alert(`Password reset successfully. New password: ${result.new_password}`);\n      }\n    });\n  };\n\n  const handleDeleteUser = () => {\n    if (!selectedUser) {return;}\n    deleteUserMutation.mutate(selectedUser.id);\n  };\n\n  const getStatusChip = (isActive: boolean) => {\n    return (\n      <Chip\n        label={isActive ? 'Active' : 'Inactive'}\n        color={isActive ? 'success' : 'default'}\n        size=\"small\"\n      />\n    );\n  };\n\n  if (!isGodAccount) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          Access denied. App User Management is restricted to the primary super admin.\n        </Alert>\n      </Container>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Typography>Loading...</Typography>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\" sx={{ display: 'flex', alignItems: 'center' }}>\n          <AdminPanelSettings sx={{ mr: 2 }} />\n          App User Management\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => setCreateDialogOpen(true)}\n        >\n          Add App User\n        </Button>\n      </Box>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      )}\n      <Paper sx={{ mb: 3, p: 2 }}>\n        <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n          <Security sx={{ mr: 1 }} />\n          App-Level User Overview\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid\n            size={{\n              xs: 12,\n              sm: 4\n            }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"primary\">\n                {appUsers?.length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Total App Users\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid\n            size={{\n              xs: 12,\n              sm: 4\n            }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"success.main\">\n                {appUsers?.filter(u => u.is_active).length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Active Users\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid\n            size={{\n              xs: 12,\n              sm: 4\n            }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"info.main\">\n                1\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                God Account\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </Paper>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>User</TableCell>\n              <TableCell>Email</TableCell>\n              <TableCell>Role</TableCell>\n              <TableCell>Department</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {appUsers?.map((appUser) => (\n              <TableRow key={appUser.id}>\n                <TableCell>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <AccountCircle sx={{ mr: 1, color: 'primary.main' }} />\n                    <Box>\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {appUser.full_name}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        @{appUser.username}\n                      </Typography>\n                    </Box>\n                    {appUser.email === 'naughty@grok.com' && (\n                      <Tooltip title=\"God Account - Cannot be deleted\">\n                        <Shield sx={{ ml: 1, color: 'gold' }} />\n                      </Tooltip>\n                    )}\n                  </Box>\n                </TableCell>\n                <TableCell>{appUser.email}</TableCell>\n                <TableCell>\n                  <Chip label=\"Super Admin\" color=\"primary\" size=\"small\" />\n                </TableCell>\n                <TableCell>{appUser.department || '-'}</TableCell>\n                <TableCell>{getStatusChip(appUser.is_active)}</TableCell>\n                <TableCell>\n                  {new Date(appUser.created_at).toLocaleDateString()}\n                </TableCell>\n                <TableCell>\n                  <IconButton\n                    size=\"small\"\n                    color=\"primary\"\n                    onClick={() => handleResetPassword(appUser.id)}\n                    title=\"Reset Password\"\n                  >\n                    <RestartAlt />\n                  </IconButton>\n                  {appUser.email !== 'naughty@grok.com' && (\n                    <>\n                      <IconButton\n                        size=\"small\"\n                        color={appUser.is_active ? 'warning' : 'success'}\n                        onClick={() => handleToggleUserStatus(appUser.id)}\n                        title={appUser.is_active ? 'Deactivate' : 'Activate'}\n                      >\n                        {appUser.is_active ? <Lock /> : <LockOpen />}\n                      </IconButton>\n                      <IconButton\n                        size=\"small\"\n                        color=\"error\"\n                        onClick={() => {\n                          setSelectedUser(appUser);\n                          setDeleteDialogOpen(true);\n                        }}\n                        title=\"Delete User\"\n                      >\n                        <Delete />\n                      </IconButton>\n                    </>\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* Create User Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Create New App User</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Email\"\n                type=\"email\"\n                value={createUserData.email}\n                onChange={(e) => setCreateUserData({ ...createUserData, email: e.target.value })}\n                required\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Password\"\n                type=\"password\"\n                value={createUserData.password}\n                onChange={(e) => setCreateUserData({ ...createUserData, password: e.target.value })}\n                required\n                helperText=\"User will be forced to change password on first login\"\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Full Name\"\n                value={createUserData.full_name}\n                onChange={(e) => setCreateUserData({ ...createUserData, full_name: e.target.value })}\n                required\n              />\n            </Grid>\n            <Grid\n              size={{\n                xs: 12,\n                sm: 6\n              }}>\n              <TextField\n                fullWidth\n                label=\"Department\"\n                value={createUserData.department}\n                onChange={(e) => setCreateUserData({ ...createUserData, department: e.target.value })}\n              />\n            </Grid>\n            <Grid\n              size={{\n                xs: 12,\n                sm: 6\n              }}>\n              <TextField\n                fullWidth\n                label=\"Designation\"\n                value={createUserData.designation}\n                onChange={(e) => setCreateUserData({ ...createUserData, designation: e.target.value })}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Phone\"\n                value={createUserData.phone}\n                onChange={(e) => setCreateUserData({ ...createUserData, phone: e.target.value })}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleCreateUser} variant=\"contained\">\n            Create User\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Delete User Dialog */}\n      <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n        <DialogTitle>Delete App User</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete <strong>{selectedUser?.full_name}</strong> ({selectedUser?.email})?\n          </Typography>\n          <Alert severity=\"warning\" sx={{ mt: 2 }}>\n            This action cannot be undone. The user will lose all access to the application.\n          </Alert>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleDeleteUser} variant=\"contained\" color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default AppUserManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/audit-logs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Settings"},"fix":{"range":[296,308],"text":""},"desc":"Remove unused variable 'Settings'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// fastapi_migration/frontend/src/pages/admin/index.tsx\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { \n  Container, \n  Typography, \n  Button, \n  Box,\n  Chip,\n  Paper,\n  Grid as Grid,\n} from '@mui/material';\nimport {\n  Security,\n  Business,\n  AdminPanelSettings,\n  Settings,\n  Dashboard\n} from '@mui/icons-material';\nimport { useAuth } from '../../context/AuthContext';\n\nconst AdminDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const isGodAccount = user?.email === 'naughty@grok.com';\n  const isSuperAdmin = user?.is_super_admin || user?.role === 'super_admin';\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Admin Dashboard\n      </Typography>\n      <Typography variant=\"body1\" color=\"textSecondary\" paragraph>\n        Welcome to the administration panel. Select a module below to manage the application.\n      </Typography>\n      <Grid container spacing={3}>\n        {/* License Management */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Paper>\n            <Box sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Security sx={{ mr: 2, color: 'primary.main' }} />\n                <Typography variant=\"h6\">License Management</Typography>\n              </Box>\n              <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\n                Create new organization licenses and view existing licenses. \n                Restricted to license creation and viewing only.\n              </Typography>\n              <Link href=\"/admin/license-management\" passHref>\n                <Button variant=\"contained\" fullWidth>\n                  Manage Licenses\n                </Button>\n              </Link>\n            </Box>\n          </Paper>\n        </Grid>\n\n        {/* Manage Organizations */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Paper>\n            <Box sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Business sx={{ mr: 2, color: 'primary.main' }} />\n                <Typography variant=\"h6\">Manage Organizations</Typography>\n              </Box>\n              <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\n                Full organization management including password resets, status changes, \n                and data operations.\n              </Typography>\n              <Link href=\"/admin/manage-organizations\" passHref>\n                <Button variant=\"contained\" fullWidth>\n                  Manage Organizations\n                </Button>\n              </Link>\n            </Box>\n          </Paper>\n        </Grid>\n\n        {/* App User Management - Only for God Account */}\n        {isGodAccount && (\n          <Grid size={{ xs: 12, md: 6 }}>\n            <Paper>\n              <Box sx={{ p: 3 }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <AdminPanelSettings sx={{ mr: 2, color: 'warning.main' }} />\n                  <Typography variant=\"h6\">App User Management</Typography>\n                  <Chip label=\"Restricted\" color=\"warning\" size=\"small\" sx={{ ml: 1 }} />\n                </Box>\n                <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\n                  Manage app-level users (superadmins and admins). \n                  Only accessible to the primary super admin.\n                </Typography>\n                <Link href=\"/admin/app-user-management\" passHref>\n                  <Button variant=\"contained\" color=\"warning\" fullWidth>\n                    Manage App Users\n                  </Button>\n                </Link>\n              </Box>\n            </Paper>\n          </Grid>\n        )}\n\n        {/* Dashboard */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Paper>\n            <Box sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Dashboard sx={{ mr: 2, color: 'primary.main' }} />\n                <Typography variant=\"h6\">Dashboard</Typography>\n              </Box>\n              <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\n                View {isSuperAdmin ? 'app-level statistics and metrics' : 'organization dashboard'}.\n              </Typography>\n              <Link href=\"/dashboard\" passHref>\n                <Button variant=\"outlined\" fullWidth>\n                  View Dashboard\n                </Button>\n              </Link>\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n      {/* Access Information */}\n      <Box sx={{ mt: 4, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Your Access Level\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n          {isSuperAdmin && (\n            <Chip label=\"App Super Admin\" color=\"primary\" />\n          )}\n          {isGodAccount && (\n            <Chip label=\"God Account\" color=\"warning\" />\n          )}\n          <Chip label={`Role: ${user?.role || 'Unknown'}`} variant=\"outlined\" />\n        </Box>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1 }}>\n          {isGodAccount \n            ? \"You have full access to all administrative functions including app user management.\"\n            : isSuperAdmin \n            ? \"You can manage licenses and organizations but cannot manage app-level users.\"\n            : \"You have limited administrative access based on your role.\"\n          }\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AdminDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/license-management.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[198,208],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[208,223],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[223,240],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogActions"},"fix":{"range":[240,257],"text":""},"desc":"Remove unused variable 'DialogActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[257,266],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"List"},"fix":{"range":[277,285],"text":""},"desc":"Remove unused variable 'List'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItem"},"fix":{"range":[285,297],"text":""},"desc":"Remove unused variable 'ListItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemText"},"fix":{"range":[297,313],"text":""},"desc":"Remove unused variable 'ListItemText'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemIcon"},"fix":{"range":[313,329],"text":""},"desc":"Remove unused variable 'ListItemIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'createLicenseMutation' is assigned a value but never used.","line":69,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"createLicenseMutation"},"fix":{"range":[1508,1741],"text":""},"desc":"Remove unused variable 'createLicenseMutation'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used.","line":77,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"result"},"fix":{"range":[1774,1785],"text":""},"desc":"Remove unused variable 'result'."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  TableContainer,\n  Grid as Grid,\n  TextField,\n} from '@mui/material';\nimport {\n  Add,\n  Visibility,\n  Business,\n  Security,\n  Restore,\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRouter } from 'next/navigation';\nimport { organizationService } from '../../services/authService';\nimport adminService from '../../services/adminService';\nimport CreateOrganizationLicenseModal from '../../components/CreateOrganizationLicenseModal';\n\ninterface Organization {\n  id: number;\n  name: string;\n  subdomain: string;\n  status: string;\n  primary_email: string;\n  primary_phone: string;\n  plan_type: string;\n  max_users: number;\n  created_at: string;\n  company_details_completed: boolean;\n}\n\nconst LicenseManagement: React.FC = () => {\n  const router = useRouter();\n  const queryClient = useQueryClient();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // API calls using real service\n  const { data: organizations, isLoading } = useQuery({\n    queryKey: ['organizations'],\n    queryFn: organizationService.getAllOrganizations\n  });\n\n  const createLicenseMutation = useMutation({\n    mutationFn: organizationService.createLicense,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['organizations'] });\n      setCreateDialogOpen(false);\n    }\n  });\n\n  const handleCreateLicense = (result: any) => {\n    // License creation is handled by the modal\n    queryClient.invalidateQueries({ queryKey: ['organizations'] });\n  };\n\n  const handleResetPassword = async (primary_email: string, orgName: string) => {\n    try {\n      // Add confirmation dialog for reset action\n      const confirmed = window.confirm(\n        `Are you sure you want to reset the password for the organization admin of \"${orgName}\"?\\n\\n` +\n        `This will generate a new temporary password for: ${primary_email}`\n      );\n      \n      if (!confirmed) {\n        return;\n      }\n\n      const response = await adminService.resetUserPassword(primary_email);\n      \n      // Better user feedback with success dialog\n      alert(\n        `✅ Password Reset Successful\\n\\n` +\n        `Organization: ${orgName}\\n` +\n        `Admin Email: ${primary_email}\\n` +\n        `New Temporary Password: ${response.new_password}\\n\\n` +\n        `⚠️ Please save this password immediately and share it securely with the admin.\\n` +\n        `The admin must change this password on their next login.`\n      );\n    } catch (error: any) {\n      alert(\n        `❌ Password Reset Failed\\n\\n` +\n        `Organization: ${orgName}\\n` +\n        `Admin Email: ${primary_email}\\n` +\n        `Error: ${error.message || 'Failed to reset password'}\\n\\n` +\n        `Please try again or contact support if the issue persists.`\n      );\n    }\n  };\n\n  const getStatusChip = (status: string) => {\n    const statusConfig = {\n      active: { label: 'Active', color: 'success' as const },\n      trial: { label: 'Trial', color: 'info' as const },\n      suspended: { label: 'Suspended', color: 'error' as const },\n      hold: { label: 'On Hold', color: 'warning' as const }\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || \n                   { label: status, color: 'default' as const };\n    \n    return <Chip label={config.label} color={config.color} size=\"small\" />;\n  };\n\n  const filteredOrganizations = organizations?.filter((org: Organization) =>\n    org.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    org.primary_email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    org.subdomain.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          License Management\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => setCreateDialogOpen(true)}\n        >\n          Create New License\n        </Button>\n      </Box>\n      <Paper sx={{ mb: 3, p: 2 }}>\n        <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n          <Security sx={{ mr: 1 }} />\n          License Creation Overview\n        </Typography>\n        <Divider sx={{ mb: 2 }} />\n        \n        <Grid container spacing={3}>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"primary\">\n                {organizations?.length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Total Licenses\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"success.main\">\n                {organizations?.filter((org: Organization) => org.status === 'active').length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Active Licenses\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"info.main\">\n                {organizations?.filter((org: Organization) => org.status === 'trial').length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Trial Licenses\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"error.main\">\n                {organizations?.filter((org: Organization) => org.status === 'suspended').length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Suspended Licenses\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Search Bar */}\n      <Box sx={{ mb: 3 }}>\n        <Grid container justifyContent=\"flex-start\">\n          <Grid size={5}>\n            <TextField\n              fullWidth\n              label=\"Search by Name, Email, or Subdomain\"\n              variant=\"outlined\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n          </Grid>\n        </Grid>\n      </Box>\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Organization</TableCell>\n              <TableCell>Subdomain</TableCell>\n              <TableCell>Contact</TableCell>\n              <TableCell>Plan</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell colSpan={7} align=\"center\">\n                  Loading...\n                </TableCell>\n              </TableRow>\n            ) : filteredOrganizations.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} align=\"center\">\n                  No organizations found.\n                </TableCell>\n              </TableRow>\n            ) : (\n              filteredOrganizations.map((org: Organization) => (\n                <TableRow key={org.id}>\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Business sx={{ mr: 1, color: 'primary.main' }} />\n                      <Box>\n                        <Typography \n                          variant=\"body2\" \n                          fontWeight=\"medium\"\n                          component=\"button\"\n                          onClick={() => router.push(`/admin/organizations/${org.id}`)}\n                          sx={{\n                            color: 'primary.main',\n                            textDecoration: 'underline',\n                            cursor: 'pointer',\n                            border: 'none',\n                            background: 'transparent',\n                            padding: 0,\n                            font: 'inherit',\n                            '&:hover': {\n                              color: 'primary.dark',\n                            }\n                          }}\n                          title=\"Click to view organization details\"\n                        >\n                          {org.name}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          ID: {org.id}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\" color=\"primary\">\n                      {org.subdomain}.tritiq.com\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Box>\n                      <Typography variant=\"body2\">\n                        {org.primary_email}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        {org.primary_phone}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                      {org.plan_type} (Max {org.max_users} users)\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    {getStatusChip(org.status)}\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\">\n                      {new Date(org.created_at).toLocaleDateString()}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <IconButton\n                      size=\"small\"\n                      color=\"info\"\n                      onClick={() => router.push(`/admin/organizations/${org.id}`)}\n                      title=\"View Details\"\n                    >\n                      <Visibility />\n                    </IconButton>\n                    <IconButton\n                      size=\"small\"\n                      color=\"secondary\"\n                      onClick={() => handleResetPassword(org.primary_email, org.name)}\n                      title=\"Reset Organization Admin Password\"\n                    >\n                      <Restore />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* Enhanced Create License Modal */}\n      <CreateOrganizationLicenseModal\n        open={createDialogOpen}\n        onClose={() => setCreateDialogOpen(false)}\n        onSuccess={handleCreateLicense}\n      />\n    </Container>\n  );\n};\n\nexport default LicenseManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/manage-organizations.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[276,289],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[289,301],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[301,316],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[316,330],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[330,340],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[478,483],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Security' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Security"},"fix":{"range":[542,554],"text":""},"desc":"Remove unused variable 'Security'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[554,564],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'availableModules' is assigned a value but never used.","line":70,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"availableModules"},"fix":{"range":[1669,1685],"text":""},"desc":"Remove unused variable 'availableModules'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAvailableModules' is assigned a value but never used.","line":70,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAvailableModules"},"fix":{"range":[1685,1706],"text":""},"desc":"Remove unused variable 'setAvailableModules'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":93,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[2546,2552],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'orgId' is defined but never used.","line":114,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"orgId"},"fix":{"range":[3452,3465],"text":""},"desc":"Remove unused variable 'orgId'."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Divider,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  TableContainer,\n  Checkbox,\n  FormControlLabel,\n  FormGroup\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport {\n  Edit,\n  Lock,\n  LockOpen,\n  RestartAlt,\n  Visibility,\n  Business,\n  Security,\n  Delete,\n  Add,\n  Settings,\n  DataUsage\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRouter } from 'next/navigation';\nimport { organizationService } from '../../services/authService';\ninterface Organization {\n  id: number;\n  name: string;\n  subdomain: string;\n  status: string;\n  primary_email: string;\n  primary_phone: string;\n  plan_type: string;\n  max_users: number;\n  created_at: string;\n  company_details_completed: boolean;\n}\nconst ManageOrganizations: React.FC = () => {\n  const router = useRouter();\n  const queryClient = useQueryClient();\n  const [selectedOrg, setSelectedOrg] = useState<Organization | null>(null);\n  const [actionDialogOpen, setActionDialogOpen] = useState(false);\n  const [resetDataDialogOpen, setResetDataDialogOpen] = useState(false);\n  const [moduleControlDialogOpen, setModuleControlDialogOpen] = useState(false);\n  const [actionType, setActionType] = useState<'hold' | 'activate' | 'reset' | 'delete' | null>(null);\n  const [orgModules, setOrgModules] = useState<{[key: string]: boolean}>({});\n  const [availableModules, setAvailableModules] = useState<{[key: string]: any}>({});\n  // API calls using real service\n  const { data: organizations, isLoading } = useQuery({\n    queryKey: ['organizations'],\n    queryFn: organizationService.getAllOrganizations\n  });\n\n  // Fetch available modules\n  const { data: availableModulesData } = useQuery({\n    queryKey: ['available-modules'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/v1/organizations/available-modules', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {throw new Error('Failed to fetch available modules');}\n      return response.json();\n    }\n  });\n  const updateOrganizationMutation = useMutation({\n    mutationFn: async ({ orgId, action, data }: { orgId: number; action: string; data?: any }) => {\n      // Map actions to appropriate API calls\n      if (action === 'activate') {\n        return organizationService.updateOrganizationById(orgId, { status: 'active' });\n      } else if (action === 'hold') {\n        return organizationService.updateOrganizationById(orgId, { status: 'suspended' });\n      } else if (action === 'reset') {\n        // TODO: Implement password reset API call\n        console.log('Password reset for org:', orgId);\n        return { message: 'Password reset successfully' };\n      }\n      return { message: `Organization ${action} successfully` };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['organizations'] });\n      setActionDialogOpen(false);\n      setSelectedOrg(null);\n      setActionType(null);\n    }\n  });\n  const resetOrgDataMutation = useMutation({\n    mutationFn: async (orgId: number) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/organizations/reset-data`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to reset organization data');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['organizations'] });\n      setResetDataDialogOpen(false);\n      setSelectedOrg(null);\n    }\n  });\n  const handleAction = (org: Organization, action: 'hold' | 'activate' | 'reset' | 'delete') => {\n    setSelectedOrg(org);\n    setActionType(action);\n    setActionDialogOpen(true);\n  };\n  const handleResetData = (org: Organization) => {\n    setSelectedOrg(org);\n    setResetDataDialogOpen(true);\n  };\n\n  const handleModuleControl = async (org: Organization) => {\n    setSelectedOrg(org);\n    \n    // Fetch current organization modules\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/organizations/${org.id}/modules`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setOrgModules(data.enabled_modules || {\n          \"CRM\": true,\n          \"ERP\": true,\n          \"HR\": true,\n          \"Inventory\": true,\n          \"Service\": true,\n          \"Analytics\": true,\n          \"Finance\": true\n        });\n      } else {\n        // Set default modules if API fails\n        setOrgModules({\n          \"CRM\": true,\n          \"ERP\": true,\n          \"HR\": true,\n          \"Inventory\": true,\n          \"Service\": true,\n          \"Analytics\": true,\n          \"Finance\": true\n        });\n      }\n    } catch (error) {\n      console.error('Failed to fetch organization modules:', error);\n      setOrgModules({\n        \"CRM\": true,\n        \"ERP\": true,\n        \"HR\": true,\n        \"Inventory\": true,\n        \"Service\": true,\n        \"Analytics\": true,\n        \"Finance\": true\n      });\n    }\n    \n    setModuleControlDialogOpen(true);\n  };\n\n  const updateModulesMutation = useMutation({\n    mutationFn: async (modules: {[key: string]: boolean}) => {\n      if (!selectedOrg) {throw new Error('No organization selected');}\n      \n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/organizations/${selectedOrg.id}/modules`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ enabled_modules: modules })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update organization modules');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setModuleControlDialogOpen(false);\n      setSelectedOrg(null);\n      // Show success message\n      console.log('Organization modules updated successfully');\n    },\n    onError: (error) => {\n      console.error('Failed to update organization modules:', error);\n    }\n  });\n\n  const handleModuleChange = (module: string, enabled: boolean) => {\n    setOrgModules(prev => ({\n      ...prev,\n      [module]: enabled\n    }));\n  };\n\n  const confirmModuleUpdate = () => {\n    updateModulesMutation.mutate(orgModules);\n  };\n  const confirmAction = () => {\n    if (selectedOrg && actionType) {\n      updateOrganizationMutation.mutate({\n        orgId: selectedOrg.id,\n        action: actionType\n      });\n    }\n  };\n  const confirmResetData = () => {\n    if (selectedOrg) {\n      resetOrgDataMutation.mutate(selectedOrg.id);\n    }\n  };\n  const getStatusChip = (status: string) => {\n    const statusConfig = {\n      active: { label: 'Active', color: 'success' as const },\n      trial: { label: 'Trial', color: 'info' as const },\n      suspended: { label: 'Suspended', color: 'error' as const },\n      hold: { label: 'On Hold', color: 'warning' as const }\n    };\n   \n    const config = statusConfig[status as keyof typeof statusConfig] ||\n                   { label: status, color: 'default' as const };\n   \n    return <Chip label={config.label} color={config.color} size=\"small\" />;\n  };\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Manage Organizations\n        </Typography>\n        <Button\n          variant=\"outlined\"\n          startIcon={<Add />}\n          onClick={() => router.push('/admin/license-management')}\n        >\n          Create New License\n        </Button>\n      </Box>\n      <Paper sx={{ mb: 3, p: 2 }}>\n        <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n          <Settings sx={{ mr: 1 }} />\n          Organization Management Overview\n        </Typography>\n        <Divider sx={{ mb: 2 }} />\n       \n        <Grid container spacing={3}>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"primary\">\n                {organizations?.length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Total Organizations\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"success.main\">\n                {organizations?.filter((org: Organization) => org.status === 'active').length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Active Organizations\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"warning.main\">\n                {organizations?.filter((org: Organization) => org.status === 'suspended').length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Suspended Organizations\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"info.main\">\n                {organizations?.filter((org: Organization) => org.status === 'trial').length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Trial Organizations\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </Paper>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Organization</TableCell>\n              <TableCell>Subdomain</TableCell>\n              <TableCell>Contact</TableCell>\n              <TableCell>Plan</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell colSpan={7} align=\"center\">\n                  Loading...\n                </TableCell>\n              </TableRow>\n            ) : organizations?.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} align=\"center\">\n                  No organizations found.\n                </TableCell>\n              </TableRow>\n            ) : (\n              organizations?.map((org: Organization) => (\n                <TableRow key={org.id}>\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Business sx={{ mr: 1, color: 'primary.main' }} />\n                      <Box>\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {org.name}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          ID: {org.id}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\" color=\"primary\">\n                      {org.subdomain}.tritiq.com\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Box>\n                      <Typography variant=\"body2\">\n                        {org.primary_email}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        {org.primary_phone}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\" sx={{ textTransform: 'capitalize' }}>\n                      {org.plan_type} ({org.max_users} users)\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    {getStatusChip(org.status)}\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\">\n                      {new Date(org.created_at).toLocaleDateString()}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <IconButton\n                      size=\"small\"\n                      color=\"info\"\n                      onClick={() => router.push(`/admin/organizations/${org.id}`)}\n                      title=\"View Details\"\n                    >\n                      <Visibility />\n                    </IconButton>\n                    <IconButton\n                      size=\"small\"\n                      color=\"secondary\"\n                      onClick={() => handleModuleControl(org)}\n                      title=\"Module Control\"\n                    >\n                      <Settings />\n                    </IconButton>\n                    <IconButton\n                      size=\"small\"\n                      color=\"primary\"\n                      onClick={() => handleAction(org, 'reset')}\n                      title=\"Reset Password\"\n                    >\n                      <RestartAlt />\n                    </IconButton>\n                    <IconButton\n                      size=\"small\"\n                      color=\"warning\"\n                      onClick={() => handleResetData(org)}\n                      title=\"Reset Organization Data\"\n                    >\n                      <DataUsage />\n                    </IconButton>\n                    {org.status === 'active' ? (\n                      <IconButton\n                        size=\"small\"\n                        color=\"warning\"\n                        onClick={() => handleAction(org, 'hold')}\n                        title=\"Suspend Organization\"\n                      >\n                        <Lock />\n                      </IconButton>\n                    ) : (\n                      <IconButton\n                        size=\"small\"\n                        color=\"success\"\n                        onClick={() => handleAction(org, 'activate')}\n                        title=\"Activate Organization\"\n                      >\n                        <LockOpen />\n                      </IconButton>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* Action Confirmation Dialog */}\n      <Dialog open={actionDialogOpen} onClose={() => setActionDialogOpen(false)}>\n        <DialogTitle>\n          Confirm {actionType === 'hold' ? 'Suspend Organization' :\n                   actionType === 'activate' ? 'Activate Organization' : 'Reset Password'}\n        </DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to {actionType === 'hold' ? 'suspend' :\n                                     actionType === 'activate' ? 'activate' : 'reset password for'}\n            <strong> {selectedOrg?.name}</strong>?\n          </Typography>\n          {actionType === 'reset' && (\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              A new temporary password will be generated and sent to the organization admin.\n            </Alert>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setActionDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={confirmAction}\n            variant=\"contained\"\n            color={actionType === 'hold' ? 'warning' : 'primary'}\n            disabled={updateOrganizationMutation.isPending}\n          >\n            {updateOrganizationMutation.isPending ? 'Processing...' : 'Confirm'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Reset Organization Data Dialog */}\n      <Dialog open={resetDataDialogOpen} onClose={() => setResetDataDialogOpen(false)}>\n        <DialogTitle>Reset Organization Data</DialogTitle>\n        <DialogContent>\n          <Typography gutterBottom>\n            Are you sure you want to reset all business data for\n            <strong> {selectedOrg?.name}</strong>?\n          </Typography>\n          <Alert severity=\"warning\" sx={{ mt: 2 }}>\n            This will permanently delete all business data including:\n            <ul>\n              <li>Products and inventory</li>\n              <li>Vendors and customers</li>\n              <li>Vouchers and transactions</li>\n              <li>Reports and analytics data</li>\n            </ul>\n            User accounts and organization settings will be preserved.\n          </Alert>\n          <Alert severity=\"error\" sx={{ mt: 1 }}>\n            This action cannot be undone!\n          </Alert>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setResetDataDialogOpen(false)}>Cancel</Button>\n          <Button\n            onClick={confirmResetData}\n            variant=\"contained\"\n            color=\"error\"\n            disabled={resetOrgDataMutation.isPending}\n          >\n            {resetOrgDataMutation.isPending ? 'Resetting...' : 'Reset All Data'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Module Control Dialog */}\n      <Dialog \n        open={moduleControlDialogOpen} \n        onClose={() => setModuleControlDialogOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          Module Control - {selectedOrg?.name}\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" sx={{ mb: 2 }}>\n            Control which modules are enabled for this organization. Changes are applied in real time.\n          </Typography>\n          <FormGroup>\n            {availableModulesData && Object.entries(availableModulesData.available_modules || {}).map(([moduleKey, moduleInfo]) => (\n              <FormControlLabel\n                key={moduleKey}\n                control={\n                  <Checkbox\n                    checked={orgModules[moduleKey] || false}\n                    onChange={(e) => handleModuleChange(moduleKey, e.target.checked)}\n                    color=\"primary\"\n                  />\n                }\n                label={\n                  <Box>\n                    <Typography variant=\"body2\" fontWeight=\"medium\">\n                      {moduleInfo.name}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {moduleInfo.description}\n                    </Typography>\n                  </Box>\n                }\n              />\n            ))}\n            {!availableModulesData && Object.entries(orgModules).map(([module, enabled]) => (\n              <FormControlLabel\n                key={module}\n                control={\n                  <Checkbox\n                    checked={enabled}\n                    onChange={(e) => handleModuleChange(module, e.target.checked)}\n                    color=\"primary\"\n                  />\n                }\n                label={module}\n              />\n            ))}\n          </FormGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setModuleControlDialogOpen(false)}>\n            Cancel\n          </Button>\n          <Button\n            onClick={confirmModuleUpdate}\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={updateModulesMutation.isPending}\n          >\n            {updateModulesMutation.isPending ? 'Updating...' : 'Update Modules'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\nexport default ManageOrganizations;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/notifications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/organizations/[id].tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":12,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Switch"},"fix":{"range":[472,484],"text":""},"desc":"Remove unused variable 'Switch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[515,537],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":17,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[721,732],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":18,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[762,775],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchOrganization' was used before it was defined.","line":75,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":75,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":117,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":117,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":117,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":117,"endColumn":19},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":156,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":156,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":156,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":156,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'jsonError' is defined but never used.","line":179,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":27},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":189,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":189,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":189,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":189,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":216,"column":16,"nodeType":"Identifier","messageId":"noShadow","endLine":216,"endColumn":21},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":216,"column":16,"nodeType":"Identifier","messageId":"noShadow","endLine":216,"endColumn":21},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":247,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":247,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 66 column 10.","line":247,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":247,"endColumn":19}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Revised: frontend/src/pages/admin/organizations/[id].tsx\n\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Switch from '@mui/material/Switch';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Alert from '@mui/material/Alert';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Divider from '@mui/material/Divider';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Snackbar from '@mui/material/Snackbar';\nimport { Edit as EditIcon, Save as SaveIcon, Cancel as CancelIcon, Delete as DeleteIcon } from '@mui/icons-material';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\n\ninterface Organization {\n  id: number;\n  name: string;\n  subdomain: string;\n  status: string;\n  business_type?: string;\n  industry?: string;\n  website?: string;\n  description?: string;\n  primary_email: string;\n  primary_phone: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code?: string;\n  country: string;\n  gst_number?: string;\n  pan_number?: string;\n  cin_number?: string;\n  plan_type: string;\n  max_users: number;\n  storage_limit_gb: number;\n  timezone: string;\n  currency: string;\n  created_at: string;\n  updated_at?: string;\n}\n\nconst OrganizationDetailPage: React.FC = () => {\n  const router = useRouter();\n  const { id } = router.query;\n  const [organization, setOrganization] = useState<Organization | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [editedOrg, setEditedOrg] = useState<Organization | null>(null);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [openResetDialog, setOpenResetDialog] = useState(false);\n  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);\n  const [resetPassword, setResetPassword] = useState<string | null>(null);\n  const [resetSnackbarOpen, setResetSnackbarOpen] = useState(false);\n  const [pincodeLoading, setPincodeLoading] = useState(false);\n\n  useEffect(() => {\n    if (id) {\n      fetchOrganization();\n    }\n  }, [id]);\n\n  useEffect(() => {\n    /**\n     * @deprecated Organization context should be accessed via React user context instead of localStorage instead\n     * The organization context is automatically managed by the backend session\n     */\n    if (organization) {\n      console.log('Organization details loaded:', organization.id);\n      // Organization context is managed by backend session only\n    }\n  }, [organization]);\n\n  const fetchOrganization = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/organizations/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          // Handle unauthorized - perhaps redirect to login\n          router.push('/login');\n          return;\n        }\n        if (response.status === 404) {\n          setError('Organization not found');\n          return;\n        }\n        throw new Error(`Failed to fetch organization: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      setOrganization(data);\n      setEditedOrg(data);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching organization:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load organization details');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEdit = () => {\n    setEditing(true);\n    setEditedOrg({ ...organization! });\n  };\n\n  const handleCancel = () => {\n    setEditing(false);\n    setEditedOrg({ ...organization! });\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/organizations/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(editedOrg),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update organization');\n      }\n\n      const updatedOrg = await response.json();\n      setOrganization(updatedOrg);\n      setEditing(false);\n      toast.success('Organization updated successfully');\n    } catch (error) {\n      toast.error('Failed to update organization');\n      console.error('Error updating organization:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/organizations/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        let errorMessage = 'Failed to delete organization';\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.detail || errorData.message || errorMessage;\n        } catch (jsonError) {\n          // If JSON parsing fails, use status text\n          errorMessage = response.statusText || errorMessage;\n        }\n        toast.error(errorMessage);\n        return;\n      }\n\n      toast.success('Organization deleted successfully');\n      router.push('/admin/license-management');\n    } catch (error: any) {\n      toast.error(error.message);\n      console.error('Error deleting organization:', error);\n    } finally {\n      setOpenDeleteDialog(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof Organization, value: string | number) => {\n    if (editedOrg) {\n      setEditedOrg({\n        ...editedOrg,\n        [field]: value,\n      });\n    }\n  };\n\n  const handlePincodeChange = async (value: string) => {\n    handleInputChange('pin_code', value);\n    if (value.length === 6 && editing) {\n      setPincodeLoading(true);\n      try {\n        const response = await axios.get(`/api/v1/pincode/lookup/${value}`);\n        const { city, state, state_code } = response.data;\n        handleInputChange('city', city);\n        handleInputChange('state', state);\n        handleInputChange('state_code', state_code);\n      } catch (error) {\n        console.error('Failed to lookup pincode:', error);\n        toast.error('Failed to autofill city and state from PIN code');\n      } finally {\n        setPincodeLoading(false);\n      }\n    }\n  };\n\n  const handleResetPassword = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/v1/password/admin-reset`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ user_email: organization?.primary_email }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to reset password');\n      }\n\n      const data = await response.json();\n      setResetPassword(data.new_password);\n      setOpenResetDialog(false);\n      setResetSnackbarOpen(true);\n      toast.success('Password reset successfully');\n    } catch (error) {\n      toast.error(error instanceof Error ? error.message : 'Failed to reset password');\n      console.error('Error resetting password:', error);\n    }\n  };\n\n  const getStatusColor = (status: string): 'success' | 'error' | 'warning' | 'default' => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'suspended': return 'error';\n      case 'trial': return 'warning';\n      default: return 'default';\n    }\n  };\n\n  if (loading) {return (\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n      <CircularProgress />\n    </Box>\n  );}\n\n  if (error || !organization) {return (\n    <Box p={3}>\n      <Alert severity=\"error\">\n        {error || 'Organization not found'}\n      </Alert>\n      <Button\n        variant=\"contained\"\n        onClick={() => router.push('/admin/organizations')}\n        sx={{ mt: 2 }}\n      >\n        Back to Organizations\n      </Button>\n    </Box>\n  );}\n\n  const currentOrg = editing ? editedOrg! : organization;\n\n  return (\n    <Box p={3}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Organization Details\n        </Typography>\n        <Box>\n          {!editing ? (\n            <>\n              <Button\n                variant=\"contained\"\n                startIcon={<EditIcon />}\n                onClick={handleEdit}\n                sx={{ mr: 1 }}\n              >\n                Edit\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={() => setOpenResetDialog(true)}\n                sx={{ mr: 1 }}\n              >\n                Reset Password\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color=\"error\"\n                startIcon={<DeleteIcon />}\n                onClick={() => setOpenDeleteDialog(true)}\n              >\n                Delete License\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button\n                variant=\"contained\"\n                startIcon={<SaveIcon />}\n                onClick={handleSave}\n                disabled={saving}\n                sx={{ mr: 1 }}\n              >\n                {saving ? 'Saving...' : 'Save'}\n              </Button>\n              <Button\n                variant=\"outlined\"\n                startIcon={<CancelIcon />}\n                onClick={handleCancel}\n                disabled={saving}\n              >\n                Cancel\n              </Button>\n            </>\n          )}\n        </Box>\n      </Box>\n      <Grid container spacing={3}>\n        {/* Basic Information */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Basic Information\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Organization Name\"\n                    value={currentOrg.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Subdomain\"\n                    value={currentOrg.subdomain}\n                    onChange={(e) => handleInputChange('subdomain', e.target.value)}\n                    disabled={!editing}\n                    helperText=\"Used for subdomain-specific access\"\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                    <Typography variant=\"body2\">Status:</Typography>\n                    <Chip\n                      label={currentOrg.status}\n                      color={getStatusColor(currentOrg.status)}\n                      size=\"small\"\n                    />\n                  </Box>\n                </Grid>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Business Type\"\n                    value={currentOrg.business_type || ''}\n                    onChange={(e) => handleInputChange('business_type', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Industry\"\n                    value={currentOrg.industry || ''}\n                    onChange={(e) => handleInputChange('industry', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Website\"\n                    value={currentOrg.website || ''}\n                    onChange={(e) => handleInputChange('website', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Description\"\n                    multiline\n                    rows={3}\n                    value={currentOrg.description || ''}\n                    onChange={(e) => handleInputChange('description', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Contact Information */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Contact Information\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Primary Email\"\n                    value={currentOrg.primary_email}\n                    onChange={(e) => handleInputChange('primary_email', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Primary Phone\"\n                    value={currentOrg.primary_phone}\n                    onChange={(e) => handleInputChange('primary_phone', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Address Line 1\"\n                    value={currentOrg.address1}\n                    onChange={(e) => handleInputChange('address1', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Address Line 2\"\n                    value={currentOrg.address2 || ''}\n                    onChange={(e) => handleInputChange('address2', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"PIN Code\"\n                    value={currentOrg.pin_code}\n                    onChange={(e) => handlePincodeChange(e.target.value)}\n                    disabled={!editing}\n                    InputProps={{\n                      endAdornment: pincodeLoading ? <CircularProgress size={20} /> : null,\n                    }}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <TextField\n                    fullWidth\n                    label=\"City\"\n                    value={currentOrg.city}\n                    onChange={(e) => handleInputChange('city', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <TextField\n                    fullWidth\n                    label=\"State\"\n                    value={currentOrg.state}\n                    onChange={(e) => handleInputChange('state', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Country\"\n                    value={currentOrg.country}\n                    onChange={(e) => handleInputChange('country', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Legal & Subscription Information */}\n        <Grid size={{ xs: 12 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Legal & Subscription Information\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid size={{ xs: 12, sm: 4 }}>\n                  <TextField\n                    fullWidth\n                    label=\"GST Number\"\n                    value={currentOrg.gst_number || ''}\n                    onChange={(e) => handleInputChange('gst_number', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 4 }}>\n                  <TextField\n                    fullWidth\n                    label=\"PAN Number\"\n                    value={currentOrg.pan_number || ''}\n                    onChange={(e) => handleInputChange('pan_number', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 4 }}>\n                  <TextField\n                    fullWidth\n                    label=\"CIN Number\"\n                    value={currentOrg.cin_number || ''}\n                    onChange={(e) => handleInputChange('cin_number', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 3 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Plan Type\"\n                    value={currentOrg.plan_type}\n                    onChange={(e) => handleInputChange('plan_type', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 3 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Max Users\"\n                    type=\"number\"\n                    value={currentOrg.max_users}\n                    onChange={(e) => handleInputChange('max_users', parseInt(e.target.value))}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 3 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Storage Limit (GB)\"\n                    type=\"number\"\n                    value={currentOrg.storage_limit_gb}\n                    onChange={(e) => handleInputChange('storage_limit_gb', parseInt(e.target.value))}\n                    disabled={!editing}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, sm: 3 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Currency\"\n                    value={currentOrg.currency}\n                    onChange={(e) => handleInputChange('currency', e.target.value)}\n                    disabled={!editing}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      {/* Reset Password Confirmation Dialog */}\n      <Dialog\n        open={openResetDialog}\n        onClose={() => setOpenResetDialog(false)}\n      >\n        <DialogTitle>Reset Password</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to reset the password for this organization's admin?\n            The new password will be emailed and also shown here for manual sharing.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenResetDialog(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleResetPassword} color=\"secondary\">\n            Reset\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Password Display Snackbar */}\n      <Snackbar\n        open={resetSnackbarOpen}\n        autoHideDuration={null}\n        onClose={() => setResetSnackbarOpen(false)}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        action={\n          <Button color=\"secondary\" size=\"small\" onClick={() => setResetSnackbarOpen(false)}>\n            Close\n          </Button>\n        }\n      >\n        <Alert severity=\"info\" onClose={() => setResetSnackbarOpen(false)}>\n          New Password: {resetPassword} (Copy this for manual sharing)\n        </Alert>\n      </Snackbar>\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={openDeleteDialog}\n        onClose={() => setOpenDeleteDialog(false)}\n      >\n        <DialogTitle>Delete License</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete this organization's license? This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDeleteDialog(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleDelete} color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default OrganizationDetailPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/organizations/create.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":15,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[541,568],"text":""},"desc":"Remove unused variable 'router'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// fastapi_migration/frontend/src/pages/admin/organizations/create.tsx\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport OrganizationForm from '../../../components/OrganizationForm';\nimport api from '../../../utils/api';\nimport RoleGate from '../../../components/RoleGate';\nimport { Alert, Snackbar, CircularProgress } from '@mui/material';\nimport { useAuth } from '../../../context/AuthContext';\n\nconst CreateOrganizationPage: React.FC = () => {\n  const { loading } = useAuth();\n  const router = useRouter();\n  const [tempPassword, setTempPassword] = useState<string | null>(null);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  if (loading) {\n    return <CircularProgress />;\n  }\n\n  const handleSubmit = async (data: any) => {\n    try {\n      // Post to license/create endpoint instead of /organizations\n      const response = await api.post('/organizations/license/create', data);\n      setTempPassword(response.data.temp_password);  // Capture and display temp_password from response\n      setSnackbarOpen(true);\n    } catch (error) {\n      console.error('Failed to create organization', error);\n    }\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  return (\n    <RoleGate allowedRoles={['super_admin']}>\n      <div>\n        <h1>Create New Organization</h1>\n        <OrganizationForm onSubmit={handleSubmit} />\n        <Snackbar\n          open={snackbarOpen}\n          autoHideDuration={null}\n          onClose={handleSnackbarClose}\n          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        >\n          <Alert severity=\"info\" onClose={handleSnackbarClose}>\n            Organization created successfully. Temporary Admin Password: {tempPassword} (Copy and share manually)\n          </Alert>\n        </Snackbar>\n      </div>\n    </RoleGate>\n  );\n};\n\nexport default CreateOrganizationPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/organizations/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Pause' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Pause"},"fix":{"range":[420,429],"text":""},"desc":"Remove unused variable 'Pause'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Email' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Email"},"fix":{"range":[513,522],"text":""},"desc":"Remove unused variable 'Email'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 68 column 10.","line":136,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":136,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 68 column 10.","line":136,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":136,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Menu,\n  MenuItem,\n  Chip,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  DialogContentText,\n  TextField,\n  Alert,\n  CircularProgress,\n  Tooltip\n} from '@mui/material';\nimport {\n  MoreVert,\n  Add,\n  Pause,\n  PlayArrow,\n  Block,\n  Delete,\n  RestartAlt,\n  Business,\n  Warning,\n  CheckCircle,\n  Email\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\n\ninterface Organization {\n  id: number;\n  name: string;\n  subdomain: string;\n  status: string;\n  plan_type: string;\n  max_users: number;\n  primary_email: string;\n  primary_phone: string;\n  created_at: string;\n  updated_at?: string;\n}\n\nconst OrganizationsPage: React.FC = () => {\n  const router = useRouter();\n  const queryClient = useQueryClient();\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [selectedOrg, setSelectedOrg] = useState<Organization | null>(null);\n  const [actionDialog, setActionDialog] = useState(false);\n  const [actionType, setActionType] = useState<'suspend' | 'pause' | 'reactivate' | 'delete' | 'reset' | null>(null);\n  const [confirmationText, setConfirmationText] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  // Get user info for authorization\n  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n  const userRole = typeof window !== 'undefined' ? localStorage.getItem('userRole') : null;\n  const isSuperAdmin = userRole === 'super_admin';\n\n  // Fetch organizations\n  const { data: organizations, isLoading } = useQuery({\n    queryKey: ['organizations'],\n    queryFn: async () => {\n      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n      const response = await axios.get(`${API_BASE_URL}/api/v1/organizations/`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data as Organization[];\n    },\n    enabled: !!token\n  });\n\n  // Organization action mutations\n  const orgActionMutation = useMutation({\n    mutationFn: async ({ orgId, action, data }: { orgId: number; action: string; data?: any }) => {\n      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n      let endpoint = '';\n      let method = 'POST';\n      \n      switch (action) {\n        case 'suspend':\n          endpoint = `/api/v1/settings/organization/${orgId}/suspend`;\n          break;\n        case 'reactivate':\n          endpoint = `/api/v1/settings/organization/${orgId}/activate`;\n          break;\n        case 'delete':\n          endpoint = `/api/v1/organizations/${orgId}`;\n          method = 'DELETE';\n          break;\n        case 'reset':\n          endpoint = `/api/v1/settings/reset/entity`;\n          data = { entity_id: orgId, confirm: true };\n          break;\n        default:\n          throw new Error('Invalid action');\n      }\n\n      const response = await axios({\n        method,\n        url: `${API_BASE_URL}${endpoint}`,\n        data,\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data;\n    },\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['organizations'] });\n      setSuccess(`Organization ${variables.action} completed successfully`);\n      setActionDialog(false);\n      setSelectedOrg(null);\n      setActionType(null);\n      setConfirmationText('');\n      \n      // Send confirmation email for reset action\n      if (variables.action === 'reset') {\n        setSuccess('Organization reset completed. Confirmation email sent to organization admin.');\n      }\n    },\n    onError: (error: any) => {\n      setError(error.response?.data?.detail || `Failed to ${actionType} organization`);\n    }\n  });\n\n  const handleContextMenu = (event: React.MouseEvent<HTMLButtonElement>, org: Organization) => {\n    event.preventDefault();\n    setAnchorEl(event.currentTarget);\n    setSelectedOrg(org);\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n    setSelectedOrg(null);\n  };\n\n  const handleAction = (action: 'suspend' | 'pause' | 'reactivate' | 'delete' | 'reset') => {\n    setActionType(action);\n    setActionDialog(true);\n    handleCloseMenu();\n  };\n\n  const confirmAction = () => {\n    if (!selectedOrg || !actionType) {return;}\n\n    // For reset action, require confirmation text\n    if (actionType === 'reset' && confirmationText !== 'RESET') {\n      setError('Please type &apos;RESET&apos; to confirm this action');\n      return;\n    }\n\n    // For delete action, require confirmation text\n    if (actionType === 'delete' && confirmationText !== selectedOrg.name) {\n      setError(`Please type &quot;${selectedOrg.name}&quot; to confirm deletion`);\n      return;\n    }\n\n    const actionData: any = {};\n    if (actionType === 'suspend') {\n      actionData.reason = 'Administrative action';\n    }\n\n    orgActionMutation.mutate({\n      orgId: selectedOrg.id,\n      action: actionType,\n      data: actionData\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'success';\n      case 'suspended': return 'error';\n      case 'trial': return 'warning';\n      case 'expired': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const getActionAvailability = (org: Organization) => {\n    const status = org.status.toLowerCase();\n    return {\n      suspend: status === 'active',\n      reactivate: status === 'suspended' || status === 'expired',\n      delete: true,\n      reset: true\n    };\n  };\n\n  // Check authorization\n  if (!isSuperAdmin) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          You don&apos;t have permission to manage organizations. Only platform super administrators can access this page.\n        </Alert>\n        <Button onClick={() => router.push('/settings')} sx={{ mt: 2 }}>\n          Back to Settings\n        </Button>\n      </Container>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 400 }}>\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Organizations Management\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => router.push('/admin/organizations/create')}\n        >\n          Add Organization\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 3 }} onClose={() => setSuccess(null)}>\n          {success}\n        </Alert>\n      )}\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Organization</TableCell>\n              <TableCell>Subdomain</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Plan</TableCell>\n              <TableCell>Users</TableCell>\n              <TableCell>Contact</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell align=\"center\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {organizations?.map((org: Organization) => (\n              <TableRow key={org.id}>\n                <TableCell>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <Business sx={{ mr: 1, color: 'primary.main' }} />\n                    <Box>\n                      <Typography variant=\"subtitle2\">{org.name}</Typography>\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        ID: {org.id}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"body2\" color=\"primary\">\n                    {org.subdomain}.example.com\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Chip\n                    label={org.status}\n                    color={getStatusColor(org.status)}\n                    size=\"small\"\n                    icon={org.status === 'active' ? <CheckCircle /> : <Warning />}\n                  />\n                </TableCell>\n                <TableCell>\n                  <Chip label={org.plan_type} variant=\"outlined\" size=\"small\" />\n                </TableCell>\n                <TableCell>{org.max_users}</TableCell>\n                <TableCell>\n                  <Box>\n                    <Typography variant=\"body2\">{org.primary_email}</Typography>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      {org.primary_phone}\n                    </Typography>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"body2\">\n                    {new Date(org.created_at).toLocaleDateString()}\n                  </Typography>\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Tooltip title=\"Organization Actions\">\n                    <IconButton\n                      onClick={(e) => handleContextMenu(e, org)}\n                      size=\"small\"\n                    >\n                      <MoreVert />\n                    </IconButton>\n                  </Tooltip>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Context Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleCloseMenu}\n      >\n        {selectedOrg && (\n          <>\n            {getActionAvailability(selectedOrg).suspend && (\n              <MenuItem onClick={() => handleAction('suspend')}>\n                <Block sx={{ mr: 1 }} fontSize=\"small\" />\n                Suspend\n              </MenuItem>\n            )}\n            {getActionAvailability(selectedOrg).reactivate && (\n              <MenuItem onClick={() => handleAction('reactivate')}>\n                <PlayArrow sx={{ mr: 1 }} fontSize=\"small\" />\n                Reactivate\n              </MenuItem>\n            )}\n            <MenuItem onClick={() => handleAction('reset')}>\n              <RestartAlt sx={{ mr: 1 }} fontSize=\"small\" />\n              Reset Data\n            </MenuItem>\n            <MenuItem onClick={() => handleAction('delete')} sx={{ color: 'error.main' }}>\n              <Delete sx={{ mr: 1 }} fontSize=\"small\" />\n              Delete\n            </MenuItem>\n          </>\n        )}\n      </Menu>\n\n      {/* Action Confirmation Dialog */}\n      <Dialog open={actionDialog} onClose={() => setActionDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle sx={{ display: 'flex', alignItems: 'center' }}>\n          <Warning sx={{ mr: 1, color: 'warning.main' }} />\n          Confirm {actionType?.charAt(0).toUpperCase()}{actionType?.slice(1)} Organization\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to {actionType} the organization &quot;{selectedOrg?.name}&quot;?\n          </DialogContentText>\n          \n          {actionType === 'reset' && (\n            <Box sx={{ mt: 2 }}>\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\n                This will permanently delete ALL data for this organization and send a confirmation email to the organization admin.\n              </Alert>\n              <TextField\n                fullWidth\n                label=\"Type 'RESET' to confirm\"\n                value={confirmationText}\n                onChange={(e) => setConfirmationText(e.target.value)}\n                placeholder=\"RESET\"\n              />\n            </Box>\n          )}\n\n          {actionType === 'delete' && (\n            <Box sx={{ mt: 2 }}>\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\n                This will permanently delete the organization and all its data. This action cannot be undone.\n              </Alert>\n              <TextField\n                fullWidth\n                label={`Type &quot;${selectedOrg?.name}&quot; to confirm deletion`}\n                value={confirmationText}\n                onChange={(e) => setConfirmationText(e.target.value)}\n                placeholder={selectedOrg?.name}\n              />\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setActionDialog(false)}>Cancel</Button>\n          <Button\n            onClick={confirmAction}\n            color={actionType === 'delete' || actionType === 'reset' ? 'error' : 'primary'}\n            variant=\"contained\"\n            disabled={orgActionMutation.isPending}\n            startIcon={orgActionMutation.isPending ? <CircularProgress size={16} /> : undefined}\n          >\n            {orgActionMutation.isPending ? 'Processing...' : `${actionType?.charAt(0).toUpperCase()}${actionType?.slice(1)}`}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default OrganizationsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/rbac.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/users/ResetPassword.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":2,"column":82,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":92,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[120,132],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloseIcon' is defined but never used.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloseIcon"},"fix":{"range":[164,179],"text":""},"desc":"Remove unused variable 'CloseIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PushPinIcon' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"PushPinIcon"},"fix":{"range":[215,232],"text":""},"desc":"Remove unused variable 'PushPinIcon'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Box, Button, TextField, Typography, Dialog, DialogTitle, DialogContent, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport PushPinIcon from '@mui/icons-material/PushPin';\nimport { useForm } from 'react-hook-form';\nimport adminService from '../../../services/adminService';\n\ninterface ResetFormData {\n  target_email: string;\n}\n\nconst ResetPassword: React.FC = () => {\n  const { register, handleSubmit, formState: { errors } } = useForm<ResetFormData>();\n  const [popupOpen, setPopupOpen] = useState(false);\n  const [newPassword, setNewPassword] = useState('');\n  const [resetEmail, setResetEmail] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const onSubmit = async (data: ResetFormData) => {\n    try {\n      const response = await adminService.resetUserPassword(data.target_email);\n      setNewPassword(response.new_password);\n      setResetEmail(response.target_email);\n      setPopupOpen(true);\n      setErrorMessage('');\n    } catch (err: any) {\n      setErrorMessage(err.message || 'Failed to reset password');\n    }\n  };\n\n  return (\n    <Box sx={{ p: 4 }}>\n      <Typography variant=\"h4\">Reset User Password</Typography>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <TextField\n          label=\"Target Email\"\n          {...register('target_email', { required: true })}\n          error={!!errors.target_email}\n          helperText={errors.target_email ? 'Email is required' : ''}\n          fullWidth\n          sx={{ mt: 2 }}\n        />\n        <Button type=\"submit\" variant=\"contained\" sx={{ mt: 2 }}>\n          Reset Password\n        </Button>\n      </form>\n      {errorMessage && <Typography color=\"error\" sx={{ mt: 2 }}>{errorMessage}</Typography>}\n\n      {/* Popup for temp password */}\n      <Dialog open={popupOpen} onClose={() => setPopupOpen(false)}>\n        <DialogTitle>Temporary Password</DialogTitle>\n        <DialogContent>\n          <Typography>New password for {resetEmail}: {newPassword}</Typography>\n          <Typography variant=\"body2\">Share this with the user and advise immediate change.</Typography>\n        </DialogContent>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ResetPassword;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/admin/users/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isSuccess' is assigned a value but never used.","line":40,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"isSuccess"},"fix":{"range":[1206,1217],"text":""},"desc":"Remove unused variable 'isSuccess'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isError' is assigned a value but never used.","line":40,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":53,"suggestions":[{"messageId":"removeVar","data":{"varName":"isError"},"fix":{"range":[1217,1226],"text":""},"desc":"Remove unused variable 'isError'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// fastapi_migration/frontend/src/pages/admin/users/index.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport { \n  Box, \n  Typography, \n  Button, \n  Paper,\n  Alert\n} from '@mui/material';\nimport { PlayArrow } from '@mui/icons-material';\nimport { useAuth } from '../../../context/AuthContext';\nimport api from '../../../lib/api';\nimport RoleGate from '../../../components/RoleGate';\nimport DemoModeDialog from '../../../components/DemoModeDialog';\nimport { DataGrid, GridColDef } from '@mui/x-data-grid';\nimport { useQuery } from '@tanstack/react-query';\nimport { useRouter } from 'next/router';\n\ninterface User {\n  id: number;\n  email: string;\n  role: string;\n  organization_id?: number;\n}\n\nconst columns: GridColDef[] = [\n  { field: 'id', headerName: 'ID', width: 90 },\n  { field: 'email', headerName: 'Email', width: 200 },\n  { field: 'role', headerName: 'Role', width: 150 },\n  { field: 'organization_id', headerName: 'Organization ID', width: 150 },\n];\n\nconst UsersPage: React.FC = () => {\n  const { user } = useAuth();\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [demoModeOpen, setDemoModeOpen] = useState(false);\n\n  const { data: users, isLoading, isSuccess, isError } = useQuery<User[]>({\n    queryKey: ['users'],\n    queryFn: async () => {\n      const endpoint = user?.role === 'super_admin' ? '/users' : '/users/org';\n      const response = await api.get(endpoint);\n      return response.data;\n    },\n    enabled: !!user,\n  });\n\n  // Handle loading state with useEffect instead of onSettled\n  useEffect(() => {\n    if (!isLoading) {\n      setLoading(false);\n    }\n  }, [isLoading]);\n\n  const handleDemoStart = async (token: string, loginResponse?: any) => {\n    // Set demo mode flags\n    localStorage.setItem('demoMode', 'true');\n    if (loginResponse?.demo_mode) {\n      localStorage.setItem('isDemoTempUser', 'true');\n    }\n    \n    // Navigate to demo page\n    router.push('/demo');\n  };\n\n  if (loading) {return <div>Loading...</div>;}\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <RoleGate allowedRoles={['super_admin', 'org_admin']}>\n        <Paper sx={{ p: 3 }}>\n          {/* Header with Demo Button */}\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n            <Typography variant=\"h4\" component=\"h1\">\n              User Management\n            </Typography>\n            \n            <Button\n              variant=\"outlined\"\n              startIcon={<PlayArrow />}\n              onClick={() => setDemoModeOpen(true)}\n              sx={{\n                borderRadius: 2,\n                px: 3,\n                py: 1,\n                borderColor: 'primary.light',\n                '&:hover': {\n                  borderColor: 'primary.main',\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText'\n                }\n              }}\n            >\n              Try Demo Mode\n            </Button>\n          </Box>\n\n          {/* Demo Mode Info Alert */}\n          <Alert severity=\"info\" sx={{ mb: 3 }}>\n            <Typography variant=\"body2\">\n              <strong>Demo Mode Available:</strong> Experience all user management features with sample data. \n              No real user data will be affected during the demo.\n            </Typography>\n          </Alert>\n\n          {/* Users Data Grid */}\n          <Box sx={{ height: 400, width: '100%' }}>\n            <DataGrid \n              rows={users || []} \n              columns={columns}\n              disableRowSelectionOnClick\n              sx={{\n                '& .MuiDataGrid-cell': {\n                  borderBottom: '1px solid #f0f0f0',\n                },\n                '& .MuiDataGrid-columnHeaders': {\n                  backgroundColor: '#f5f5f5',\n                  borderBottom: '2px solid #e0e0e0',\n                }\n              }}\n            />\n          </Box>\n        </Paper>\n\n        {/* Demo Mode Dialog */}\n        <DemoModeDialog\n          open={demoModeOpen}\n          onClose={() => setDemoModeOpen(false)}\n          onDemoStart={handleDemoStart}\n        />\n      </RoleGate>\n    </Box>\n  );\n};\n\nexport default UsersPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/analytics/customer.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[247,257],"text":""},"desc":"Remove unused variable 'Button'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/analytics/customer.tsx\n// Customer Analytics page - Business intelligence and customer insights\n\nimport React from 'react';\nimport { NextPage } from 'next';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Alert,\n  Button,\n} from '@mui/material';\nimport { Analytics, TrendingUp, People, Assessment } from '@mui/icons-material';\nimport { useAuth } from '../../hooks/useAuth';\nimport CustomerAnalytics from '../../components/CustomerAnalytics';\nimport { canManageUsers } from '../../types/user.types';\n\nconst CustomerAnalyticsPage: NextPage = () => {\n  const { user } = useAuth();\n\n  if (!user || !canManageUsers(user)) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          Access Denied: You don&apos;t have permission to view customer analytics.\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <Analytics color=\"primary\" />\n          Customer Analytics\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Business intelligence and customer insights to help you understand your customer base and improve business decisions.\n        </Typography>\n      </Box>\n\n      <Grid container spacing={3}>\n        {/* Overview Cards */}\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <People color=\"primary\" fontSize=\"large\" />\n                <Box>\n                  <Typography variant=\"h6\">Customer Insights</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Analyze customer behavior patterns\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <TrendingUp color=\"primary\" fontSize=\"large\" />\n                <Box>\n                  <Typography variant=\"h6\">Purchase Trends</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Track purchasing patterns over time\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <Assessment color=\"primary\" fontSize=\"large\" />\n                <Box>\n                  <Typography variant=\"h6\">Performance Metrics</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Key performance indicators\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Main Analytics Component */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <CustomerAnalytics />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default CustomerAnalyticsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/analytics/purchase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/analytics/sales.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/analytics/service.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/analytics/service/customer-satisfaction.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/analytics/service/job-completion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/analytics/service/sla-compliance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/analytics/service/technician-performance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/assets.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":4,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[116,127],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[383,393],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[393,408],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[408,425],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogActions"},"fix":{"range":[425,442],"text":""},"desc":"Remove unused variable 'DialogActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[442,455],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[455,470],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[470,484],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[484,494],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[494,506],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DeleteIcon' is defined but never used.","line":41,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"DeleteIcon"},"fix":{"range":[617,641],"text":""},"desc":"Remove unused variable 'DeleteIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useMutation' is defined but never used.","line":50,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"useMutation"},"fix":{"range":[904,917],"text":""},"desc":"Remove unused variable 'useMutation'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'queryClient' is assigned a value but never used.","line":81,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"queryClient"},"fix":{"range":[1590,1627],"text":""},"desc":"Remove unused variable 'queryClient'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'openDialog' is assigned a value but never used.","line":83,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"openDialog"},"fix":{"range":[1684,1694],"text":""},"desc":"Remove unused variable 'openDialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedAsset' is assigned a value but never used.","line":84,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":84,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedAsset"},"fix":{"range":[1780,1793],"text":""},"desc":"Remove unused variable 'selectedAsset'."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/assets.tsx\n// Asset Management page with comprehensive asset lifecycle management\n\nimport React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Card,\n  CardContent,\n  Tab,\n  Tabs,\n  Button,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  Tooltip,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Settings as SettingsIcon,\n  Build as BuildIcon,\n  Assessment as AssessmentIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckCircleIcon,\n  Schedule as ScheduleIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../hooks/useAuth';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { assetService } from '../services/assetService';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`asset-tabpanel-${index}`}\n      aria-labelledby={`asset-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst AssetManagementPage: NextPage = () => {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [tabValue, setTabValue] = useState(0);\n  const [openDialog, setOpenDialog] = useState<'create' | 'edit' | 'maintenance' | null>(null);\n  const [selectedAsset, setSelectedAsset] = useState<any>(null);\n\n  // Fetch dashboard summary\n  const { data: dashboardData, isLoading: dashboardLoading } = useQuery({\n    queryKey: ['assetDashboard'],\n    queryFn: assetService.getDashboardSummary,\n    enabled: !!user,\n  });\n\n  // Fetch assets\n  const { data: assets, isLoading: assetsLoading } = useQuery({\n    queryKey: ['assets'],\n    queryFn: () => assetService.getAssets(),\n    enabled: !!user,\n  });\n\n  // Fetch maintenance schedules\n  const { data: maintenanceSchedules, isLoading: schedulesLoading } = useQuery({\n    queryKey: ['maintenanceSchedules'],\n    queryFn: () => assetService.getMaintenanceSchedules(),\n    enabled: !!user,\n  });\n\n  // Fetch due maintenance\n  const { data: dueMaintenance, isLoading: dueMaintenanceLoading } = useQuery({\n    queryKey: ['dueMaintenance'],\n    queryFn: () => assetService.getDueMaintenance(),\n    enabled: !!user,\n  });\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'success';\n      case 'maintenance': return 'warning';\n      case 'inactive': return 'default';\n      case 'retired': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getConditionColor = (condition: string) => {\n    switch (condition.toLowerCase()) {\n      case 'excellent': return 'success';\n      case 'good': return 'success';\n      case 'fair': return 'warning';\n      case 'poor': return 'error';\n      case 'critical': return 'error';\n      default: return 'default';\n    }\n  };\n\n  if (!user) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          Please log in to access Asset Management.\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <SettingsIcon color=\"primary\" />\n          Asset Management\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Comprehensive asset lifecycle management, maintenance scheduling, and depreciation tracking\n        </Typography>\n      </Box>\n\n      {/* Dashboard Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Assets\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.total_assets || 0}\n                  </Typography>\n                </Box>\n                <SettingsIcon color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Assets\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.active_assets || 0}\n                  </Typography>\n                </Box>\n                <CheckCircleIcon color=\"success\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Due Maintenance\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"warning.main\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.due_maintenance || 0}\n                  </Typography>\n                </Box>\n                <ScheduleIcon color=\"warning\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Overdue\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"error.main\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.overdue_maintenance || 0}\n                  </Typography>\n                </Box>\n                <WarningIcon color=\"error\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Asset Value\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : \n                     `$${(dashboardData?.total_asset_value || 0).toLocaleString()}`}\n                  </Typography>\n                </Box>\n                <AssessmentIcon color=\"info\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs\n          value={tabValue}\n          onChange={handleTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Asset Register\" />\n          <Tab label=\"Maintenance Schedules\" />\n          <Tab label=\"Maintenance Records\" />\n          <Tab label=\"Due Maintenance\" />\n          <Tab label=\"Reports\" />\n        </Tabs>\n      </Paper>\n\n      {/* Tab Panels */}\n      <TabPanel value={tabValue} index={0}>\n        {/* Assets List */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Asset Register</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenDialog('create')}\n          >\n            Add Asset\n          </Button>\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Asset Code</TableCell>\n                <TableCell>Asset Name</TableCell>\n                <TableCell>Category</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Purchase Cost</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {assetsLoading ? (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                assets?.map((asset: any) => (\n                  <TableRow key={asset.id}>\n                    <TableCell>{asset.asset_code}</TableCell>\n                    <TableCell>{asset.asset_name}</TableCell>\n                    <TableCell>{asset.category}</TableCell>\n                    <TableCell>{asset.location || '-'}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={asset.status}\n                        color={getStatusColor(asset.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={asset.condition}\n                        color={getConditionColor(asset.condition) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {asset.purchase_cost ? `$${asset.purchase_cost.toLocaleString()}` : '-'}\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n                            setSelectedAsset(asset);\n                            setOpenDialog('edit');\n                          }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Maintenance\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n                            setSelectedAsset(asset);\n                            setOpenDialog('maintenance');\n                          }}\n                        >\n                          <BuildIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={1}>\n        {/* Maintenance Schedules */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Maintenance Schedules</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenDialog('create')}\n          >\n            Add Schedule\n          </Button>\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Schedule Name</TableCell>\n                <TableCell>Asset</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Frequency</TableCell>\n                <TableCell>Next Due</TableCell>\n                <TableCell>Priority</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {schedulesLoading ? (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                maintenanceSchedules?.map((schedule: any) => (\n                  <TableRow key={schedule.id}>\n                    <TableCell>{schedule.schedule_name}</TableCell>\n                    <TableCell>{schedule.asset_id}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={schedule.maintenance_type}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>{schedule.frequency_type}</TableCell>\n                    <TableCell>\n                      {schedule.next_due_date ? \n                        new Date(schedule.next_due_date).toLocaleDateString() : '-'}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={schedule.priority}\n                        color={schedule.priority === 'high' ? 'error' : \n                               schedule.priority === 'medium' ? 'warning' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={schedule.is_active ? 'Active' : 'Inactive'}\n                        color={schedule.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton size=\"small\">\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={2}>\n        {/* Maintenance Records */}\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>Maintenance Records</Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Historical maintenance work orders and records\n        </Typography>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={3}>\n        {/* Due Maintenance */}\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>Due Maintenance</Typography>\n        \n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Asset</TableCell>\n                <TableCell>Schedule</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Due Date</TableCell>\n                <TableCell>Priority</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {dueMaintenanceLoading ? (\n                <TableRow>\n                  <TableCell colSpan={7} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                dueMaintenance?.map((item: any) => (\n                  <TableRow key={item.id}>\n                    <TableCell>{item.asset_id}</TableCell>\n                    <TableCell>{item.schedule_name}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.maintenance_type}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography\n                        color={new Date(item.next_due_date) < new Date() ? 'error' : 'text.primary'}\n                      >\n                        {new Date(item.next_due_date).toLocaleDateString()}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.priority}\n                        color={item.priority === 'high' ? 'error' : \n                               item.priority === 'medium' ? 'warning' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {new Date(item.next_due_date) < new Date() ? (\n                        <Chip label=\"Overdue\" color=\"error\" size=\"small\" />\n                      ) : (\n                        <Chip label=\"Due\" color=\"warning\" size=\"small\" />\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Button size=\"small\" variant=\"outlined\">\n                        Create Work Order\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={4}>\n        {/* Reports */}\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>Asset Reports</Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Asset Depreciation Report\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Calculate and view asset depreciation by period\n                </Typography>\n                <Button variant=\"outlined\">Generate Report</Button>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Maintenance Cost Analysis\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Analyze maintenance costs and trends\n                </Typography>\n                <Button variant=\"outlined\">Generate Report</Button>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </TabPanel>\n    </Container>\n  );\n};\n\nexport default AssetManagementPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/bank-accounts.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'editDialogOpen' is assigned a value but never used.","line":93,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"editDialogOpen"},"fix":{"range":[1834,1848],"text":""},"desc":"Remove unused variable 'editDialogOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedAccount' is assigned a value but never used.","line":94,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedAccount"},"fix":{"range":[1897,1912],"text":""},"desc":"Remove unused variable 'selectedAccount'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/bank-accounts.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel,\n  Chip,\n  IconButton,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  Switch,\n  FormControlLabel,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  AccountBalance,\n  Star,\n  StarBorder,\n  Refresh,\n  Sync,\n  Visibility\n} from '@mui/icons-material';\nimport axios from 'axios';\n\ninterface ChartAccount {\n  id: number;\n  account_code: string;\n  account_name: string;\n  account_type: string;\n}\n\ninterface BankAccount {\n  id: number;\n  chart_account_id: number;\n  bank_name: string;\n  branch_name?: string;\n  account_number: string;\n  ifsc_code?: string;\n  swift_code?: string;\n  account_type: string;\n  currency: string;\n  opening_balance: number;\n  current_balance: number;\n  is_active: boolean;\n  is_default: boolean;\n  auto_reconcile: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface CreateBankAccountData {\n  chart_account_id: number;\n  bank_name: string;\n  branch_name?: string;\n  account_number: string;\n  ifsc_code?: string;\n  swift_code?: string;\n  account_type: string;\n  currency: string;\n  opening_balance: number;\n  is_default: boolean;\n  auto_reconcile: boolean;\n}\n\nconst BankAccounts: React.FC = () => {\n  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);\n  const [chartAccounts, setChartAccounts] = useState<ChartAccount[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedAccount, setSelectedAccount] = useState<BankAccount | null>(null);\n\n  // Create bank account form state\n  const [createData, setCreateData] = useState<CreateBankAccountData>({\n    chart_account_id: 0,\n    bank_name: '',\n    account_number: '',\n    account_type: 'Savings',\n    currency: 'INR',\n    opening_balance: 0,\n    is_default: false,\n    auto_reconcile: false\n  });\n\n  const accountTypes = [\n    'Savings',\n    'Current',\n    'Fixed Deposit',\n    'Recurring Deposit',\n    'NRI Account',\n    'Overdraft',\n    'Cash Credit'\n  ];\n\n  const currencies = ['INR', 'USD', 'EUR', 'GBP', 'AED', 'SAR'];\n\n  const fetchBankAccounts = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/bank-accounts', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setBankAccounts(response.data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch bank accounts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchChartAccounts = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/chart-of-accounts?account_type=bank', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setChartAccounts(response.data);\n    } catch (err: any) {\n      console.error('Failed to fetch chart accounts:', err);\n    }\n  };\n\n  useEffect(() => {\n    fetchChartAccounts();\n    fetchBankAccounts();\n  }, []);\n\n  const handleCreateBankAccount = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post('/api/v1/erp/bank-accounts', createData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      setCreateDialogOpen(false);\n      setCreateData({\n        chart_account_id: 0,\n        bank_name: '',\n        account_number: '',\n        account_type: 'Savings',\n        currency: 'INR',\n        opening_balance: 0,\n        is_default: false,\n        auto_reconcile: false\n      });\n      fetchBankAccounts();\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to create bank account');\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string = 'INR') => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatAccountNumber = (accountNumber: string) => {\n    // Mask account number for security (show only last 4 digits)\n    if (accountNumber.length <= 4) {return accountNumber;}\n    return '*'.repeat(accountNumber.length - 4) + accountNumber.slice(-4);\n  };\n\n  const handleSetDefault = async (accountId: number) => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put(`/api/v1/erp/bank-accounts/${accountId}`, {\n        is_default: true\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      fetchBankAccounts();\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to set default account');\n    }\n  };\n\n  // Calculate totals\n  const totalBalance = bankAccounts\n    .filter(acc => acc.is_active)\n    .reduce((sum, acc) => sum + acc.current_balance, 0);\n  \n  const activeAccounts = bankAccounts.filter(acc => acc.is_active).length;\n  const defaultAccount = bankAccounts.find(acc => acc.is_default);\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Bank Accounts\n        </Typography>\n        <Box>\n          <Button\n            startIcon={<Add />}\n            variant=\"contained\"\n            onClick={() => setCreateDialogOpen(true)}\n            sx={{ mr: 1 }}\n          >\n            New Account\n          </Button>\n          <IconButton onClick={fetchBankAccounts} color=\"primary\">\n            <Refresh />\n          </IconButton>\n        </Box>\n      </Box>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <AccountBalance color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Balance\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(totalBalance)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <AccountBalance color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Accounts\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {activeAccounts}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Star color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Default Account\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {defaultAccount?.bank_name || 'None'}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Bank Accounts Table */}\n      <Paper>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Bank Name</TableCell>\n                <TableCell>Account Number</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Branch</TableCell>\n                <TableCell>IFSC</TableCell>\n                <TableCell align=\"right\">Current Balance</TableCell>\n                <TableCell>Currency</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Default</TableCell>\n                <TableCell>Auto Reconcile</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {loading ? (\n                <TableRow>\n                  <TableCell colSpan={11} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : bankAccounts.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={11} align=\"center\">\n                    No bank accounts found\n                  </TableCell>\n                </TableRow>\n              ) : (\n                bankAccounts.map((account) => (\n                  <TableRow key={account.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {account.bank_name}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          Created: {new Date(account.created_at).toLocaleDateString()}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\" fontFamily=\"monospace\">\n                        {formatAccountNumber(account.account_number)}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip label={account.account_type} size=\"small\" />\n                    </TableCell>\n                    <TableCell>{account.branch_name || '-'}</TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\" fontFamily=\"monospace\">\n                        {account.ifsc_code || '-'}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Typography \n                        variant=\"body2\" \n                        color={account.current_balance >= 0 ? 'success.main' : 'error.main'}\n                        fontWeight=\"medium\"\n                      >\n                        {formatCurrency(account.current_balance, account.currency)}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip label={account.currency} size=\"small\" variant=\"outlined\" />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={account.is_active ? 'Active' : 'Inactive'}\n                        color={account.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title={account.is_default ? 'Default Account' : 'Set as Default'}>\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => !account.is_default && handleSetDefault(account.id)}\n                          disabled={account.is_default}\n                        >\n                          {account.is_default ? <Star color=\"warning\" /> : <StarBorder />}\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        icon={<Sync />}\n                        label={account.auto_reconcile ? 'Yes' : 'No'}\n                        color={account.auto_reconcile ? 'primary' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"View Details\">\n                        <IconButton size=\"small\">\n                          <Visibility />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Edit\">\n                        <IconButton \n                          size=\"small\"\n                          onClick={() => {\n                            setSelectedAccount(account);\n                            setEditDialogOpen(true);\n                          }}\n                        >\n                          <Edit />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Delete\">\n                        <IconButton size=\"small\" color=\"error\">\n                          <Delete />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n\n      {/* Create Bank Account Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Create Bank Account</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Chart Account</InputLabel>\n                <Select\n                  value={createData.chart_account_id}\n                  onChange={(e) => setCreateData(prev => ({ ...prev, chart_account_id: e.target.value as number }))}\n                  label=\"Chart Account\"\n                >\n                  {chartAccounts.map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.account_code} - {account.account_name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Bank Name\"\n                value={createData.bank_name}\n                onChange={(e) => setCreateData(prev => ({ ...prev, bank_name: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Account Number\"\n                value={createData.account_number}\n                onChange={(e) => setCreateData(prev => ({ ...prev, account_number: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Account Type</InputLabel>\n                <Select\n                  value={createData.account_type}\n                  onChange={(e) => setCreateData(prev => ({ ...prev, account_type: e.target.value }))}\n                  label=\"Account Type\"\n                >\n                  {accountTypes.map((type) => (\n                    <MenuItem key={type} value={type}>\n                      {type}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Branch Name\"\n                value={createData.branch_name || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, branch_name: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"IFSC Code\"\n                value={createData.ifsc_code || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, ifsc_code: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"SWIFT Code\"\n                value={createData.swift_code || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, swift_code: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Currency</InputLabel>\n                <Select\n                  value={createData.currency}\n                  onChange={(e) => setCreateData(prev => ({ ...prev, currency: e.target.value }))}\n                  label=\"Currency\"\n                >\n                  {currencies.map((currency) => (\n                    <MenuItem key={currency} value={currency}>\n                      {currency}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                type=\"number\"\n                label=\"Opening Balance\"\n                value={createData.opening_balance}\n                onChange={(e) => setCreateData(prev => ({ ...prev, opening_balance: parseFloat(e.target.value) || 0 }))}\n                inputProps={{ step: 0.01 }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={createData.is_default}\n                    onChange={(e) => setCreateData(prev => ({ ...prev, is_default: e.target.checked }))}\n                  />\n                }\n                label=\"Set as Default Account\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={createData.auto_reconcile}\n                    onChange={(e) => setCreateData(prev => ({ ...prev, auto_reconcile: e.target.checked }))}\n                  />\n                }\n                label=\"Enable Auto Reconciliation\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleCreateBankAccount} variant=\"contained\">Create Account</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default BankAccounts;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/calendar/dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":118,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/calendar/dashboard.tsx\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CircularProgress,\n  Alert,\n  Button,\n  Chip,\n  Avatar,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Divider\n} from '@mui/material';\nimport {\n  CalendarToday,\n  Dashboard,\n  Event,\n  Today,\n  DateRange,\n  Schedule,\n  Notifications,\n  Add,\n  Person,\n  VideoCall,\n  LocationOn\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\n\ninterface CalendarStats {\n  total_events: number;\n  today_events: number;\n  this_week_events: number;\n  this_month_events: number;\n  upcoming_events: number;\n  overdue_events: number;\n  my_events: number;\n  shared_events: number;\n}\n\ninterface UpcomingEvent {\n  id: number;\n  title: string;\n  start_datetime: string;\n  end_datetime: string;\n  event_type: string;\n  location?: string;\n  meeting_url?: string;\n  attendees_count: number;\n}\n\nconst CalendarDashboard: React.FC = () => {\n  const router = useRouter();\n  const [stats, setStats] = useState<CalendarStats | null>(null);\n  const [upcomingEvents, setUpcomingEvents] = useState<UpcomingEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Simulate API call - replace with actual API integration\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        // TODO: Replace with actual API calls\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay\n        \n        // Mock data for demonstration\n        const mockStats: CalendarStats = {\n          total_events: 34,\n          today_events: 4,\n          this_week_events: 12,\n          this_month_events: 25,\n          upcoming_events: 18,\n          overdue_events: 2,\n          my_events: 28,\n          shared_events: 6\n        };\n\n        const mockEvents: UpcomingEvent[] = [\n          {\n            id: 1,\n            title: 'Team Standup Meeting',\n            start_datetime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(), // 2 hours from now\n            end_datetime: new Date(Date.now() + 2.5 * 60 * 60 * 1000).toISOString(),\n            event_type: 'meeting',\n            meeting_url: 'https://meet.google.com/abc-def-ghi',\n            attendees_count: 5\n          },\n          {\n            id: 2,\n            title: 'Client Presentation',\n            start_datetime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow\n            end_datetime: new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(),\n            event_type: 'appointment',\n            location: 'Conference Room A',\n            attendees_count: 3\n          },\n          {\n            id: 3,\n            title: 'Project Review',\n            start_datetime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days\n            end_datetime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(),\n            event_type: 'meeting',\n            attendees_count: 8\n          }\n        ];\n        \n        setStats(mockStats);\n        setUpcomingEvents(mockEvents);\n      } catch (err) {\n        setError('Failed to load calendar dashboard data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleNavigate = (path: string) => {\n    router.push(path);\n  };\n\n  const formatDateTime = (dateTime: string) => {\n    const date = new Date(dateTime);\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n    const eventDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n    let dateStr = '';\n    if (eventDate.getTime() === today.getTime()) {\n      dateStr = 'Today';\n    } else if (eventDate.getTime() === tomorrow.getTime()) {\n      dateStr = 'Tomorrow';\n    } else {\n      dateStr = date.toLocaleDateString();\n    }\n\n    const timeStr = date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    return `${dateStr} ${timeStr}`;\n  };\n\n  const getEventTypeColor = (type: string) => {\n    switch (type) {\n      case 'meeting': return 'primary';\n      case 'appointment': return 'secondary';\n      case 'task': return 'warning';\n      case 'reminder': return 'info';\n      default: return 'default';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"info\">No calendar data available</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <Box \n      sx={{ \n        p: 3,\n        opacity: 0,\n        animation: 'fadeInUp 0.6s ease-out forwards',\n        '@keyframes fadeInUp': {\n          from: { opacity: 0, transform: 'translateY(30px)' },\n          to: { opacity: 1, transform: 'translateY(0)' }\n        }\n      }}\n    >\n      {/* Header */}\n      <Box sx={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center', \n        mb: 4,\n        pb: 2,\n        borderBottom: '1px solid',\n        borderColor: 'divider',\n        position: 'relative',\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          bottom: '-1px',\n          left: 0,\n          width: '60px',\n          height: '3px',\n          background: 'linear-gradient(90deg, primary.main, primary.light)',\n          borderRadius: '2px',\n        }\n      }}>\n        <Typography \n          variant=\"h4\" \n          component=\"h1\" \n          sx={{ \n            display: 'flex', \n            alignItems: 'center', \n            gap: 1,\n            fontWeight: 'bold',\n            color: 'text.primary'\n          }}\n        >\n          <Dashboard color=\"primary\" />\n          Calendar Dashboard\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => handleNavigate('/calendar/create')}\n          sx={{\n            borderRadius: 2,\n            px: 3,\n            py: 1.5,\n            transition: 'all 0.2s ease-in-out',\n            '&:hover': {\n              transform: 'translateY(-2px)',\n              boxShadow: '0 8px 25px rgba(0, 0, 0, 0.15)',\n            }\n          }}\n        >\n          Create Event\n        </Button>\n      </Box>\n\n      {/* Overview Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card \n            sx={{\n              height: '100%',\n              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n              cursor: 'pointer',\n              '&:hover': {\n                transform: 'translateY(-8px)',\n                boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',\n                '& .card-icon': {\n                  transform: 'scale(1.1) rotate(5deg)',\n                }\n              }\n            }}\n          >\n            <CardContent sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: '80px' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"body2\" sx={{ fontWeight: 500 }}>\n                    Total Events\n                  </Typography>\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'primary.main' }}>\n                    {stats.total_events}\n                  </Typography>\n                </Box>\n                <Box\n                  className=\"card-icon\"\n                  sx={{\n                    backgroundColor: 'primary.50',\n                    borderRadius: 2,\n                    p: 1.5,\n                    transition: 'all 0.3s ease',\n                  }}\n                >\n                  <Event color=\"primary\" sx={{ fontSize: 32 }} />\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card \n            sx={{\n              height: '100%',\n              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n              cursor: 'pointer',\n              '&:hover': {\n                transform: 'translateY(-8px)',\n                boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',\n                '& .card-icon': {\n                  transform: 'scale(1.1) rotate(5deg)',\n                }\n              }\n            }}\n          >\n            <CardContent sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: '80px' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"body2\" sx={{ fontWeight: 500 }}>\n                    Today's Events\n                  </Typography>\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'info.main' }}>\n                    {stats.today_events}\n                  </Typography>\n                </Box>\n                <Box\n                  className=\"card-icon\"\n                  sx={{\n                    backgroundColor: 'info.50',\n                    borderRadius: 2,\n                    p: 1.5,\n                    transition: 'all 0.3s ease',\n                  }}\n                >\n                  <Today color=\"info\" sx={{ fontSize: 32 }} />\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card \n            sx={{\n              height: '100%',\n              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n              cursor: 'pointer',\n              '&:hover': {\n                transform: 'translateY(-8px)',\n                boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',\n                '& .card-icon': {\n                  transform: 'scale(1.1) rotate(5deg)',\n                }\n              }\n            }}\n          >\n            <CardContent sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: '80px' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom variant=\"body2\" sx={{ fontWeight: 500 }}>\n                    This Week\n                  </Typography>\n                  <Typography variant=\"h4\" sx={{ fontWeight: 'bold', color: 'success.main' }}>\n                    {stats.this_week_events}\n                  </Typography>\n                </Box>\n                <DateRange color=\"warning\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Upcoming\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {stats.upcoming_events}\n                  </Typography>\n                </Box>\n                <Schedule color=\"success\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Main Content */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={8}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Schedule color=\"primary\" />\n                Upcoming Events\n              </Typography>\n              <List>\n                {upcomingEvents.map((event, index) => (\n                  <React.Fragment key={event.id}>\n                    <ListItem\n                      sx={{\n                        cursor: 'pointer',\n                        borderRadius: 1,\n                        '&:hover': {\n                          backgroundColor: 'action.hover'\n                        }\n                      }}\n                      onClick={() => handleNavigate(`/calendar/events/${event.id}`)}\n                    >\n                      <ListItemAvatar>\n                        <Avatar sx={{ bgcolor: `${getEventTypeColor(event.event_type)}.main` }}>\n                          {event.event_type === 'meeting' ? <VideoCall /> : <Event />}\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>\n                            <Typography variant=\"subtitle1\">{event.title}</Typography>\n                            <Chip\n                              label={event.event_type}\n                              size=\"small\"\n                              color={getEventTypeColor(event.event_type) as any}\n                            />\n                          </Box>\n                        }\n                        secondary={\n                          <Box>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                              {formatDateTime(event.start_datetime)}\n                            </Typography>\n                            {event.location && (\n                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>\n                                <LocationOn sx={{ fontSize: 16 }} />\n                                <Typography variant=\"caption\">{event.location}</Typography>\n                              </Box>\n                            )}\n                            {event.meeting_url && (\n                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>\n                                <VideoCall sx={{ fontSize: 16 }} />\n                                <Typography variant=\"caption\">Video Meeting</Typography>\n                              </Box>\n                            )}\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>\n                              <Person sx={{ fontSize: 16 }} />\n                              <Typography variant=\"caption\">{event.attendees_count} attendees</Typography>\n                            </Box>\n                          </Box>\n                        }\n                      />\n                    </ListItem>\n                    {index < upcomingEvents.length - 1 && <Divider />}\n                  </React.Fragment>\n                ))}\n              </List>\n              {upcomingEvents.length === 0 && (\n                <Box sx={{ textAlign: 'center', py: 4 }}>\n                  <Typography color=\"textSecondary\">No upcoming events</Typography>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Add />}\n                    onClick={() => handleNavigate('/calendar/create')}\n                    sx={{ mt: 2 }}\n                  >\n                    Create Your First Event\n                  </Button>\n                </Box>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Quick Actions\n                  </Typography>\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<CalendarToday />}\n                      onClick={() => handleNavigate('/calendar')}\n                      fullWidth\n                    >\n                      View Calendar\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Event />}\n                      onClick={() => handleNavigate('/calendar/events')}\n                      fullWidth\n                    >\n                      All Events\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Schedule />}\n                      onClick={() => handleNavigate('/calendar/appointments')}\n                      fullWidth\n                    >\n                      Appointments\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Notifications />}\n                      onClick={() => handleNavigate('/calendar/reminders')}\n                      fullWidth\n                    >\n                      Reminders\n                    </Button>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Calendar Stats\n                  </Typography>\n                  <Box sx={{ mt: 2 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                      <Typography variant=\"body2\">My Events</Typography>\n                      <Typography variant=\"body2\">{stats.my_events}</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                      <Typography variant=\"body2\">Shared Events</Typography>\n                      <Typography variant=\"body2\">{stats.shared_events}</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                      <Typography variant=\"body2\">This Month</Typography>\n                      <Typography variant=\"body2\">{stats.this_month_events}</Typography>\n                    </Box>\n                    {stats.overdue_events > 0 && (\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                        <Typography variant=\"body2\" color=\"error\">Overdue</Typography>\n                        <Typography variant=\"body2\" color=\"error\">{stats.overdue_events}</Typography>\n                      </Box>\n                    )}\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CalendarDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/cost-centers.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'editDialogOpen' is assigned a value but never used.","line":77,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"editDialogOpen"},"fix":{"range":[1536,1550],"text":""},"desc":"Remove unused variable 'editDialogOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedCostCenter' is assigned a value but never used.","line":78,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedCostCenter"},"fix":{"range":[1599,1617],"text":""},"desc":"Remove unused variable 'selectedCostCenter'."}]},{"ruleId":"no-shadow","severity":2,"message":"'costCenters' is already declared in the upper scope on line 73 column 10.","line":148,"column":32,"nodeType":"Identifier","messageId":"noShadow","endLine":148,"endColumn":57},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'costCenters' is already declared in the upper scope on line 73 column 10.","line":148,"column":32,"nodeType":"Identifier","messageId":"noShadow","endLine":148,"endColumn":57},{"ruleId":"no-shadow","severity":2,"message":"'costCenters' is already declared in the upper scope on line 73 column 10.","line":157,"column":33,"nodeType":"Identifier","messageId":"noShadow","endLine":157,"endColumn":51},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'costCenters' is already declared in the upper scope on line 73 column 10.","line":157,"column":33,"nodeType":"Identifier","messageId":"noShadow","endLine":157,"endColumn":51}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/cost-centers.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel,\n  Chip,\n  IconButton,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  LinearProgress,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Visibility,\n  Refresh,\n  TrendingUp,\n  TrendingDown,\n  CorporateFare\n} from '@mui/icons-material';\nimport { TreeView, TreeItem } from '@mui/x-tree-view';\nimport axios from 'axios';\n\ninterface CostCenter {\n  id: number;\n  cost_center_code: string;\n  cost_center_name: string;\n  parent_cost_center_id?: number;\n  level: number;\n  budget_amount: number;\n  actual_amount: number;\n  is_active: boolean;\n  department?: string;\n  manager_id?: number;\n  description?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface CreateCostCenterData {\n  cost_center_code: string;\n  cost_center_name: string;\n  parent_cost_center_id?: number;\n  budget_amount: number;\n  department?: string;\n  manager_id?: number;\n  description?: string;\n}\n\nconst CostCenters: React.FC = () => {\n  const [costCenters, setCostCenters] = useState<CostCenter[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedCostCenter, setSelectedCostCenter] = useState<CostCenter | null>(null);\n\n  // Create cost center form state\n  const [createData, setCreateData] = useState<CreateCostCenterData>({\n    cost_center_code: '',\n    cost_center_name: '',\n    budget_amount: 0,\n    description: ''\n  });\n\n  const fetchCostCenters = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/cost-centers', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setCostCenters(response.data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch cost centers');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchCostCenters();\n  }, []);\n\n  const handleCreateCostCenter = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post('/api/v1/erp/cost-centers', createData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      setCreateDialogOpen(false);\n      setCreateData({\n        cost_center_code: '',\n        cost_center_name: '',\n        budget_amount: 0,\n        description: ''\n      });\n      fetchCostCenters();\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to create cost center');\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const calculateVariance = (budget: number, actual: number) => {\n    if (budget === 0) {return 0;}\n    return ((actual - budget) / budget) * 100;\n  };\n\n  const getVarianceColor = (variance: number) => {\n    if (Math.abs(variance) <= 5) {return 'success';}\n    if (Math.abs(variance) <= 15) {return 'warning';}\n    return 'error';\n  };\n\n  const buildCostCenterTree = (costCenters: CostCenter[], parentId: number | null = null): CostCenter[] => {\n    return costCenters\n      .filter(cc => cc.parent_cost_center_id === parentId)\n      .map(cc => ({\n        ...cc,\n        children: buildCostCenterTree(costCenters, cc.id)\n      }));\n  };\n\n  const renderCostCenterTree = (costCenters: any[]) => {\n    return costCenters.map((cc) => (\n      <TreeItem\n        key={cc.id}\n        nodeId={cc.id.toString()}\n        label={\n          <Box display=\"flex\" alignItems=\"center\" sx={{ py: 1 }}>\n            <CorporateFare sx={{ mr: 1, fontSize: 16 }} />\n            <Typography variant=\"body2\" sx={{ fontWeight: 'medium' }}>\n              {cc.cost_center_code} - {cc.cost_center_name}\n            </Typography>\n            <Chip\n              label={cc.is_active ? 'Active' : 'Inactive'}\n              color={cc.is_active ? 'success' : 'default'}\n              size=\"small\"\n              sx={{ ml: 1 }}\n            />\n          </Box>\n        }\n      >\n        {cc.children && cc.children.length > 0 && renderCostCenterTree(cc.children)}\n      </TreeItem>\n    ));\n  };\n\n  // Calculate totals\n  const totalBudget = costCenters.reduce((sum, cc) => sum + cc.budget_amount, 0);\n  const totalActual = costCenters.reduce((sum, cc) => sum + cc.actual_amount, 0);\n  const totalVariance = calculateVariance(totalBudget, totalActual);\n\n  const costCenterTree = buildCostCenterTree(costCenters);\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Cost Centers\n        </Typography>\n        <Box>\n          <Button\n            startIcon={<Add />}\n            variant=\"contained\"\n            onClick={() => setCreateDialogOpen(true)}\n            sx={{ mr: 1 }}\n          >\n            New Cost Center\n          </Button>\n          <IconButton onClick={fetchCostCenters} color=\"primary\">\n            <Refresh />\n          </IconButton>\n        </Box>\n      </Box>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <TrendingUp color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Budget\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(totalBudget)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <TrendingDown color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Actual\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(totalActual)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <CorporateFare color={getVarianceColor(totalVariance)} sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Overall Variance\n                  </Typography>\n                  <Typography variant=\"h6\" color={`${getVarianceColor(totalVariance)}.main`}>\n                    {totalVariance.toFixed(2)}%\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {/* Cost Center Hierarchy */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2, height: 500, overflow: 'auto' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Cost Center Hierarchy\n            </Typography>\n            {loading ? (\n              <CircularProgress />\n            ) : (\n              <TreeView>\n                {renderCostCenterTree(costCenterTree)}\n              </TreeView>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Cost Centers Table */}\n        <Grid item xs={12} md={8}>\n          <Paper>\n            <TableContainer sx={{ maxHeight: 500 }}>\n              <Table stickyHeader>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Code</TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Department</TableCell>\n                    <TableCell align=\"right\">Budget</TableCell>\n                    <TableCell align=\"right\">Actual</TableCell>\n                    <TableCell align=\"right\">Utilization</TableCell>\n                    <TableCell align=\"right\">Variance %</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {loading ? (\n                    <TableRow>\n                      <TableCell colSpan={9} align=\"center\">\n                        <CircularProgress />\n                      </TableCell>\n                    </TableRow>\n                  ) : costCenters.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={9} align=\"center\">\n                        No cost centers found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    costCenters.map((cc) => {\n                      const variance = calculateVariance(cc.budget_amount, cc.actual_amount);\n                      const utilization = cc.budget_amount > 0 ? (cc.actual_amount / cc.budget_amount) * 100 : 0;\n                      \n                      return (\n                        <TableRow key={cc.id}>\n                          <TableCell>{cc.cost_center_code}</TableCell>\n                          <TableCell>\n                            <Box>\n                              <Typography variant=\"body2\">{cc.cost_center_name}</Typography>\n                              {cc.description && (\n                                <Typography variant=\"caption\" color=\"textSecondary\">\n                                  {cc.description}\n                                </Typography>\n                              )}\n                            </Box>\n                          </TableCell>\n                          <TableCell>{cc.department || '-'}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(cc.budget_amount)}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(cc.actual_amount)}</TableCell>\n                          <TableCell align=\"right\">\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <LinearProgress\n                                variant=\"determinate\"\n                                value={Math.min(utilization, 100)}\n                                color={utilization > 100 ? 'error' : utilization > 80 ? 'warning' : 'primary'}\n                                sx={{ width: 60, mr: 1 }}\n                              />\n                              <Typography variant=\"caption\">\n                                {utilization.toFixed(1)}%\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <Typography color={`${getVarianceColor(variance)}.main`}>\n                              {variance.toFixed(2)}%\n                            </Typography>\n                          </TableCell>\n                          <TableCell>\n                            <Chip\n                              label={cc.is_active ? 'Active' : 'Inactive'}\n                              color={cc.is_active ? 'success' : 'default'}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <Tooltip title=\"View Details\">\n                              <IconButton size=\"small\">\n                                <Visibility />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Edit\">\n                              <IconButton \n                                size=\"small\"\n                                onClick={() => {\n                                  setSelectedCostCenter(cc);\n                                  setEditDialogOpen(true);\n                                }}\n                              >\n                                <Edit />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Delete\">\n                              <IconButton size=\"small\" color=\"error\">\n                                <Delete />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  )}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Create Cost Center Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Create Cost Center</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Cost Center Code\"\n                value={createData.cost_center_code}\n                onChange={(e) => setCreateData(prev => ({ ...prev, cost_center_code: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Cost Center Name\"\n                value={createData.cost_center_name}\n                onChange={(e) => setCreateData(prev => ({ ...prev, cost_center_name: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Parent Cost Center</InputLabel>\n                <Select\n                  value={createData.parent_cost_center_id || ''}\n                  onChange={(e) => setCreateData(prev => ({ ...prev, parent_cost_center_id: e.target.value as number || undefined }))}\n                  label=\"Parent Cost Center\"\n                >\n                  <MenuItem value=\"\">None (Top Level)</MenuItem>\n                  {costCenters.map((cc) => (\n                    <MenuItem key={cc.id} value={cc.id}>\n                      {cc.cost_center_code} - {cc.cost_center_name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Department\"\n                value={createData.department || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, department: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                type=\"number\"\n                label=\"Budget Amount\"\n                value={createData.budget_amount}\n                onChange={(e) => setCreateData(prev => ({ ...prev, budget_amount: parseFloat(e.target.value) || 0 }))}\n                inputProps={{ min: 0, step: 0.01 }}\n                required\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                label=\"Description\"\n                value={createData.description || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, description: e.target.value }))}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleCreateCostCenter} variant=\"contained\">Create</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CostCenters;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/crm/index.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":62,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":62,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":63,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1200,1227],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":68,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[1484,1491],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadCRMData' was used before it was defined.","line":75,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":75,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/crm/index.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  TextField,\n  InputAdornment,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Tabs,\n  Tab,\n  Alert,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  TrendingUp as TrendingUpIcon,\n  People as PeopleIcon,\n  Assignment as AssignmentIcon,\n  AttachMoney as AttachMoneyIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '@/context/AuthContext';\nimport { crmService, Lead, Opportunity, CRMAnalytics } from '../../services';\n\nconst statusColors: Record<string, string> = {\n  new: 'default',\n  contacted: 'info',\n  qualified: 'warning',\n  converted: 'success',\n  lost: 'error',\n  nurturing: 'secondary',\n};\n\nconst stageColors: Record<string, string> = {\n  prospecting: 'default',\n  qualification: 'info',\n  proposal: 'warning',\n  negotiation: 'secondary',\n  closed_won: 'success',\n  closed_lost: 'error',\n};\n\nexport default function CRMDashboard() {\n  const { user } = useAuth();\n  const [currentTab, setCurrentTab] = useState(0);\n  const [leads, setLeads] = useState<Lead[]>([]);\n  const [opportunities, setOpportunities] = useState<Opportunity[]>([]);\n  const [analytics, setAnalytics] = useState<CRMAnalytics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [openLeadDialog, setOpenLeadDialog] = useState(false);\n  const [openOpportunityDialog, setOpenOpportunityDialog] = useState(false);\n\n  useEffect(() => {\n    loadCRMData();\n  }, []);\n\n  const loadCRMData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const [leadsData, opportunitiesData, analyticsData] = await Promise.all([\n        crmService.getLeads(),\n        crmService.getOpportunities(),\n        crmService.getAnalytics()\n      ]);\n\n      setLeads(leadsData);\n      setOpportunities(opportunitiesData);\n      setAnalytics(analyticsData);\n    } catch (err: any) {\n      console.error('Error loading CRM data:', err);\n      setError(err.userMessage || 'Failed to load CRM data');\n      \n      // Fallback to empty data to prevent crashes\n      setLeads([]);\n      setOpportunities([]);\n      setAnalytics({\n        total_leads: 0,\n        qualified_leads: 0,\n        total_opportunities: 0,\n        won_opportunities: 0,\n        total_pipeline_value: 0,\n        avg_deal_size: 0,\n        lead_conversion_rate: 0,\n        sales_cycle_length: 0,\n        monthly_sales_target: 0,\n        monthly_sales_actual: 0,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n  const filteredLeads = leads.filter(\n    (lead) =>\n      (lead.contact_person || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n      lead.lead_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (lead.contact_email || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (lead.company_name || '').toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const filteredOpportunities = opportunities.filter(\n    (opportunity) =>\n      opportunity.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      opportunity.opportunity_number.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const renderAnalyticsCards = () => {\n    if (!analytics) {return null;}\n\n    return (\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <PeopleIcon color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Leads\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {analytics.leads_total}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <AssignmentIcon color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Opportunities\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {analytics.opportunities_total}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <AttachMoneyIcon color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Pipeline Value\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    ${analytics.pipeline_value.toLocaleString()}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <TrendingUpIcon color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Conversion Rate\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {analytics.conversion_rate}%\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderLeadsTable = () => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Lead #</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Company</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Score</TableCell>\n            <TableCell>Est. Value</TableCell>\n            <TableCell>Created</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {filteredLeads.map((lead) => (\n            <TableRow key={lead.id} hover>\n              <TableCell>{lead.lead_number}</TableCell>\n              <TableCell>\n                {lead.first_name} {lead.last_name}\n              </TableCell>\n              <TableCell>{lead.company || '-'}</TableCell>\n              <TableCell>{lead.email}</TableCell>\n              <TableCell>\n                <Chip\n                  label={lead.status}\n                  color={statusColors[lead.status] as any}\n                  size=\"small\"\n                />\n              </TableCell>\n              <TableCell>{lead.score}</TableCell>\n              <TableCell>\n                {lead.estimated_value ? `$${lead.estimated_value.toLocaleString()}` : '-'}\n              </TableCell>\n              <TableCell>\n                {new Date(lead.created_at).toLocaleDateString()}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  const renderOpportunitiesTable = () => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Opportunity #</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Stage</TableCell>\n            <TableCell>Amount</TableCell>\n            <TableCell>Probability</TableCell>\n            <TableCell>Expected Revenue</TableCell>\n            <TableCell>Close Date</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {filteredOpportunities.map((opportunity) => (\n            <TableRow key={opportunity.id} hover>\n              <TableCell>{opportunity.opportunity_number}</TableCell>\n              <TableCell>{opportunity.name}</TableCell>\n              <TableCell>\n                <Chip\n                  label={opportunity.stage}\n                  color={stageColors[opportunity.stage] as any}\n                  size=\"small\"\n                />\n              </TableCell>\n              <TableCell>${opportunity.amount.toLocaleString()}</TableCell>\n              <TableCell>{opportunity.probability}%</TableCell>\n              <TableCell>${opportunity.expected_revenue.toLocaleString()}</TableCell>\n              <TableCell>\n                {new Date(opportunity.expected_close_date).toLocaleDateString()}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          CRM Dashboard\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenLeadDialog(true)}\n          >\n            Add Lead\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenOpportunityDialog(true)}\n          >\n            Add Opportunity\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n          <Button size=\"small\" onClick={loadCRMData} sx={{ ml: 1 }}>\n            Retry\n          </Button>\n        </Alert>\n      )}\n\n      {renderAnalyticsCards()}\n\n      <Card>\n        <CardContent>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n            <Tabs value={currentTab} onChange={(_, newValue) => setCurrentTab(newValue)}>\n              <Tab label=\"Leads\" />\n              <Tab label=\"Opportunities\" />\n            </Tabs>\n          </Box>\n\n          <Box sx={{ mb: 2 }}>\n            <TextField\n              placeholder=\"Search...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n              sx={{ maxWidth: 300 }}\n            />\n          </Box>\n\n          {currentTab === 0 && renderLeadsTable()}\n          {currentTab === 1 && renderOpportunitiesTable()}\n        </CardContent>\n      </Card>\n\n      {/* Add Lead Dialog - Placeholder */}\n      <Dialog\n        open={openLeadDialog}\n        onClose={() => setOpenLeadDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Add New Lead</DialogTitle>\n        <DialogContent>\n          <Box sx={{ pt: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"First Name\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Last Name\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Email\"\n                  type=\"email\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Phone\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Company\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Source</InputLabel>\n                  <Select defaultValue=\"website\">\n                    <MenuItem value=\"website\">Website</MenuItem>\n                    <MenuItem value=\"referral\">Referral</MenuItem>\n                    <MenuItem value=\"social_media\">Social Media</MenuItem>\n                    <MenuItem value=\"email_campaign\">Email Campaign</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Estimated Value\"\n                  type=\"number\"\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenLeadDialog(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setOpenLeadDialog(false)}>\n            Create Lead\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Add Opportunity Dialog - Placeholder */}\n      <Dialog\n        open={openOpportunityDialog}\n        onClose={() => setOpenOpportunityDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Add New Opportunity</DialogTitle>\n        <DialogContent>\n          <Box sx={{ pt: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Opportunity Name\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Amount\"\n                  type=\"number\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Stage</InputLabel>\n                  <Select defaultValue=\"prospecting\">\n                    <MenuItem value=\"prospecting\">Prospecting</MenuItem>\n                    <MenuItem value=\"qualification\">Qualification</MenuItem>\n                    <MenuItem value=\"proposal\">Proposal</MenuItem>\n                    <MenuItem value=\"negotiation\">Negotiation</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Probability (%)\"\n                  type=\"number\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Expected Close Date\"\n                  type=\"date\"\n                  fullWidth\n                  InputLabelProps={{ shrink: true }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Description\"\n                  multiline\n                  rows={3}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenOpportunityDialog(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setOpenOpportunityDialog(false)}>\n            Create Opportunity\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/dashboard/AppSuperAdminDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Container' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Container"},"fix":{"range":[80,93],"text":""},"desc":"Remove unused variable 'Container'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"CircularProgress"},"fix":{"range":[101,121],"text":""},"desc":"Remove unused variable 'CircularProgress'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Grid' is defined but never used.","line":10,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Grid"},"fix":{"range":[139,155],"text":""},"desc":"Remove unused variable 'Grid'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userSettings' is assigned a value but never used.","line":52,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"userSettings"},"fix":{"range":[1420,1462],"text":""},"desc":"Remove unused variable 'userSettings'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchAppStatistics' was used before it was defined.","line":55,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":55,"endColumn":23}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Container,\n  Chip,\n  CircularProgress,\n  Alert,\n  Paper,\n  Grid as Grid,\n} from '@mui/material';\nimport {\n  Business,\n  People,\n  AdminPanelSettings,\n  TrendingUp,\n  Security,\n  MonitorHeart,\n  Storage,\n  Timeline,\n} from '@mui/icons-material';\nimport adminService from '../../services/adminService';\nimport MetricCard from '../../components/MetricCard';\nimport DashboardLayout from '../../components/DashboardLayout';\nimport ModernLoading from '../../components/ModernLoading';\nimport StickyNotesPanel from '../../components/StickyNotes/StickyNotesPanel';\nimport { useStickyNotes } from '../../hooks/useStickyNotes';\n\ninterface AppStatistics {\n  total_licenses_issued: number;\n  active_organizations: number;\n  trial_organizations: number;\n  total_active_users: number;\n  super_admins_count: number;\n  new_licenses_this_month: number;\n  plan_breakdown: { [key: string]: number };\n  system_health: {\n    status: string;\n    uptime: string;\n  };\n  generated_at: string;\n  total_storage_used_gb?: number;\n  average_users_per_org?: number;\n  failed_login_attempts?: number;\n  recent_new_orgs?: number;\n}\n\nconst AppSuperAdminDashboard: React.FC = () => {\n  const [statistics, setStatistics] = useState<AppStatistics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { userSettings } = useStickyNotes();\n\n  useEffect(() => {\n    fetchAppStatistics();\n  }, []);\n\n  const fetchAppStatistics = async () => {\n    try {\n      const data = await adminService.getAppStatistics();\n      const totalLicenses = data.total_licenses_issued || 0;\n      const totalActiveUsers = data.total_active_users || 0;\n      const enhancedData = {\n        ...data,\n        total_storage_used_gb: data.total_storage_used_gb || totalLicenses * 0.5,\n        average_users_per_org: data.average_users_per_org || (totalLicenses > 0 ? Math.round(totalActiveUsers / totalLicenses) : 0),\n        failed_login_attempts: data.failed_login_attempts || 0,\n        recent_new_orgs: data.recent_new_orgs || Math.round(data.new_licenses_this_month / 4)\n      };\n      setStatistics(enhancedData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout \n        title=\"Super Admin Dashboard\"\n        subtitle=\"Monitor platform-wide metrics and system health\"\n      >\n        <ModernLoading \n          type=\"skeleton\" \n          skeletonType=\"dashboard\" \n          count={9}\n          message=\"Loading platform metrics...\" \n        />\n      </DashboardLayout>\n    );\n  }\n\n  if (error) {\n    return (\n      <DashboardLayout \n        title=\"Super Admin Dashboard\"\n        subtitle=\"Monitor platform-wide metrics and system health\"\n      >\n        <Alert \n          severity=\"error\"\n          sx={{ \n            borderRadius: 'var(--radius-lg)',\n            '& .MuiAlert-message': {\n              fontSize: 'var(--font-size-sm)'\n            }\n          }}\n        >\n          Error loading dashboard: {error}\n        </Alert>\n      </DashboardLayout>\n    );\n  }\n\n  if (!statistics) {\n    return null;\n  }\n\n  const statsCards = [\n    {\n      title: 'Total Licenses Issued',\n      value: statistics.total_licenses_issued,\n      icon: <Business />,\n      color: 'primary' as const,\n      description: 'Total organization licenses created',\n      trend: {\n        value: 8,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Active Organizations',\n      value: statistics.active_organizations,\n      icon: <Business />,\n      color: 'success' as const,\n      description: 'Organizations with active status',\n      trend: {\n        value: 12,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Trial Organizations',\n      value: statistics.trial_organizations,\n      icon: <Business />,\n      color: 'warning' as const,\n      description: 'Organizations on trial plans',\n      trend: {\n        value: 5,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Total Active Users',\n      value: statistics.total_active_users,\n      icon: <People />,\n      color: 'info' as const,\n      description: 'Active users across all organizations',\n      trend: {\n        value: 15,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Super Admins',\n      value: statistics.super_admins_count,\n      icon: <AdminPanelSettings />,\n      color: 'warning' as const,\n      description: 'App-level administrators'\n    },\n    {\n      title: 'New Licenses (30d)',\n      value: statistics.new_licenses_this_month,\n      icon: <TrendingUp />,\n      color: 'success' as const,\n      description: 'Licenses created in last 30 days',\n      trend: {\n        value: 22,\n        period: 'vs previous month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'System Health',\n      value: statistics.system_health.uptime,\n      icon: <MonitorHeart />,\n      color: statistics.system_health.status === 'healthy' ? 'success' as const : 'error' as const,\n      description: 'System uptime percentage'\n    },\n    {\n      title: 'Total Storage Used',\n      value: `${statistics.total_storage_used_gb?.toFixed(1) || 0} GB`,\n      icon: <Storage />,\n      color: 'info' as const,\n      description: 'Aggregate storage across all organizations'\n    },\n    {\n      title: 'Avg Users per Org',\n      value: statistics.average_users_per_org || 0,\n      icon: <Timeline />,\n      color: 'primary' as const,\n      description: 'Average active users per organization'\n    }\n  ];\n\n  const activationRate = statistics.total_licenses_issued > 0 \n    ? Math.round((statistics.active_organizations / statistics.total_licenses_issued) * 100)\n    : 0;\n\n  return (\n    <DashboardLayout \n      title=\"Super Admin Dashboard\"\n      subtitle=\"Monitor platform-wide metrics and system health\"\n    >\n      <StickyNotesPanel />\n      \n      <Box className=\"modern-grid cols-3\" sx={{ mb: 4 }}>\n        {statsCards.map((stat, index) => (\n          <MetricCard\n            key={index}\n            title={stat.title}\n            value={stat.value}\n            icon={stat.icon}\n            color={stat.color}\n            description={stat.description}\n            trend={stat.trend}\n          />\n        ))}\n      </Box>\n\n      <Box className=\"modern-grid cols-2\" sx={{ mb: 4 }}>\n        <Paper className=\"modern-card\" sx={{ p: 3 }}>\n          <Typography variant=\"h6\" className=\"modern-card-title\" gutterBottom>\n            License Plan Distribution\n          </Typography>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n            {Object.entries(statistics.plan_breakdown).map(([plan, count]) => (\n              <Chip\n                key={plan}\n                label={`${plan}: ${count}`}\n                color={plan === 'trial' ? 'warning' : 'primary'}\n                variant=\"filled\"\n                sx={{ \n                  fontWeight: 500,\n                  '&.MuiChip-colorPrimary': {\n                    backgroundColor: 'var(--primary-600)',\n                    color: 'white'\n                  },\n                  '&.MuiChip-colorWarning': {\n                    backgroundColor: 'var(--warning-500)',\n                    color: 'white'\n                  }\n                }}\n              />\n            ))}\n          </Box>\n        </Paper>\n\n        <Paper className=\"modern-card\" sx={{ p: 3 }}>\n          <Typography variant=\"h6\" className=\"modern-card-title\" gutterBottom>\n            System Status\n          </Typography>\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <Security sx={{ color: 'var(--success-600)', mr: 1 }} />\n            <Typography>\n              Status: <Chip \n                label={statistics.system_health.status} \n                color={statistics.system_health.status === 'healthy' ? 'success' : 'error'}\n                size=\"small\"\n                variant=\"filled\"\n                sx={{\n                  fontWeight: 500,\n                  '&.MuiChip-colorSuccess': {\n                    backgroundColor: 'var(--success-600)',\n                    color: 'white'\n                  },\n                  '&.MuiChip-colorError': {\n                    backgroundColor: 'var(--error-600)',\n                    color: 'white'\n                  }\n                }}\n              />\n            </Typography>\n          </Box>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Last updated: {new Date(statistics.generated_at).toLocaleString()}\n          </Typography>\n        </Paper>\n      </Box>\n\n      <Paper className=\"modern-card\" sx={{ p: 4 }}>\n        <Typography variant=\"h6\" className=\"modern-card-title\" gutterBottom sx={{ mb: 3 }}>\n          Platform Growth Overview\n        </Typography>\n        <Box className=\"modern-grid cols-3\">\n          <Box sx={{ textAlign: 'center' }}>\n            <Typography \n              variant=\"h3\" \n              sx={{ \n                color: 'var(--primary-600)',\n                fontWeight: 700,\n                mb: 1\n              }}\n            >\n              {statistics.total_licenses_issued}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Total Organizations\n            </Typography>\n          </Box>\n          <Box sx={{ textAlign: 'center' }}>\n            <Typography \n              variant=\"h3\" \n              sx={{ \n                color: 'var(--secondary-600)',\n                fontWeight: 700,\n                mb: 1\n              }}\n            >\n              {statistics.total_active_users}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Platform Users\n            </Typography>\n          </Box>\n          <Box sx={{ textAlign: 'center' }}>\n            <Typography \n              variant=\"h3\" \n              sx={{ \n                color: 'var(--success-600)',\n                fontWeight: 700,\n                mb: 1\n              }}\n            >\n              {activationRate}%\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Activation Rate\n            </Typography>\n          </Box>\n        </Box>\n      </Paper>\n    </DashboardLayout>\n  );\n};\n\nexport default AppSuperAdminDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/dashboard/OrgDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Container' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Container"},"fix":{"range":[129,142],"text":""},"desc":"Remove unused variable 'Container'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"CircularProgress"},"fix":{"range":[150,170],"text":""},"desc":"Remove unused variable 'CircularProgress'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MuiGrid' is defined but never used.","line":11,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"MuiGrid"},"fix":{"range":[188,207],"text":""},"desc":"Remove unused variable 'MuiGrid'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchOrgStatistics' was used before it was defined.","line":43,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":43,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/dashboard/OrgDashboard.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Container,\n  Chip,\n  CircularProgress,\n  Alert,\n  Paper,\n  Grid as MuiGrid,\n} from '@mui/material';\nimport {\n  Business,\n  People,\n  Inventory,\n  AttachMoney,\n  TrendingUp,\n} from '@mui/icons-material';\nimport adminService from '../../services/adminService';\nimport MetricCard from '../../components/MetricCard';\nimport DashboardLayout from '../../components/DashboardLayout';\nimport ModernLoading from '../../components/ModernLoading';\n\ninterface OrgStatistics {\n  total_products: number;\n  total_customers: number;\n  total_vendors: number;\n  active_users: number;\n  monthly_sales: number;\n  inventory_value: number;\n  plan_type: string;\n  storage_used_gb: number;\n  generated_at: string;\n}\n\nconst OrgDashboard: React.FC = () => {\n  const [statistics, setStatistics] = useState<OrgStatistics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchOrgStatistics();\n  }, []);\n\n  const fetchOrgStatistics = async () => {\n    try {\n      const data = await adminService.getOrgStatistics();\n      setStatistics(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout \n        title=\"Organization Dashboard\"\n      >\n        <ModernLoading \n          type=\"skeleton\" \n          skeletonType=\"dashboard\" \n          count={6}\n          message=\"Loading dashboard metrics...\" \n        />\n      </DashboardLayout>\n    );\n  }\n\n  if (error) {\n    return (\n      <DashboardLayout \n        title=\"Organization Dashboard\"\n      >\n        <Alert \n          severity=\"error\"\n          sx={{ \n            borderRadius: 'var(--radius-lg)',\n            '& .MuiAlert-message': {\n              fontSize: 'var(--font-size-sm)'\n            }\n          }}\n        >\n          Error loading dashboard: {error}\n        </Alert>\n      </DashboardLayout>\n    );\n  }\n\n  if (!statistics) {\n    return (\n      <DashboardLayout \n        title=\"Organization Dashboard\"\n      >\n        <Alert \n          severity=\"info\"\n          sx={{ \n            borderRadius: 'var(--radius-lg)',\n            '& .MuiAlert-message': {\n              fontSize: 'var(--font-size-sm)'\n            }\n          }}\n        >\n          No statistics available\n        </Alert>\n      </DashboardLayout>\n    );\n  }\n\n  const statsCards = [\n    {\n      title: 'Total Products',\n      value: statistics.total_products ?? 0,\n      icon: <Inventory />,\n      color: 'primary' as const,\n      description: 'Products in inventory',\n      trend: {\n        value: 12,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Total Customers',\n      value: statistics.total_customers ?? 0,\n      icon: <People />,\n      color: 'success' as const,\n      description: 'Active customers',\n      trend: {\n        value: 8,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Total Vendors',\n      value: statistics.total_vendors ?? 0,\n      icon: <Business />,\n      color: 'info' as const,\n      description: 'Registered vendors',\n      trend: {\n        value: 3,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Active Users',\n      value: statistics.active_users ?? 0,\n      icon: <People />,\n      color: 'warning' as const,\n      description: 'Users in organization',\n      trend: {\n        value: 5,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Monthly Sales',\n      value: `$${(statistics.monthly_sales ?? 0).toLocaleString()}`,\n      icon: <AttachMoney />,\n      color: 'success' as const,\n      description: 'Sales in last 30 days',\n      trend: {\n        value: 15,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    },\n    {\n      title: 'Inventory Value',\n      value: `$${(statistics.inventory_value ?? 0).toLocaleString()}`,\n      icon: <TrendingUp />,\n      color: 'primary' as const,\n      description: 'Current stock value',\n      trend: {\n        value: 7,\n        period: 'vs last month',\n        direction: 'up' as const\n      }\n    }\n  ];\n\n  return (\n    <DashboardLayout \n      title=\"Organization Dashboard\"\n    >\n      <Box className=\"modern-grid cols-3\" sx={{ mb: 4 }}>\n        {statsCards.map((stat, index) => (\n          <MetricCard\n            key={index}\n            title={stat.title}\n            value={stat.value}\n            icon={stat.icon}\n            color={stat.color}\n            description={stat.description}\n            trend={stat.trend}\n          />\n        ))}\n      </Box>\n\n      <Box className=\"modern-grid cols-2\" sx={{ mb: 4 }}>\n        <Paper \n          className=\"modern-card\"\n          sx={{ p: 3 }}\n        >\n          <Typography variant=\"h6\" className=\"modern-card-title\" gutterBottom>\n            Subscription Plan\n          </Typography>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\n            <Chip \n              label={statistics.plan_type?.toUpperCase() ?? 'N/A'} \n              color={statistics.plan_type === 'trial' ? 'warning' : 'primary'}\n              variant=\"filled\"\n              sx={{ \n                fontWeight: 600,\n                '&.MuiChip-colorPrimary': {\n                  backgroundColor: 'var(--primary-600)',\n                  color: 'white'\n                },\n                '&.MuiChip-colorWarning': {\n                  backgroundColor: 'var(--warning-500)',\n                  color: 'white'\n                }\n              }}\n            />\n          </Box>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Storage Used: {statistics.storage_used_gb ?? 0} GB\n          </Typography>\n        </Paper>\n\n        <Paper \n          className=\"modern-card\"\n          sx={{ p: 3 }}\n        >\n          <Typography variant=\"h6\" className=\"modern-card-title\" gutterBottom>\n            Recent Activity\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            No recent activity available\n          </Typography>\n        </Paper>\n      </Box>\n\n      <Paper \n        className=\"modern-card\"\n        sx={{ p: 4 }}\n      >\n        <Typography variant=\"h6\" className=\"modern-card-title\" gutterBottom sx={{ mb: 3 }}>\n          Organization Overview\n        </Typography>\n        <Box className=\"modern-grid cols-3\">\n          <Box sx={{ textAlign: 'center' }}>\n            <Typography \n              variant=\"h3\" \n              sx={{ \n                color: 'var(--primary-600)',\n                fontWeight: 700,\n                mb: 1\n              }}\n            >\n              {statistics.total_products ?? 0}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Total Products\n            </Typography>\n          </Box>\n          <Box sx={{ textAlign: 'center' }}>\n            <Typography \n              variant=\"h3\" \n              sx={{ \n                color: 'var(--secondary-600)',\n                fontWeight: 700,\n                mb: 1\n              }}\n            >\n              {statistics.active_users ?? 0}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Active Users\n            </Typography>\n          </Box>\n          <Box sx={{ textAlign: 'center' }}>\n            <Typography \n              variant=\"h3\" \n              sx={{ \n                color: 'var(--success-600)',\n                fontWeight: 700,\n                mb: 1\n              }}\n            >\n              {statistics.monthly_sales !== undefined && statistics.monthly_sales !== null\n                ? Math.round((statistics.monthly_sales / 100000) * 100)\n                : 0\n              }%\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Monthly Growth\n            </Typography>\n          </Box>\n        </Box>\n      </Paper>\n    </DashboardLayout>\n  );\n};\n\nexport default OrgDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/dashboard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/demo.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":125,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":125,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// frontend/src/pages/demo.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Container,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Alert,\n  Switch,\n  FormControlLabel,\n  Grid\n} from '@mui/material';\nimport {\n  Receipt,\n  Inventory,\n  People,\n  Business,\n  Warning,\n  ExitToApp\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\n\n// Mock/Sample data for demo mode\nconst mockData = {\n  stats: [\n    {\n      title: 'Purchase Vouchers',\n      value: 15,\n      icon: <Receipt />,\n      color: '#1976D2'\n    },\n    {\n      title: 'Sales Vouchers',\n      value: 23,\n      icon: <Receipt />,\n      color: '#2E7D32'\n    },\n    {\n      title: 'Low Stock Items',\n      value: 5,\n      icon: <Warning />,\n      color: '#F57C00'\n    },\n    {\n      title: 'Active Products',\n      value: 148,\n      icon: <People />,\n      color: '#7B1FA2'\n    }\n  ],\n  purchaseVouchers: [\n    {\n      id: 1,\n      voucher_number: 'PV-2024-001',\n      date: '2024-01-15',\n      total_amount: 15750.00,\n      status: 'confirmed',\n      vendor: 'ABC Suppliers'\n    },\n    {\n      id: 2,\n      voucher_number: 'PV-2024-002',\n      date: '2024-01-16',\n      total_amount: 8950.00,\n      status: 'pending',\n      vendor: 'XYZ Materials'\n    },\n    {\n      id: 3,\n      voucher_number: 'PV-2024-003',\n      date: '2024-01-17',\n      total_amount: 22100.00,\n      status: 'confirmed',\n      vendor: 'Best Parts Inc'\n    }\n  ],\n  salesVouchers: [\n    {\n      id: 1,\n      voucher_number: 'SV-2024-001',\n      date: '2024-01-15',\n      total_amount: 25600.00,\n      status: 'confirmed',\n      customer: 'Tech Solutions Ltd'\n    },\n    {\n      id: 2,\n      voucher_number: 'SV-2024-002',\n      date: '2024-01-16',\n      total_amount: 18750.00,\n      status: 'pending',\n      customer: 'Modern Industries'\n    },\n    {\n      id: 3,\n      voucher_number: 'SV-2024-003',\n      date: '2024-01-17',\n      total_amount: 31200.00,\n      status: 'confirmed',\n      customer: 'Global Corp'\n    }\n  ],\n  companyInfo: {\n    name: 'Demo Manufacturing Company',\n    address: '123 Demo Street, Sample City',\n    phone: '+91-9876543210',\n    email: 'demo@example.com',\n    gst: '24AAACC1206D1ZV'\n  }\n};\n\nexport default function DemoPage() {\n  const router = useRouter();\n  const [demoMode, setDemoMode] = useState(true);\n  const [isDemoTempUser, setIsDemoTempUser] = useState(false);\n\n  useEffect(() => {\n    // Set demo mode flag\n    localStorage.setItem('demoMode', demoMode.toString());\n    \n    // Check if this is a temporary demo user\n    const tempUser = localStorage.getItem('isDemoTempUser');\n    setIsDemoTempUser(tempUser === 'true');\n  }, [demoMode]);\n\n  const handleExitDemo = () => {\n    localStorage.removeItem('demoMode');\n    localStorage.removeItem('isDemoTempUser');\n    \n    // If this was a temporary demo user, redirect to login\n    if (isDemoTempUser) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user_role');\n      router.push('/login');\n    } else {\n      // Regular user, go back to dashboard\n      router.push('/dashboard');\n    }\n  };\n\n  const handleToggleDemo = () => {\n    setDemoMode(!demoMode);\n    if (!demoMode) {\n      localStorage.setItem('demoMode', 'true');\n    } else {\n      localStorage.removeItem('demoMode');\n    }\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        {/* Demo Mode Alert */}\n        <Alert \n          severity=\"info\" \n          sx={{ mb: 3 }}\n          action={\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={demoMode}\n                    onChange={handleToggleDemo}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Demo Mode\"\n              />\n              <Button\n                color=\"inherit\"\n                size=\"small\"\n                onClick={handleExitDemo}\n                startIcon={<ExitToApp />}\n              >\n                {isDemoTempUser ? 'End Demo Session' : 'Exit Demo'}\n              </Button>\n            </Box>\n          }\n        >\n          <Typography variant=\"h6\" component=\"div\">\n            🎭 Demo Mode Active {isDemoTempUser && '(Temporary User)'}\n          </Typography>\n          <Typography variant=\"body2\">\n            You are viewing the organization dashboard with sample data. This is not real business data. \n            All functionality is simulated for demonstration purposes.\n            {isDemoTempUser && ' Your temporary session will end when you logout or close the browser.'}\n          </Typography>\n        </Alert>\n\n        {/* Additional alert for temporary demo users */}\n        {isDemoTempUser && (\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\n            <Typography variant=\"body2\">\n              <strong>Temporary Demo Account:</strong> You are using a temporary demo account that was created for this session only. \n              No real user account has been created in the system. When you end this session, all temporary data will be cleared.\n            </Typography>\n          </Alert>\n        )}\n\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Organization Dashboard - Demo Mode\n        </Typography>\n\n        {/* Company Info Card */}\n        <Paper sx={{ p: 2, mb: 3, bgcolor: 'primary.light', color: 'primary.contrastText' }}>\n          <Typography variant=\"h6\" gutterBottom>\n            {mockData.companyInfo.name}\n          </Typography>\n          <Typography variant=\"body2\">\n            {mockData.companyInfo.address} • {mockData.companyInfo.phone} • {mockData.companyInfo.email}\n          </Typography>\n          <Typography variant=\"body2\">\n            GST: {mockData.companyInfo.gst}\n          </Typography>\n        </Paper>\n\n        <Grid container spacing={3}>\n          {/* Statistics Cards */}\n          {mockData.stats.map((stat, index) => (\n            <Grid\n              key={index}\n              size={{\n                xs: 12,\n                sm: 6,\n                md: 3\n              }}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <Box sx={{ color: stat.color, mr: 2 }}>\n                      {stat.icon}\n                    </Box>\n                   <Box>\n                      <Typography color=\"textSecondary\" gutterBottom>\n                        {stat.title}\n                      </Typography>\n                      <Typography variant=\"h4\" component=\"h2\">\n                        {stat.value}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n\n          {/* Recent Purchase Vouchers */}\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Recent Purchase Vouchers (Sample Data)\n              </Typography>\n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Voucher #</TableCell>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Amount</TableCell>\n                      <TableCell>Status</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {mockData.purchaseVouchers.map((voucher) => (\n                      <TableRow key={voucher.id}>\n                        <TableCell>{voucher.voucher_number}</TableCell>\n                        <TableCell>\n                          {new Date(voucher.date).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>₹{voucher.total_amount.toFixed(2)}</TableCell>\n                        <TableCell>\n                          <Chip\n                            label={voucher.status}\n                            color={voucher.status === 'confirmed' ? 'success' : 'default'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n          </Grid>\n\n          {/* Recent Sales Vouchers */}\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Recent Sales Vouchers (Sample Data)\n              </Typography>\n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Voucher #</TableCell>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Amount</TableCell>\n                      <TableCell>Status</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {mockData.salesVouchers.map((voucher) => (\n                      <TableRow key={voucher.id}>\n                        <TableCell>{voucher.voucher_number}</TableCell>\n                        <TableCell>\n                          {new Date(voucher.date).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>₹{voucher.total_amount.toFixed(2)}</TableCell>\n                        <TableCell>\n                          <Chip\n                            label={voucher.status}\n                            color={voucher.status === 'confirmed' ? 'success' : 'default'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n          </Grid>\n\n          {/* Demo Features - Comprehensive Feature Showcase */}\n          <Grid size={12}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h5\" gutterBottom sx={{ mb: 3 }}>\n                🎯 Complete Feature Showcase - All Live Features Available\n              </Typography>\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n                Explore all features of the TRITIQ ERP system with sample data. This demo provides access to every module and functionality.\n              </Typography>\n\n              {/* Master Data Section */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                👥 Master Data Management\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/masters/vendors')}\n                  >\n                    Vendors Management\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Business />}\n                    onClick={() => router.push('/masters/customers')}\n                  >\n                    Customers Management\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Inventory />}\n                    onClick={() => router.push('/masters/products')}\n                  >\n                    Products Catalog\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Business />}\n                    onClick={() => router.push('/masters?tab=company')}\n                  >\n                    Company Details\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {/* Inventory Management */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                📦 Inventory Management\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Inventory />}\n                    onClick={() => router.push('/inventory/stock')}\n                  >\n                    Current Stock\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/inventory/movements')}\n                  >\n                    Stock Movements\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Warning />}\n                    onClick={() => router.push('/inventory/low-stock')}\n                  >\n                    Low Stock Report\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<ExitToApp />}\n                    onClick={() => router.push('/inventory/bulk-import')}\n                  >\n                    Bulk Import Tools\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {/* Voucher System */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                🧾 Complete Voucher System\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/vouchers/Purchase-Vouchers/purchase-order')}\n                  >\n                    Purchase Orders\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/vouchers/Sales-Vouchers/sales-voucher')}\n                  >\n                    Sales Vouchers\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/vouchers/Financial-Vouchers/payment-voucher')}\n                  >\n                    Financial Vouchers\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/vouchers/Manufacturing-Vouchers/production-order')}\n                  >\n                    Manufacturing Orders\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {/* Analytics & Reports */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                📊 Business Intelligence & Analytics\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/analytics/customer')}\n                  >\n                    Customer Analytics\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/analytics/sales')}\n                  >\n                    Sales Analytics\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/analytics/purchase')}\n                  >\n                    Purchase Analytics\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/analytics/service')}\n                  >\n                    Service Analytics\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {/* Service CRM Features */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                🔧 Service CRM & Operations\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/service/dashboard')}\n                  >\n                    Service Dashboard\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/service/dispatch')}\n                  >\n                    Dispatch Management\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/service/feedback')}\n                  >\n                    Feedback Workflow\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/sla')}\n                  >\n                    SLA Management\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {/* Reports & Financial */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                📈 Reports & Financial Analysis\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/reports/ledgers')}\n                  >\n                    Ledger Reports\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/reports/trial-balance')}\n                  >\n                    Trial Balance\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/reports/profit-loss')}\n                  >\n                    Profit & Loss\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Inventory />}\n                    onClick={() => router.push('/reports/stock')}\n                  >\n                    Stock Reports\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {/* Administration Features */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                ⚙️ Administration & Management\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/admin/rbac')}\n                  >\n                    Role Management\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/admin/audit-logs')}\n                  >\n                    Audit Logs\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/admin/notifications')}\n                  >\n                    Notifications\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/settings')}\n                  >\n                    System Settings\n                  </Button>\n                </Grid>\n              </Grid>\n\n              <Alert severity=\"info\" sx={{ mt: 3 }}>\n                <Typography variant=\"body2\">\n                  <strong>✨ Full Feature Parity:</strong> This demo showcases all live features of the TRITIQ ERP system. \n                  Every module, report, and functionality is accessible with sample data for comprehensive testing and evaluation.\n                </Typography>\n              </Alert>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/exhibition-mode.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[55,64],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[141,152],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[211,224],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[224,239],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[239,253],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[253,263],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[263,275],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[472,482],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Analytics' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Analytics"},"fix":{"range":[518,531],"text":""},"desc":"Remove unused variable 'Analytics'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FileUpload' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"FileUpload"},"fix":{"range":[531,545],"text":""},"desc":"Remove unused variable 'FileUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'file' is defined but never used.","line":232,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"file"},"fix":{"range":[6279,6289],"text":""},"desc":"Remove unused variable 'file'."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Chip,\n  IconButton,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  LinearProgress,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Avatar\n} from '@mui/material';\nimport {\n  CameraAlt,\n  Upload,\n  Visibility,\n  Edit,\n  Delete,\n  Event,\n  BusinessCenter,\n  Email,\n  Analytics,\n  FileUpload,\n  QrCodeScanner,\n  ContactMail,\n  TrendingUp\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\n\ninterface ExhibitionEvent {\n  id: number;\n  name: string;\n  description?: string;\n  location?: string;\n  venue?: string;\n  start_date?: string;\n  end_date?: string;\n  status: 'planned' | 'active' | 'completed' | 'cancelled';\n  is_active: boolean;\n  auto_send_intro_email: boolean;\n  created_at: string;\n  card_scan_count?: number;\n  prospect_count?: number;\n}\n\ninterface BusinessCardScan {\n  id: number;\n  scan_id: string;\n  exhibition_event_id: number;\n  full_name?: string;\n  company_name?: string;\n  designation?: string;\n  email?: string;\n  phone?: string;\n  mobile?: string;\n  website?: string;\n  address?: string;\n  confidence_score?: number;\n  validation_status: 'pending' | 'validated' | 'rejected';\n  processing_status: 'scanned' | 'processed' | 'converted' | 'failed';\n  prospect_created: boolean;\n  intro_email_sent: boolean;\n  created_at: string;\n}\n\ninterface ExhibitionProspect {\n  id: number;\n  exhibition_event_id: number;\n  card_scan_id?: number;\n  full_name: string;\n  company_name: string;\n  designation?: string;\n  email?: string;\n  phone?: string;\n  mobile?: string;\n  website?: string;\n  address?: string;\n  lead_score?: number;\n  qualification_status: 'unqualified' | 'qualified' | 'hot' | 'cold';\n  interest_level?: 'high' | 'medium' | 'low';\n  status: 'new' | 'contacted' | 'qualified' | 'converted' | 'lost';\n  conversion_status: 'prospect' | 'lead' | 'customer';\n  created_at: string;\n  intro_email_sent_at?: string;\n  contact_attempts: number;\n}\n\n// Mock API service - would be replaced with actual API calls\nconst exhibitionAPI = {\n  getEvents: () => Promise.resolve([\n    {\n      id: 1,\n      name: \"Tech Expo 2024\",\n      description: \"Annual technology exhibition\",\n      location: \"Convention Center\",\n      venue: \"Hall A\",\n      start_date: \"2024-03-15\",\n      end_date: \"2024-03-17\",\n      status: \"active\" as const,\n      is_active: true,\n      auto_send_intro_email: true,\n      created_at: \"2024-02-01T10:00:00Z\",\n      card_scan_count: 25,\n      prospect_count: 18\n    },\n    {\n      id: 2,\n      name: \"Business Summit 2024\",\n      description: \"Corporate networking event\",\n      location: \"Downtown Hotel\",\n      venue: \"Ballroom\",\n      start_date: \"2024-04-10\",\n      end_date: \"2024-04-11\",\n      status: \"planned\" as const,\n      is_active: true,\n      auto_send_intro_email: true,\n      created_at: \"2024-02-15T09:00:00Z\",\n      card_scan_count: 0,\n      prospect_count: 0\n    }\n  ] as ExhibitionEvent[]),\n  \n  getCardScans: (eventId: number) => Promise.resolve([\n    {\n      id: 1,\n      scan_id: \"scan_001\",\n      exhibition_event_id: eventId,\n      full_name: \"John Smith\",\n      company_name: \"TechCorp Solutions\",\n      designation: \"CEO\",\n      email: \"john.smith@techcorp.com\",\n      phone: \"+1-555-0123\",\n      mobile: \"+1-555-0124\",\n      website: \"https://techcorp.com\",\n      address: \"123 Business Ave, Tech City\",\n      confidence_score: 0.95,\n      validation_status: \"validated\" as const,\n      processing_status: \"converted\" as const,\n      prospect_created: true,\n      intro_email_sent: true,\n      created_at: \"2024-02-20T14:30:00Z\"\n    },\n    {\n      id: 2,\n      scan_id: \"scan_002\",\n      exhibition_event_id: eventId,\n      full_name: \"Sarah Johnson\",\n      company_name: \"Innovation Labs\",\n      designation: \"CTO\",\n      email: \"sarah.j@innovationlabs.com\",\n      phone: \"+1-555-0125\",\n      confidence_score: 0.87,\n      validation_status: \"pending\" as const,\n      processing_status: \"processed\" as const,\n      prospect_created: false,\n      intro_email_sent: false,\n      created_at: \"2024-02-21T09:15:00Z\"\n    }\n  ] as BusinessCardScan[]),\n  \n  getProspects: (eventId: number) => Promise.resolve([\n    {\n      id: 1,\n      exhibition_event_id: eventId,\n      card_scan_id: 1,\n      full_name: \"John Smith\",\n      company_name: \"TechCorp Solutions\",\n      designation: \"CEO\",\n      email: \"john.smith@techcorp.com\",\n      phone: \"+1-555-0123\",\n      lead_score: 85,\n      qualification_status: \"qualified\" as const,\n      interest_level: \"high\" as const,\n      status: \"contacted\" as const,\n      conversion_status: \"lead\" as const,\n      created_at: \"2024-02-20T14:30:00Z\",\n      intro_email_sent_at: \"2024-02-20T15:00:00Z\",\n      contact_attempts: 2\n    }\n  ] as ExhibitionProspect[])\n};\n\nconst ExhibitionMode: React.FC = () => {\n  const [selectedEvent, setSelectedEvent] = useState<ExhibitionEvent | null>(null);\n  const [activeTab, setActiveTab] = useState<'events' | 'scans' | 'prospects' | 'analytics'>('events');\n  const [scanModalOpen, setScanModalOpen] = useState(false);\n  const [eventModalOpen, setEventModalOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [scanning, setScanning] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Queries\n  const { data: events, isLoading: eventsLoading } = useQuery({\n    queryKey: ['exhibition-events'],\n    queryFn: exhibitionAPI.getEvents\n  });\n\n  const { data: cardScans, isLoading: scansLoading } = useQuery({\n    queryKey: ['card-scans', selectedEvent?.id],\n    queryFn: () => selectedEvent ? exhibitionAPI.getCardScans(selectedEvent.id) : Promise.resolve([]),\n    enabled: !!selectedEvent\n  });\n\n  const { data: prospects, isLoading: prospectsLoading } = useQuery({\n    queryKey: ['prospects', selectedEvent?.id],\n    queryFn: () => selectedEvent ? exhibitionAPI.getProspects(selectedEvent.id) : Promise.resolve([]),\n    enabled: !!selectedEvent\n  });\n\n  // Mock scan mutation\n  const scanMutation = useMutation({\n    mutationFn: async (file: File) => {\n      setScanning(true);\n      // Simulate OCR processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      setScanning(false);\n      return {\n        id: Date.now(),\n        scan_id: `scan_${Date.now()}`,\n        exhibition_event_id: selectedEvent?.id || 0,\n        full_name: \"Demo Contact\",\n        company_name: \"Demo Company\",\n        confidence_score: 0.9,\n        validation_status: \"pending\" as const,\n        processing_status: \"processed\" as const,\n        prospect_created: false,\n        intro_email_sent: false,\n        created_at: new Date().toISOString()\n      };\n    },\n    onSuccess: () => {\n      toast.success('Business card scanned successfully!');\n      setScanModalOpen(false);\n      setSelectedFile(null);\n      queryClient.invalidateQueries({ queryKey: ['card-scans'] });\n    },\n    onError: () => {\n      setScanning(false);\n      toast.error('Failed to scan business card');\n    }\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type.startsWith('image/')) {\n      setSelectedFile(file);\n    } else {\n      toast.error('Please select a valid image file');\n    }\n  };\n\n  const handleScanCard = () => {\n    if (selectedFile) {\n      scanMutation.mutate(selectedFile);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'planned': return 'info';\n      case 'completed': return 'default';\n      case 'cancelled': return 'error';\n      case 'validated': return 'success';\n      case 'pending': return 'warning';\n      case 'rejected': return 'error';\n      case 'qualified': return 'success';\n      case 'hot': return 'error';\n      case 'converted': return 'success';\n      default: return 'default';\n    }\n  };\n\n  const formatDate = (dateStr: string) => {\n    return new Date(dateStr).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (eventsLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Exhibition Mode\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Scan business cards, manage prospects, and track leads from exhibition events\n      </Typography>\n\n      {/* Tab Navigation */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Box display=\"flex\" gap={2}>\n          {[\n            { key: 'events', label: 'Events', icon: <Event /> },\n            { key: 'scans', label: 'Card Scans', icon: <QrCodeScanner /> },\n            { key: 'prospects', label: 'Prospects', icon: <ContactMail /> },\n            { key: 'analytics', label: 'Analytics', icon: <TrendingUp /> }\n          ].map(tab => (\n            <Button\n              key={tab.key}\n              variant={activeTab === tab.key ? 'contained' : 'text'}\n              startIcon={tab.icon}\n              onClick={() => setActiveTab(tab.key as any)}\n              sx={{ mb: 1 }}\n            >\n              {tab.label}\n            </Button>\n          ))}\n        </Box>\n      </Box>\n\n      {/* Events Tab */}\n      {activeTab === 'events' && (\n        <Box>\n          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h6\">Exhibition Events</Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Event />}\n              onClick={() => setEventModalOpen(true)}\n            >\n              Create Event\n            </Button>\n          </Box>\n\n          <Grid container spacing={3}>\n            {events?.map(event => (\n              <Grid item xs={12} md={6} lg={4} key={event.id}>\n                <Card \n                  sx={{ \n                    cursor: 'pointer',\n                    border: selectedEvent?.id === event.id ? 2 : 0,\n                    borderColor: 'primary.main'\n                  }}\n                  onClick={() => setSelectedEvent(event)}\n                >\n                  <CardContent>\n                    <Box display=\"flex\" justifyContent=\"between\" alignItems=\"start\" mb={2}>\n                      <Typography variant=\"h6\" noWrap>\n                        {event.name}\n                      </Typography>\n                      <Chip \n                        label={event.status} \n                        color={getStatusColor(event.status) as any}\n                        size=\"small\"\n                      />\n                    </Box>\n                    \n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                      {event.description}\n                    </Typography>\n                    \n                    <Box display=\"flex\" gap={2} mb={2}>\n                      <Typography variant=\"body2\">\n                        📍 {event.location}\n                      </Typography>\n                    </Box>\n                    \n                    {event.start_date && (\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                        {formatDate(event.start_date)} - {event.end_date ? formatDate(event.end_date) : 'Ongoing'}\n                      </Typography>\n                    )}\n                    \n                    <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\">\n                      <Box display=\"flex\" gap={2}>\n                        <Chip \n                          label={`${event.card_scan_count || 0} Scans`} \n                          size=\"small\" \n                          variant=\"outlined\"\n                        />\n                        <Chip \n                          label={`${event.prospect_count || 0} Prospects`} \n                          size=\"small\" \n                          variant=\"outlined\"\n                        />\n                      </Box>\n                      {event.status === 'active' && (\n                        <Button\n                          size=\"small\"\n                          variant=\"contained\"\n                          startIcon={<CameraAlt />}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setScanModalOpen(true);\n                          }}\n                        >\n                          Scan Card\n                        </Button>\n                      )}\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n      )}\n\n      {/* Card Scans Tab */}\n      {activeTab === 'scans' && selectedEvent && (\n        <Box>\n          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h6\">\n              Card Scans - {selectedEvent.name}\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<CameraAlt />}\n              onClick={() => setScanModalOpen(true)}\n            >\n              Scan New Card\n            </Button>\n          </Box>\n\n          {scansLoading ? (\n            <CircularProgress />\n          ) : (\n            <List>\n              {cardScans?.map(scan => (\n                <ListItem key={scan.id} divider>\n                  <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n                    <BusinessCenter />\n                  </Avatar>\n                  <ListItemText\n                    primary={`${scan.full_name || 'Unknown'} - ${scan.company_name || 'Unknown Company'}`}\n                    secondary={\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {scan.designation} • {scan.email}\n                        </Typography>\n                        <Box display=\"flex\" gap={1} mt={1}>\n                          <Chip \n                            label={scan.validation_status} \n                            size=\"small\" \n                            color={getStatusColor(scan.validation_status) as any}\n                          />\n                          <Chip \n                            label={`${Math.round((scan.confidence_score || 0) * 100)}% confidence`} \n                            size=\"small\" \n                            variant=\"outlined\"\n                          />\n                          {scan.prospect_created && (\n                            <Chip label=\"Prospect Created\" size=\"small\" color=\"success\" />\n                          )}\n                          {scan.intro_email_sent && (\n                            <Chip label=\"Email Sent\" size=\"small\" color=\"info\" />\n                          )}\n                        </Box>\n                      </Box>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton size=\"small\">\n                      <Visibility />\n                    </IconButton>\n                    <IconButton size=\"small\">\n                      <Edit />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </Box>\n      )}\n\n      {/* Prospects Tab */}\n      {activeTab === 'prospects' && selectedEvent && (\n        <Box>\n          <Typography variant=\"h6\" sx={{ mb: 3 }}>\n            Prospects - {selectedEvent.name}\n          </Typography>\n\n          {prospectsLoading ? (\n            <CircularProgress />\n          ) : (\n            <List>\n              {prospects?.map(prospect => (\n                <ListItem key={prospect.id} divider>\n                  <Avatar sx={{ mr: 2, bgcolor: 'secondary.main' }}>\n                    <ContactMail />\n                  </Avatar>\n                  <ListItemText\n                    primary={`${prospect.full_name} - ${prospect.company_name}`}\n                    secondary={\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {prospect.designation} • Score: {prospect.lead_score || 0}\n                        </Typography>\n                        <Box display=\"flex\" gap={1} mt={1}>\n                          <Chip \n                            label={prospect.qualification_status} \n                            size=\"small\" \n                            color={getStatusColor(prospect.qualification_status) as any}\n                          />\n                          <Chip \n                            label={prospect.status} \n                            size=\"small\" \n                            variant=\"outlined\"\n                          />\n                          {prospect.interest_level && (\n                            <Chip \n                              label={`${prospect.interest_level} interest`} \n                              size=\"small\" \n                              color={prospect.interest_level === 'high' ? 'success' : 'default'}\n                            />\n                          )}\n                        </Box>\n                      </Box>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton size=\"small\">\n                      <Email />\n                    </IconButton>\n                    <IconButton size=\"small\">\n                      <Edit />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </Box>\n      )}\n\n      {/* Analytics Tab */}\n      {activeTab === 'analytics' && (\n        <Box>\n          <Typography variant=\"h6\" sx={{ mb: 3 }}>\n            Exhibition Analytics\n          </Typography>\n          <Alert severity=\"info\">\n            Analytics dashboard will show conversion rates, lead quality metrics, \n            and performance comparisons across events.\n          </Alert>\n        </Box>\n      )}\n\n      {/* Card Scan Modal */}\n      <Dialog open={scanModalOpen} onClose={() => setScanModalOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Scan Business Card</DialogTitle>\n        <DialogContent>\n          {scanning ? (\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" py={4}>\n              <CircularProgress size={60} sx={{ mb: 2 }} />\n              <Typography variant=\"h6\" gutterBottom>\n                Processing Business Card...\n              </Typography>\n              <Typography color=\"text.secondary\">\n                Extracting contact information using OCR\n              </Typography>\n              <LinearProgress sx={{ width: '100%', mt: 2 }} />\n            </Box>\n          ) : (\n            <Box>\n              <Typography variant=\"body1\" sx={{ mb: 3 }}>\n                Upload an image of a business card to extract contact information automatically.\n              </Typography>\n              \n              <Box \n                border={2} \n                borderColor={selectedFile ? 'primary.main' : 'grey.300'}\n                borderStyle=\"dashed\"\n                borderRadius={2}\n                p={4}\n                textAlign=\"center\"\n                sx={{ mb: 3 }}\n              >\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileSelect}\n                  style={{ display: 'none' }}\n                  id=\"file-upload\"\n                />\n                <label htmlFor=\"file-upload\">\n                  <IconButton component=\"span\" size=\"large\">\n                    <Upload fontSize=\"large\" />\n                  </IconButton>\n                </label>\n                <Typography variant=\"h6\" gutterBottom>\n                  {selectedFile ? selectedFile.name : 'Click to upload business card image'}\n                </Typography>\n                <Typography color=\"text.secondary\">\n                  Supports JPG, PNG, and other image formats\n                </Typography>\n              </Box>\n              \n              {selectedFile && (\n                <Alert severity=\"success\" sx={{ mb: 2 }}>\n                  Business card image selected: {selectedFile.name}\n                </Alert>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setScanModalOpen(false)} disabled={scanning}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleScanCard} \n            variant=\"contained\" \n            disabled={!selectedFile || scanning}\n          >\n            {scanning ? 'Processing...' : 'Scan Card'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Event Creation Modal - Placeholder */}\n      <Dialog open={eventModalOpen} onClose={() => setEventModalOpen(false)}>\n        <DialogTitle>Create Exhibition Event</DialogTitle>\n        <DialogContent>\n          <Alert severity=\"info\">\n            Event creation form would be implemented here with fields for name, dates, location, etc.\n          </Alert>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setEventModalOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\">Create Event</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ExhibitionMode;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/finance-dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingDown"},"fix":{"range":[364,380],"text":""},"desc":"Remove unused variable 'TrendingDown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Receipt' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Receipt"},"fix":{"range":[409,420],"text":""},"desc":"Remove unused variable 'Receipt'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":34,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Line"},"fix":{"range":[496,501],"text":""},"desc":"Remove unused variable 'Line'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/finance-dashboard.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Paper,\n  CircularProgress,\n  Alert,\n  Tabs,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  IconButton,\n  Button\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  AccountBalance,\n  Payment,\n  Receipt,\n  Analytics,\n  Refresh,\n  Download\n} from '@mui/icons-material';\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement\n} from 'chart.js';\nimport axios from 'axios';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement\n);\n\ninterface FinancialRatios {\n  current_ratio: number;\n  debt_to_equity: number;\n  working_capital: number;\n  total_assets: number;\n  total_liabilities: number;\n  total_equity: number;\n}\n\ninterface CashFlow {\n  inflow: number;\n  outflow: number;\n  net_flow: number;\n}\n\ninterface CostCenter {\n  name: string;\n  budget: number;\n  actual: number;\n  variance_percent: number;\n}\n\ninterface KPI {\n  code: string;\n  name: string;\n  category: string;\n  value: number;\n  target?: number;\n  variance?: number;\n  period_end: string;\n}\n\ninterface DashboardData {\n  period: {\n    start_date: string;\n    end_date: string;\n  };\n  financial_ratios: FinancialRatios;\n  cash_flow: CashFlow;\n  accounts_aging: {\n    overdue_payables: number;\n    overdue_receivables: number;\n  };\n  cost_centers: CostCenter[];\n  recent_kpis: KPI[];\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`finance-tabpanel-${index}`}\n      aria-labelledby={`finance-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst FinanceDashboard: React.FC = () => {\n  const [data, setData] = useState<DashboardData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState(0);\n\n  const fetchDashboardData = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/finance/analytics/dashboard', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setData(response.data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(2)}%`;\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" action={\n        <Button color=\"inherit\" size=\"small\" onClick={fetchDashboardData}>\n          Retry\n        </Button>\n      }>\n        {error}\n      </Alert>\n    );\n  }\n\n  if (!data) {return null;}\n\n  // Chart data for cash flow\n  const cashFlowChartData = {\n    labels: ['Inflow', 'Outflow'],\n    datasets: [\n      {\n        data: [data.cash_flow.inflow, data.cash_flow.outflow],\n        backgroundColor: ['#4caf50', '#f44336'],\n        borderWidth: 1\n      }\n    ]\n  };\n\n  // Chart data for cost center performance\n  const costCenterChartData = {\n    labels: data.cost_centers.map(cc => cc.name),\n    datasets: [\n      {\n        label: 'Budget',\n        data: data.cost_centers.map(cc => cc.budget),\n        backgroundColor: '#2196f3',\n        borderWidth: 1\n      },\n      {\n        label: 'Actual',\n        data: data.cost_centers.map(cc => cc.actual),\n        backgroundColor: '#ff9800',\n        borderWidth: 1\n      }\n    ]\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Finance Dashboard\n        </Typography>\n        <Box>\n          <IconButton onClick={fetchDashboardData} color=\"primary\">\n            <Refresh />\n          </IconButton>\n          <Button startIcon={<Download />} variant=\"outlined\" sx={{ ml: 1 }}>\n            Export\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Key Metrics Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <AccountBalance color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Assets\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(data.financial_ratios.total_assets)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Payment color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Liabilities\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(data.financial_ratios.total_liabilities)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <TrendingUp color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Working Capital\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(data.financial_ratios.working_capital)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Analytics color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Current Ratio\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {data.financial_ratios.current_ratio.toFixed(2)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tabs for detailed views */}\n      <Paper sx={{ width: '100%' }}>\n        <Tabs value={activeTab} onChange={handleTabChange} aria-label=\"finance dashboard tabs\">\n          <Tab label=\"Cash Flow\" />\n          <Tab label=\"Cost Centers\" />\n          <Tab label=\"KPIs\" />\n          <Tab label=\"Aging\" />\n        </Tabs>\n\n        {/* Cash Flow Tab */}\n        <TabPanel value={activeTab} index={0}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Cash Flow Overview\n                  </Typography>\n                  <Box sx={{ height: 300 }}>\n                    <Doughnut data={cashFlowChartData} />\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Cash Flow Details\n                  </Typography>\n                  <Box sx={{ mt: 2 }}>\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                      <Typography>Inflow:</Typography>\n                      <Typography color=\"success.main\">\n                        {formatCurrency(data.cash_flow.inflow)}\n                      </Typography>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                      <Typography>Outflow:</Typography>\n                      <Typography color=\"error.main\">\n                        {formatCurrency(data.cash_flow.outflow)}\n                      </Typography>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                      <Typography variant=\"h6\">Net Flow:</Typography>\n                      <Typography \n                        variant=\"h6\" \n                        color={data.cash_flow.net_flow >= 0 ? 'success.main' : 'error.main'}\n                      >\n                        {formatCurrency(data.cash_flow.net_flow)}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </TabPanel>\n\n        {/* Cost Centers Tab */}\n        <TabPanel value={activeTab} index={1}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Cost Center Performance\n              </Typography>\n              <Box sx={{ height: 400, mb: 3 }}>\n                <Bar data={costCenterChartData} />\n              </Box>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Cost Center</TableCell>\n                      <TableCell align=\"right\">Budget</TableCell>\n                      <TableCell align=\"right\">Actual</TableCell>\n                      <TableCell align=\"right\">Variance %</TableCell>\n                      <TableCell align=\"right\">Status</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {data.cost_centers.map((cc, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{cc.name}</TableCell>\n                        <TableCell align=\"right\">{formatCurrency(cc.budget)}</TableCell>\n                        <TableCell align=\"right\">{formatCurrency(cc.actual)}</TableCell>\n                        <TableCell align=\"right\">{formatPercentage(cc.variance_percent)}</TableCell>\n                        <TableCell align=\"right\">\n                          <Chip\n                            label={cc.variance_percent > 10 ? 'Over Budget' : cc.variance_percent < -10 ? 'Under Budget' : 'On Track'}\n                            color={cc.variance_percent > 10 ? 'error' : cc.variance_percent < -10 ? 'warning' : 'success'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </TabPanel>\n\n        {/* KPIs Tab */}\n        <TabPanel value={activeTab} index={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Recent Financial KPIs\n              </Typography>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>KPI Name</TableCell>\n                      <TableCell>Category</TableCell>\n                      <TableCell align=\"right\">Value</TableCell>\n                      <TableCell align=\"right\">Target</TableCell>\n                      <TableCell align=\"right\">Variance %</TableCell>\n                      <TableCell>Period</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {data.recent_kpis.map((kpi, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{kpi.name}</TableCell>\n                        <TableCell>\n                          <Chip label={kpi.category} size=\"small\" />\n                        </TableCell>\n                        <TableCell align=\"right\">{kpi.value.toFixed(2)}</TableCell>\n                        <TableCell align=\"right\">\n                          {kpi.target ? kpi.target.toFixed(2) : 'N/A'}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {kpi.variance ? (\n                            <Typography color={kpi.variance >= 0 ? 'success.main' : 'error.main'}>\n                              {formatPercentage(kpi.variance)}\n                            </Typography>\n                          ) : 'N/A'}\n                        </TableCell>\n                        <TableCell>{new Date(kpi.period_end).toLocaleDateString()}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </TabPanel>\n\n        {/* Aging Tab */}\n        <TabPanel value={activeTab} index={3}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Overdue Receivables\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"warning.main\">\n                    {formatCurrency(data.accounts_aging.overdue_receivables)}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Amount past due date\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Overdue Payables\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"error.main\">\n                    {formatCurrency(data.accounts_aging.overdue_payables)}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Amount past due date\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </TabPanel>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default FinanceDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/financial-reports.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[309,324],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[324,338],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[338,348],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[348,360],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[449,463],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingDown"},"fix":{"range":[463,479],"text":""},"desc":"Remove unused variable 'TrendingDown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccountBalance' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccountBalance"},"fix":{"range":[479,497],"text":""},"desc":"Remove unused variable 'AccountBalance'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Assessment' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Assessment"},"fix":{"range":[497,511],"text":""},"desc":"Remove unused variable 'Assessment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":41,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"Line"},"fix":{"range":[762,767],"text":""},"desc":"Remove unused variable 'Line'."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/financial-reports.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  Tabs,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Alert,\n  CircularProgress,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Divider\n} from '@mui/material';\nimport {\n  Download,\n  Print,\n  Refresh,\n  TrendingUp,\n  TrendingDown,\n  AccountBalance,\n  Assessment\n} from '@mui/icons-material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { Line, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport axios from 'axios';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface TrialBalanceItem {\n  account_code: string;\n  account_name: string;\n  debit_balance: number;\n  credit_balance: number;\n}\n\ninterface TrialBalance {\n  trial_balance: TrialBalanceItem[];\n  total_debits: number;\n  total_credits: number;\n  as_of_date: string;\n  organization_id: number;\n}\n\ninterface ProfitLossItem {\n  account_code: string;\n  account_name: string;\n  amount: number;\n}\n\ninterface ProfitLoss {\n  income: ProfitLossItem[];\n  expenses: ProfitLossItem[];\n  total_income: number;\n  total_expenses: number;\n  net_profit_loss: number;\n  from_date: string;\n  to_date: string;\n}\n\ninterface BalanceSheetItem {\n  account_code: string;\n  account_name: string;\n  amount: number;\n}\n\ninterface BalanceSheet {\n  assets: BalanceSheetItem[];\n  liabilities: BalanceSheetItem[];\n  equity: BalanceSheetItem[];\n  total_assets: number;\n  total_liabilities: number;\n  total_equity: number;\n  as_of_date: string;\n}\n\ninterface CashFlowItem {\n  account_code: string;\n  account_name: string;\n  amount: number;\n}\n\ninterface CashFlow {\n  operating_activities: CashFlowItem[];\n  investing_activities: CashFlowItem[];\n  financing_activities: CashFlowItem[];\n  net_operating_cash: number;\n  net_investing_cash: number;\n  net_financing_cash: number;\n  net_cash_flow: number;\n  opening_cash: number;\n  closing_cash: number;\n  from_date: string;\n  to_date: string;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`reports-tabpanel-${index}`}\n      aria-labelledby={`reports-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst FinancialReports: React.FC = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Date filters\n  const [fromDate, setFromDate] = useState<Date | null>(new Date(new Date().getFullYear(), 0, 1)); // Start of year\n  const [toDate, setToDate] = useState<Date | null>(new Date()); // Today\n  const [asOfDate, setAsOfDate] = useState<Date | null>(new Date()); // For balance sheet and trial balance\n\n  // Report data\n  const [trialBalance, setTrialBalance] = useState<TrialBalance | null>(null);\n  const [profitLoss, setProfitLoss] = useState<ProfitLoss | null>(null);\n  const [balanceSheet, setBalanceSheet] = useState<BalanceSheet | null>(null);\n  const [cashFlow, setCashFlow] = useState<CashFlow | null>(null);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) {return '';}\n    return date.toISOString().split('T')[0];\n  };\n\n  const fetchTrialBalance = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/trial-balance', {\n        params: { as_of_date: formatDate(asOfDate) },\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setTrialBalance(response.data);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch trial balance');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchProfitLoss = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/profit-loss', {\n        params: { \n          from_date: formatDate(fromDate), \n          to_date: formatDate(toDate) \n        },\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setProfitLoss(response.data);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch profit & loss');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchBalanceSheet = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/balance-sheet', {\n        params: { as_of_date: formatDate(asOfDate) },\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setBalanceSheet(response.data);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch balance sheet');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCashFlow = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      // Note: This endpoint would need to be implemented in the backend\n      const response = await axios.get('/api/v1/erp/cash-flow', {\n        params: { \n          from_date: formatDate(fromDate), \n          to_date: formatDate(toDate) \n        },\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setCashFlow(response.data);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch cash flow statement');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (activeTab === 0 && !trialBalance) {\n      fetchTrialBalance();\n    } else if (activeTab === 1 && !profitLoss) {\n      fetchProfitLoss();\n    } else if (activeTab === 2 && !balanceSheet) {\n      fetchBalanceSheet();\n    } else if (activeTab === 3 && !cashFlow) {\n      fetchCashFlow();\n    }\n  }, [activeTab]);\n\n  // Chart data for P&L\n  const profitLossChartData = profitLoss ? {\n    labels: ['Income', 'Expenses', 'Net Profit/Loss'],\n    datasets: [\n      {\n        label: 'Amount',\n        data: [profitLoss.total_income, profitLoss.total_expenses, profitLoss.net_profit_loss],\n        backgroundColor: ['#4caf50', '#f44336', profitLoss.net_profit_loss >= 0 ? '#4caf50' : '#f44336'],\n        borderWidth: 1\n      }\n    ]\n  } : null;\n\n  // Chart data for Balance Sheet\n  const balanceSheetChartData = balanceSheet ? {\n    labels: ['Assets', 'Liabilities', 'Equity'],\n    datasets: [\n      {\n        label: 'Amount',\n        data: [balanceSheet.total_assets, balanceSheet.total_liabilities, balanceSheet.total_equity],\n        backgroundColor: ['#2196f3', '#ff9800', '#9c27b0'],\n        borderWidth: 1\n      }\n    ]\n  } : null;\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <Box sx={{ p: 3 }}>\n        {/* Header */}\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Financial Reports\n          </Typography>\n          <Box>\n            <IconButton \n              onClick={() => {\n                if (activeTab === 0) {fetchTrialBalance();}\n                else if (activeTab === 1) {fetchProfitLoss();}\n                else if (activeTab === 2) {fetchBalanceSheet();}\n                else if (activeTab === 3) {fetchCashFlow();}\n              }} \n              color=\"primary\"\n            >\n              <Refresh />\n            </IconButton>\n            <Button startIcon={<Download />} variant=\"outlined\" sx={{ ml: 1 }}>\n              Export\n            </Button>\n            <Button startIcon={<Print />} variant=\"outlined\" sx={{ ml: 1 }}>\n              Print\n            </Button>\n          </Box>\n        </Box>\n\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {/* Tabs */}\n        <Paper sx={{ width: '100%' }}>\n          <Tabs value={activeTab} onChange={handleTabChange} aria-label=\"financial reports tabs\">\n            <Tab label=\"Trial Balance\" />\n            <Tab label=\"Profit & Loss\" />\n            <Tab label=\"Balance Sheet\" />\n            <Tab label=\"Cash Flow\" />\n          </Tabs>\n\n          {/* Trial Balance */}\n          <TabPanel value={activeTab} index={0}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={4}>\n                <Card>\n                  <CardContent>\n                    <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                      <DatePicker\n                        label=\"As of Date\"\n                        value={asOfDate}\n                        onChange={setAsOfDate}\n                        renderInput={(params) => <TextField {...params} fullWidth />}\n                      />\n                      <Button onClick={fetchTrialBalance} variant=\"contained\" sx={{ ml: 1 }}>\n                        Generate\n                      </Button>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={8}>\n                {trialBalance && (\n                  <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                      <Card>\n                        <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom>\n                            Total Debits\n                          </Typography>\n                          <Typography variant=\"h6\" color=\"error.main\">\n                            {formatCurrency(trialBalance.total_debits)}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Card>\n                        <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom>\n                            Total Credits\n                          </Typography>\n                          <Typography variant=\"h6\" color=\"success.main\">\n                            {formatCurrency(trialBalance.total_credits)}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n\n            {loading ? (\n              <Box display=\"flex\" justifyContent=\"center\" my={4}>\n                <CircularProgress />\n              </Box>\n            ) : trialBalance ? (\n              <TableContainer component={Paper} sx={{ mt: 3 }}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Account Code</TableCell>\n                      <TableCell>Account Name</TableCell>\n                      <TableCell align=\"right\">Debit Balance</TableCell>\n                      <TableCell align=\"right\">Credit Balance</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {trialBalance.trial_balance.map((item, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{item.account_code}</TableCell>\n                        <TableCell>{item.account_name}</TableCell>\n                        <TableCell align=\"right\">\n                          {item.debit_balance > 0 ? formatCurrency(item.debit_balance) : '-'}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {item.credit_balance > 0 ? formatCurrency(item.credit_balance) : '-'}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                    <TableRow sx={{ borderTop: 2 }}>\n                      <TableCell colSpan={2}><strong>Total</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{formatCurrency(trialBalance.total_debits)}</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{formatCurrency(trialBalance.total_credits)}</strong></TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            ) : null}\n          </TabPanel>\n\n          {/* Profit & Loss */}\n          <TabPanel value={activeTab} index={1}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Grid container spacing={2} alignItems=\"center\">\n                      <Grid item xs={5}>\n                        <DatePicker\n                          label=\"From Date\"\n                          value={fromDate}\n                          onChange={setFromDate}\n                          renderInput={(params) => <TextField {...params} fullWidth />}\n                        />\n                      </Grid>\n                      <Grid item xs={5}>\n                        <DatePicker\n                          label=\"To Date\"\n                          value={toDate}\n                          onChange={setToDate}\n                          renderInput={(params) => <TextField {...params} fullWidth />}\n                        />\n                      </Grid>\n                      <Grid item xs={2}>\n                        <Button onClick={fetchProfitLoss} variant=\"contained\" fullWidth>\n                          Generate\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                {profitLoss && profitLossChartData && (\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        P&L Summary\n                      </Typography>\n                      <Box sx={{ height: 200 }}>\n                        <Bar data={profitLossChartData} />\n                      </Box>\n                    </CardContent>\n                  </Card>\n                )}\n              </Grid>\n            </Grid>\n\n            {loading ? (\n              <Box display=\"flex\" justifyContent=\"center\" my={4}>\n                <CircularProgress />\n              </Box>\n            ) : profitLoss ? (\n              <Grid container spacing={3} sx={{ mt: 1 }}>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"success.main\" gutterBottom>\n                        Income\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Account</TableCell>\n                            <TableCell align=\"right\">Amount</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {profitLoss.income.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Income</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(profitLoss.total_income)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"error.main\" gutterBottom>\n                        Expenses\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Account</TableCell>\n                            <TableCell align=\"right\">Amount</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {profitLoss.expenses.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Expenses</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(profitLoss.total_expenses)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12}>\n                  <Card>\n                    <CardContent>\n                      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                        <Typography variant=\"h5\">\n                          Net {profitLoss.net_profit_loss >= 0 ? 'Profit' : 'Loss'}: \n                        </Typography>\n                        <Typography \n                          variant=\"h4\" \n                          color={profitLoss.net_profit_loss >= 0 ? 'success.main' : 'error.main'}\n                          sx={{ ml: 2 }}\n                        >\n                          {formatCurrency(Math.abs(profitLoss.net_profit_loss))}\n                        </Typography>\n                      </Box>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            ) : null}\n          </TabPanel>\n\n          {/* Balance Sheet */}\n          <TabPanel value={activeTab} index={2}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={4}>\n                <Card>\n                  <CardContent>\n                    <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                      <DatePicker\n                        label=\"As of Date\"\n                        value={asOfDate}\n                        onChange={setAsOfDate}\n                        renderInput={(params) => <TextField {...params} fullWidth />}\n                      />\n                      <Button onClick={fetchBalanceSheet} variant=\"contained\" sx={{ ml: 1 }}>\n                        Generate\n                      </Button>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={8}>\n                {balanceSheet && balanceSheetChartData && (\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Balance Sheet Summary\n                      </Typography>\n                      <Box sx={{ height: 200 }}>\n                        <Bar data={balanceSheetChartData} />\n                      </Box>\n                    </CardContent>\n                  </Card>\n                )}\n              </Grid>\n            </Grid>\n\n            {loading ? (\n              <Box display=\"flex\" justifyContent=\"center\" my={4}>\n                <CircularProgress />\n              </Box>\n            ) : balanceSheet ? (\n              <Grid container spacing={3} sx={{ mt: 1 }}>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"primary.main\" gutterBottom>\n                        Assets\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableBody>\n                          {balanceSheet.assets.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Assets</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(balanceSheet.total_assets)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"warning.main\" gutterBottom>\n                        Liabilities\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableBody>\n                          {balanceSheet.liabilities.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Liabilities</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(balanceSheet.total_liabilities)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"secondary.main\" gutterBottom>\n                        Equity\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableBody>\n                          {balanceSheet.equity.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Equity</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(balanceSheet.total_equity)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            ) : null}\n          </TabPanel>\n\n          {/* Cash Flow */}\n          <TabPanel value={activeTab} index={3}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Grid container spacing={2} alignItems=\"center\">\n                      <Grid item xs={5}>\n                        <DatePicker\n                          label=\"From Date\"\n                          value={fromDate}\n                          onChange={setFromDate}\n                          renderInput={(params) => <TextField {...params} fullWidth />}\n                        />\n                      </Grid>\n                      <Grid item xs={5}>\n                        <DatePicker\n                          label=\"To Date\"\n                          value={toDate}\n                          onChange={setToDate}\n                          renderInput={(params) => <TextField {...params} fullWidth />}\n                        />\n                      </Grid>\n                      <Grid item xs={2}>\n                        <Button onClick={fetchCashFlow} variant=\"contained\" fullWidth>\n                          Generate\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                {cashFlow && (\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Net Cash Flow: \n                        <Typography \n                          component=\"span\" \n                          color={cashFlow.net_cash_flow >= 0 ? 'success.main' : 'error.main'}\n                          sx={{ ml: 1 }}\n                        >\n                          {formatCurrency(cashFlow.net_cash_flow)}\n                        </Typography>\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                )}\n              </Grid>\n            </Grid>\n\n            {loading ? (\n              <Box display=\"flex\" justifyContent=\"center\" my={4}>\n                <CircularProgress />\n              </Box>\n            ) : cashFlow ? (\n              <Card sx={{ mt: 3 }}>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Cash Flow Statement\n                  </Typography>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={4}>\n                      <Typography variant=\"subtitle1\" gutterBottom>\n                        Operating Activities\n                      </Typography>\n                      {cashFlow.operating_activities.map((item, index) => (\n                        <Box key={index} display=\"flex\" justifyContent=\"space-between\">\n                          <Typography variant=\"body2\">{item.account_name}</Typography>\n                          <Typography variant=\"body2\">{formatCurrency(item.amount)}</Typography>\n                        </Box>\n                      ))}\n                      <Divider sx={{ my: 1 }} />\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body1\"><strong>Net Operating Cash</strong></Typography>\n                        <Typography variant=\"body1\"><strong>{formatCurrency(cashFlow.net_operating_cash)}</strong></Typography>\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Typography variant=\"subtitle1\" gutterBottom>\n                        Investing Activities\n                      </Typography>\n                      {cashFlow.investing_activities.map((item, index) => (\n                        <Box key={index} display=\"flex\" justifyContent=\"space-between\">\n                          <Typography variant=\"body2\">{item.account_name}</Typography>\n                          <Typography variant=\"body2\">{formatCurrency(item.amount)}</Typography>\n                        </Box>\n                      ))}\n                      <Divider sx={{ my: 1 }} />\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body1\"><strong>Net Investing Cash</strong></Typography>\n                        <Typography variant=\"body1\"><strong>{formatCurrency(cashFlow.net_investing_cash)}</strong></Typography>\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Typography variant=\"subtitle1\" gutterBottom>\n                        Financing Activities\n                      </Typography>\n                      {cashFlow.financing_activities.map((item, index) => (\n                        <Box key={index} display=\"flex\" justifyContent=\"space-between\">\n                          <Typography variant=\"body2\">{item.account_name}</Typography>\n                          <Typography variant=\"body2\">{formatCurrency(item.amount)}</Typography>\n                        </Box>\n                      ))}\n                      <Divider sx={{ my: 1 }} />\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body1\"><strong>Net Financing Cash</strong></Typography>\n                        <Typography variant=\"body1\"><strong>{formatCurrency(cashFlow.net_financing_cash)}</strong></Typography>\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            ) : null}\n          </TabPanel>\n        </Paper>\n      </Box>\n    </LocalizationProvider>\n  );\n};\n\nexport default FinancialReports;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/floating-labels-test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/general-ledger.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/hr/dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[254,268],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":77,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1539,1566],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchDashboardData' was used before it was defined.","line":86,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":86,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/hr/dashboard.tsx\n// HR Dashboard with key metrics and overview\n\nimport React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Card,\n  CardContent,\n  Tab,\n  Tabs,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Alert,\n  CircularProgress,\n  Button,\n} from '@mui/material';\nimport {\n  People as PeopleIcon,\n  PersonAdd as PersonAddIcon,\n  AccessTime as AccessTimeIcon,\n  Assessment as AssessmentIcon,\n  Approval as ApprovalIcon,\n  Schedule as ScheduleIcon,\n  TrendingUp as TrendingUpIcon,\n  Warning as WarningIcon,\n} from '@mui/icons-material';\nimport { useRouter } from 'next/router';\nimport { useAuth } from '../../hooks/useAuth';\nimport { hrService, HRDashboardData, HRActivity, HRTask } from '../../services';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`hr-tabpanel-${index}`}\n      aria-labelledby={`hr-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `hr-tab-${index}`,\n    'aria-controls': `hr-tabpanel-${index}`,\n  };\n}\n\nconst HRDashboard: NextPage = () => {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [tabValue, setTabValue] = useState(0);\n  const [dashboardData, setDashboardData] = useState<HRDashboardData | null>(null);\n  const [recentActivities, setRecentActivities] = useState<HRActivity[]>([]);\n  const [upcomingTasks, setUpcomingTasks] = useState<HRTask[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n\n  const fetchDashboardData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [dashboard, activities, tasks] = await Promise.all([\n        hrService.getDashboardData(),\n        hrService.getRecentActivities(5),\n        hrService.getUpcomingTasks(5)\n      ]);\n      \n      setDashboardData(dashboard);\n      setRecentActivities(activities);\n      setUpcomingTasks(tasks);\n    } catch (err: any) {\n      console.error('Error fetching HR dashboard data:', err);\n      setError(err.userMessage || 'Failed to load dashboard data');\n      \n      // Fallback to empty data structure to prevent crashes\n      setDashboardData({\n        total_employees: 0,\n        active_employees: 0,\n        employees_on_leave: 0,\n        pending_leave_approvals: 0,\n        upcoming_performance_reviews: 0,\n        recent_joiners: 0,\n        employees_in_probation: 0,\n        average_attendance_rate: 0,\n      });\n      setRecentActivities([]);\n      setUpcomingTasks([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'warning';\n      case 'completed':\n      case 'active':\n        return 'success';\n      case 'rejected':\n        return 'error';\n      default:\n        return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'error';\n      case 'medium':\n        return 'warning';\n      case 'low':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          HR Dashboard\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button \n            variant=\"outlined\" \n            startIcon={<PersonAddIcon />}\n            onClick={() => router.push('/hr/employees')}\n          >\n            Manage Employees\n          </Button>\n          <Button \n            variant=\"contained\" \n            startIcon={<AssessmentIcon />}\n            onClick={() => router.push('/hr/reports')}\n          >\n            HR Reports\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n          <Button size=\"small\" onClick={fetchDashboardData} sx={{ ml: 1 }}>\n            Retry\n          </Button>\n        </Alert>\n      )}\n\n      {/* Key Metrics Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Employees\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {loading ? <CircularProgress size={24} /> : dashboardData?.total_employees || 0}\n                  </Typography>\n                </Box>\n                <PeopleIcon color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Employees\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"success.main\">\n                    {loading ? <CircularProgress size={24} /> : dashboardData?.active_employees || 0}\n                  </Typography>\n                </Box>\n                <TrendingUpIcon color=\"success\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    On Leave Today\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"warning.main\">\n                    {loading ? <CircularProgress size={24} /> : dashboardData?.employees_on_leave || 0}\n                  </Typography>\n                </Box>\n                <AccessTimeIcon color=\"warning\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Pending Approvals\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"error.main\">\n                    {loading ? <CircularProgress size={24} /> : dashboardData?.pending_leave_approvals || 0}\n                  </Typography>\n                </Box>\n                <ApprovalIcon color=\"error\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Additional Metrics */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Recent Joiners (30 days)\n              </Typography>\n              <Typography variant=\"h5\">\n                {dashboardData?.recent_joiners || 0}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                In Probation\n              </Typography>\n              <Typography variant=\"h5\">\n                {dashboardData?.employees_in_probation || 0}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Upcoming Reviews\n              </Typography>\n              <Typography variant=\"h5\">\n                {dashboardData?.upcoming_performance_reviews || 0}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Avg. Attendance\n              </Typography>\n              <Typography variant=\"h5\" color=\"primary\">\n                {dashboardData?.average_attendance_rate || 0}%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tabs for detailed sections */}\n      <Paper sx={{ width: '100%', mb: 4 }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"HR dashboard tabs\">\n            <Tab label=\"Recent Activities\" {...a11yProps(0)} />\n            <Tab label=\"Upcoming Tasks\" {...a11yProps(1)} />\n            <Tab label=\"Quick Actions\" {...a11yProps(2)} />\n          </Tabs>\n        </Box>\n\n        <TabPanel value={tabValue} index={0}>\n          <Typography variant=\"h6\" gutterBottom>\n            Recent HR Activities\n          </Typography>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Employee</TableCell>\n                  <TableCell>Activity</TableCell>\n                  <TableCell>Date</TableCell>\n                  <TableCell>Status</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {recentActivities.map((activity) => (\n                  <TableRow key={activity.id}>\n                    <TableCell>{activity.employee}</TableCell>\n                    <TableCell>{activity.action}</TableCell>\n                    <TableCell>{activity.date}</TableCell>\n                    <TableCell>\n                      <Chip \n                        label={activity.status} \n                        color={getStatusColor(activity.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={1}>\n          <Typography variant=\"h6\" gutterBottom>\n            Upcoming HR Tasks\n          </Typography>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Task</TableCell>\n                  <TableCell>Due Date</TableCell>\n                  <TableCell>Priority</TableCell>\n                  <TableCell>Category</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {upcomingTasks.map((task) => (\n                  <TableRow key={task.id}>\n                    <TableCell>{task.task}</TableCell>\n                    <TableCell>{task.due_date}</TableCell>\n                    <TableCell>\n                      <Chip \n                        label={task.priority} \n                        color={getPriorityColor(task.priority) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>{task.category}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={2}>\n          <Typography variant=\"h6\" gutterBottom>\n            Quick Actions\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6} md={4}>\n              <Button\n                variant=\"outlined\"\n                fullWidth\n                startIcon={<PersonAddIcon />}\n                onClick={() => router.push('/hr/employees/new')}\n                sx={{ py: 2 }}\n              >\n                Add New Employee\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <Button\n                variant=\"outlined\"\n                fullWidth\n                startIcon={<ApprovalIcon />}\n                onClick={() => router.push('/hr/leaves/approvals')}\n                sx={{ py: 2 }}\n              >\n                Review Leave Applications\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <Button\n                variant=\"outlined\"\n                fullWidth\n                startIcon={<ScheduleIcon />}\n                onClick={() => router.push('/hr/attendance')}\n                sx={{ py: 2 }}\n              >\n                Attendance Management\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <Button\n                variant=\"outlined\"\n                fullWidth\n                startIcon={<AssessmentIcon />}\n                onClick={() => router.push('/hr/performance')}\n                sx={{ py: 2 }}\n              >\n                Performance Reviews\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <Button\n                variant=\"outlined\"\n                fullWidth\n                startIcon={<TrendingUpIcon />}\n                onClick={() => router.push('/hr/reports')}\n                sx={{ py: 2 }}\n              >\n                Generate Reports\n              </Button>\n            </Grid>\n            <Grid item xs={12} sm={6} md={4}>\n              <Button\n                variant=\"outlined\"\n                fullWidth\n                startIcon={<WarningIcon />}\n                onClick={() => router.push('/hr/settings')}\n                sx={{ py: 2 }}\n              >\n                HR Settings\n              </Button>\n            </Grid>\n          </Grid>\n        </TabPanel>\n      </Paper>\n\n      {/* Alerts and Notifications */}\n      <Box sx={{ mb: 4 }}>\n        <Alert severity=\"info\" sx={{ mb: 2 }}>\n          You have {dashboardData?.pending_leave_approvals || 0} pending leave applications that require your attention.\n        </Alert>\n        {(dashboardData?.employees_in_probation || 0) > 0 && (\n          <Alert severity=\"warning\">\n            {dashboardData?.employees_in_probation || 0} employees are currently in their probation period. \n            Review their progress and schedule confirmation meetings.\n          </Alert>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default HRDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/hr/employees-directory.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[217,226],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PersonAddIcon' is defined but never used.","line":38,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"PersonAddIcon"},"fix":{"range":[529,559],"text":""},"desc":"Remove unused variable 'PersonAddIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":59,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[991,998],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used.","line":59,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"setLoading"},"fix":{"range":[998,1010],"text":""},"desc":"Remove unused variable 'setLoading'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  IconButton,\n  Chip,\n  TextField,\n  InputAdornment,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Avatar\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  PersonAdd as PersonAddIcon,\n  Email as EmailIcon,\n  Phone as PhoneIcon,\n  Business as BusinessIcon\n} from '@mui/icons-material';\n\ninterface Employee {\n  id: number;\n  employee_id: string;\n  name: string;\n  email: string;\n  phone: string;\n  department: string;\n  designation: string;\n  status: string;\n  hire_date: string;\n  salary: number;\n}\n\nconst EmployeeDirectory: React.FC = () => {\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [departmentFilter, setDepartmentFilter] = useState('all');\n  const [openDialog, setOpenDialog] = useState(false);\n\n  // Mock data for demonstration\n  useEffect(() => {\n    const mockEmployees: Employee[] = [\n      {\n        id: 1,\n        employee_id: 'EMP001',\n        name: 'John Smith',\n        email: 'john.smith@company.com',\n        phone: '+1234567890',\n        department: 'Engineering',\n        designation: 'Senior Developer',\n        status: 'active',\n        hire_date: '2023-01-15',\n        salary: 75000\n      },\n      {\n        id: 2,\n        employee_id: 'EMP002',\n        name: 'Sarah Johnson',\n        email: 'sarah.johnson@company.com',\n        phone: '+1234567891',\n        department: 'Marketing',\n        designation: 'Marketing Manager',\n        status: 'active',\n        hire_date: '2023-03-10',\n        salary: 65000\n      },\n      {\n        id: 3,\n        employee_id: 'EMP003',\n        name: 'Michael Brown',\n        email: 'michael.brown@company.com',\n        phone: '+1234567892',\n        department: 'Finance',\n        designation: 'Financial Analyst',\n        status: 'active',\n        hire_date: '2023-02-20',\n        salary: 55000\n      }\n    ];\n    setEmployees(mockEmployees);\n  }, []);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'inactive': return 'default';\n      case 'terminated': return 'error';\n      case 'on_leave': return 'warning';\n      default: return 'default';\n    }\n  };\n\n  const departments = ['Engineering', 'Marketing', 'Finance', 'HR', 'Sales', 'Operations'];\n\n  const filteredEmployees = employees.filter(employee => {\n    const matchesSearch = employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         employee.employee_id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         employee.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDepartment = departmentFilter === 'all' || employee.department === departmentFilter;\n    return matchesSearch && matchesDepartment;\n  });\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Employee Directory\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenDialog(true)}\n          >\n            Add Employee\n          </Button>\n        </Box>\n\n        {/* Summary Cards */}\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"primary\">\n                  Total Employees\n                </Typography>\n                <Typography variant=\"h4\">\n                  {employees.length}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"success.main\">\n                  Active\n                </Typography>\n                <Typography variant=\"h4\" color=\"success.main\">\n                  {employees.filter(e => e.status === 'active').length}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"info.main\">\n                  Departments\n                </Typography>\n                <Typography variant=\"h4\" color=\"info.main\">\n                  {departments.length}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"warning.main\">\n                  Avg. Salary\n                </Typography>\n                <Typography variant=\"h4\" color=\"warning.main\">\n                  ${employees.length > 0 ? Math.round(employees.reduce((sum, e) => sum + e.salary, 0) / employees.length / 1000) : 0}K\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        {/* Filters */}\n        <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\n          <TextField\n            placeholder=\"Search employees...\"\n            variant=\"outlined\"\n            size=\"small\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ minWidth: 250 }}\n          />\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Department</InputLabel>\n            <Select\n              value={departmentFilter}\n              onChange={(e) => setDepartmentFilter(e.target.value)}\n              label=\"Department\"\n            >\n              <MenuItem value=\"all\">All Departments</MenuItem>\n              {departments.map(dept => (\n                <MenuItem key={dept} value={dept}>{dept}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Box>\n\n        {/* Employees Table */}\n        <Card>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Employee</TableCell>\n                  <TableCell>ID</TableCell>\n                  <TableCell>Contact</TableCell>\n                  <TableCell>Department</TableCell>\n                  <TableCell>Designation</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Hire Date</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredEmployees.map((employee) => (\n                  <TableRow key={employee.id}>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n                          {employee.name.split(' ').map(n => n[0]).join('')}\n                        </Avatar>\n                        <Typography variant=\"subtitle2\">{employee.name}</Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\" color=\"primary\">\n                        {employee.employee_id}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Box>\n                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>\n                          <EmailIcon sx={{ fontSize: 16, mr: 0.5, color: 'text.secondary' }} />\n                          <Typography variant=\"body2\">{employee.email}</Typography>\n                        </Box>\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <PhoneIcon sx={{ fontSize: 16, mr: 0.5, color: 'text.secondary' }} />\n                          <Typography variant=\"body2\">{employee.phone}</Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <BusinessIcon sx={{ fontSize: 16, mr: 0.5, color: 'text.secondary' }} />\n                        {employee.department}\n                      </Box>\n                    </TableCell>\n                    <TableCell>{employee.designation}</TableCell>\n                    <TableCell>\n                      <Chip \n                        label={employee.status} \n                        color={getStatusColor(employee.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>{employee.hire_date}</TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" title=\"View\">\n                        <ViewIcon />\n                      </IconButton>\n                      <IconButton size=\"small\" title=\"Edit\">\n                        <EditIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Card>\n\n        {/* Add Employee Dialog */}\n        <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth=\"sm\" fullWidth>\n          <DialogTitle>Add New Employee</DialogTitle>\n          <DialogContent>\n            <Box sx={{ pt: 1 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Employee management functionality is under development. Contact your administrator to enable full HR features.\n              </Typography>\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setOpenDialog(false)}>Close</Button>\n            <Button variant=\"contained\" disabled>Add Employee</Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Container>\n  );\n};\n\nexport default EmployeeDirectory;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/hr/employees.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Tab' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tab"},"fix":{"range":[166,173],"text":""},"desc":"Remove unused variable 'Tab'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tabs"},"fix":{"range":[173,181],"text":""},"desc":"Remove unused variable 'Tabs'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[291,301],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[301,316],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[316,333],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogActions"},"fix":{"range":[333,350],"text":""},"desc":"Remove unused variable 'DialogActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PhotoCameraIcon' is defined but never used.","line":50,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"PhotoCameraIcon"},"fix":{"range":[816,850],"text":""},"desc":"Remove unused variable 'PhotoCameraIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TabPanel' is defined but never used.","line":63,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"TabPanel"},"fix":{"range":[1184,1583],"text":""},"desc":"Remove unused variable 'TabPanel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'a11yProps' is defined but never used.","line":83,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"a11yProps"},"fix":{"range":[1585,1722],"text":""},"desc":"Remove unused variable 'a11yProps'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":91,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[1772,1799],"text":""},"desc":"Remove unused variable 'router'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":92,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1802,1829],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tabValue' is assigned a value but never used.","line":93,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"tabValue"},"fix":{"range":[1839,1847],"text":""},"desc":"Remove unused variable 'tabValue'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchEmployees' was used before it was defined.","line":107,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":107,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'handleTabChange' is assigned a value but never used.","line":125,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleTabChange"},"fix":{"range":[2984,3092],"text":""},"desc":"Remove unused variable 'handleTabChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'newEmployee' is defined but never used.","line":171,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"newEmployee"},"fix":{"range":[4115,4131],"text":""},"desc":"Remove unused variable 'newEmployee'."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Card,\n  CardContent,\n  Tab,\n  Tabs,\n  Button,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  Tooltip,\n  InputAdornment,\n  Pagination,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Visibility as ViewIcon,\n  Search as SearchIcon,\n  FilterList as FilterIcon,\n  Download as DownloadIcon,\n  Upload as UploadIcon,\n  Person as PersonIcon,\n  Work as WorkIcon,\n  ContactPhone as ContactIcon,\n  AccountBalance as BankIcon,\n  PhotoCamera as PhotoCameraIcon,\n} from '@mui/icons-material';\nimport { useRouter } from 'next/router';\nimport { useAuth } from '../../hooks/useAuth';\nimport { hrService, Employee } from '../../services';\nimport AddEmployeeModal from '../../components/AddEmployeeModal';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`employee-tabpanel-${index}`}\n      aria-labelledby={`employee-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index: number) {\n  return {\n    id: `employee-tab-${index}`,\n    'aria-controls': `employee-tabpanel-${index}`,\n  };\n}\n\nconst EmployeesManagement: NextPage = () => {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [tabValue, setTabValue] = useState(0);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterDepartment, setFilterDepartment] = useState('');\n  const [filterStatus, setFilterStatus] = useState('');\n  const [page, setPage] = useState(1);\n  const [rowsPerPage] = useState(10);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [dialogMode, setDialogMode] = useState<'create' | 'edit' | 'view'>('view');\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  const fetchEmployees = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const employeesData = await hrService.getEmployees();\n      setEmployees(employeesData);\n    } catch (err: any) {\n      console.error('Error fetching employees:', err);\n      setError(err.userMessage || 'Failed to load employees');\n      setEmployees([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n    setPage(1);\n  };\n\n  const handleFilterDepartment = (event: any) => {\n    setFilterDepartment(event.target.value);\n    setPage(1);\n  };\n\n  const handleFilterStatus = (event: any) => {\n    setFilterStatus(event.target.value);\n    setPage(1);\n  };\n\n  const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n  };\n\n  const handleViewEmployee = (employee: any) => {\n    setSelectedEmployee(employee);\n    setDialogMode('view');\n    setDialogOpen(true);\n  };\n\n  const handleEditEmployee = (employee: any) => {\n    setSelectedEmployee(employee);\n    setDialogMode('edit');\n    setDialogOpen(true);\n  };\n\n  const handleCreateEmployee = () => {\n    setSelectedEmployee(null);\n    setDialogMode('create');\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setSelectedEmployee(null);\n  };\n\n  const handleAddEmployee = async (newEmployee: any) => {\n    setDialogOpen(false);\n    await fetchEmployees(); // Refresh list\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'success';\n      case 'resigned':\n        return 'warning';\n      case 'terminated':\n        return 'error';\n      case 'on_leave':\n        return 'info';\n      default:\n        return 'default';\n    }\n  };\n\n  const getEmployeeTypeColor = (type: string) => {\n    switch (type) {\n      case 'permanent':\n        return 'primary';\n      case 'contract':\n        return 'secondary';\n      case 'intern':\n        return 'info';\n      case 'consultant':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  // Filter employees based on search and filters\n  const filteredEmployees = employees.filter(employee => {\n    const matchesSearch = (employee.user?.full_name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         employee.employee_code.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (employee.user?.email || '').toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const employeeDept = employee.department || employee.user?.department;\n    const matchesDepartment = !filterDepartment || employeeDept === filterDepartment;\n    const matchesStatus = !filterStatus || employee.employment_status === filterStatus;\n    \n    return matchesSearch && matchesDepartment && matchesStatus;\n  });\n\n  // Paginate results\n  const paginatedEmployees = filteredEmployees.slice(\n    (page - 1) * rowsPerPage,\n    page * rowsPerPage\n  );\n\n  const totalPages = Math.ceil(filteredEmployees.length / rowsPerPage);\n\n  // Get unique departments for filter\n  const departments = [...new Set(employees.map(emp => emp.department || emp.user?.department).filter(Boolean))];\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Employee Management\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<UploadIcon />}\n          >\n            Import\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<DownloadIcon />}\n          >\n            Export\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={handleCreateEmployee}\n          >\n            Add Employee\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n          <Button size=\"small\" onClick={fetchEmployees} sx={{ ml: 1 }}>\n            Retry\n          </Button>\n        </Alert>\n      )}\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Employees\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {employees.length}\n                  </Typography>\n                </Box>\n                <PersonIcon color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"success.main\">\n                    {employees.filter(emp => emp.employment_status === 'active').length}\n                  </Typography>\n                </Box>\n                <WorkIcon color=\"success\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Permanent\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"primary.main\">\n                    {employees.filter(emp => emp.employee_type === 'permanent').length}\n                  </Typography>\n                </Box>\n                <BankIcon color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Contract\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"warning.main\">\n                    {employees.filter(emp => emp.employee_type === 'contract').length}\n                  </Typography>\n                </Box>\n                <ContactIcon color=\"warning\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Filters and Search */}\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Grid container spacing={3} alignItems=\"center\">\n          <Grid item xs={12} md={4}>\n            <TextField\n              fullWidth\n              placeholder=\"Search employees...\"\n              value={searchTerm}\n              onChange={handleSearch}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth>\n              <InputLabel>Department</InputLabel>\n              <Select\n                value={filterDepartment}\n                label=\"Department\"\n                onChange={handleFilterDepartment}\n              >\n                <MenuItem value=\"\">All Departments</MenuItem>\n                {departments.map((dept) => (\n                  <MenuItem key={dept} value={dept}>\n                    {dept}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <FormControl fullWidth>\n              <InputLabel>Status</InputLabel>\n              <Select\n                value={filterStatus}\n                label=\"Status\"\n                onChange={handleFilterStatus}\n              >\n                <MenuItem value=\"\">All Status</MenuItem>\n                <MenuItem value=\"active\">Active</MenuItem>\n                <MenuItem value=\"resigned\">Resigned</MenuItem>\n                <MenuItem value=\"terminated\">Terminated</MenuItem>\n                <MenuItem value=\"on_leave\">On Leave</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          <Grid item xs={12} md={2}>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              startIcon={<FilterIcon />}\n              sx={{ height: '56px' }}\n            >\n              More Filters\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Employees Table */}\n      <Paper>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Employee Code</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Email</TableCell>\n                <TableCell>Department</TableCell>\n                <TableCell>Job Title</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Hire Date</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {loading ? (\n                <TableRow>\n                  <TableCell colSpan={9} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                paginatedEmployees.map((employee) => (\n                  <TableRow key={employee.id} hover>\n                    <TableCell>\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {employee.employee_code}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {employee.user?.full_name || 'N/A'}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {employee.user?.email || 'N/A'}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\">\n                        {employee.department || employee.user?.department || 'N/A'}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\">\n                        {employee.position || 'N/A'}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={employee.employee_type}\n                        color={getEmployeeTypeColor(employee.employee_type) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={employee.employment_status}\n                        color={getStatusColor(employee.employment_status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\">\n                        {employee.hire_date}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', gap: 1 }}>\n                        <Tooltip title=\"View\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => handleViewEmployee(employee)}\n                          >\n                            <ViewIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Edit\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => handleEditEmployee(employee)}\n                          >\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Delete\">\n                          <IconButton size=\"small\" color=\"error\">\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {/* Pagination */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', p: 2 }}>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Showing {((page - 1) * rowsPerPage) + 1} to {Math.min(page * rowsPerPage, filteredEmployees.length)} of {filteredEmployees.length} entries\n          </Typography>\n          <Pagination\n            count={totalPages}\n            page={page}\n            onChange={handlePageChange}\n            color=\"primary\"\n          />\n        </Box>\n      </Paper>\n\n      {/* Employee Modal */}\n      <AddEmployeeModal\n        open={dialogOpen}\n        onClose={handleCloseDialog}\n        onAdd={handleAddEmployee}\n        initialData={selectedEmployee}\n        mode={dialogMode}\n      />\n    </Container>\n  );\n};\n\nexport default EmployeesManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/index.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":6,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useEffect } from 'react';\n\nexport default function Home() {\n  const router = useRouter();\n\n  useEffect(() => {\n    // Redirect to login page immediately\n    router.push('/login');\n  }, [router]);\n\n  return null;  // Render nothing while redirecting\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/inventory/bulk-import.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/inventory/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Checkbox"},"fix":{"range":[229,241],"text":""},"desc":"Remove unused variable 'Checkbox'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[241,261],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[261,275],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[275,285],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[285,297],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[297,312],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[312,330],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Stack' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Stack"},"fix":{"range":[330,339],"text":""},"desc":"Remove unused variable 'Stack'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":80,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1767,1837],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleLogout' is assigned a value but never used.","line":91,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleLogout"},"fix":{"range":[2208,2262],"text":""},"desc":"Remove unused variable 'handleLogout'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'importStockMutation' is assigned a value but never used.","line":121,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"importStockMutation"},"fix":{"range":[3233,3483],"text":""},"desc":"Remove unused variable 'importStockMutation'."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/inventory/index.tsx\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Tab,\n  Tabs,\n  Paper,\n  Chip,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Checkbox,\n  FormControlLabel,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControl,\n  InputAdornment,\n  Stack,\n  Grid as Grid,\n  Alert,\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Refresh,\n  Warning,\n  TrendingUp,\n  TrendingDown,\n  Inventory,\n  SwapHoriz,\n  Visibility\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { masterDataService } from '../../services/authService';\nimport ExcelImportExport from '../../components/ExcelImportExport';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`inventory-tabpanel-${index}`}\n      aria-labelledby={`inventory-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst InventoryManagement: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [user] = useState({ email: 'demo@example.com', role: 'admin' });\n  const [adjustmentDialog, setAdjustmentDialog] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [adjustment, setAdjustment] = useState({ quantity: '', reason: '' });\n\n  const queryClient = useQueryClient();\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleLogout = () => {\n    // Handle logout\n  };\n\n  // Fetch data from APIs\n  const { data: stock, isLoading: stockLoading, refetch: refetchStock } = useQuery({\n    queryKey: ['stock'],\n    queryFn: () => masterDataService.getStock(),\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  const { data: lowStock, isLoading: lowStockLoading } = useQuery({\n    queryKey: ['lowStock'],\n    queryFn: masterDataService.getLowStock,\n    enabled: tabValue === 1\n  });\n\n  // Stock adjustment mutation\n  const adjustStockMutation = useMutation({\n    mutationFn: ({ productId, quantityChange, reason }: { productId: number, quantityChange: number, reason: string }) =>\n      masterDataService.adjustStock(productId, quantityChange, reason),\n    onSuccess: () => {\n      queryClient.invalidateQueries({queryKey: ['stock']});\n      queryClient.invalidateQueries({queryKey: ['lowStock']});\n      setAdjustmentDialog(false);\n      setAdjustment({ quantity: '', reason: '' });\n      setSelectedProduct(null);\n    }\n  });\n\n  const importStockMutation = useMutation({\n    mutationFn: masterDataService.bulkImportStock,\n    onSuccess: () => {\n      queryClient.invalidateQueries({queryKey: ['stock']});\n      queryClient.invalidateQueries({queryKey: ['lowStock']});\n    }\n  });\n\n  const handleImportStock = (importedData: any[]) => {\n    // Convert imported data back to a format the API expects\n    // This is a temporary workaround for the type mismatch\n    console.log('Imported stock data:', importedData);\n    // For now, just refetch stock data instead of sending to API\n    refetchStock();\n  };\n\n  const handleAdjustStock = () => {\n    if (selectedProduct && adjustment.quantity && adjustment.reason) {\n      adjustStockMutation.mutate({\n        productId: selectedProduct.product_id,\n        quantityChange: parseFloat(adjustment.quantity),\n        reason: adjustment.reason\n      });\n    }\n  };\n\n  const openAdjustmentDialog = (product: any) => {\n    setSelectedProduct(product);\n    setAdjustmentDialog(true);\n  };\n\n  const renderStockTable = (stockItems: any[], showLowStockOnly = false, isLoading = false) => {\n    if (isLoading) {\n      return <Typography>Loading stock data...</Typography>;\n    }\n    \n    if (!stockItems || stockItems.length === 0) {\n      return <Typography>No stock data available.</Typography>;\n    }\n\n    const filteredItems = showLowStockOnly \n      ? stockItems.filter(item => item.is_low_stock || (item.quantity <= (item.reorder_level || 0)))\n      : stockItems;\n\n    return (\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Product Name</TableCell>\n              <TableCell>Current Stock</TableCell>\n              <TableCell>Unit</TableCell>\n              <TableCell>Unit Price</TableCell>\n              <TableCell>Total Value</TableCell>\n              <TableCell>Reorder Level</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredItems.map((item) => (\n              <TableRow key={item.product_id || item.id}>\n                <TableCell>{item.product_name}</TableCell>\n                <TableCell>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    {item.quantity}\n                    {item.quantity <= (item.reorder_level || 0) && (\n                      <Warning sx={{ color: 'orange', ml: 1 }} />\n                    )}\n                  </Box>\n                </TableCell>\n                <TableCell>{item.unit}</TableCell>\n                <TableCell>₹{(item.unit_price || 0).toLocaleString()}</TableCell>\n                <TableCell>₹{(item.total_value || (item.quantity * (item.unit_price || 0))).toLocaleString()}</TableCell>\n                <TableCell>{item.reorder_level || 0}</TableCell>\n                <TableCell>\n                  <Chip\n                    label={\n                      item.quantity <= (item.reorder_level || 0) ? 'Low Stock' : \n                      item.quantity === 0 ? 'Out of Stock' : 'Normal'\n                    }\n                    color={\n                      item.quantity === 0 ? 'error' :\n                      item.quantity <= (item.reorder_level || 0) ? 'warning' : 'success'\n                    }\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <IconButton \n                    size=\"small\" \n                    color=\"primary\"\n                    onClick={() => openAdjustmentDialog(item)}\n                  >\n                    <Edit />\n                  </IconButton>\n                  <IconButton size=\"small\" color=\"info\">\n                    <Visibility />\n                  </IconButton>\n                  <IconButton size=\"small\" color=\"secondary\">\n                    <SwapHoriz />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  const renderSummaryCards = () => {\n    if (stockLoading || !stock) {\n      return <Typography>Loading inventory summary...</Typography>;\n    }\n\n    const totalItems = stock.length;\n    const totalValue = stock.reduce((sum: number, item: any) => \n      sum + (item.total_value || (item.quantity * (item.unit_price || 0))), 0\n    );\n    const lowStockItems = stock.filter((item: any) => \n      item.quantity <= (item.reorder_level || 0)\n    ).length;\n    const outOfStockItems = stock.filter((item: any) => item.quantity === 0).length;\n\n    const cards = [\n      {\n        title: 'Total Items',\n        value: totalItems,\n        color: '#1976D2',\n        icon: <Inventory />\n      },\n      {\n        title: 'Total Value',\n        value: `₹${totalValue.toLocaleString()}`,\n        color: '#2E7D32',\n        icon: <TrendingUp />\n      },\n      {\n        title: 'Low Stock Items',\n        value: lowStockItems,\n        color: '#F57C00',\n        icon: <Warning />\n      },\n      {\n        title: 'Out of Stock',\n        value: outOfStockItems,\n        color: '#D32F2F',\n        icon: <TrendingDown />\n      }\n    ];\n\n    return (\n      <Grid container spacing={3}>\n        {cards.map((card, index) => (\n          <Grid size={{ xs: 12, sm: 6, md: 3 }} key={index}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      {card.title}\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {card.value}\n                    </Typography>\n                  </Box>\n                  <Box sx={{ color: card.color }}>\n                    {card.icon}\n                  </Box>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n          <Box>\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n              Inventory Management\n            </Typography>\n            <Typography variant=\"body1\" color=\"textSecondary\">\n              Real-time stock monitoring and inventory control\n            </Typography>\n          </Box>\n          <Button\n            variant=\"contained\"\n            startIcon={<Refresh />}\n            onClick={() => refetchStock()}\n          >\n            Refresh Stock\n          </Button>\n        </Box>\n\n        {/* Summary Cards */}\n        <Box sx={{ mb: 4 }}>\n          {renderSummaryCards()}\n        </Box>\n\n        {/* Inventory Tabs */}\n        <Paper sx={{ mb: 4 }}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"inventory tabs\">\n              <Tab label=\"Current Stock\" />\n              <Tab label=\"Low Stock Alert\" />\n              <Tab label=\"Stock Movements\" />\n              <Tab label=\"Stock Valuation\" />\n            </Tabs>\n          </Box>\n\n          <TabPanel value={tabValue} index={0}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Current Stock Levels</Typography>\n              <Button variant=\"contained\" startIcon={<Add />}>\n                Add Stock Entry\n              </Button>\n            </Box>\n            <ExcelImportExport data={stock || []} entity=\"Stock\" onImport={handleImportStock} />\n            {renderStockTable(stock || [], false, stockLoading)}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={1}>\n            <Box sx={{ mb: 3 }}>\n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                Items below reorder level require immediate attention\n              </Alert>\n              <Typography variant=\"h6\">Low Stock Alert</Typography>\n            </Box>\n            {renderStockTable(lowStock || stock || [], true, lowStockLoading || stockLoading)}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={2}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Stock Movements</Typography>\n              <Button variant=\"contained\" startIcon={<SwapHoriz />}>\n                View All Movements\n              </Button>\n            </Box>\n            <Typography>Stock movement tracking coming soon...</Typography>\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={3}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Stock Valuation Report</Typography>\n              <Button variant=\"contained\" startIcon={<TrendingUp />}>\n                Generate Report\n              </Button>\n            </Box>\n            <Typography>Stock valuation reporting coming soon...</Typography>\n          </TabPanel>\n        </Paper>\n      </Container>\n\n      {/* Stock Adjustment Dialog */}\n      <Dialog open={adjustmentDialog} onClose={() => setAdjustmentDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Adjust Stock: {selectedProduct?.product_name}</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n            Current Stock: {selectedProduct?.quantity} {selectedProduct?.unit}\n          </Typography>\n          <TextField\n            fullWidth\n            label=\"Quantity Change\"\n            placeholder=\"Enter positive or negative number\"\n            value={adjustment.quantity}\n            onChange={(e) => setAdjustment(prev => ({ ...prev, quantity: e.target.value }))}\n            type=\"number\"\n            sx={{ mb: 2 }}\n            helperText=\"Use negative numbers to decrease stock, positive to increase\"\n          />\n          <TextField\n            fullWidth\n            label=\"Reason\"\n            placeholder=\"Reason for adjustment\"\n            value={adjustment.reason}\n            onChange={(e) => setAdjustment(prev => ({ ...prev, reason: e.target.value }))}\n            multiline\n            rows={3}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setAdjustmentDialog(false)}>Cancel</Button>\n          <Button \n            onClick={handleAdjustStock} \n            variant=\"contained\"\n            disabled={!adjustment.quantity || !adjustment.reason || adjustStockMutation.isPending}\n          >\n            {adjustStockMutation.isPending ? 'Adjusting...' : 'Adjust Stock'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default InventoryManagement; ","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/inventory/low-stock.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Box"},"fix":{"range":[260,264],"text":""},"desc":"Remove unused variable 'Box'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/inventory/low-stock.tsx\n\nimport React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { getLowStockReport, getProductMovements, getLastVendorForProduct } from '../../services/stockService';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Alert,\n  IconButton,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n} from '@mui/material';\nimport { MoreVert, History as HistoryIcon, ShoppingCart as PurchaseIcon } from '@mui/icons-material';\nimport { useRouter } from 'next/router';\nimport { useAuth } from '../../context/AuthContext';\n\nconst LowStockReport: React.FC = () => {\n  const router = useRouter();\n  const { isOrgContextReady } = useAuth();\n  const [movementsDialogOpen, setMovementsDialogOpen] = useState(false);\n  const [selectedMovements, setSelectedMovements] = useState<any[]>([]);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n  const [menuProductId, setMenuProductId] = useState<number | null>(null);\n\n  const { data: lowStockItems, isLoading } = useQuery({\n    queryKey: ['lowStock'],\n    queryFn: getLowStockReport,\n    enabled: isOrgContextReady,\n  });\n\n  if (isLoading) {return <Typography>Loading low stock report...</Typography>;}\n\n  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, productId: number) => {\n    setMenuAnchorEl(event.currentTarget);\n    setMenuProductId(productId);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null);\n    setMenuProductId(null);\n  };\n\n  const handleShowMovement = async () => {\n    if (menuProductId) {\n      const movements = await getProductMovements(menuProductId);\n      setSelectedMovements(movements);\n      setMovementsDialogOpen(true);\n    }\n    handleMenuClose();\n  };\n\n  const handleCreatePurchaseOrder = async () => {\n    if (menuProductId) {\n      const lastVendor = await getLastVendorForProduct(menuProductId);\n      router.push(`/vouchers/Purchase-Vouchers/purchase-order?productId=${menuProductId}${lastVendor ? `&vendorId=${lastVendor.id}` : ''}`);\n    }\n    handleMenuClose();\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Low Stock Report\n      </Typography>\n      {lowStockItems?.length === 0 ? (\n        <Alert severity=\"success\">No low stock items found. All items are above reorder levels.</Alert>\n      ) : (\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Product</TableCell>\n                <TableCell>Current Stock</TableCell>\n                <TableCell>Reorder Level</TableCell>\n                <TableCell>Deficit</TableCell>\n                <TableCell>Suggested Order</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {lowStockItems?.map((item) => (\n                <TableRow key={item.product_id} sx={{ backgroundColor: 'warning.light' }}>\n                  <TableCell>{item.product_name}</TableCell>\n                  <TableCell>{item.quantity} {item.unit}</TableCell>\n                  <TableCell>{item.reorder_level}</TableCell>\n                  <TableCell>{item.quantity - item.reorder_level}</TableCell>\n                  <TableCell>{item.suggested_order_quantity || item.reorder_level * 2}</TableCell>\n                  <TableCell>{item.location || '-'}</TableCell>\n                  <TableCell>\n                    <IconButton onClick={(e) => handleMenuClick(e, item.product_id)}>\n                      <MoreVert />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n\n      {/* Kebab Menu */}\n      <Menu\n        anchorEl={menuAnchorEl}\n        open={Boolean(menuAnchorEl)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem onClick={handleShowMovement}>\n          <ListItemIcon><HistoryIcon /></ListItemIcon>\n          <ListItemText>Show Movement</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={handleCreatePurchaseOrder}>\n          <ListItemIcon><PurchaseIcon /></ListItemIcon>\n          <ListItemText>Create Purchase Order</ListItemText>\n        </MenuItem>\n      </Menu>\n\n      {/* Movements Dialog */}\n      <Dialog open={movementsDialogOpen} onClose={() => setMovementsDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Stock Movements</DialogTitle>\n        <DialogContent>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Date</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Quantity</TableCell>\n                  <TableCell>Reference</TableCell>\n                  <TableCell>Notes</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {selectedMovements.map((movement) => (\n                  <TableRow key={movement.id}>\n                    <TableCell>{new Date(movement.transaction_date).toLocaleString()}</TableCell>\n                    <TableCell>{movement.transaction_type}</TableCell>\n                    <TableCell>{movement.quantity}</TableCell>\n                    <TableCell>{movement.reference_number || '-'}</TableCell>\n                    <TableCell>{movement.notes || '-'}</TableCell>\n                  </TableRow>\n                ))}\n                {selectedMovements.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={5} align=\"center\">No movements found</TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setMovementsDialogOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default LowStockReport;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/inventory/movements.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Box"},"fix":{"range":[214,218],"text":""},"desc":"Remove unused variable 'Box'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[376,386],"text":""},"desc":"Remove unused variable 'Button'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/inventory/movements.tsx\n\nimport React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { getStockMovements } from '../../services/stockService';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Button,\n  Grid,\n} from '@mui/material';\nimport { Search } from '@mui/icons-material';\nimport { useAuth } from '../../context/AuthContext';\n\nconst StockMovements: React.FC = () => {\n  const { isOrgContextReady } = useAuth();\n  const [searchText, setSearchText] = useState('');\n  const [showOnlyRecent, setShowOnlyRecent] = useState(true);\n\n  const { data: movements, isLoading } = useQuery({\n    queryKey: ['stockMovements', { search: searchText, recent: showOnlyRecent }],\n    queryFn: ({ queryKey }) => getStockMovements(queryKey[1]),\n    enabled: isOrgContextReady,\n  });\n\n  if (isLoading) {return <Typography>Loading stock movements...</Typography>;}\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Stock Movements\n      </Typography>\n      <Paper sx={{ p: 2, mb: 2 }}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid size={{ xs: 12, md: 6 }}>\n            <TextField\n              fullWidth\n              label=\"Search movements\"\n              value={searchText}\n              onChange={(e) => setSearchText(e.target.value)}\n              InputProps={{\n                startAdornment: <Search sx={{ mr: 1 }} />,\n              }}\n            />\n          </Grid>\n          <Grid size={{ xs: 12, md: 6 }}>\n            <FormControlLabel\n              control={<Checkbox checked={showOnlyRecent} onChange={(e) => setShowOnlyRecent(e.target.checked)} />}\n              label=\"Show only recent movements (last 30 days)\"\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Date</TableCell>\n              <TableCell>Product</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell>Quantity</TableCell>\n              <TableCell>Reference</TableCell>\n              <TableCell>Notes</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {movements?.map((movement) => (\n              <TableRow key={movement.id}>\n                <TableCell>{new Date(movement.transaction_date).toLocaleString()}</TableCell>\n                <TableCell>{movement.product_name}</TableCell>\n                <TableCell>{movement.transaction_type}</TableCell>\n                <TableCell>{movement.quantity}</TableCell>\n                <TableCell>{movement.reference_number || '-'}</TableCell>\n                <TableCell>{movement.notes || '-'}</TableCell>\n              </TableRow>\n            ))}\n            {movements?.length === 0 && (\n              <TableRow>\n                <TableCell colSpan={6} align=\"center\">No movements found</TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n\nexport default StockMovements;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/inventory/stock.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":59,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"options"},"fix":{"range":[1300,1312],"text":""},"desc":"Remove unused variable 'options'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'importMode' is assigned a value but never used.","line":74,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"importMode"},"fix":{"range":[1983,1993],"text":""},"desc":"Remove unused variable 'importMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setImportMode' is assigned a value but never used.","line":74,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"setImportMode"},"fix":{"range":[1993,2008],"text":""},"desc":"Remove unused variable 'setImportMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":90,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"isLoading"},"fix":{"range":[2822,2833],"text":""},"desc":"Remove unused variable 'isLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":179,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":19},{"ruleId":"no-use-before-define","severity":2,"message":"'generateStockReport' was used before it was defined.","line":185,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":185,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'companyData' is already declared in the upper scope on line 101 column 17.","line":188,"column":50,"nodeType":"Identifier","messageId":"noShadow","endLine":188,"endColumn":66},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'companyData' is already declared in the upper scope on line 101 column 17.","line":188,"column":50,"nodeType":"Identifier","messageId":"noShadow","endLine":188,"endColumn":66},{"ruleId":"no-unused-vars","severity":2,"message":"'resetForm' is assigned a value but never used.","line":221,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"resetForm"},"fix":{"range":[6843,6976],"text":""},"desc":"Remove unused variable 'resetForm'."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/inventory/stock.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { masterDataService, companyService } from '../../services/authService';  // Assuming masterDataService is masterService\nimport { getProductMovements, getLastVendorForProduct } from '../../services/stockService';\nimport { useAuth } from '../../context/AuthContext';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Checkbox,\n  FormControlLabel,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControl,\n  InputAdornment,\n  Stack,\n  Grid,\n  Menu,\n  ListItemIcon,\n  ListItemText,\n  MenuItem as MuiMenuItem,\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Visibility,\n  GetApp,\n  Publish,\n  Print,\n  MoreVert,\n  History as HistoryIcon,\n  ShoppingCart as PurchaseIcon,\n} from '@mui/icons-material';\nimport { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport { toast } from 'react-toastify';\n\n// Type declaration for jsPDF autoTable extension\ndeclare module 'jspdf' {\n  interface jsPDF {\n    autoTable: (options: any) => jsPDF;\n  }\n}\n\nconst StockManagement: React.FC = () => {\n  const queryClient = useQueryClient();\n  const router = useRouter();\n  const { user, isOrgContextReady } = useAuth(); // Get organization context readiness\n  const [searchText, setSearchText] = useState('');\n  const [showZero, setShowZero] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [manualDialogOpen, setManualDialogOpen] = useState(false);\n  const [importDialogOpen, setImportDialogOpen] = useState(false);\n  const [movementsDialogOpen, setMovementsDialogOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [importMode, setImportMode] = useState<'add' | 'replace'>('replace');\n  const [selectedStock, setSelectedStock] = useState<any>(null);\n  const [selectedMovements, setSelectedMovements] = useState<any[]>([]);\n  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);\n  const [menuProductId, setMenuProductId] = useState<number | null>(null);\n  const [manualFormData, setManualFormData] = useState({ product_id: 0, quantity: 0, unit: '' });\n  const [editFormData, setEditFormData] = useState({ quantity: 0 });\n\n  // Params object for stock fetch - service will clean invalid values from queryKey[1]\n  const stockParams = {\n    search: searchText,\n    show_zero: showZero,\n    // Add if you have low_stock_only or product_id states\n  };\n\n  // Only fetch stock data if organization context is ready\n  const { data: stockData, isLoading, error: stockError } = useQuery({\n    queryKey: ['stock', stockParams],\n    queryFn: () => masterDataService.getStock(),  // Fix the function call\n    enabled: isOrgContextReady, // Wait for organization context before fetching\n  });\n\n  const { data: products } = useQuery({\n    queryKey: ['products'],\n    queryFn: () => masterDataService.getProducts(),\n    enabled: isOrgContextReady, // Wait for organization context before fetching\n  });\n  const { data: companyData } = useQuery({\n    queryKey: ['company'],\n    queryFn: companyService.getCurrentCompany,\n    enabled: isOrgContextReady, // Wait for organization context before fetching\n  });\n\n  const updateStockMutation = useMutation({\n    mutationFn: (data: any) => masterDataService.updateStock(data.product_id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['stock'] });\n      setEditDialogOpen(false);\n      setManualDialogOpen(false);\n    }\n  });\n\n  const bulkImportMutation = useMutation({\n    mutationFn: ({ file, mode }: { file: File; mode: 'add' | 'replace' }) => masterDataService.bulkImportStock(file, mode),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['stock'] });\n      alert('Stock import completed successfully.');\n    },\n    onError: (error: any) => {\n      console.error('Bulk import error:', error);\n      alert(`Import failed: ${error.userMessage || 'Please check the file format and required columns.'}`);\n    }\n  });\n\n  const handleEditStock = (stock: any) => {\n    setSelectedStock(stock);\n    setEditFormData({ quantity: stock.quantity });\n    setEditDialogOpen(true);\n  };\n\n  const handleSaveEdit = () => {\n    if (!selectedStock || !selectedStock.product_id) {\n      toast.error('Invalid stock selection. Please try again.');\n      return;\n    }\n    updateStockMutation.mutate({ product_id: selectedStock.product_id, quantity: editFormData.quantity });\n  };\n\n  const handleManualEntry = () => {\n    setManualDialogOpen(true);\n  };\n\n  const handleSaveManual = () => {\n    updateStockMutation.mutate(manualFormData);\n  };\n\n  const handleDownloadTemplate = () => {\n    masterDataService.downloadStockTemplate();\n  };\n\n  const handleImportClick = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.xlsx, .xls';\n    input.onchange = (e: any) => {\n      const file = e.target.files[0];\n      if (file) {\n        setSelectedFile(file);\n        setImportDialogOpen(true);  // Show prompt\n      }\n    };\n    input.click();\n  };\n\n  const handleImportConfirm = (mode: 'add' | 'replace') => {\n    if (selectedFile) {\n      bulkImportMutation.mutate({ file: selectedFile, mode });\n    }\n    setImportDialogOpen(false);\n    setSelectedFile(null);\n  };\n\n  const handleExport = async () => {\n    try {\n      await masterDataService.exportStock({ search: searchText, show_zero: showZero });\n    } catch (error) {\n      alert('Failed to export stock data. Please try again.');\n    }\n  };\n\n  const handlePrint = () => {\n    generateStockReport('stock_report.pdf', companyData, stockData);\n  };\n\n  const generateStockReport = (filePath: string, companyData: any, items: any[]) => {\n    const doc = new jsPDF();\n\n    doc.setFontSize(16);\n    doc.text(\"Stock Report\", 14, 20);\n\n    let yPosition = 30;\n    companyData.forEach(([key, value]: [string, string]) => {\n      doc.text(`${key}: ${value}`, 14, yPosition);\n      yPosition += 10;\n    });\n\n    yPosition += 20;\n    doc.autoTable({\n      startY: yPosition,\n      head: [['S.No', 'Product Name', 'Quantity', 'Unit Price', 'Total Value', 'Reorder Level', 'Last Updated']],\n      body: items.map((item, idx) => [\n        idx + 1,\n        item.product_name,\n        item.quantity,\n        item.unit_price,\n        item.total_value,\n        item.reorder_level,\n        item.last_updated\n      ]),\n      theme: 'striped',\n      styles: { cellPadding: 2, fontSize: 10 },\n      headStyles: { fillColor: [41, 128, 185], textColor: [255, 255, 255] }\n    });\n\n    doc.save(filePath);\n  };\n\n  const resetForm = () => {\n    setManualFormData({ product_id: 0, quantity: 0, unit: '' });\n    setEditFormData({ quantity: 0 });\n  };\n\n  // Handle ESC key for canceling import dialog\n  useEffect(() => {\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setImportDialogOpen(false);\n      }\n    };\n    window.addEventListener('keydown', handleEsc);\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  }, []);\n\n  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, productId: number) => {\n    setMenuAnchorEl(event.currentTarget);\n    setMenuProductId(productId);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchorEl(null);\n    setMenuProductId(null);\n  };\n\n  const handleShowMovement = async () => {\n    if (menuProductId) {\n      const movements = await getProductMovements(menuProductId);\n      setSelectedMovements(movements);\n      setMovementsDialogOpen(true);\n    }\n    handleMenuClose();\n  };\n\n  const handleCreatePurchaseOrder = async () => {\n    if (menuProductId) {\n      const lastVendor = await getLastVendorForProduct(menuProductId);\n      router.push(`/vouchers/Purchase-Vouchers/purchase-order?productId=${menuProductId}${lastVendor ? `&vendorId=${lastVendor.id}` : ''}`);\n    }\n    handleMenuClose();\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Stock Management\n        </Typography>\n\n        {/* Show loading or error states before organization context is ready */}\n        {!isOrgContextReady && (\n          <Paper sx={{ p: 3, textAlign: 'center' }}>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              Loading organization context...\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n              Please wait while we verify your organization access.\n            </Typography>\n          </Paper>\n        )}\n\n        {/* Show error message if there's a stock loading error */}\n        {isOrgContextReady && stockError && (\n          <Paper sx={{ p: 3, textAlign: 'center', backgroundColor: 'error.light', color: 'error.contrastText' }}>\n            <Typography variant=\"h6\">\n              Unable to load stock data\n            </Typography>\n            <Typography variant=\"body2\" sx={{ mt: 1 }}>\n              {(stockError as any)?.userMessage || stockError?.message || 'Please check your organization setup and try again.'}\n            </Typography>\n          </Paper>\n        )}\n\n        {/* Only show main interface when organization context is ready */}\n        {isOrgContextReady && (\n          <>\n            <Paper sx={{ p: 2, mb: 2, position: 'sticky', top: 0, zIndex: 1000, backgroundColor: 'white' }}>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid size={{ xs: 12, md: 4 }}>\n                  <TextField\n                    label=\"Search\"\n                    value={searchText}\n                    onChange={(e) => setSearchText(e.target.value)}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <FormControlLabel\n                            control={<Checkbox checked={showZero} onChange={(e) => setShowZero(e.target.checked)} />}\n                            label=\"Zero Stock\"\n                            labelPlacement=\"start\"\n                            sx={{ mr: 0 }}\n                          />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Grid>\n                <Grid size={{ xs: 12, md: 8 }}>\n                  <Stack direction=\"row\" spacing={1} justifyContent=\"flex-end\" sx={{ flexWrap: 'nowrap' }}>\n                    <Button \n                      variant=\"contained\" \n                      startIcon={<Add />} \n                      onClick={handleManualEntry} \n                      sx={{ minWidth: '120px' }}\n                      disabled={!user?.organization_id}\n                    >\n                      Manual Entry\n                    </Button>\n                    <Button variant=\"contained\" startIcon={<GetApp />} onClick={handleDownloadTemplate} sx={{ minWidth: '120px' }}>\n                      Download Template\n                    </Button>\n                    <Button \n                      variant=\"contained\" \n                      startIcon={<Publish />} \n                      onClick={handleImportClick} \n                      sx={{ minWidth: '120px' }}\n                      disabled={!user?.organization_id}\n                    >\n                      Import\n                    </Button>\n                    <Button \n                      variant=\"contained\" \n                      startIcon={<GetApp />} \n                      onClick={handleExport} \n                      sx={{ minWidth: '120px' }}\n                      disabled={!user?.organization_id}\n                    >\n                      Export\n                    </Button>\n                    <Button \n                      variant=\"contained\" \n                      startIcon={<Print />} \n                      onClick={handlePrint} \n                      sx={{ minWidth: '120px' }}\n                      disabled={!user?.organization_id}\n                    >\n                      Print Stock\n                    </Button>\n                  </Stack>\n                </Grid>\n              </Grid>\n            </Paper>\n\n            <Box sx={{ \n              overflowY: 'auto', \n              maxHeight: 'calc(100vh - 200px)', /* Adjust based on header heights */\n              position: 'relative',\n              zIndex: 1\n            }}>\n              <TableContainer component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Product Name</TableCell>\n                      <TableCell>Quantity</TableCell>\n                      <TableCell>Unit Price</TableCell>\n                      <TableCell>Total Value</TableCell>\n                      <TableCell>Reorder Level</TableCell>\n                      <TableCell>Last Updated</TableCell>\n                      <TableCell>Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {stockData?.map((stock: any) => (\n                      <TableRow key={stock.id} sx={{ backgroundColor: stock.quantity <= stock.reorder_level ? 'yellow.main' : 'inherit' }}>\n                        <TableCell>{stock.product_name}</TableCell>\n                        <TableCell>{stock.quantity} {stock.unit}</TableCell>\n                        <TableCell>{stock.unit_price}</TableCell>\n                        <TableCell>{stock.total_value}</TableCell>\n                        <TableCell>{stock.reorder_level}</TableCell>\n                        <TableCell>{stock.last_updated}</TableCell>\n                        <TableCell>\n                          <IconButton onClick={() => alert(`Details: {stock.description}`)}>\n                            <Visibility />\n                          </IconButton>\n                          <IconButton onClick={() => handleEditStock(stock)}>\n                            <Edit />\n                          </IconButton>\n                          <IconButton onClick={(e) => handleMenuClick(e, stock.product_id)}>\n                            <MoreVert />\n                          </IconButton>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          </>\n        )}\n      </Container>\n\n      {/* Kebab Menu */}\n      <Menu\n        anchorEl={menuAnchorEl}\n        open={Boolean(menuAnchorEl)}\n        onClose={handleMenuClose}\n      >\n        <MuiMenuItem onClick={handleShowMovement}>\n          <ListItemIcon><HistoryIcon /></ListItemIcon>\n          <ListItemText>Show Movement</ListItemText>\n        </MuiMenuItem>\n        <MuiMenuItem onClick={handleCreatePurchaseOrder}>\n          <ListItemIcon><PurchaseIcon /></ListItemIcon>\n          <ListItemText>Create Purchase Order</ListItemText>\n        </MuiMenuItem>\n      </Menu>\n\n      {/* Movements Dialog */}\n      <Dialog open={movementsDialogOpen} onClose={() => setMovementsDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Stock Movements</DialogTitle>\n        <DialogContent>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Date</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Quantity</TableCell>\n                  <TableCell>Reference</TableCell>\n                  <TableCell>Notes</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {selectedMovements.map((movement) => (\n                  <TableRow key={movement.id}>\n                    <TableCell>{new Date(movement.transaction_date).toLocaleString()}</TableCell>\n                    <TableCell>{movement.transaction_type}</TableCell>\n                    <TableCell>{movement.quantity}</TableCell>\n                    <TableCell>{movement.reference_number || '-'}</TableCell>\n                    <TableCell>{movement.notes || '-'}</TableCell>\n                  </TableRow>\n                ))}\n                {selectedMovements.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={5} align=\"center\">No movements found</TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setMovementsDialogOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Edit Stock Dialog */}\n      <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)}>\n        <DialogTitle>Edit Stock</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Quantity\"\n            type=\"number\"\n            value={editFormData.quantity}\n            onChange={(e) => setEditFormData({ quantity: parseFloat(e.target.value) })}\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setEditDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleSaveEdit}>Save</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Manual Entry Dialog */}\n      <Dialog open={manualDialogOpen} onClose={() => setManualDialogOpen(false)}>\n        <DialogTitle>Manual Stock Entry</DialogTitle>\n        <DialogContent>\n          <FormControl fullWidth sx={{ mb: 2 }}>\n            <InputLabel>Product</InputLabel>\n            <Select\n              value={manualFormData.product_id}\n              onChange={(e) => {\n                const product = products.find((p: any) => p.id === e.target.value);\n                setManualFormData({ ...manualFormData, product_id: product.id, unit: product.unit });\n              }}\n            >\n              {products?.map((p: any) => (\n                <MenuItem key={p.id} value={p.id}>{p.product_name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <TextField\n            label=\"Quantity\"\n            type=\"number\"\n            value={manualFormData.quantity}\n            onChange={(e) => setManualFormData({ ...manualFormData, quantity: parseFloat(e.target.value) })}\n            fullWidth\n            sx={{ mb: 2 }}\n          />\n          <TextField\n            label=\"Unit\"\n            value={manualFormData.unit}\n            disabled\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setManualDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleSaveManual}>Save</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Import Mode Prompt Dialog */}\n      <Dialog open={importDialogOpen} onClose={() => setImportDialogOpen(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>Import Stock</DialogTitle>\n        <DialogContent>\n          <Typography>Existing stock found. Do you want to:</Typography>\n          <Grid container spacing={2} sx={{ mt: 2 }}>\n            <Grid size={{ xs: 6 }}>\n              <Button variant=\"contained\" color=\"primary\" fullWidth onClick={() => handleImportConfirm('replace')}>\n                Replace Stock\n              </Button>\n            </Grid>\n            <Grid size={{ xs: 6 }}>\n              <Button variant=\"contained\" color=\"primary\" fullWidth onClick={() => handleImportConfirm('add')}>\n                Add to Stock\n              </Button>\n            </Grid>\n          </Grid>\n          <Box sx={{ textAlign: 'center', mt: 2 }}>\n            <Button variant=\"text\" onClick={() => setImportDialogOpen(false)}>\n              Cancel\n            </Button>\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default StockManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/login.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Checkbox"},"fix":{"range":[121,133],"text":""},"desc":"Remove unused variable 'Checkbox'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[133,153],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[153,167],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[167,185],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[230,241],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VisibilityOff' is defined but never used.","line":15,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"VisibilityOff"},"fix":{"range":[240,255],"text":""},"desc":"Remove unused variable 'VisibilityOff'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":27,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[820,847],"text":""},"desc":"Remove unused variable 'router'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Typography, \n  Container,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  IconButton,\n  InputAdornment,\n  Divider\n} from '@mui/material';\nimport { Visibility, VisibilityOff, PlayArrow } from '@mui/icons-material';\nimport Image from 'next/image';\nimport { toast } from 'react-toastify';\nimport UnifiedLoginForm from '../components/UnifiedLoginForm';\nimport ForgotPasswordModal from '../components/ForgotPasswordModal';\nimport DemoModeDialog from '../components/DemoModeDialog';\nimport { useRouter } from 'next/router';\nimport { useAuth } from '../context/AuthContext';\n\nconst LoginPage: React.FC = () => {\n  const [forgotPasswordOpen, setForgotPasswordOpen] = useState(false);\n  const [demoModeOpen, setDemoModeOpen] = useState(false);\n  const router = useRouter();\n  const { login } = useAuth();\n\n  // Check if demo mode should be activated after login\n  useEffect(() => {\n    const pendingDemo = localStorage.getItem('pendingDemoMode');\n    if (pendingDemo === 'true') {\n      localStorage.removeItem('pendingDemoMode');\n      localStorage.setItem('demoMode', 'true');\n    }\n  }, []);\n\n  const handleLogin = async (token: string, loginResponse?: any) => {\n    console.log('[Login] Login successful, processing response:', {\n      hasToken: !!token,\n      hasLoginResponse: !!loginResponse,\n      organizationId: loginResponse?.organization_id,\n      userRole: loginResponse?.user_role,\n      mustChangePassword: loginResponse?.must_change_password,\n      isSuperAdmin: loginResponse?.user?.is_super_admin,\n      isDemoMode: loginResponse?.demo_mode,\n      timestamp: new Date().toISOString()\n    });\n\n    // Always save token to localStorage before anything else\n    if (token) {\n      localStorage.setItem('token', token);\n    }\n    \n    try {\n      console.log('[Login] Calling AuthContext login method to establish session');\n      // Use AuthContext login method to establish full context before navigation\n      await login(loginResponse);\n      \n      console.log('[Login] AuthContext login completed - session established');\n      console.log('[Login] Current localStorage state:', {\n        hasToken: !!localStorage.getItem('token'),\n        hasUserRole: !!localStorage.getItem('user_role'),\n        hasSuperAdminFlag: !!localStorage.getItem('is_super_admin'),\n        isDemoMode: !!localStorage.getItem('demoMode')\n      });\n      \n      // Check if this is demo mode\n      if (loginResponse?.demo_mode || localStorage.getItem('demoMode') === 'true') {\n        console.log('[Login] Demo mode activated - redirecting to demo page');\n        window.location.href = '/demo';\n        return;\n      }\n      \n      // Check if password change is required (not mandatory for OTP login)\n      if (loginResponse?.must_change_password && !loginResponse?.otp_login) {\n        console.log('[Login] Password change required - redirecting to password reset');\n        // Use hard reload to avoid SPA race condition - ensures token is present for AuthProvider's effect\n        window.location.href = '/password-reset';\n      } else {\n        console.log('[Login] Login complete - redirecting to dashboard');\n        // Use hard reload to avoid SPA race condition - ensures token is present for AuthProvider's effect\n        window.location.href = '/dashboard';\n      }\n    } catch (error) {\n      console.error('[Login] Failed to establish session:', error);\n      toast.error('Failed to establish secure session. Please try again.', {\n        position: \"top-right\",\n        autoClose: 5000,\n      });\n    }\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n      <Box sx={{ mt: 4, textAlign: 'center' }}>\n        <Image \n          src=\"/Tritiq.png\" \n          alt=\"TRITIQ ERP\" \n          width={300}\n          height={120}\n          style={{ maxWidth: '100%', height: 'auto', marginBottom: '16px' }}\n          priority\n        />\n        <Typography variant=\"h6\" component=\"h2\" gutterBottom color=\"textSecondary\">\n          Enterprise Resource Planning System\n        </Typography>\n\n        <Box sx={{ p: 3 }}>\n          <UnifiedLoginForm onLogin={handleLogin} />\n        </Box>\n\n        <Box sx={{ mt: 2 }}>\n          <Button\n            variant=\"text\"\n            color=\"primary\"\n            onClick={() => setForgotPasswordOpen(true)}\n          >\n            Forgot Password?\n          </Button>\n        </Box>\n\n        {/* Demo Mode Section */}\n        <Box sx={{ mt: 3, mb: 2 }}>\n          <Divider sx={{ mb: 2 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              OR\n            </Typography>\n          </Divider>\n          \n          <Button\n            variant=\"outlined\"\n            fullWidth\n            startIcon={<PlayArrow />}\n            onClick={() => setDemoModeOpen(true)}\n            sx={{\n              borderRadius: 2,\n              py: 1.5,\n              borderColor: 'primary.light',\n              '&:hover': {\n                borderColor: 'primary.main',\n                backgroundColor: 'primary.light',\n                color: 'primary.contrastText'\n              }\n            }}\n          >\n            Try Demo Mode\n          </Button>\n          \n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1, textAlign: 'center' }}>\n            Experience all features with sample data\n          </Typography>\n        </Box>\n      </Box>\n\n      {/* Forgot Password Modal */}\n      <ForgotPasswordModal\n        open={forgotPasswordOpen}\n        onClose={() => setForgotPasswordOpen(false)}\n        onSuccess={() => {\n          setForgotPasswordOpen(false);\n          // Show success message or redirect\n        }}\n      />\n\n      {/* Demo Mode Dialog */}\n      <DemoModeDialog\n        open={demoModeOpen}\n        onClose={() => setDemoModeOpen(false)}\n        onDemoStart={handleLogin}\n      />\n    </Container>\n  );\n};\n\nexport default LoginPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/mail/dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DateRange' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"DateRange"},"fix":{"range":[422,435],"text":""},"desc":"Remove unused variable 'DateRange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[521,531],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":163,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/mail/dashboard.tsx\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CircularProgress,\n  Alert,\n  Button,\n  Chip,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  Avatar,\n  Badge\n} from '@mui/material';\nimport {\n  Email,\n  Dashboard,\n  Inbox,\n  Send,\n  Drafts,\n  Flag,\n  Today,\n  DateRange,\n  AttachFile,\n  Person,\n  Add,\n  Sync,\n  MarkEmailRead,\n  MarkEmailUnread,\n  Archive,\n  Delete\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\n\ninterface MailStats {\n  total_emails: number;\n  unread_emails: number;\n  flagged_emails: number;\n  today_emails: number;\n  this_week_emails: number;\n  sent_emails: number;\n  draft_emails: number;\n  spam_emails: number;\n}\n\ninterface RecentEmail {\n  id: number;\n  subject: string;\n  from_address: string;\n  from_name?: string;\n  received_at: string;\n  is_unread: boolean;\n  is_flagged: boolean;\n  has_attachments: boolean;\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n}\n\ninterface EmailAccount {\n  id: number;\n  name: string;\n  email_address: string;\n  unread_count: number;\n  sync_status: 'success' | 'error' | 'syncing';\n  last_sync: string;\n}\n\nconst MailDashboard: React.FC = () => {\n  const router = useRouter();\n  const [stats, setStats] = useState<MailStats | null>(null);\n  const [recentEmails, setRecentEmails] = useState<RecentEmail[]>([]);\n  const [emailAccounts, setEmailAccounts] = useState<EmailAccount[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Simulate API call - replace with actual API integration\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        // TODO: Replace with actual API calls\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay\n        \n        // Mock data for demonstration\n        const mockStats: MailStats = {\n          total_emails: 1247,\n          unread_emails: 23,\n          flagged_emails: 8,\n          today_emails: 15,\n          this_week_emails: 67,\n          sent_emails: 145,\n          draft_emails: 3,\n          spam_emails: 12\n        };\n\n        const mockEmails: RecentEmail[] = [\n          {\n            id: 1,\n            subject: 'Q4 Budget Review Meeting',\n            from_address: 'john.doe@company.com',\n            from_name: 'John Doe',\n            received_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 minutes ago\n            is_unread: true,\n            is_flagged: false,\n            has_attachments: true,\n            priority: 'high'\n          },\n          {\n            id: 2,\n            subject: 'Project Status Update',\n            from_address: 'sarah.smith@company.com',\n            from_name: 'Sarah Smith',\n            received_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago\n            is_unread: true,\n            is_flagged: true,\n            has_attachments: false,\n            priority: 'normal'\n          },\n          {\n            id: 3,\n            subject: 'Welcome to TritiQ ERP',\n            from_address: 'support@tritiq.com',\n            from_name: 'TritiQ Support',\n            received_at: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), // 4 hours ago\n            is_unread: false,\n            is_flagged: false,\n            has_attachments: false,\n            priority: 'normal'\n          }\n        ];\n\n        const mockAccounts: EmailAccount[] = [\n          {\n            id: 1,\n            name: 'Work Email',\n            email_address: 'user@company.com',\n            unread_count: 18,\n            sync_status: 'success',\n            last_sync: new Date(Date.now() - 10 * 60 * 1000).toISOString()\n          },\n          {\n            id: 2,\n            name: 'Personal Gmail',\n            email_address: 'user@gmail.com',\n            unread_count: 5,\n            sync_status: 'success',\n            last_sync: new Date(Date.now() - 15 * 60 * 1000).toISOString()\n          }\n        ];\n        \n        setStats(mockStats);\n        setRecentEmails(mockEmails);\n        setEmailAccounts(mockAccounts);\n      } catch (err) {\n        setError('Failed to load mail dashboard data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleNavigate = (path: string) => {\n    router.push(path);\n  };\n\n  const formatTimeAgo = (dateTime: string) => {\n    const date = new Date(dateTime);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMins < 1) {return 'Just now';}\n    if (diffMins < 60) {return `${diffMins}m ago`;}\n    if (diffHours < 24) {return `${diffHours}h ago`;}\n    if (diffDays < 7) {return `${diffDays}d ago`;}\n    return date.toLocaleDateString();\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'error';\n      case 'high': return 'warning';\n      case 'normal': return 'default';\n      case 'low': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const getSyncStatusColor = (status: string) => {\n    switch (status) {\n      case 'success': return 'success';\n      case 'error': return 'error';\n      case 'syncing': return 'warning';\n      default: return 'default';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"info\">No mail data available</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <Box \n      sx={{ \n        p: 3,\n        opacity: 0,\n        animation: 'fadeInUp 0.6s ease-out forwards',\n        '@keyframes fadeInUp': {\n          from: { opacity: 0, transform: 'translateY(30px)' },\n          to: { opacity: 1, transform: 'translateY(0)' }\n        }\n      }}\n    >\n      {/* Header */}\n      <Box sx={{ \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center', \n        mb: 4,\n        pb: 2,\n        borderBottom: '1px solid',\n        borderColor: 'divider',\n        position: 'relative',\n        '&::after': {\n          content: '\"\"',\n          position: 'absolute',\n          bottom: '-1px',\n          left: 0,\n          width: '60px',\n          height: '3px',\n          background: 'linear-gradient(90deg, primary.main, primary.light)',\n          borderRadius: '2px',\n        }\n      }}>\n        <Typography \n          variant=\"h4\" \n          component=\"h1\" \n          sx={{ \n            display: 'flex', \n            alignItems: 'center', \n            gap: 1,\n            fontWeight: 'bold',\n            color: 'text.primary'\n          }}\n        >\n          <Dashboard color=\"primary\" />\n          Mail Dashboard\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Sync />}\n            onClick={() => handleNavigate('/mail/sync')}\n            sx={{\n              borderRadius: 2,\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                transform: 'translateY(-2px)',\n                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n              }\n            }}\n          >\n            Sync Mail\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={() => handleNavigate('/mail/compose')}\n          >\n            Compose\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Overview Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Emails\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {stats.total_emails.toLocaleString()}\n                  </Typography>\n                </Box>\n                <Email color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Unread\n                  </Typography>\n                  <Typography variant=\"h5\" color=\"warning.main\">\n                    {stats.unread_emails}\n                  </Typography>\n                </Box>\n                <Badge badgeContent={stats.unread_emails} color=\"warning\">\n                  <MarkEmailUnread color=\"warning\" sx={{ fontSize: 40 }} />\n                </Badge>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Flagged\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {stats.flagged_emails}\n                  </Typography>\n                </Box>\n                <Flag color=\"error\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Today's Emails\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {stats.today_emails}\n                  </Typography>\n                </Box>\n                <Today color=\"info\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Main Content */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={8}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Inbox color=\"primary\" />\n                Recent Emails\n              </Typography>\n              <List>\n                {recentEmails.map((email, index) => (\n                  <React.Fragment key={email.id}>\n                    <ListItem\n                      sx={{\n                        cursor: 'pointer',\n                        borderRadius: 1,\n                        backgroundColor: email.is_unread ? 'action.hover' : 'transparent',\n                        '&:hover': {\n                          backgroundColor: 'action.selected'\n                        }\n                      }}\n                      onClick={() => handleNavigate(`/mail/emails/${email.id}`)}\n                    >\n                      <ListItemIcon>\n                        <Avatar sx={{ bgcolor: 'primary.main', width: 32, height: 32 }}>\n                          {email.from_name ? email.from_name.charAt(0).toUpperCase() : <Person />}\n                        </Avatar>\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>\n                            <Typography \n                              variant=\"subtitle2\" \n                              sx={{ fontWeight: email.is_unread ? 'bold' : 'normal' }}\n                            >\n                              {email.subject}\n                            </Typography>\n                            {email.priority !== 'normal' && (\n                              <Chip\n                                label={email.priority}\n                                size=\"small\"\n                                color={getPriorityColor(email.priority) as any}\n                              />\n                            )}\n                            {email.is_flagged && <Flag color=\"error\" sx={{ fontSize: 16 }} />}\n                            {email.has_attachments && <AttachFile sx={{ fontSize: 16 }} />}\n                          </Box>\n                        }\n                        secondary={\n                          <Box>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                              From: {email.from_name || email.from_address}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"textSecondary\">\n                              {formatTimeAgo(email.received_at)}\n                            </Typography>\n                          </Box>\n                        }\n                      />\n                      <ListItemSecondaryAction>\n                        {email.is_unread ? (\n                          <MarkEmailUnread color=\"warning\" />\n                        ) : (\n                          <MarkEmailRead color=\"disabled\" />\n                        )}\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                    {index < recentEmails.length - 1 && <Divider />}\n                  </React.Fragment>\n                ))}\n              </List>\n              {recentEmails.length === 0 && (\n                <Box sx={{ textAlign: 'center', py: 4 }}>\n                  <Typography color=\"textSecondary\">No recent emails</Typography>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Add />}\n                    onClick={() => handleNavigate('/mail/accounts')}\n                    sx={{ mt: 2 }}\n                  >\n                    Setup Email Account\n                  </Button>\n                </Box>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Quick Actions\n                  </Typography>\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Inbox />}\n                      onClick={() => handleNavigate('/mail/inbox')}\n                      fullWidth\n                    >\n                      View Inbox\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Send />}\n                      onClick={() => handleNavigate('/mail/sent')}\n                      fullWidth\n                    >\n                      Sent Items\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Drafts />}\n                      onClick={() => handleNavigate('/mail/drafts')}\n                      fullWidth\n                    >\n                      Drafts ({stats.draft_emails})\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Archive />}\n                      onClick={() => handleNavigate('/mail/archived')}\n                      fullWidth\n                    >\n                      Archived\n                    </Button>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Email Accounts\n                  </Typography>\n                  <List dense>\n                    {emailAccounts.map((account) => (\n                      <ListItem\n                        key={account.id}\n                        sx={{\n                          borderRadius: 1,\n                          mb: 1,\n                          border: '1px solid',\n                          borderColor: 'divider'\n                        }}\n                      >\n                        <ListItemIcon>\n                          <Avatar sx={{ bgcolor: getSyncStatusColor(account.sync_status) + '.main', width: 32, height: 32 }}>\n                            <Email />\n                          </Avatar>\n                        </ListItemIcon>\n                        <ListItemText\n                          primary={account.name}\n                          secondary={\n                            <Box>\n                              <Typography variant=\"caption\" display=\"block\">\n                                {account.email_address}\n                              </Typography>\n                              <Typography variant=\"caption\" color=\"textSecondary\">\n                                Last sync: {formatTimeAgo(account.last_sync)}\n                              </Typography>\n                            </Box>\n                          }\n                        />\n                        <ListItemSecondaryAction>\n                          <Badge badgeContent={account.unread_count} color=\"warning\">\n                            <Inbox />\n                          </Badge>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                    ))}\n                  </List>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Add />}\n                    onClick={() => handleNavigate('/mail/accounts/create')}\n                    fullWidth\n                    sx={{ mt: 1 }}\n                  >\n                    Add Account\n                  </Button>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Mail Stats\n                  </Typography>\n                  <Box sx={{ mt: 2 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                      <Typography variant=\"body2\">Sent Emails</Typography>\n                      <Typography variant=\"body2\">{stats.sent_emails}</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                      <Typography variant=\"body2\">This Week</Typography>\n                      <Typography variant=\"body2\">{stats.this_week_emails}</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                      <Typography variant=\"body2\">Drafts</Typography>\n                      <Typography variant=\"body2\">{stats.draft_emails}</Typography>\n                    </Box>\n                    {stats.spam_emails > 0 && (\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                        <Typography variant=\"body2\" color=\"error\">Spam</Typography>\n                        <Typography variant=\"body2\" color=\"error\">{stats.spam_emails}</Typography>\n                      </Box>\n                    )}\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default MailDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/management/dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[39,50],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[224,235],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[313,322],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingDown"},"fix":{"range":[368,384],"text":""},"desc":"Remove unused variable 'TrendingDown'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 83 column 43.","line":129,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":129,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 83 column 43.","line":129,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":129,"endColumn":19}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Button,\n  CircularProgress,\n  Alert,\n  Chip,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Analytics,\n  AccountBalance,\n  People,\n  Inventory,\n  Assessment,\n  Download,\n  Refresh\n} from '@mui/icons-material';\nimport { useQuery } from '@tanstack/react-query';\nimport axios from 'axios';\n\ninterface DashboardData {\n  period: string;\n  date_range: {\n    start_date: string;\n    end_date: string;\n  };\n  revenue_metrics: {\n    total_revenue: number;\n    sales_count: number;\n    average_sale_value: number;\n  };\n  cost_metrics: {\n    total_costs: number;\n    purchase_count: number;\n    average_purchase_value: number;\n  };\n  profitability: {\n    gross_profit: number;\n    profit_margin: number;\n  };\n  customer_metrics: {\n    total_active_customers: number;\n    new_customers: number;\n    customer_growth_rate: number;\n  };\n  inventory_metrics: {\n    total_products: number;\n    low_stock_items: number;\n    stock_health_percentage: number;\n  };\n  cash_flow: {\n    pending_receivables: number;\n    pending_payables: number;\n    net_outstanding: number;\n  };\n}\n\nconst ManagementDashboard: React.FC = () => {\n  const [period, setPeriod] = useState<string>('month');\n  const [refreshKey, setRefreshKey] = useState<number>(0);\n\n  // Fetch dashboard data\n  const { data: dashboardData, isLoading, error, refetch } = useQuery<DashboardData>({\n    queryKey: ['management-dashboard', period, refreshKey],\n    queryFn: async () => {\n      const response = await axios.get(\n        `/api/v1/management-reports/executive-dashboard?period=${period}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          },\n        }\n      );\n      return response.data;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const handlePeriodChange = (event: any) => {\n    setPeriod(event.target.value);\n  };\n\n  const handleRefresh = () => {\n    setRefreshKey(prev => prev + 1);\n    refetch();\n  };\n\n  const handleExportExcel = async () => {\n    try {\n      const response = await axios.get(\n        `/api/v1/management-reports/export/executive-dashboard?format=excel&period=${period}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          },\n          responseType: 'blob',\n        }\n      );\n      \n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `executive_dashboard_${period}.xlsx`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  const formatCurrency = (value: number): string => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const formatPercentage = (value: number): string => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const MetricCard: React.FC<{\n    title: string;\n    value: string | number;\n    icon: React.ReactNode;\n    color: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\n    subtitle?: string;\n  }> = ({ title, value, icon, color, subtitle }) => (\n    <Card sx={{ height: '100%' }}>\n      <CardContent>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Box>\n            <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\n              {title}\n            </Typography>\n            <Typography variant=\"h5\" component=\"div\">\n              {value}\n            </Typography>\n            {subtitle && (\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {subtitle}\n              </Typography>\n            )}\n          </Box>\n          <Box color={`${color}.main`}>\n            {icon}\n          </Box>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\">\n        Failed to load management dashboard. Please check your permissions and try again.\n      </Alert>\n    );\n  }\n\n  if (!dashboardData) {\n    return (\n      <Alert severity=\"info\">\n        No dashboard data available for the selected period.\n      </Alert>\n    );\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1, p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Executive Management Dashboard\n        </Typography>\n        <Box display=\"flex\" gap={2} alignItems=\"center\">\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel>Period</InputLabel>\n            <Select value={period} label=\"Period\" onChange={handlePeriodChange}>\n              <MenuItem value=\"day\">Today</MenuItem>\n              <MenuItem value=\"week\">This Week</MenuItem>\n              <MenuItem value=\"month\">This Month</MenuItem>\n              <MenuItem value=\"quarter\">This Quarter</MenuItem>\n              <MenuItem value=\"year\">This Year</MenuItem>\n            </Select>\n          </FormControl>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Refresh />}\n            onClick={handleRefresh}\n            size=\"small\"\n          >\n            Refresh\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<Download />}\n            onClick={handleExportExcel}\n            size=\"small\"\n          >\n            Export Excel\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Date Range */}\n      <Typography variant=\"body2\" color=\"textSecondary\" mb={3}>\n        Reporting Period: {dashboardData.date_range.start_date} to {dashboardData.date_range.end_date}\n      </Typography>\n\n      {/* Revenue Metrics */}\n      <Typography variant=\"h6\" gutterBottom>\n        Revenue & Sales Performance\n      </Typography>\n      <Grid container spacing={3} mb={4}>\n        <Grid item xs={12} sm={6} md={4}>\n          <MetricCard\n            title=\"Total Revenue\"\n            value={formatCurrency(dashboardData.revenue_metrics.total_revenue)}\n            icon={<TrendingUp fontSize=\"large\" />}\n            color=\"success\"\n            subtitle={`${dashboardData.revenue_metrics.sales_count} sales`}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={4}>\n          <MetricCard\n            title=\"Average Sale Value\"\n            value={formatCurrency(dashboardData.revenue_metrics.average_sale_value)}\n            icon={<AccountBalance fontSize=\"large\" />}\n            color=\"primary\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={4}>\n          <MetricCard\n            title=\"Gross Profit\"\n            value={formatCurrency(dashboardData.profitability.gross_profit)}\n            icon={<Analytics fontSize=\"large\" />}\n            color={dashboardData.profitability.gross_profit >= 0 ? 'success' : 'error'}\n            subtitle={`${formatPercentage(dashboardData.profitability.profit_margin)} margin`}\n          />\n        </Grid>\n      </Grid>\n\n      {/* Customer & Growth Metrics */}\n      <Typography variant=\"h6\" gutterBottom>\n        Customer & Growth Metrics\n      </Typography>\n      <Grid container spacing={3} mb={4}>\n        <Grid item xs={12} sm={6} md={4}>\n          <MetricCard\n            title=\"Active Customers\"\n            value={dashboardData.customer_metrics.total_active_customers.toLocaleString()}\n            icon={<People fontSize=\"large\" />}\n            color=\"info\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={4}>\n          <MetricCard\n            title=\"New Customers\"\n            value={dashboardData.customer_metrics.new_customers.toLocaleString()}\n            icon={<TrendingUp fontSize=\"large\" />}\n            color=\"success\"\n            subtitle={`${formatPercentage(dashboardData.customer_metrics.customer_growth_rate)} growth`}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={4}>\n          <MetricCard\n            title=\"Stock Health\"\n            value={formatPercentage(dashboardData.inventory_metrics.stock_health_percentage)}\n            icon={<Inventory fontSize=\"large\" />}\n            color={dashboardData.inventory_metrics.stock_health_percentage >= 80 ? 'success' : 'warning'}\n            subtitle={`${dashboardData.inventory_metrics.low_stock_items} low stock items`}\n          />\n        </Grid>\n      </Grid>\n\n      {/* Cash Flow Analysis */}\n      <Typography variant=\"h6\" gutterBottom>\n        Cash Flow Analysis\n      </Typography>\n      <Grid container spacing={3} mb={4}>\n        <Grid item xs={12} md={8}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Outstanding Amounts\n              </Typography>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Type</TableCell>\n                      <TableCell align=\"right\">Amount</TableCell>\n                      <TableCell align=\"center\">Status</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    <TableRow>\n                      <TableCell>Pending Receivables</TableCell>\n                      <TableCell align=\"right\">\n                        {formatCurrency(dashboardData.cash_flow.pending_receivables)}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        <Chip \n                          label=\"To Receive\" \n                          color=\"success\" \n                          size=\"small\" \n                        />\n                      </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell>Pending Payables</TableCell>\n                      <TableCell align=\"right\">\n                        {formatCurrency(dashboardData.cash_flow.pending_payables)}\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        <Chip \n                          label=\"To Pay\" \n                          color=\"warning\" \n                          size=\"small\" \n                        />\n                      </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell><strong>Net Position</strong></TableCell>\n                      <TableCell align=\"right\">\n                        <strong>\n                          {formatCurrency(dashboardData.cash_flow.net_outstanding)}\n                        </strong>\n                      </TableCell>\n                      <TableCell align=\"center\">\n                        <Chip\n                          label={dashboardData.cash_flow.net_outstanding >= 0 ? \"Positive\" : \"Negative\"}\n                          color={dashboardData.cash_flow.net_outstanding >= 0 ? \"success\" : \"error\"}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <Card sx={{ height: '100%' }}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Quick Actions\n              </Typography>\n              <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<Assessment />}\n                  fullWidth\n                  onClick={() => window.location.href = '/reports'}\n                >\n                  View Detailed Reports\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<Analytics />}\n                  fullWidth\n                  onClick={() => window.location.href = '/analytics'}\n                >\n                  Business Intelligence\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<People />}\n                  fullWidth\n                  onClick={() => window.location.href = '/customers'}\n                >\n                  Customer Management\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Summary Statistics */}\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Period Summary\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\">\n                <Typography variant=\"h4\" color=\"primary\">\n                  {dashboardData.revenue_metrics.sales_count}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  Total Sales\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\">\n                <Typography variant=\"h4\" color=\"secondary\">\n                  {dashboardData.cost_metrics.purchase_count}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  Total Purchases\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\">\n                <Typography variant=\"h4\" color=\"success.main\">\n                  {dashboardData.customer_metrics.new_customers}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  New Customers\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\">\n                <Typography variant=\"h4\" color=\"warning.main\">\n                  {dashboardData.inventory_metrics.low_stock_items}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  Low Stock Alerts\n                </Typography>\n              </Box>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default ManagementDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/marketing/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Container' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Container"},"fix":{"range":[123,136],"text":""},"desc":"Remove unused variable 'Container'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CircularProgress' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"CircularProgress"},"fix":{"range":[178,198],"text":""},"desc":"Remove unused variable 'CircularProgress'."}]},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":58,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'TabPanel' is defined but never used.","line":65,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"TabPanel"},"fix":{"range":[1291,1733],"text":""},"desc":"Remove unused variable 'TabPanel'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":85,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":85,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":86,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1784,1811],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":91,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[2074,2081],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadMarketingData' was used before it was defined.","line":98,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":98,"endColumn":22}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/marketing/index.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Container,\n  Button,\n  Paper,\n  Grid,\n  Tabs,\n  Tab,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Chip,\n  TextField,\n  InputAdornment,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  LinearProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  Campaign as CampaignIcon,\n  LocalOffer as LocalOfferIcon,\n  TrendingUp as TrendingUpIcon,\n  AttachMoney as AttachMoneyIcon,\n  Email as EmailIcon,\n  Analytics as AnalyticsIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../../context/AuthContext';\nimport { marketingService, Campaign, Promotion, MarketingAnalytics } from '../../services/marketingService';\n\nconst campaignStatusColors: Record<string, string> = {\n  draft: 'default',\n  scheduled: 'info',\n  active: 'success',\n  paused: 'warning',\n  completed: 'primary',\n  cancelled: 'error',\n};\n\nconst campaignTypeIcons: Record<string, JSX.Element> = {\n  email: <EmailIcon />,\n  sms: <CampaignIcon />,\n  social_media: <AnalyticsIcon />,\n  digital_ads: <TrendingUpIcon />,\n};\n\nfunction TabPanel(props: { children?: React.ReactNode; index: number; value: number }) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport default function MarketingDashboard() {\n  const { user } = useAuth();\n  const [tabValue, setTabValue] = useState(0);\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [promotions, setPromotions] = useState<Promotion[]>([]);\n  const [analytics, setAnalytics] = useState<MarketingAnalytics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [openCampaignDialog, setOpenCampaignDialog] = useState(false);\n  const [openPromotionDialog, setOpenPromotionDialog] = useState(false);\n\n  useEffect(() => {\n    loadMarketingData();\n  }, []);\n\n  const loadMarketingData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const [campaignsData, promotionsData, analyticsData] = await Promise.all([\n        marketingService.getCampaigns(),\n        marketingService.getPromotions(),\n        marketingService.getAnalytics()\n      ]);\n\n      setCampaigns(campaignsData);\n      setPromotions(promotionsData);\n      setAnalytics(analyticsData);\n\n    } catch (err: any) {\n      console.error('Error loading marketing data:', err);\n      setError(err.userMessage || 'Failed to load marketing data');\n      \n      // Fallback to empty data to prevent crashes\n      setCampaigns([]);\n      setPromotions([]);\n      setAnalytics({\n        total_campaigns: 0,\n        active_campaigns: 0,\n        total_promotions: 0,\n        active_promotions: 0,\n        campaign_roi: 0,\n        promotion_redemption_rate: 0,\n        email_open_rate: 0,\n        click_through_rate: 0,\n        conversion_rate: 0,\n        customer_acquisition_cost: 0,\n        lifetime_value: 0,\n        revenue_from_campaigns: 0,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredCampaigns = campaigns.filter(\n    (campaign) =>\n      campaign.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      campaign.campaign_number.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const filteredPromotions = promotions.filter(\n    (promotion) =>\n      promotion.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      promotion.promotion_code.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const renderAnalyticsCards = () => {\n    if (!analytics) {return null;}\n\n    return (\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <CampaignIcon color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Campaigns\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {analytics?.total_campaigns || 0}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {analytics?.active_campaigns || 0} active\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <EmailIcon color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Contacts\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {(analytics?.total_promotions || 0).toLocaleString()}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {analytics?.email_open_rate || 0}% avg open rate\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <AttachMoneyIcon color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Marketing Revenue\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    ${(analytics?.revenue_from_campaigns || 0).toLocaleString()}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    ${(analytics?.customer_acquisition_cost || 0).toLocaleString()} spent\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <TrendingUpIcon color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Marketing ROI\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {analytics?.campaign_roi || 0}%\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {analytics?.conversion_rate || 0}% conversion rate\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderCampaignsTable = () => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Campaign #</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Type</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Performance</TableCell>\n            <TableCell>Budget</TableCell>\n            <TableCell>Revenue</TableCell>\n            <TableCell>ROI</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {filteredCampaigns.map((campaign) => {\n            const openRate = campaign.delivered_count > 0 ? (campaign.opened_count / campaign.delivered_count) * 100 : 0;\n            const conversionRate = campaign.delivered_count > 0 ? (campaign.converted_count / campaign.delivered_count) * 100 : 0;\n            const roi = campaign.budget ? ((campaign.revenue_generated - campaign.budget) / campaign.budget) * 100 : 0;\n\n            return (\n              <TableRow key={campaign.id} hover>\n                <TableCell>{campaign.campaign_number}</TableCell>\n                <TableCell>{campaign.name}</TableCell>\n                <TableCell>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    {campaignTypeIcons[campaign.campaign_type] || <CampaignIcon />}\n                    <Typography sx={{ ml: 1, textTransform: 'capitalize' }}>\n                      {campaign.campaign_type.replace('_', ' ')}\n                    </Typography>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Chip\n                    label={campaign.status}\n                    color={campaignStatusColors[campaign.status] as any}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <Box sx={{ minWidth: 120 }}>\n                    <Typography variant=\"body2\">\n                      {openRate.toFixed(1)}% open | {conversionRate.toFixed(1)}% conv\n                    </Typography>\n                    <LinearProgress \n                      variant=\"determinate\" \n                      value={Math.min(openRate, 100)} \n                      sx={{ mt: 0.5 }}\n                    />\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  {campaign.budget ? `$${campaign.budget.toLocaleString()}` : '-'}\n                </TableCell>\n                <TableCell>${campaign.revenue_generated.toLocaleString()}</TableCell>\n                <TableCell>\n                  <Typography color={roi > 0 ? 'success.main' : 'error.main'}>\n                    {roi.toFixed(1)}%\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  const renderPromotionsTable = () => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Code</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Type</TableCell>\n            <TableCell>Discount</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Redemptions</TableCell>\n            <TableCell>Total Discount</TableCell>\n            <TableCell>Valid Until</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {filteredPromotions.map((promotion) => (\n            <TableRow key={promotion.id} hover>\n              <TableCell>\n                <Typography variant=\"body2\" component=\"code\">\n                  {promotion.promotion_code}\n                </Typography>\n              </TableCell>\n              <TableCell>{promotion.name}</TableCell>\n              <TableCell>\n                <Typography sx={{ textTransform: 'capitalize' }}>\n                  {promotion.promotion_type.replace('_', ' ')}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                {promotion.discount_percentage \n                  ? `${promotion.discount_percentage}%` \n                  : `$${promotion.discount_amount}`}\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={promotion.is_active ? 'Active' : 'Inactive'}\n                  color={promotion.is_active ? 'success' : 'default'}\n                  size=\"small\"\n                />\n              </TableCell>\n              <TableCell>{promotion.total_redemptions}</TableCell>\n              <TableCell>${promotion.total_discount_given.toLocaleString()}</TableCell>\n              <TableCell>\n                {promotion.valid_until \n                  ? new Date(promotion.valid_until).toLocaleDateString()\n                  : 'No expiry'}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Marketing Dashboard\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenCampaignDialog(true)}\n          >\n            Create Campaign\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<LocalOfferIcon />}\n            onClick={() => setOpenPromotionDialog(true)}\n          >\n            Add Promotion\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Error Alert */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n          <Button size=\"small\" onClick={loadMarketingData} sx={{ ml: 1 }}>\n            Retry\n          </Button>\n        </Alert>\n      )}\n\n      {renderAnalyticsCards()}\n\n      <Card>\n        <CardContent>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n            <Tabs value={tabValue} onChange={(_, newValue) => setTabValue(newValue)}>\n              <Tab label=\"Campaigns\" />\n              <Tab label=\"Promotions\" />\n            </Tabs>\n          </Box>\n\n          <Box sx={{ mb: 2 }}>\n            <TextField\n              placeholder=\"Search...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n              sx={{ maxWidth: 300 }}\n            />\n          </Box>\n\n          {tabValue === 0 && renderCampaignsTable()}\n          {tabValue === 1 && renderPromotionsTable()}\n        </CardContent>\n      </Card>\n\n      {/* Create Campaign Dialog - Placeholder */}\n      <Dialog\n        open={openCampaignDialog}\n        onClose={() => setOpenCampaignDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Create New Campaign</DialogTitle>\n        <DialogContent>\n          <Box sx={{ pt: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Campaign Name\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Campaign Type</InputLabel>\n                  <Select defaultValue=\"email\">\n                    <MenuItem value=\"email\">Email</MenuItem>\n                    <MenuItem value=\"sms\">SMS</MenuItem>\n                    <MenuItem value=\"social_media\">Social Media</MenuItem>\n                    <MenuItem value=\"digital_ads\">Digital Ads</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Budget\"\n                  type=\"number\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Start Date\"\n                  type=\"date\"\n                  fullWidth\n                  InputLabelProps={{ shrink: true }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"End Date\"\n                  type=\"date\"\n                  fullWidth\n                  InputLabelProps={{ shrink: true }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Description\"\n                  multiline\n                  rows={3}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenCampaignDialog(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setOpenCampaignDialog(false)}>\n            Create Campaign\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Add Promotion Dialog - Placeholder */}\n      <Dialog\n        open={openPromotionDialog}\n        onClose={() => setOpenPromotionDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Add New Promotion</DialogTitle>\n        <DialogContent>\n          <Box sx={{ pt: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Promotion Code\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Promotion Name\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Promotion Type</InputLabel>\n                  <Select defaultValue=\"percentage_discount\">\n                    <MenuItem value=\"percentage_discount\">Percentage Discount</MenuItem>\n                    <MenuItem value=\"fixed_amount_discount\">Fixed Amount Discount</MenuItem>\n                    <MenuItem value=\"buy_x_get_y\">Buy X Get Y</MenuItem>\n                    <MenuItem value=\"free_shipping\">Free Shipping</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Discount Value\"\n                  type=\"number\"\n                  fullWidth\n                  helperText=\"Percentage or fixed amount\"\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Valid From\"\n                  type=\"date\"\n                  fullWidth\n                  InputLabelProps={{ shrink: true }}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Valid Until\"\n                  type=\"date\"\n                  fullWidth\n                  InputLabelProps={{ shrink: true }}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenPromotionDialog(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setOpenPromotionDialog(false)}>\n            Create Promotion\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/bom.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'mode' is assigned a value but never used.","line":35,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"mode"},"fix":{"range":[656,660],"text":""},"desc":"Remove unused variable 'mode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'newBOM' is defined but never used.","line":83,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"newBOM"},"fix":{"range":[1999,2010],"text":""},"desc":"Remove unused variable 'newBOM'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/masters/bom.tsx\n\nimport React, { useState } from 'react';\nimport { \n  Box, \n  Button, \n  Typography, \n  Container, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper, \n  IconButton,\n  CircularProgress,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Chip\n} from '@mui/material';\nimport { \n  Add, \n  Visibility, \n  Edit, \n  Delete \n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../../lib/api';\nimport AddBOMModal from '../../components/AddBOMModal';\n\nconst BOMManagement: React.FC = () => {\n  const [mode, setMode] = useState<'list' | 'view'>('list');\n  const [selectedBOM, setSelectedBOM] = useState<any>(null);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editMode, setEditMode] = useState<'create' | 'edit'>('create');\n  const queryClient = useQueryClient();\n\n  // Fetch BOMs\n  const { data: bomList, isLoading: isLoadingBOMs } = useQuery({\n    queryKey: ['boms'],\n    queryFn: () => api.get('/bom').then(res => res.data),\n  });\n\n  // Delete BOM mutation\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/bom/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['boms'] });\n      setShowDeleteDialog(false);\n      setSelectedBOM(null);\n    },\n    onError: (error: any) => {\n      console.error('Error deleting BOM:', error);\n    }\n  });\n\n  const handleView = (bom: any) => {\n    setSelectedBOM(bom);\n    setMode('view');\n  };\n\n  const handleEdit = (bom: any) => {\n    setSelectedBOM(bom);\n    setEditMode('edit');\n    setShowAddModal(true);\n  };\n\n  const handleDelete = (bom: any) => {\n    setSelectedBOM(bom);\n    setShowDeleteDialog(true);\n  };\n\n  const confirmDelete = () => {\n    if (selectedBOM?.id) {\n      deleteMutation.mutate(selectedBOM.id);\n    }\n  };\n\n  const handleAddBOM = (newBOM: any) => {\n    setShowAddModal(false);\n    setSelectedBOM(null);\n  };\n\n  const handleCreate = () => {\n    setEditMode('create');\n    setShowAddModal(true);\n  };\n\n  if (isLoadingBOMs) {\n    return <CircularProgress />;\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\">Bill of Materials (BOM)</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleCreate}\n          >\n            Create BOM\n          </Button>\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>BOM Name</TableCell>\n                <TableCell>Version</TableCell>\n                <TableCell>Output Item</TableCell>\n                <TableCell>Output Qty</TableCell>\n                <TableCell>Total Cost</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {bomList?.map((bom: any) => (\n                <TableRow key={bom.id}>\n                  <TableCell>{bom.bom_name}</TableCell>\n                  <TableCell>{bom.version}</TableCell>\n                  <TableCell>{bom.output_item?.product_name || 'Unknown'}</TableCell>\n                  <TableCell>{bom.output_quantity}</TableCell>\n                  <TableCell>{bom.total_cost.toFixed(2)}</TableCell>\n                  <TableCell>\n                    <Chip \n                      label={bom.is_active ? 'Active' : 'Inactive'} \n                      color={bom.is_active ? 'success' : 'default'}\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <IconButton onClick={() => handleView(bom)} size=\"small\">\n                      <Visibility />\n                    </IconButton>\n                    <IconButton onClick={() => handleEdit(bom)} size=\"small\">\n                      <Edit />\n                    </IconButton>\n                    <IconButton onClick={() => handleDelete(bom)} size=\"small\" color=\"error\">\n                      <Delete />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={showDeleteDialog} onClose={() => setShowDeleteDialog(false)}>\n        <DialogTitle>Confirm Delete</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete the BOM \"{selectedBOM?.bom_name}\"?\n            This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowDeleteDialog(false)}>Cancel</Button>\n          <Button onClick={confirmDelete} color=\"error\" variant=\"contained\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Add/Edit BOM Modal */}\n      <AddBOMModal\n        open={showAddModal}\n        onClose={() => setShowAddModal(false)}\n        onAdd={handleAddBOM}\n        initialData={editMode === 'edit' ? selectedBOM : undefined}\n        mode={editMode}\n      />\n    </Container>\n  );\n};\n\nexport default BOMManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/categories.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":41,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[572,599],"text":""},"desc":"Remove unused variable 'router'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Search,\n  Category,\n  Inventory\n} from '@mui/icons-material';\n\nconst CategoriesPage: React.FC = () => {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [addDialog, setAddDialog] = useState(false);\n  const [editDialog, setEditDialog] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    parent_category_id: '',\n    is_active: true\n  });\n\n  // Mock data for demonstration\n  const categories = [\n    {\n      id: 1,\n      name: 'Electronics',\n      description: 'Electronic components and devices',\n      parent_category: null,\n      product_count: 25,\n      is_active: true\n    },\n    {\n      id: 2,\n      name: 'Components',\n      description: 'Electronic components',\n      parent_category: 'Electronics',\n      parent_category_id: 1,\n      product_count: 15,\n      is_active: true\n    },\n    {\n      id: 3,\n      name: 'Cables',\n      description: 'Various types of cables',\n      parent_category: 'Electronics',\n      parent_category_id: 1,\n      product_count: 8,\n      is_active: true\n    },\n    {\n      id: 4,\n      name: 'Hardware',\n      description: 'Hardware items and tools',\n      parent_category: null,\n      product_count: 12,\n      is_active: true\n    }\n  ];\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      parent_category_id: '',\n      is_active: true\n    });\n  };\n\n  const handleAddClick = () => {\n    resetForm();\n    setAddDialog(true);\n  };\n\n  const handleEditClick = (category: any) => {\n    setSelectedCategory(category);\n    setFormData({\n      name: category.name || '',\n      description: category.description || '',\n      parent_category_id: category.parent_category_id || '',\n      is_active: category.is_active\n    });\n    setEditDialog(true);\n  };\n\n  const handleSubmit = () => {\n    if (selectedCategory) {\n      // TODO: Implement update functionality\n      console.log('Update category:', selectedCategory.id, formData);\n    } else {\n      // TODO: Implement create functionality\n      console.log('Create category:', formData);\n    }\n    setAddDialog(false);\n    setEditDialog(false);\n  };\n\n  const handleDeleteClick = (category: any) => {\n    // TODO: Implement delete functionality\n    console.log('Delete category:', category.id);\n  };\n\n  const filteredCategories = categories.filter((category: any) =>\n    category.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    category.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Get parent categories for dropdown\n  const parentCategories = categories.filter(cat => !cat.parent_category_id);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Categories\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleAddClick}\n          >\n            Add Category\n          </Button>\n        </Box>\n\n        {/* Info Alert */}\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          Categories help organize your products for better inventory management and reporting.\n          You can create hierarchical categories with parent-child relationships.\n        </Alert>\n\n        {/* Stats Cards */}\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Total Categories\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {categories.length}\n                    </Typography>\n                  </Box>\n                  <Category sx={{ fontSize: 40, color: 'primary.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Active Categories\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {categories.filter(cat => cat.is_active).length}\n                    </Typography>\n                  </Box>\n                  <Category sx={{ fontSize: 40, color: 'success.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Parent Categories\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {parentCategories.length}\n                    </Typography>\n                  </Box>\n                  <Category sx={{ fontSize: 40, color: 'warning.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Total Products\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {categories.reduce((sum, cat) => sum + cat.product_count, 0)}\n                    </Typography>\n                  </Box>\n                  <Inventory sx={{ fontSize: 40, color: 'info.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mb: 3 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search categories by name or description...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\n            }}\n          />\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Category Name</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Parent Category</TableCell>\n                <TableCell>Product Count</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredCategories.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} align=\"center\">\n                    <Box sx={{ py: 3 }}>\n                      <Category sx={{ fontSize: 48, color: 'action.disabled', mb: 2 }} />\n                      <Typography variant=\"h6\" color=\"textSecondary\">\n                        No categories found\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Add your first category to organize your products\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredCategories.map((category: any) => (\n                  <TableRow key={category.id}>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Category sx={{ mr: 2, color: 'primary.main' }} />\n                        <Typography variant=\"body1\" fontWeight=\"medium\">\n                          {category.name}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{category.description || 'N/A'}</TableCell>\n                    <TableCell>\n                      {category.parent_category ? (\n                        <Chip\n                          label={category.parent_category}\n                          size=\"small\"\n                          variant=\"outlined\"\n                        />\n                      ) : (\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          Root Category\n                        </Typography>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={category.product_count}\n                        size=\"small\"\n                        color=\"info\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={category.is_active ? 'Active' : 'Inactive'}\n                        color={category.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" color=\"primary\" onClick={() => handleEditClick(category)}>\n                        <Edit />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"error\" onClick={() => handleDeleteClick(category)}>\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {/* Add/Edit Category Dialog */}\n        <Dialog \n          open={addDialog || editDialog} \n          onClose={() => { setAddDialog(false); setEditDialog(false); }}\n          maxWidth=\"sm\" \n          fullWidth\n        >\n          <DialogTitle>\n            {selectedCategory ? 'Edit Category' : 'Add New Category'}\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Category Name *\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Description\"\n                  multiline\n                  rows={3}\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <InputLabel>Parent Category</InputLabel>\n                  <Select\n                    value={formData.parent_category_id}\n                    label=\"Parent Category\"\n                    onChange={(e) => setFormData(prev => ({ ...prev, parent_category_id: e.target.value }))}\n                  >\n                    <MenuItem value=\"\">\n                      <em>None (Root Category)</em>\n                    </MenuItem>\n                    {parentCategories.map((category) => (\n                      <MenuItem key={category.id} value={category.id}>\n                        {category.name}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => { setAddDialog(false); setEditDialog(false); }}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit} variant=\"contained\">\n              {selectedCategory ? 'Update' : 'Create'}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Container>\n  );\n};\n\nexport default CategoriesPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/chart-of-accounts.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":41,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[585,612],"text":""},"desc":"Remove unused variable 'router'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Search,\n  AccountBalance,\n  AccountTree\n} from '@mui/icons-material';\n\nconst ChartOfAccountsPage: React.FC = () => {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [addDialog, setAddDialog] = useState(false);\n  const [editDialog, setEditDialog] = useState(false);\n  const [selectedAccount, setSelectedAccount] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    account_code: '',\n    account_name: '',\n    account_type: 'asset',\n    parent_account: '',\n    description: '',\n    is_active: true\n  });\n\n  // Mock data for demonstration\n  const accounts = [\n    {\n      id: 1,\n      account_code: '1000',\n      account_name: 'Cash',\n      account_type: 'asset',\n      parent_account: null,\n      balance: 50000,\n      is_active: true\n    },\n    {\n      id: 2,\n      account_code: '1100',\n      account_name: 'Accounts Receivable',\n      account_type: 'asset',\n      parent_account: null,\n      balance: 25000,\n      is_active: true\n    },\n    {\n      id: 3,\n      account_code: '2000',\n      account_name: 'Accounts Payable',\n      account_type: 'liability',\n      parent_account: null,\n      balance: 15000,\n      is_active: true\n    },\n    {\n      id: 4,\n      account_code: '3000',\n      account_name: 'Capital',\n      account_type: 'equity',\n      parent_account: null,\n      balance: 100000,\n      is_active: true\n    },\n    {\n      id: 5,\n      account_code: '4000',\n      account_name: 'Sales Revenue',\n      account_type: 'revenue',\n      parent_account: null,\n      balance: 75000,\n      is_active: true\n    },\n    {\n      id: 6,\n      account_code: '5000',\n      account_name: 'Cost of Goods Sold',\n      account_type: 'expense',\n      parent_account: null,\n      balance: 30000,\n      is_active: true\n    }\n  ];\n\n  const accountTypes = [\n    { value: 'asset', label: 'Asset', color: 'success' },\n    { value: 'liability', label: 'Liability', color: 'error' },\n    { value: 'equity', label: 'Equity', color: 'primary' },\n    { value: 'revenue', label: 'Revenue', color: 'info' },\n    { value: 'expense', label: 'Expense', color: 'warning' }\n  ];\n\n  const resetForm = () => {\n    setFormData({\n      account_code: '',\n      account_name: '',\n      account_type: 'asset',\n      parent_account: '',\n      description: '',\n      is_active: true\n    });\n  };\n\n  const handleAddClick = () => {\n    resetForm();\n    setAddDialog(true);\n  };\n\n  const handleEditClick = (account: any) => {\n    setSelectedAccount(account);\n    setFormData({\n      account_code: account.account_code || '',\n      account_name: account.account_name || '',\n      account_type: account.account_type || 'asset',\n      parent_account: account.parent_account || '',\n      description: account.description || '',\n      is_active: account.is_active\n    });\n    setEditDialog(true);\n  };\n\n  const handleSubmit = () => {\n    if (selectedAccount) {\n      // TODO: Implement update functionality\n      console.log('Update account:', selectedAccount.id, formData);\n    } else {\n      // TODO: Implement create functionality\n      console.log('Create account:', formData);\n    }\n    setAddDialog(false);\n    setEditDialog(false);\n  };\n\n  const handleDeleteClick = (account: any) => {\n    // TODO: Implement delete functionality\n    console.log('Delete account:', account.id);\n  };\n\n  const filteredAccounts = accounts.filter((account: any) =>\n    account.account_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    account.account_code?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    account.account_type?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getAccountTypeColor = (type: string) => {\n    const accountType = accountTypes.find(t => t.value === type);\n    return accountType?.color || 'default';\n  };\n\n  const getTotalByType = (type: string) => {\n    return accounts\n      .filter(account => account.account_type === type)\n      .reduce((sum, account) => sum + account.balance, 0);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Chart of Accounts\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleAddClick}\n          >\n            Add Account\n          </Button>\n        </Box>\n\n        {/* Info Alert */}\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          The Chart of Accounts is the foundation of your financial system. It categorizes all \n          financial transactions and helps generate accurate financial reports.\n        </Alert>\n\n        {/* Account Type Summary Cards */}\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          {accountTypes.map((type) => (\n            <Grid item xs={12} sm={6} md={2.4} key={type.value}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                    <Box>\n                      <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\n                        {type.label}\n                      </Typography>\n                      <Typography variant=\"h6\" component=\"h2\">\n                        ₹{getTotalByType(type.value).toLocaleString()}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {accounts.filter(acc => acc.account_type === type.value).length} accounts\n                      </Typography>\n                    </Box>\n                    <AccountBalance sx={{ fontSize: 32, color: `${type.color}.main` }} />\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Box sx={{ mb: 3 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search accounts by name, code, or type...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\n            }}\n          />\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Account Code</TableCell>\n                <TableCell>Account Name</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Balance</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredAccounts.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} align=\"center\">\n                    <Box sx={{ py: 3 }}>\n                      <AccountBalance sx={{ fontSize: 48, color: 'action.disabled', mb: 2 }} />\n                      <Typography variant=\"h6\" color=\"textSecondary\">\n                        No accounts found\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Add your first account to start building your chart of accounts\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredAccounts.map((account: any) => (\n                  <TableRow key={account.id}>\n                    <TableCell>\n                      <Typography variant=\"body1\" fontWeight=\"medium\">\n                        {account.account_code}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <AccountTree sx={{ mr: 2, color: 'primary.main' }} />\n                        <Typography variant=\"body1\">\n                          {account.account_name}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={account.account_type.charAt(0).toUpperCase() + account.account_type.slice(1)}\n                        size=\"small\"\n                        color={getAccountTypeColor(account.account_type)}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body1\" fontWeight=\"medium\">\n                        ₹{account.balance.toLocaleString()}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={account.is_active ? 'Active' : 'Inactive'}\n                        color={account.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" color=\"primary\" onClick={() => handleEditClick(account)}>\n                        <Edit />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"error\" onClick={() => handleDeleteClick(account)}>\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {/* Add/Edit Account Dialog */}\n        <Dialog \n          open={addDialog || editDialog} \n          onClose={() => { setAddDialog(false); setEditDialog(false); }}\n          maxWidth=\"sm\" \n          fullWidth\n        >\n          <DialogTitle>\n            {selectedAccount ? 'Edit Account' : 'Add New Account'}\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Account Code *\"\n                  value={formData.account_code}\n                  onChange={(e) => setFormData(prev => ({ ...prev, account_code: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Account Type</InputLabel>\n                  <Select\n                    value={formData.account_type}\n                    label=\"Account Type\"\n                    onChange={(e) => setFormData(prev => ({ ...prev, account_type: e.target.value }))}\n                  >\n                    {accountTypes.map((type) => (\n                      <MenuItem key={type.value} value={type.value}>\n                        {type.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Account Name *\"\n                  value={formData.account_name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, account_name: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <InputLabel>Parent Account</InputLabel>\n                  <Select\n                    value={formData.parent_account}\n                    label=\"Parent Account\"\n                    onChange={(e) => setFormData(prev => ({ ...prev, parent_account: e.target.value }))}\n                  >\n                    <MenuItem value=\"\">\n                      <em>None (Top Level Account)</em>\n                    </MenuItem>\n                    {accounts\n                      .filter(acc => acc.account_type === formData.account_type)\n                      .map((account) => (\n                        <MenuItem key={account.id} value={account.id}>\n                          {account.account_code} - {account.account_name}\n                        </MenuItem>\n                      ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Description\"\n                  multiline\n                  rows={3}\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => { setAddDialog(false); setEditDialog(false); }}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit} variant=\"contained\">\n              {selectedAccount ? 'Update' : 'Create'}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Container>\n  );\n};\n\nexport default ChartOfAccountsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/company-details.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":13,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[593,600],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'mutation' is assigned a value but never used.","line":17,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"mutation"},"fix":{"range":[707,883],"text":""},"desc":"Remove unused variable 'mutation'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Box, Paper, Typography, Button, Alert, Avatar, Stack } from '@mui/material';\nimport { Edit, Business } from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { companyService } from '../../services/authService';\nimport CompanyDetailsModal from '../../components/CompanyDetailsModal';\nimport Grid from '@mui/material/Grid';\n\nconst CompanyDetails: React.FC = () => {\n  const [openModal, setOpenModal] = useState(false);\n  const queryClient = useQueryClient();\n\n  const { data, isLoading, error, isError } = useQuery({\n    queryKey: ['company'],\n    queryFn: companyService.getCurrentCompany,\n  });\n  const mutation = useMutation({\n    mutationFn: companyService.createCompany,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['company'] });\n    },\n  });\n\n  const handleOpenModal = () => setOpenModal(true);\n  const handleCloseModal = () => setOpenModal(false);\n  const handleSuccess = () => {\n    queryClient.invalidateQueries({ queryKey: ['company'] });\n    handleCloseModal();\n  };\n\n  if (isLoading) {\n    return <Typography>Loading...</Typography>;\n  }\n\n  if (isError || !data || !data.id) {\n    console.error('Failed to fetch company details or data is invalid');\n    return (\n      <Box>\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>\n          Company Details\n        </Typography>\n        <Alert severity=\"info\">\n          No company details found. Please set up your company information.\n        </Alert>\n        <Button\n          variant=\"contained\"\n          startIcon={<Edit />}\n          sx={{ mt: 3 }}\n          onClick={handleOpenModal}\n        >\n          Set Up Company Details\n        </Button>\n        <CompanyDetailsModal \n          open={openModal} \n          onClose={handleCloseModal} \n          onSuccess={handleSuccess}\n          isRequired={false}\n          mode=\"create\"\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\n        Company Details\n      </Typography>\n      <Paper sx={{ p: 2 }}>\n        {/* Company Logo and Basic Info */}\n        <Stack direction=\"row\" spacing={3} alignItems=\"center\" sx={{ mb: 3 }}>\n          <Avatar\n            src={data?.logo_path && data?.id ? companyService.getLogoUrl(data.id) : undefined}\n            sx={{\n              width: 80,\n              height: 80,\n              bgcolor: 'grey.200',\n              border: '2px solid',\n              borderColor: 'grey.300'\n            }}\n          >\n            {!data?.logo_path && <Business sx={{ fontSize: 40, color: 'grey.500' }} />}\n          </Avatar>\n          <Box>\n            <Typography variant=\"h5\" sx={{ fontWeight: 'bold' }}>\n              {data?.name || 'N/A'}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {data?.business_type || 'N/A'} - {data?.industry || 'N/A'}\n            </Typography>\n          </Box>\n        </Stack>\n        \n        <Grid container spacing={2}>\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <Typography variant=\"subtitle2\">Business Type</Typography>\n            <Typography>{data?.business_type || 'N/A'}</Typography>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <Typography variant=\"subtitle2\">Industry</Typography>\n            <Typography>{data?.industry || 'N/A'}</Typography>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <Typography variant=\"subtitle2\">Website</Typography>\n            <Typography>{data?.website || 'N/A'}</Typography>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <Typography variant=\"subtitle2\">GST Number</Typography>\n            <Typography>{data?.gst_number || 'N/A'}</Typography>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <Typography variant=\"subtitle2\">PAN Number</Typography>\n            <Typography>{data?.pan_number || 'N/A'}</Typography>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <Typography variant=\"subtitle2\">Primary Email</Typography>\n            <Typography>{data?.email || 'N/A'}</Typography>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <Typography variant=\"subtitle2\">Primary Phone</Typography>\n            <Typography>{data?.contact_number || 'N/A'}</Typography>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <Typography variant=\"subtitle2\">State</Typography>\n            <Typography>{data?.state || 'N/A'} ({data?.state_code || 'N/A'})</Typography>\n          </Grid>\n          <Grid size={{ xs: 12 }}>\n            <Typography variant=\"subtitle2\">Address</Typography>\n            <Typography>\n              {data?.address1 || ''}{data?.address2 ? `, ${data?.address2}` : ''}, {data?.city || 'N/A'}, {data?.state || 'N/A'} - {data?.pin_code || 'N/A'}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Button\n          variant=\"contained\"\n          startIcon={<Edit />}\n          sx={{ mt: 3 }}\n          onClick={handleOpenModal}\n        >\n          Edit Company Details\n        </Button>\n      </Paper>\n      <CompanyDetailsModal \n        open={openModal} \n        onClose={handleCloseModal} \n        onSuccess={handleSuccess}\n        isRequired={false}\n        companyData={data}\n        mode=\"edit\"\n      />\n    </Box>\n  );\n};\n\nexport default CompanyDetails;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/customers.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Person' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Person"},"fix":{"range":[450,460],"text":""},"desc":"Remove unused variable 'Person'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[460,474],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Grid' is defined but never used.","line":37,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Grid"},"fix":{"range":[828,838],"text":""},"desc":"Remove unused variable 'Grid'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'errorMessage' is assigned a value but never used.","line":48,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"errorMessage"},"fix":{"range":[1361,1373],"text":""},"desc":"Remove unused variable 'errorMessage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSortBy' is assigned a value but never used.","line":51,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSortBy"},"fix":{"range":[1560,1571],"text":""},"desc":"Remove unused variable 'setSortBy'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'customersLoading' is assigned a value but never used.","line":59,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"customersLoading"},"fix":{"range":[1818,1847],"text":""},"desc":"Remove unused variable 'customersLoading'."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Standalone Customers Page - Extract from masters/index.tsx\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  IconButton,\n  TextField,\n  InputAdornment,\n  TableSortLabel\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Email,\n  Phone,\n  Person,\n  Visibility,\n  Analytics,\n  Search as SearchIcon\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { masterDataService } from '../../services/authService';\nimport ExcelImportExport from '../../components/ExcelImportExport';\nimport { bulkImportCustomers } from '../../services/masterService';\nimport Grid from '@mui/material/Grid';\nimport { useAuth } from '../../context/AuthContext';\nimport AddCustomerModal from '../../components/AddCustomerModal';\nimport CustomerAnalyticsModal from '../../components/CustomerAnalyticsModal';\n\nconst CustomersPage: React.FC = () => {\n  const router = useRouter();\n  const { action } = router.query;\n  const { isOrgContextReady } = useAuth();\n  const [showAddCustomerModal, setShowAddCustomerModal] = useState(false);\n  const [addCustomerLoading, setAddCustomerLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  const [sortBy, setSortBy] = useState<'name'>('name');\n  const [analyticsModal, setAnalyticsModal] = useState<{\n    open: boolean;\n    customerId?: number;\n    customerName?: string;\n  }>({ open: false });\n  const queryClient = useQueryClient();\n\n  const { data: customers, isLoading: customersLoading } = useQuery({\n    queryKey: ['customers'],\n    queryFn: () => masterDataService.getCustomers(),\n    enabled: isOrgContextReady,\n  });\n\n  // Debounced search and sorting\n  const filteredAndSortedCustomers = useMemo(() => {\n    if (!customers) {return [];}\n\n    const filtered = customers.filter((customer: any) =>\n      customer.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      customer.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      customer.contact_person?.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    // Sort by name\n    if (sortBy === 'name') {\n      filtered.sort((a: any, b: any) => {\n        const nameA = a.name?.toLowerCase() || '';\n        const nameB = b.name?.toLowerCase() || '';\n        if (sortOrder === 'asc') {\n          return nameA.localeCompare(nameB);\n        } else {\n          return nameB.localeCompare(nameA);\n        }\n      });\n    }\n\n    return filtered;\n  }, [customers, searchTerm, sortBy, sortOrder]);\n\n  const handleSort = () => {\n    setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n  };\n\n  const handleCustomerAdd = async (customerData: any) => {\n    setAddCustomerLoading(true);\n    try {\n      const response = await masterDataService.createCustomer(customerData);\n      const newCustomer = response;\n      \n      // Update query data immediately\n      queryClient.setQueryData(['customers'], (old: any) => old ? [...old, newCustomer] : [newCustomer]);\n      queryClient.invalidateQueries({ queryKey: ['customers'] });\n      \n      setShowAddCustomerModal(false);\n      alert('Customer added successfully!');\n    } catch (error: any) {\n      console.error('Error adding customer:', error);\n      let errorMsg = 'Error adding customer';\n      if (error.response?.data?.detail) {\n        const detail = error.response.data.detail;\n        if (Array.isArray(detail)) {\n          errorMsg = detail.map((err: any) => err.msg || err).join(', ');\n        } else if (typeof detail === 'string') {\n          errorMsg = detail;\n        }\n      }\n      setErrorMessage(errorMsg);\n    } finally {\n      setAddCustomerLoading(false);\n    }\n  };\n\n  const deleteItemMutation = useMutation({\n    mutationFn: (id: number) => masterDataService.deleteCustomer(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['customers'] });\n    },\n    onError: (error: any) => {\n      console.error('Error deleting customer:', error);\n      setErrorMessage(error.response?.data?.detail || 'Failed to delete customer');\n    }\n  });\n\n  const openAddCustomerModal = useCallback(() => {\n    setErrorMessage('');\n    setShowAddCustomerModal(true);\n  }, []);\n\n  // Auto-open add modal if action=add in URL\n  React.useEffect(() => {\n    if (action === 'add') {\n      openAddCustomerModal();\n    }\n  }, [action, openAddCustomerModal]);\n\n  if (!isOrgContextReady) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        {/* Header */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            Customer Management\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={openAddCustomerModal}\n            sx={{ ml: 2 }}\n          >\n            Add Customer\n          </Button>\n        </Box>\n\n        {/* Customers Table */}\n        <Paper sx={{ p: 3 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">All Customers</Typography>\n            <ExcelImportExport\n              data={customers || []}\n              entity=\"Customers\"\n              onImport={bulkImportCustomers}\n            />\n          </Box>\n          \n          {/* Search Field */}\n          <Box sx={{ mb: 3 }}>\n            <TextField\n              placeholder=\"Search customers by name, email, or contact person...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n              sx={{ width: 400 }}\n            />\n          </Box>\n          \n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>\n                    <TableSortLabel\n                      active={sortBy === 'name'}\n                      direction={sortBy === 'name' ? sortOrder : 'asc'}\n                      onClick={handleSort}\n                    >\n                      Name\n                    </TableSortLabel>\n                  </TableCell>\n                  <TableCell>Contact</TableCell>\n                  <TableCell>Email</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>GST Number</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredAndSortedCustomers?.map((item: any) => (\n                  <TableRow key={item.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\n                          {item.name}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          {item.address1}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Phone sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n                        {item.contact_number}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Email sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n                        {item.email || 'N/A'}\n                      </Box>\n                    </TableCell>\n                    <TableCell>{item.city}, {item.state}</TableCell>\n                    <TableCell>{item.gst_number || 'N/A'}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.is_active ? 'Active' : 'Inactive'}\n                        color={item.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton \n                        size=\"small\" \n                        title=\"View Analytics\"\n                        onClick={() => setAnalyticsModal({\n                          open: true,\n                          customerId: item.id,\n                          customerName: item.name\n                        })}\n                        color=\"info\"\n                      >\n                        <Analytics />\n                      </IconButton>\n                      <IconButton disabled size=\"small\" title=\"Edit functionality temporarily disabled\">\n                        <Edit />\n                      </IconButton>\n                      <IconButton onClick={() => deleteItemMutation.mutate(item.id)} size=\"small\" color=\"error\">\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n\n        {/* Add Customer Modal */}\n        <AddCustomerModal\n          open={showAddCustomerModal}\n          onClose={() => setShowAddCustomerModal(false)}\n          onAdd={handleCustomerAdd}\n          loading={addCustomerLoading}\n        />\n\n        {/* Customer Analytics Modal */}\n        {analyticsModal.customerId && (\n          <CustomerAnalyticsModal\n            open={analyticsModal.open}\n            onClose={() => setAnalyticsModal({ open: false })}\n            customerId={analyticsModal.customerId}\n            customerName={analyticsModal.customerName}\n          />\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default CustomersPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/employees.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[324,333],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[341,356],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[356,370],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[370,380],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[380,392],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":44,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[783,810],"text":""},"desc":"Remove unused variable 'router'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":77,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":77,"endColumn":16}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  IconButton,\n  Avatar,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Email,\n  Phone,\n  Search,\n  Person\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { getEmployees, createEmployee } from '../../services/masterService';\nimport AddEmployeeModal from '../../components/AddEmployeeModal';\n\nconst EmployeesPage: React.FC = () => {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [addModalOpen, setAddModalOpen] = useState(false);\n  const [editDialog, setEditDialog] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    employee_id: '',\n    email: '',\n    phone: '',\n    address: '',\n    city: '',\n    state: '',\n    pincode: '',\n    department: '',\n    designation: '',\n    salary: 0\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch employees\n  const { data: employees, isLoading } = useQuery({\n    queryKey: ['employees', searchTerm],\n    queryFn: getEmployees\n  });\n\n  // Create employee mutation\n  const createMutation = useMutation({\n    mutationFn: createEmployee,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['employees'] });\n      setAddModalOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      console.error('Error creating employee:', error);\n    }\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      employee_id: '',\n      email: '',\n      phone: '',\n      address: '',\n      city: '',\n      state: '',\n      pincode: '',\n      department: '',\n      designation: '',\n      salary: 0\n    });\n  };\n\n  const handleAddClick = () => {\n    resetForm();\n    setAddModalOpen(true);\n  };\n\n  const handleEditClick = (employee: any) => {\n    setSelectedEmployee(employee);\n    setFormData({\n      name: employee.name || '',\n      employee_id: employee.employee_id || '',\n      email: employee.email || '',\n      phone: employee.phone || '',\n      address: employee.address || '',\n      city: employee.city || '',\n      state: employee.state || '',\n      pincode: employee.pincode || '',\n      department: employee.department || '',\n      designation: employee.designation || '',\n      salary: employee.salary || 0\n    });\n    setEditDialog(true);\n  };\n\n  const handleSubmit = () => {\n    if (selectedEmployee) {\n      // TODO: Implement update mutation\n      console.log('Update employee:', selectedEmployee.id, formData);\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleDeleteClick = (employee: any) => {\n    // TODO: Implement delete functionality\n    console.log('Delete employee:', employee.id);\n  };\n\n  const handleAddEmployee = async (data: any) => {\n    createMutation.mutate(data);\n  };\n\n  const filteredEmployees = employees?.filter((employee: any) =>\n    employee.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    employee.employee_id?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    employee.department?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Employees\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleAddClick}\n          >\n            Add Employee\n          </Button>\n        </Box>\n\n        <Box sx={{ mb: 3 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search employees by name, ID, or department...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\n            }}\n          />\n        </Box>\n\n        {isLoading ? (\n          <Typography>Loading employees...</Typography>\n        ) : (\n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Employee</TableCell>\n                  <TableCell>Employee ID</TableCell>\n                  <TableCell>Department</TableCell>\n                  <TableCell>Designation</TableCell>\n                  <TableCell>Email</TableCell>\n                  <TableCell>Phone</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredEmployees.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} align=\"center\">\n                      <Box sx={{ py: 3 }}>\n                        <Person sx={{ fontSize: 48, color: 'action.disabled', mb: 2 }} />\n                        <Typography variant=\"h6\" color=\"textSecondary\">\n                          No employees found\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          Add your first employee to get started\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredEmployees.map((employee: any) => (\n                    <TableRow key={employee.id}>\n                      <TableCell>\n                        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                          <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n                            {employee.name?.charAt(0) || '?'}\n                          </Avatar>\n                          {employee.name}\n                        </Box>\n                      </TableCell>\n                      <TableCell>{employee.employee_id || 'N/A'}</TableCell>\n                      <TableCell>{employee.department || 'N/A'}</TableCell>\n                      <TableCell>{employee.designation || 'N/A'}</TableCell>\n                      <TableCell>{employee.email || 'N/A'}</TableCell>\n                      <TableCell>{employee.phone || 'N/A'}</TableCell>\n                      <TableCell>\n                        <Chip\n                          label={employee.is_active ? 'Active' : 'Inactive'}\n                          color={employee.is_active ? 'success' : 'default'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <IconButton size=\"small\" color=\"primary\" onClick={() => handleEditClick(employee)}>\n                          <Edit />\n                        </IconButton>\n                        <IconButton size=\"small\" color=\"info\">\n                          <Email />\n                        </IconButton>\n                        <IconButton size=\"small\" color=\"secondary\">\n                          <Phone />\n                        </IconButton>\n                        <IconButton size=\"small\" color=\"error\" onClick={() => handleDeleteClick(employee)}>\n                          <Delete />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n\n        {/* Add Employee Modal */}\n        <AddEmployeeModal\n          open={addModalOpen}\n          onClose={() => setAddModalOpen(false)}\n          onAdd={handleAddEmployee}\n          mode=\"create\"\n        />\n\n        {/* Edit Employee Dialog */}\n        <Dialog \n          open={editDialog} \n          onClose={() => setEditDialog(false)}\n          maxWidth=\"md\" \n          fullWidth\n        >\n          <DialogTitle>\n            Edit Employee\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Full Name *\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Employee ID\"\n                  value={formData.employee_id}\n                  onChange={(e) => setFormData(prev => ({ ...prev, employee_id: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <TextField\n                  fullWidth\n                  label=\"City\"\n                  value={formData.city}\n                  onChange={(e) => setFormData(prev => ({ ...prev, city: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <TextField\n                  fullWidth\n                  label=\"State\"\n                  value={formData.state}\n                  onChange={(e) => setFormData(prev => ({ ...prev, state: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={4}>\n                <TextField\n                  fullWidth\n                  label=\"Pincode\"\n                  value={formData.pincode}\n                  onChange={(e) => setFormData(prev => ({ ...prev, pincode: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Department\"\n                  value={formData.department}\n                  onChange={(e) => setFormData(prev => ({ ...prev, department: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Designation\"\n                  value={formData.designation}\n                  onChange={(e) => setFormData(prev => ({ ...prev, designation: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Salary\"\n                  type=\"number\"\n                  value={formData.salary}\n                  onChange={(e) => setFormData(prev => ({ ...prev, salary: parseFloat(e.target.value) || 0 }))}\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setEditDialog(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit} variant=\"contained\">\n              Update\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Container>\n  );\n};\n\nexport default EmployeesPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":131,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[2815,2885],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'companyEditDialog' is assigned a value but never used.","line":160,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"companyEditDialog"},"fix":{"range":[3610,3627],"text":""},"desc":"Remove unused variable 'companyEditDialog'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":204,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":204,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'handleLogout' is assigned a value but never used.","line":228,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":228,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleLogout"},"fix":{"range":[6163,6217],"text":""},"desc":"Remove unused variable 'handleLogout'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":351,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":351,"endColumn":16},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":373,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":373,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'closeCompanyEditDialog' is assigned a value but never used.","line":407,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":407,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"closeCompanyEditDialog"},"fix":{"range":[12799,12875],"text":""},"desc":"Remove unused variable 'closeCompanyEditDialog'."}]},{"ruleId":"no-shadow","severity":2,"message":"'formData' is already declared in the upper scope on line 135 column 10.","line":447,"column":13,"nodeType":"Identifier","messageId":"noShadow","endLine":447,"endColumn":21},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'formData' is already declared in the upper scope on line 135 column 10.","line":447,"column":13,"nodeType":"Identifier","messageId":"noShadow","endLine":447,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'contact' is assigned a value but never used.","line":483,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":483,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"contact"},"fix":{"range":[14896,14904],"text":""},"desc":"Remove unused variable 'contact'."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Revised masters.index.tsx\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Tab,\n  Tabs,\n  Paper,\n  Card,\n  CardContent,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  IconButton,\n  Avatar,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  InputLabel,\n  FormControl,\n  Autocomplete,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Email,\n  Phone,\n  Business,\n  Person,\n  Inventory,\n  AccountBalance,\n  Visibility\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { masterDataService, reportsService, companyService } from '../../services/authService';\nimport ExcelImportExport from '../../components/ExcelImportExport';\nimport { bulkImportVendors, bulkImportCustomers, bulkImportProducts } from '../../services/masterService';\nimport ProductFileUpload from '../../components/ProductFileUpload';\nimport Grid from '@mui/material/Grid';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`masters-tabpanel-${index}`}\n      aria-labelledby={`masters-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst STATE_CODES: { [key: string]: string } = {\n  'Jammu & Kashmir': '01',\n  'Himachal Pradesh': '02',\n  'Punjab': '03',\n  'Chandigarh': '04',\n  'Uttarakhand': '05',\n  'Haryana': '06',\n  'Delhi': '07',\n  'Rajasthan': '08',\n  'Uttar Pradesh': '09',\n  'Bihar': '10',\n  'Sikkim': '11',\n  'Arunachal Pradesh': '12',\n  'Nagaland': '13',\n  'Manipur': '14',\n  'Mizoram': '15',\n  'Tripura': '16',\n  'Meghalaya': '17',\n  'Assam': '18',\n  'West Bengal': '19',\n  'Jharkhand': '20',\n  'Odisha': '21',\n  'Chhattisgarh': '22',\n  'Madhya Pradesh': '23',\n  'Gujarat': '24',\n  'Daman & Diu': '25',\n  'Dadra & Nagar Haveli': '26',\n  'Maharashtra': '27',\n  'Andhra Pradesh (Old)': '28',\n  'Karnataka': '29',\n  'Goa': '30',\n  'Lakshadweep': '31',\n  'Kerala': '32',\n  'Tamil Nadu': '33',\n  'Puducherry': '34',\n  'Andaman & Nicobar Islands': '35',\n  'Telangana': '36',\n  'Andhra Pradesh (Newly Added)': '37',\n  'Ladakh (Newly Added)': '38',\n  'Others Territory': '97',\n  'Center Jurisdiction': '99'\n};\n\nconst MasterDataManagement: React.FC = () => {\n  const router = useRouter();\n  const { tab, action } = router.query;\n  const [tabValue, setTabValue] = useState(0);\n  const [user] = useState({ email: 'demo@example.com', role: 'admin' });\n  const [itemDialog, setItemDialog] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [formData, setFormData] = useState({\n    name: '', \n    address1: '', \n    address2: '', \n    city: '', \n    state: '', \n    state_code: '', \n    pin_code: '', \n    contact: '', \n    email: '', \n    gst_number: '', \n    pan_number: '', \n    part_number: '', \n    hsn_code: '', \n    unit: '', \n    unit_price: 0, \n    gst_rate: 0, \n    is_gst_inclusive: false, \n    reorder_level: 0, \n    description: '', \n    is_manufactured: false, \n    contact_number: ''  // Added to match backend schema\n  });\n\n  // Company dialog state\n  const [companyEditDialog, setCompanyEditDialog] = useState(false);\n  \n  // GST certificate upload state\n  const [gstCertificateFile, setGstCertificateFile] = useState<File | null>(null);\n  const [uploadingGstCertificate, setUploadingGstCertificate] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  const handleTabChange = useCallback((event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n    const tabNames = ['vendors', 'customers', 'products', 'accounts', 'company'];\n    router.replace(`/masters?tab=${tabNames[newValue]}`, undefined, { shallow: true });\n  }, [router]);\n\n  const openItemDialog = useCallback((item: any = null, targetTab?: number) => {\n    if (targetTab !== undefined && targetTab !== tabValue) {\n      handleTabChange({} as React.SyntheticEvent, targetTab);\n    }\n    setSelectedItem(item);\n    if (item) {\n      setFormData({\n        name: item.product_name || '',  // Use product_name consistently\n        address1: item.address1 || item.address || '',\n        address2: item.address2 || '',\n        city: item.city || '',\n        state: item.state || '',\n        state_code: item.state_code || '',\n        pin_code: item.pin_code || '',\n        contact: item.contact_number || item.phone || '',\n        email: item.email || '',\n        gst_number: item.gst_number || '',\n        pan_number: item.pan_number || '',\n        part_number: item.part_number || '',\n        hsn_code: item.hsn_code || '',\n        unit: item.unit || '',\n        unit_price: item.unit_price || 0,\n        gst_rate: item.gst_rate || 0,\n        is_gst_inclusive: item.is_gst_inclusive || false,\n        reorder_level: item.reorder_level || 0,\n        description: item.description || '',\n        is_manufactured: item.is_manufactured || false,\n        contact_number: item.contact_number || ''\n      });\n    } else {\n      resetForm();\n    }\n    setErrorMessage(''); // Clear any previous error messages\n    setItemDialog(true);\n  }, [tabValue, handleTabChange]);\n\n  // Update tab from URL and handle auto-open add dialog\n  useEffect(() => {\n    switch (tab) {\n      case 'vendors': setTabValue(0); break;\n      case 'customers': setTabValue(1); break;\n      case 'products': setTabValue(2); break;\n      case 'bom': setTabValue(3); break;\n      case 'accounts': setTabValue(4); break;\n      case 'company': setTabValue(5); break;\n      default: setTabValue(0);\n    }\n    \n    // Auto-open add dialog if action=add in URL\n    if (action === 'add') {\n      openItemDialog(null);\n    }\n  }, [tab, action, openItemDialog]);\n\n  const handleLogout = () => {\n    // Handle logout\n  };\n\n  // Fetch data from APIs\n  const { data: dashboardStats } = useQuery({\n    queryKey: ['dashboardStats'],\n    queryFn: reportsService.getDashboardStats\n  });\n  const { data: vendors, isLoading: vendorsLoading } = useQuery({\n    queryKey: ['vendors'],\n    queryFn: () => masterDataService.getVendors(),\n    enabled: tabValue === 0\n  });\n  const { data: customers, isLoading: customersLoading } = useQuery({\n    queryKey: ['customers'],\n    queryFn: () => masterDataService.getCustomers(),\n    enabled: tabValue === 1\n  });\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: ['products'],\n    queryFn: () => masterDataService.getProducts(),\n    enabled: tabValue === 2\n  });\n\n  // HSN/Product bidirectional search functionality\n  const uniqueHsnCodes = React.useMemo(() => {\n    if (!products || tabValue !== 2) {return [];}\n    const hsnSet = new Set<string>();\n    products.forEach((product: any) => {\n      if (product.hsn_code && product.hsn_code.trim()) {\n        hsnSet.add(product.hsn_code.trim());\n      }\n    });\n    return Array.from(hsnSet).sort();\n  }, [products, tabValue]);\n\n  const getProductsByHsn = React.useCallback((hsnCode: string) => {\n    if (!products || !hsnCode.trim()) {return [];}\n    return products.filter((product: any) => \n      product.hsn_code && product.hsn_code.toLowerCase().includes(hsnCode.toLowerCase())\n    );\n  }, [products]);\n\n  const getHsnByProductName = React.useCallback((productName: string) => {\n    if (!products || !productName.trim()) {return [];}\n    const matchingProducts = products.filter((product: any) =>\n      (product.product_name || product.name || '').toLowerCase().includes(productName.toLowerCase())\n    );\n    const hsnCodes = matchingProducts\n      .map((product: any) => product.hsn_code)\n      .filter((hsn: string) => hsn && hsn.trim())\n      .filter((hsn: string, index: number, array: string[]) => array.indexOf(hsn) === index); // unique\n    return hsnCodes;\n  }, [products]);\n\n  // Auto-population effects for products\n  React.useEffect(() => {\n    if (tabValue !== 2) {return;}\n    \n    // When product name changes, suggest HSN codes\n    if (formData.name && formData.name.length > 2) {\n      const suggestedHsns = getHsnByProductName(formData.name);\n      if (suggestedHsns.length === 1 && !formData.hsn_code) {\n        // Auto-populate if there's exactly one matching HSN and HSN field is empty\n        setFormData(prev => ({ ...prev, hsn_code: suggestedHsns[0] }));\n      }\n    }\n  }, [formData.name, formData.hsn_code, getHsnByProductName, tabValue]);\n\n  React.useEffect(() => {\n    if (tabValue !== 2) {return;}\n    \n    // When HSN code changes, suggest product info\n    if (formData.hsn_code && formData.hsn_code.length > 2) {\n      const matchingProducts = getProductsByHsn(formData.hsn_code);\n      if (matchingProducts.length > 0 && !formData.name) {\n        // If there's a strong match and product name is empty, suggest the most common unit/gst_rate\n        const commonUnit = matchingProducts[0].unit;\n        const commonGstRate = matchingProducts[0].gst_rate;\n        \n        if (commonUnit && commonUnit !== formData.unit) {\n          setFormData(prev => ({ ...prev, unit: commonUnit }));\n        }\n        if (commonGstRate && commonGstRate !== formData.gst_rate) {\n          setFormData(prev => ({ ...prev, gst_rate: commonGstRate }));\n        }\n      }\n    }\n  }, [formData.hsn_code, formData.name, formData.unit, formData.gst_rate, getProductsByHsn, tabValue]);\n  const { data: company } = useQuery({\n    queryKey: ['company'],\n    queryFn: () => companyService.getCurrentCompany(),\n    enabled: tabValue === 4\n  });\n\n  // Mutations for bulk import\n  const importVendorsMutation = useMutation({\n    mutationFn: bulkImportVendors,\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['vendors'] })\n  });\n  const importCustomersMutation = useMutation({\n    mutationFn: bulkImportCustomers,\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['vendors'] }),\n  });\n  const importProductsMutation = useMutation({\n    mutationFn: bulkImportProducts,\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['products'] }),\n  });\n\n  // Mutation for updating item\n  const updateItemMutation = useMutation({\n    mutationFn: (data: any) => {\n      // Replace with actual service call based on entity\n      if (tab === 'vendors') {return masterDataService.updateVendor(data.id, data);}\n      if (tab === 'customers') {return masterDataService.updateCustomer(data.id, data);}\n      if (tab === 'products') {return masterDataService.updateProduct(data.id, data);}\n      return Promise.resolve();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({queryKey: ['vendors', 'customers', 'products']});\n      setItemDialog(false);\n      setSelectedItem(null);\n      resetForm();\n      setErrorMessage('');\n    },\n    onError: (error: any) => {\n      console.error('Update error:', error);\n      setErrorMessage(error.message || 'Failed to update item. Please check your input.');\n    }\n  });\n\n  // Mutation for creating item\n  const createItemMutation = useMutation({\n    mutationFn: (data: any) => {\n      // Replace with actual service call based on entity\n      if (tab === 'vendors') {return masterDataService.createVendor(data);}\n      if (tab === 'customers') {return masterDataService.createCustomer(data);}\n      if (tab === 'products') {return masterDataService.createProduct(data);}\n      return Promise.resolve();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({queryKey: ['vendors', 'customers', 'products']});\n      setItemDialog(false);\n      setSelectedItem(null);\n      resetForm();\n      setErrorMessage('');\n      \n      // Trigger refresh in parent window if opened from voucher\n      if (window.opener) {\n        window.opener.localStorage.setItem('refreshMasterData', 'true');\n        window.close();\n      }\n    },\n    onError: (error: any) => {\n      console.error('Create error:', error);\n      setErrorMessage(error.message || 'Failed to create item. Please check your input.');\n    }\n  });\n\n  const handleImport = (entity: string) => (importedData: any[]) => {\n    switch (entity) {\n      case 'Vendors':\n        importVendorsMutation.mutate(importedData);\n        break;\n      case 'Customers':\n        importCustomersMutation.mutate(importedData);\n        break;\n      case 'Products':\n        importProductsMutation.mutate(importedData);\n        break;\n    }\n  };\n\n  // Company edit dialog functions\n  const openCompanyEditDialog = () => {\n    setCompanyEditDialog(true);\n  };\n\n  const closeCompanyEditDialog = () => {\n    setCompanyEditDialog(false);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '', \n      address1: '', \n      address2: '', \n      city: '', \n      state: '', \n      state_code: '', \n      pin_code: '', \n      contact: '', \n      email: '', \n      gst_number: '', \n      pan_number: '', \n      part_number: '', \n      hsn_code: '', \n      unit: '', \n      unit_price: 0, \n      gst_rate: 0, \n      is_gst_inclusive: false, \n      reorder_level: 0, \n      description: '', \n      is_manufactured: false, \n      contact_number: ''\n    });\n  };\n\n  const handleAddClick = () => {\n    openItemDialog(null);\n  };\n\n  // Handle GST certificate upload\n  const handleGstCertificateUpload = async (file: File) => {\n    if (!selectedItem) {return;}\n    \n    setUploadingGstCertificate(true);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('file_type', 'gst_certificate');\n      \n      const endpoint = tabValue === 0 \n        ? `/api/v1/vendors/${selectedItem.id}/files`\n        : `/api/v1/customers/${selectedItem.id}/files`;\n      \n      const response = await fetch(endpoint, {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (response.ok) {\n        // Success - show notification or update UI\n        console.log('GST certificate uploaded successfully');\n        // You can add a toast notification here\n      } else {\n        console.error('Failed to upload GST certificate');\n      }\n    } catch (error) {\n      console.error('Error uploading GST certificate:', error);\n    } finally {\n      setUploadingGstCertificate(false);\n      setGstCertificateFile(null);\n    }\n  };\n\n  const handleSubmit = () => {\n    const data = { ...formData };\n    \n    // Map frontend field names to backend schema\n    if (tabValue === 0 || tabValue === 1) { // Vendors or Customers\n      data.contact_number = data.contact || data.contact_number; // Map contact to contact_number if needed\n      // Remove old field name if present\n      if ('contact' in data) {\n        const { contact, ...rest } = data;\n        Object.assign(data, rest);\n      }\n    }\n    \n    if (selectedItem) {\n      updateItemMutation.mutate({ ...selectedItem, ...data });\n    } else {\n      createItemMutation.mutate(data);\n    }\n  };\n\n  const handleStateChange = (e: any) => {\n    const state = e.target.value;\n    const state_code = STATE_CODES[state] || '';\n    setFormData(prev => ({ ...prev, state, state_code }));\n  };\n\n  const handlePincodeChange = async (e: any) => {\n    const pinCode = e.target.value;\n    setFormData(prev => ({ ...prev, pin_code: pinCode }));\n    \n    // Auto-fill city/state/state_code if pinCode is 6 digits\n    if (pinCode.length === 6 && /^\\d{6}$/.test(pinCode)) {\n      try {\n        const response = await fetch(`/api/v1/pincode/lookup/${pinCode}`);\n        if (response.ok) {\n          const data = await response.json();\n          setFormData(prev => ({ \n            ...prev, \n            city: data.city,\n            state: data.state,\n            state_code: data.state_code\n          }));\n        }\n      } catch (error) {\n        console.log('Pincode lookup failed:', error);\n        // Fail silently, user can enter manually\n      }\n    }\n  };\n\n  // Master data summary with real data\n  const masterDataTypes = [\n    {\n      title: 'Vendors',\n      description: 'Supplier and vendor management',\n      count: dashboardStats?.masters?.vendors || 0,\n      color: '#1976D2',\n      icon: <Business />,\n      tabIndex: 0\n    },\n    {\n      title: 'Customers',\n      description: 'Customer and client management',\n      count: dashboardStats?.masters?.customers || 0,\n      color: '#2E7D32',\n      icon: <Person />,\n      tabIndex: 1\n    },\n    {\n      title: 'Products',\n      description: 'Product catalog and inventory items',\n      count: dashboardStats?.masters?.products || 0,\n      color: '#7B1FA2',\n      icon: <Inventory />,\n      tabIndex: 2\n    },\n    {\n      title: 'Accounts',\n      description: 'Chart of accounts and financial setup',\n      count: 0, // TODO: Implement accounts API\n      color: '#F57C00',\n      icon: <AccountBalance />,\n      tabIndex: 3\n    },\n    {\n      title: 'Company Details',\n      description: 'Your company information and settings',\n      count: company ? 1 : 0,\n      color: '#1976D2',\n      icon: <Business />,\n      tabIndex: 4\n    }\n  ];\n\n  const renderTable = (data: any[], type: string, isLoading: boolean = false) => {\n    if (isLoading) {\n      return <Typography>Loading {type}...</Typography>;\n    }\n    \n    if (!data || data.length === 0) {\n      return <Typography>No {type} found. Click &quot;Add&quot; to create your first entry.</Typography>;\n    }\n\n    return (\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {type === 'vendors' || type === 'customers' ? (\n                <>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Phone</TableCell>\n                  <TableCell>Email</TableCell>\n                  <TableCell>GST Number</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </>\n              ) : type === 'products' ? (\n                <>\n                  <TableCell>Product Name</TableCell>\n                  <TableCell>HSN Code</TableCell>\n                  <TableCell>Unit</TableCell>\n                  <TableCell>Price (₹)</TableCell>\n                  <TableCell>GST Rate</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </>\n              ) : (\n                <>\n                  <TableCell>Account Code</TableCell>\n                  <TableCell>Account Name</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Balance (₹)</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </>\n              )}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.map((item) => (\n              <TableRow key={item.id}>\n                {type === 'vendors' || type === 'customers' ? (\n                  <>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n                          {item.name?.charAt(0) || '?'}\n                        </Avatar>\n                        {item.name}\n                      </Box>\n                    </TableCell>\n                    <TableCell>{item.contact_number || item.phone || 'N/A'}</TableCell>\n                    <TableCell>{item.email || 'N/A'}</TableCell>\n                    <TableCell>{item.gst_number || 'N/A'}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.is_active ? 'Active' : 'Inactive'}\n                        color={item.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" color=\"primary\" onClick={() => openItemDialog(item)}>\n                        <Edit />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"info\">\n                        <Email />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"secondary\">\n                        <Phone />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"error\">\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </>\n                ) : type === 'products' ? (\n                  <>\n                    <TableCell>{item.product_name}</TableCell>\n                    <TableCell>{item.hsn_code || 'N/A'}</TableCell>\n                    <TableCell>{item.unit || 'N/A'}</TableCell>\n                    <TableCell>₹{item.unit_price?.toLocaleString() || 0}</TableCell>\n                    <TableCell>{item.gst_rate || 0}%</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.is_active ? 'Active' : 'Inactive'}\n                        color={item.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" color=\"primary\" onClick={() => openItemDialog(item)}>\n                        <Edit />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"info\">\n                        <Visibility />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"error\">\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </>\n                ) : (\n                  <>\n                    <TableCell>{item.code || 'N/A'}</TableCell>\n                    <TableCell>{item.name || 'N/A'}</TableCell>\n                    <TableCell>{item.type || 'N/A'}</TableCell>\n                    <TableCell>₹{item.balance?.toLocaleString() || 0}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.status || 'Active'}\n                        color={item.status === 'Active' ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" color=\"primary\" onClick={() => openItemDialog(item)}>\n                        <Edit />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"info\">\n                        <Visibility />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"error\">\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </>\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  const renderCompanyDetails = () => {\n    return (\n      <Box>\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>\n          Company Details\n        </Typography>\n        {company ? (\n          <Paper sx={{ p: 2 }}>\n            <Grid container spacing={2}>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Typography variant=\"subtitle2\">Name</Typography>\n                <Typography>{company.name}</Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Typography variant=\"subtitle2\">Business Type</Typography>\n                <Typography>{company.business_type}</Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Typography variant=\"subtitle2\">Industry</Typography>\n                <Typography>{company.industry}</Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Typography variant=\"subtitle2\">Website</Typography>\n                <Typography>{company.website}</Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Typography variant=\"subtitle2\">Primary Email</Typography>\n                <Typography>{company.primary_email}</Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Typography variant=\"subtitle2\">Primary Phone</Typography>\n                <Typography>{company.primary_phone}</Typography>\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"subtitle2\">Address</Typography>\n                <Typography>\n                  {company.address1}, {company.address2}, {company.city}, {company.state} {company.pin_code}\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Typography variant=\"subtitle2\">GST Number</Typography>\n                <Typography>{company.gst_number}</Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Typography variant=\"subtitle2\">PAN Number</Typography>\n                <Typography>{company.pan_number}</Typography>\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              startIcon={<Edit />}\n              sx={{ mt: 3 }}\n              onClick={() => openCompanyEditDialog()}\n            >\n              Edit Company Details\n            </Button>\n          </Paper>\n        ) : (\n          <Alert severity=\"info\">\n            No company details found. Please set up your company information.\n          </Alert>\n        )}\n      </Box>\n    );\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Master Data Management\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 4 }}>\n          Centralized management of all master data in your ERP system\n        </Typography>\n\n        {/* Summary Cards */}\n        <Grid container spacing={3} sx={{ mb: 4 }}>\n          {masterDataTypes.map((dataType, index) => (\n            <Grid size={{ xs: 12, sm: 6, md: 3 }} key={index}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                    <Box>\n                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                        <Box sx={{ color: dataType.color, mr: 1 }}>\n                          {dataType.icon}\n                        </Box>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                          {dataType.title}\n                        </Typography>\n                      </Box>\n                      <Typography variant=\"h4\" component=\"h2\">\n                        {dataType.count}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {dataType.description}\n                      </Typography>\n                    </Box>\n                    <Button\n                      variant=\"contained\"\n                      startIcon={<Add />}\n                      sx={{ bgcolor: dataType.color }}\n                      size=\"small\"\n                      onClick={() => openItemDialog(null, dataType.tabIndex)}\n                    >\n                      Add\n                    </Button>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n\n        {/* Master Data Tabs */}\n        <Paper sx={{ mb: 4 }}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"master data tabs\">\n              <Tab label=\"Vendors\" />\n              <Tab label=\"Customers\" />\n              <Tab label=\"Products\" />\n              <Tab label=\"BOM\" />\n              <Tab label=\"Accounts\" />\n              <Tab label=\"Company\" />\n            </Tabs>\n          </Box>\n\n          <TabPanel value={tabValue} index={0}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Vendor Management</Typography>\n              <Button variant=\"contained\" startIcon={<Add />} onClick={handleAddClick}>\n                Add New Vendor\n              </Button>\n            </Box>\n            <ExcelImportExport data={vendors || []} entity=\"Vendors\" onImport={handleImport('Vendors')} />\n            {renderTable(vendors || [], 'vendors', vendorsLoading)}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={1}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Customer Management</Typography>\n              <Button variant=\"contained\" startIcon={<Add />} color=\"success\" onClick={handleAddClick}>\n                Add New Customer\n              </Button>\n            </Box>\n            <ExcelImportExport data={customers || []} entity=\"Customers\" onImport={handleImport('Customers')} />\n            {renderTable(customers || [], 'customers', customersLoading)}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={2}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Product Catalog</Typography>\n              <Button variant=\"contained\" startIcon={<Add />} sx={{ bgcolor: '#7B1FA2' }} onClick={handleAddClick}>\n                Add New Product\n              </Button>\n            </Box>\n            <ExcelImportExport data={products || []} entity=\"Products\" onImport={handleImport('Products')} />\n            {renderTable(products || [], 'products', productsLoading)}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={3}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Bill of Materials (BOM)</Typography>\n              <Button \n                variant=\"contained\" \n                startIcon={<Add />} \n                sx={{ bgcolor: '#F57C00' }}\n                onClick={() => router.push('/masters/bom?action=add')}\n              >\n                Create New BOM\n              </Button>\n            </Box>\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n              Manage bill of materials for manufactured products. Define raw materials, quantities, and costs.\n            </Typography>\n            {/* TODO: Implement BOM list table */}\n            <Paper sx={{ p: 3, textAlign: 'center' }}>\n              <Typography variant=\"body1\" color=\"textSecondary\">\n                BOM management is available at <strong>/masters/bom</strong>\n              </Typography>\n              <Button \n                variant=\"outlined\" \n                onClick={() => router.push('/masters/bom')}\n                sx={{ mt: 2 }}\n              >\n                Go to BOM Management\n              </Button>\n            </Paper>\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={4}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Chart of Accounts</Typography>\n              <Button variant=\"contained\" startIcon={<Add />} sx={{ bgcolor: '#F57C00' }}>\n                Add New Account\n              </Button>\n            </Box>\n            {renderTable([], 'accounts', false)} {/* TODO: Implement accounts API */}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={5}>\n            {renderCompanyDetails()}\n          </TabPanel>\n        </Paper>\n\n      </Container>\n\n      {/* Add/Edit Dialog */}\n      <Dialog open={itemDialog} onClose={() => setItemDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>{selectedItem ? 'Edit' : 'Add'} {tabValue === 0 ? 'Vendor' : tabValue === 1 ? 'Customer' : tabValue === 2 ? 'Product' : tabValue === 3 ? 'BOM' : tabValue === 4 ? 'Account' : 'Item'}</DialogTitle>\n        <DialogContent>\n          {errorMessage && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {errorMessage}\n            </Alert>\n          )}\n          <TextField\n            fullWidth\n            label=\"Name\"\n            value={formData.name}\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            helperText={\n              tabValue === 2 && formData.name && formData.name.length > 2 && getHsnByProductName(formData.name).length > 0\n                ? `Suggested HSN: ${getHsnByProductName(formData.name).slice(0, 3).join(', ')}`\n                : undefined\n            }\n            sx={{ mb: 2 }}\n          />\n          {(tabValue === 0 || tabValue === 1) && (\n            <>\n              <TextField\n                fullWidth\n                label=\"Address Line 1\"\n                value={formData.address1}\n                onChange={(e) => setFormData(prev => ({ ...prev, address1: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              <TextField\n                fullWidth\n                label=\"Address Line 2\"\n                value={formData.address2}\n                onChange={(e) => setFormData(prev => ({ ...prev, address2: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              <TextField\n                fullWidth\n                label=\"PIN Code\"\n                value={formData.pin_code}\n                onChange={handlePincodeChange}\n                sx={{ mb: 2 }}\n                helperText=\"Enter 6-digit PIN code to auto-fill city and state\"\n              />\n              <TextField\n                fullWidth\n                label=\"City\"\n                value={formData.city}\n                onChange={(e) => setFormData(prev => ({ ...prev, city: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              <FormControl fullWidth sx={{ mb: 2 }}>\n                <InputLabel id=\"state-label\">State</InputLabel>\n                <Select\n                  labelId=\"state-label\"\n                  value={formData.state}\n                  label=\"State\"\n                  onChange={handleStateChange}\n                >\n                  {Object.keys(STATE_CODES).map((state) => (\n                    <MenuItem key={state} value={state}>\n                      {state}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              <TextField\n                fullWidth\n                label=\"State Code\"\n                value={formData.state_code}\n                onChange={(e) => setFormData(prev => ({ ...prev, state_code: e.target.value }))}\n                sx={{ mb: 2 }}\n                helperText=\"Auto-filled from PIN code or state selection\"\n              />\n              <TextField\n                fullWidth\n                label=\"Phone\"\n                value={formData.contact}\n                onChange={(e) => setFormData(prev => ({ ...prev, contact: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              <TextField\n                fullWidth\n                label=\"Email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              <TextField\n                fullWidth\n                label=\"GST Number\"\n                value={formData.gst_number}\n                onChange={(e) => setFormData(prev => ({ ...prev, gst_number: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              {selectedItem && (\n                <Box sx={{ mb: 2, display: 'flex', gap: 2, alignItems: 'center' }}>\n                  <Button\n                    variant=\"outlined\"\n                    component=\"label\"\n                    disabled={uploadingGstCertificate}\n                    sx={{ whiteSpace: 'nowrap' }}\n                  >\n                    {uploadingGstCertificate ? 'Uploading...' : 'Add GST Certificate'}\n                    <input\n                      type=\"file\"\n                      hidden\n                      accept=\".pdf\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file) {\n                          setGstCertificateFile(file);\n                          handleGstCertificateUpload(file);\n                        }\n                      }}\n                    />\n                  </Button>\n                  {gstCertificateFile && (\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {gstCertificateFile.name}\n                    </Typography>\n                  )}\n                </Box>\n              )}\n              <TextField\n                fullWidth\n                label=\"PAN Number\"\n                value={formData.pan_number}\n                onChange={(e) => setFormData(prev => ({ ...prev, pan_number: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n            </>\n          )}\n          {tabValue === 2 && (\n            <>\n              <TextField\n                fullWidth\n                label=\"Part Number\"\n                value={formData.part_number}\n                onChange={(e) => setFormData(prev => ({ ...prev, part_number: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              <Autocomplete\n                freeSolo\n                options={uniqueHsnCodes}\n                value={formData.hsn_code || ''}\n                onInputChange={(_, newValue) => {\n                  setFormData(prev => ({ ...prev, hsn_code: newValue || '' }));\n                }}\n                onChange={(_, newValue) => {\n                  setFormData(prev => ({ ...prev, hsn_code: newValue || '' }));\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    fullWidth\n                    label=\"HSN Code\"\n                    placeholder=\"Search or enter HSN code...\"\n                    helperText={\n                      formData.hsn_code && getProductsByHsn(formData.hsn_code).length > 0\n                        ? `Found ${getProductsByHsn(formData.hsn_code).length} product(s) with this HSN`\n                        : undefined\n                    }\n                    InputProps={{\n                      ...params.InputProps,\n                      endAdornment: (\n                        <>\n                          {productsLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                          {params.InputProps.endAdornment}\n                        </>\n                      ),\n                    }}\n                  />\n                )}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <Box sx={{ width: '100%' }}>\n                      <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\n                        {option}\n                      </Typography>\n                      {getProductsByHsn(option).length > 0 && (\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {getProductsByHsn(option).length} product(s): {getProductsByHsn(option).slice(0, 2).map(p => p.product_name || p.name).join(', ')}\n                          {getProductsByHsn(option).length > 2 && '...'}\n                        </Typography>\n                      )}\n                    </Box>\n                  </Box>\n                )}\n                noOptionsText=\"No HSN codes found\"\n                sx={{ mb: 2 }}\n              />\n              <TextField\n                fullWidth\n                label=\"Unit\"\n                value={formData.unit}\n                onChange={(e) => setFormData(prev => ({ ...prev, unit: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              <TextField\n                fullWidth\n                label=\"Unit Price\"\n                type=\"number\"\n                value={formData.unit_price}\n                onChange={(e) => setFormData(prev => ({ ...prev, unit_price: parseFloat(e.target.value) }))}\n                sx={{ mb: 2 }}\n              />\n              <FormControl fullWidth sx={{ mb: 2 }}>\n                <InputLabel id=\"gst-rate-label\">GST Rate (%)</InputLabel>\n                <Select\n                  labelId=\"gst-rate-label\"\n                  value={`${formData.gst_rate}%`}\n                  label=\"GST Rate (%)\"\n                  onChange={(e) => setFormData(prev => ({ ...prev, gst_rate: parseFloat((e.target.value as string).replace('%', '')) }))}\n                >\n                  <MenuItem value=\"0%\">0%</MenuItem>\n                  <MenuItem value=\"5%\">5%</MenuItem>\n                  <MenuItem value=\"12%\">12%</MenuItem>\n                  <MenuItem value=\"18%\">18%</MenuItem>\n                  <MenuItem value=\"28%\">28%</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={formData.is_gst_inclusive}\n                    onChange={(e) => setFormData(prev => ({ ...prev, is_gst_inclusive: e.target.checked }))}\n                  />\n                }\n                label=\"GST Inclusive\"\n              />\n              <TextField\n                fullWidth\n                label=\"Reorder Level\"\n                type=\"number\"\n                value={formData.reorder_level}\n                onChange={(e) => setFormData(prev => ({ ...prev, reorder_level: parseInt(e.target.value) }))}\n                sx={{ mb: 2 }}\n              />\n              <TextField\n                fullWidth\n                label=\"Description\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                sx={{ mb: 2 }}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={formData.is_manufactured}\n                    onChange={(e) => setFormData(prev => ({ ...prev, is_manufactured: e.target.checked }))}\n                  />\n                }\n                label=\"Is Manufactured\"\n              />\n              \n              {/* File Upload Section for Products */}\n              {selectedItem?.id && (\n                <Box sx={{ mt: 3 }}>\n                  <ProductFileUpload \n                    productId={selectedItem.id} \n                    disabled={false} \n                  />\n                </Box>\n              )}\n            </>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setItemDialog(false)}>Cancel</Button>\n          <Button onClick={handleSubmit} variant=\"contained\">Save</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default MasterDataManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/multi-company.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Switch"},"fix":{"range":[278,288],"text":""},"desc":"Remove unused variable 'Switch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Fab' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Fab"},"fix":{"range":[297,304],"text":""},"desc":"Remove unused variable 'Fab'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'People' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"People"},"fix":{"range":[374,384],"text":""},"desc":"Remove unused variable 'People'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'createCompanyMutation' is assigned a value but never used.","line":88,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"createCompanyMutation"},"fix":{"range":[2108,2333],"text":""},"desc":"Remove unused variable 'createCompanyMutation'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'assignUserMutation' is assigned a value but never used.","line":96,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"assignUserMutation"},"fix":{"range":[2337,2735],"text":""},"desc":"Remove unused variable 'assignUserMutation'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Switch,\n  Alert,\n  Fab,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Business,\n  People,\n  PersonAdd,\n  AdminPanelSettings,\n  Delete,\n  Groups\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { companyService } from '../../services/authService';\nimport CompanyDetailsModal from '../../components/CompanyDetailsModal';\n\ninterface Company {\n  id: number;\n  name: string;\n  address1: string;\n  city: string;\n  state: string;\n  gst_number?: string;\n  business_type?: string;\n  industry?: string;\n  created_at: string;\n}\n\ninterface UserCompanyAssignment {\n  id: number;\n  user_id: number;\n  company_id: number;\n  is_active: boolean;\n  is_company_admin: boolean;\n  user_email: string;\n  user_full_name: string;\n}\n\nconst MultiCompanyManagement: React.FC = () => {\n  const [openCompanyModal, setOpenCompanyModal] = useState(false);\n  const [openUserAssignModal, setOpenUserAssignModal] = useState(false);\n  const [selectedCompanyId, setSelectedCompanyId] = useState<number | null>(null);\n  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null);\n  const queryClient = useQueryClient();\n\n  // Fetch all companies\n  const { data: companies, isLoading, error } = useQuery({\n    queryKey: ['companies'],\n    queryFn: companyService.getCompanies,\n  });\n\n  // Fetch organization info to check max_companies\n  const { data: orgInfo } = useQuery({\n    queryKey: ['organization-info'],\n    queryFn: companyService.getOrganizationInfo,\n  });\n\n  // Fetch users assigned to selected company\n  const { data: companyUsers } = useQuery({\n    queryKey: ['company-users', selectedCompanyId],\n    queryFn: () => selectedCompanyId ? companyService.getCompanyUsers(selectedCompanyId) : Promise.resolve([]),\n    enabled: !!selectedCompanyId,\n  });\n\n  const createCompanyMutation = useMutation({\n    mutationFn: companyService.createCompany,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['companies'] });\n      setOpenCompanyModal(false);\n    },\n  });\n\n  const assignUserMutation = useMutation({\n    mutationFn: ({ companyId, userId, isAdmin }: { companyId: number; userId: number; isAdmin: boolean }) =>\n      companyService.assignUserToCompany(companyId, { user_id: userId, company_id: companyId, is_company_admin: isAdmin }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['company-users', selectedCompanyId] });\n    },\n  });\n\n  const updateUserAssignmentMutation = useMutation({\n    mutationFn: ({ companyId, userId, updates }: { companyId: number; userId: number; updates: any }) =>\n      companyService.updateUserCompanyAssignment(companyId, userId, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['company-users', selectedCompanyId] });\n    },\n  });\n\n  const removeUserMutation = useMutation({\n    mutationFn: ({ companyId, userId }: { companyId: number; userId: number }) =>\n      companyService.removeUserFromCompany(companyId, userId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['company-users', selectedCompanyId] });\n    },\n  });\n\n  const handleCreateCompany = () => {\n    setSelectedCompany(null);\n    setOpenCompanyModal(true);\n  };\n\n  const handleEditCompany = (company: Company) => {\n    setSelectedCompany(company);\n    setOpenCompanyModal(true);\n  };\n\n  const handleManageUsers = (company: Company) => {\n    setSelectedCompany(company);\n    setSelectedCompanyId(company.id);\n    setOpenUserAssignModal(true);\n  };\n\n  const handleToggleAdmin = (assignment: UserCompanyAssignment) => {\n    updateUserAssignmentMutation.mutate({\n      companyId: assignment.company_id,\n      userId: assignment.user_id,\n      updates: { is_company_admin: !assignment.is_company_admin }\n    });\n  };\n\n  const handleRemoveUser = (assignment: UserCompanyAssignment) => {\n    if (window.confirm(`Remove ${assignment.user_full_name} from ${selectedCompany?.name}?`)) {\n      removeUserMutation.mutate({\n        companyId: assignment.company_id,\n        userId: assignment.user_id\n      });\n    }\n  };\n\n  const canCreateCompany = () => {\n    if (!companies || !orgInfo) {return false;}\n    return companies.length < (orgInfo.max_companies || 1);\n  };\n\n  if (isLoading) {\n    return <Typography>Loading companies...</Typography>;\n  }\n\n  if (error) {\n    return <Alert severity=\"error\">Failed to load companies</Alert>;\n  }\n\n  return (\n    <Box>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h5\">\n          Company Management\n        </Typography>\n        <Box>\n          <Typography variant=\"body2\" color=\"text.secondary\" mr={2}>\n            {companies?.length || 0} / {orgInfo?.max_companies || 1} companies\n          </Typography>\n          {canCreateCompany() && (\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={handleCreateCompany}\n            >\n              Add Company\n            </Button>\n          )}\n        </Box>\n      </Box>\n\n      {!canCreateCompany() && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          You have reached the maximum number of companies ({orgInfo?.max_companies || 1}) for your organization.\n          Contact your administrator to increase the limit.\n        </Alert>\n      )}\n\n      <Grid container spacing={3}>\n        {companies?.map((company: Company) => (\n          <Grid item xs={12} md={6} lg={4} key={company.id}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                  <Business color=\"primary\" sx={{ mr: 1 }} />\n                  <Typography variant=\"h6\" component=\"div\">\n                    {company.name}\n                  </Typography>\n                </Box>\n                \n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  {company.address1}, {company.city}, {company.state}\n                </Typography>\n                \n                {company.business_type && (\n                  <Chip \n                    label={company.business_type} \n                    size=\"small\" \n                    sx={{ mt: 1, mr: 1 }} \n                  />\n                )}\n                \n                {company.industry && (\n                  <Chip \n                    label={company.industry} \n                    size=\"small\" \n                    sx={{ mt: 1 }} \n                    variant=\"outlined\"\n                  />\n                )}\n                \n                {company.gst_number && (\n                  <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\n                    GST: {company.gst_number}\n                  </Typography>\n                )}\n              </CardContent>\n              \n              <CardActions>\n                <Button size=\"small\" startIcon={<Edit />} onClick={() => handleEditCompany(company)}>\n                  Edit\n                </Button>\n                <Button size=\"small\" startIcon={<Groups />} onClick={() => handleManageUsers(company)}>\n                  Users\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {(!companies || companies.length === 0) && (\n        <Paper sx={{ p: 4, textAlign: 'center' }}>\n          <Business sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n          <Typography variant=\"h6\" gutterBottom>\n            No companies found\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" mb={3}>\n            Create your first company to get started with managing your organization.\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleCreateCompany}\n          >\n            Create Company\n          </Button>\n        </Paper>\n      )}\n\n      {/* Company Creation/Edit Modal */}\n      <CompanyDetailsModal\n        open={openCompanyModal}\n        onClose={() => setOpenCompanyModal(false)}\n        onSuccess={() => {\n          queryClient.invalidateQueries({ queryKey: ['companies'] });\n          setOpenCompanyModal(false);\n        }}\n        companyData={selectedCompany}\n        mode={selectedCompany ? 'edit' : 'create'}\n      />\n\n      {/* User Assignment Modal */}\n      <Dialog\n        open={openUserAssignModal}\n        onClose={() => setOpenUserAssignModal(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Manage Users - {selectedCompany?.name}\n        </DialogTitle>\n        <DialogContent>\n          <Box mb={2}>\n            <Button\n              variant=\"outlined\"\n              startIcon={<PersonAdd />}\n              onClick={() => {/* TODO: Open user assignment dialog */}}\n            >\n              Assign User\n            </Button>\n          </Box>\n          \n          <List>\n            {companyUsers?.map((assignment: UserCompanyAssignment) => (\n              <ListItem key={assignment.id}>\n                <ListItemText\n                  primary={assignment.user_full_name}\n                  secondary={assignment.user_email}\n                />\n                <ListItemSecondaryAction>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    <Tooltip title=\"Company Admin\">\n                      <IconButton\n                        color={assignment.is_company_admin ? \"primary\" : \"default\"}\n                        onClick={() => handleToggleAdmin(assignment)}\n                      >\n                        <AdminPanelSettings />\n                      </IconButton>\n                    </Tooltip>\n                    <IconButton\n                      color=\"error\"\n                      onClick={() => handleRemoveUser(assignment)}\n                    >\n                      <Delete />\n                    </IconButton>\n                  </Box>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n          \n          {(!companyUsers || companyUsers.length === 0) && (\n            <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\" py={3}>\n              No users assigned to this company\n            </Typography>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenUserAssignModal(false)}>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default MultiCompanyManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/payment-terms.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":43,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[604,631],"text":""},"desc":"Remove unused variable 'router'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n  Switch,\n  FormControlLabel\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Search,\n  Payment,\n  AccessTime\n} from '@mui/icons-material';\n\nconst PaymentTermsPage: React.FC = () => {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [addDialog, setAddDialog] = useState(false);\n  const [editDialog, setEditDialog] = useState(false);\n  const [selectedTerm, setSelectedTerm] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    term_name: '',\n    term_code: '',\n    description: '',\n    payment_type: 'net_days',\n    due_days: 30,\n    discount_days: 0,\n    discount_percentage: 0,\n    is_default: false,\n    is_active: true\n  });\n\n  // Mock data for demonstration\n  const paymentTerms = [\n    {\n      id: 1,\n      term_code: 'NET30',\n      term_name: 'Net 30 Days',\n      description: 'Payment due within 30 days of invoice date',\n      payment_type: 'net_days',\n      due_days: 30,\n      discount_days: 0,\n      discount_percentage: 0,\n      is_default: true,\n      is_active: true,\n      usage_count: 25\n    },\n    {\n      id: 2,\n      term_code: 'NET15',\n      term_name: 'Net 15 Days',\n      description: 'Payment due within 15 days of invoice date',\n      payment_type: 'net_days',\n      due_days: 15,\n      discount_days: 0,\n      discount_percentage: 0,\n      is_default: false,\n      is_active: true,\n      usage_count: 12\n    },\n    {\n      id: 3,\n      term_code: '2_10_NET30',\n      term_name: '2/10 Net 30',\n      description: '2% discount if paid within 10 days, otherwise due in 30 days',\n      payment_type: 'net_days',\n      due_days: 30,\n      discount_days: 10,\n      discount_percentage: 2,\n      is_default: false,\n      is_active: true,\n      usage_count: 8\n    },\n    {\n      id: 4,\n      term_code: 'COD',\n      term_name: 'Cash on Delivery',\n      description: 'Payment due upon delivery',\n      payment_type: 'immediate',\n      due_days: 0,\n      discount_days: 0,\n      discount_percentage: 0,\n      is_default: false,\n      is_active: true,\n      usage_count: 15\n    },\n    {\n      id: 5,\n      term_code: 'ADVANCE',\n      term_name: 'Advance Payment',\n      description: 'Payment required before delivery',\n      payment_type: 'advance',\n      due_days: 0,\n      discount_days: 0,\n      discount_percentage: 0,\n      is_default: false,\n      is_active: true,\n      usage_count: 18\n    },\n    {\n      id: 6,\n      term_code: 'NET60',\n      term_name: 'Net 60 Days',\n      description: 'Payment due within 60 days of invoice date',\n      payment_type: 'net_days',\n      due_days: 60,\n      discount_days: 0,\n      discount_percentage: 0,\n      is_default: false,\n      is_active: true,\n      usage_count: 5\n    }\n  ];\n\n  const paymentTypes = [\n    { value: 'immediate', label: 'Immediate Payment' },\n    { value: 'advance', label: 'Advance Payment' },\n    { value: 'net_days', label: 'Net Days' },\n    { value: 'eom', label: 'End of Month' },\n    { value: 'custom', label: 'Custom Terms' }\n  ];\n\n  const resetForm = () => {\n    setFormData({\n      term_name: '',\n      term_code: '',\n      description: '',\n      payment_type: 'net_days',\n      due_days: 30,\n      discount_days: 0,\n      discount_percentage: 0,\n      is_default: false,\n      is_active: true\n    });\n  };\n\n  const handleAddClick = () => {\n    resetForm();\n    setAddDialog(true);\n  };\n\n  const handleEditClick = (term: any) => {\n    setSelectedTerm(term);\n    setFormData({\n      term_name: term.term_name || '',\n      term_code: term.term_code || '',\n      description: term.description || '',\n      payment_type: term.payment_type || 'net_days',\n      due_days: term.due_days || 30,\n      discount_days: term.discount_days || 0,\n      discount_percentage: term.discount_percentage || 0,\n      is_default: term.is_default || false,\n      is_active: term.is_active\n    });\n    setEditDialog(true);\n  };\n\n  const handleSubmit = () => {\n    if (selectedTerm) {\n      // TODO: Implement update functionality\n      console.log('Update payment term:', selectedTerm.id, formData);\n    } else {\n      // TODO: Implement create functionality\n      console.log('Create payment term:', formData);\n    }\n    setAddDialog(false);\n    setEditDialog(false);\n  };\n\n  const handleDeleteClick = (term: any) => {\n    // TODO: Implement delete functionality\n    console.log('Delete payment term:', term.id);\n  };\n\n  const filteredTerms = paymentTerms.filter((term: any) =>\n    term.term_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    term.term_code?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    term.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getTotalUsage = () => {\n    return paymentTerms.reduce((sum, term) => sum + term.usage_count, 0);\n  };\n\n  const getAverageDays = () => {\n    const netDaysTerms = paymentTerms.filter(term => term.payment_type === 'net_days' && term.is_active);\n    if (netDaysTerms.length === 0) {return 0;}\n    const total = netDaysTerms.reduce((sum, term) => sum + term.due_days, 0);\n    return Math.round(total / netDaysTerms.length);\n  };\n\n  const getTermDisplay = (term: any) => {\n    if (term.payment_type === 'immediate') {return 'Immediate';}\n    if (term.payment_type === 'advance') {return 'Advance';}\n    if (term.discount_percentage > 0) {\n      return `${term.discount_percentage}/${term.discount_days} Net ${term.due_days}`;\n    }\n    return `Net ${term.due_days} days`;\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Payment Terms\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleAddClick}\n          >\n            Add Payment Term\n          </Button>\n        </Box>\n\n        {/* Info Alert */}\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          Configure payment terms to automatically set payment due dates and discount conditions \n          in your invoices and purchase orders.\n        </Alert>\n\n        {/* Stats Cards */}\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Total Terms\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {paymentTerms.length}\n                    </Typography>\n                  </Box>\n                  <Payment sx={{ fontSize: 40, color: 'primary.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Active Terms\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {paymentTerms.filter(term => term.is_active).length}\n                    </Typography>\n                  </Box>\n                  <Payment sx={{ fontSize: 40, color: 'success.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Avg. Days\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {getAverageDays()}\n                    </Typography>\n                  </Box>\n                  <AccessTime sx={{ fontSize: 40, color: 'warning.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Total Usage\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {getTotalUsage()}\n                    </Typography>\n                  </Box>\n                  <Payment sx={{ fontSize: 40, color: 'info.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mb: 3 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search payment terms by name, code, or description...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\n            }}\n          />\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Term Code</TableCell>\n                <TableCell>Term Name</TableCell>\n                <TableCell>Payment Type</TableCell>\n                <TableCell>Terms</TableCell>\n                <TableCell>Usage</TableCell>\n                <TableCell>Default</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredTerms.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    <Box sx={{ py: 3 }}>\n                      <Payment sx={{ fontSize: 48, color: 'action.disabled', mb: 2 }} />\n                      <Typography variant=\"h6\" color=\"textSecondary\">\n                        No payment terms found\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Add your first payment term to configure payment conditions\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredTerms.map((term: any) => (\n                  <TableRow key={term.id}>\n                    <TableCell>\n                      <Typography variant=\"body1\" fontWeight=\"medium\">\n                        {term.term_code}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Payment sx={{ mr: 2, color: 'primary.main' }} />\n                        <Box>\n                          <Typography variant=\"body1\">\n                            {term.term_name}\n                          </Typography>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            {term.description}\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={paymentTypes.find(pt => pt.value === term.payment_type)?.label || term.payment_type}\n                        size=\"small\"\n                        color=\"primary\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body1\" fontWeight=\"medium\">\n                        {getTermDisplay(term)}\n                      </Typography>\n                      {term.discount_percentage > 0 && (\n                        <Typography variant=\"body2\" color=\"success.main\">\n                          {term.discount_percentage}% discount available\n                        </Typography>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={`${term.usage_count} times`}\n                        size=\"small\"\n                        color=\"info\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {term.is_default && (\n                        <Chip\n                          label=\"Default\"\n                          size=\"small\"\n                          color=\"warning\"\n                        />\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={term.is_active ? 'Active' : 'Inactive'}\n                        color={term.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" color=\"primary\" onClick={() => handleEditClick(term)}>\n                        <Edit />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"error\" onClick={() => handleDeleteClick(term)}>\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {/* Add/Edit Payment Term Dialog */}\n        <Dialog \n          open={addDialog || editDialog} \n          onClose={() => { setAddDialog(false); setEditDialog(false); }}\n          maxWidth=\"sm\" \n          fullWidth\n        >\n          <DialogTitle>\n            {selectedTerm ? 'Edit Payment Term' : 'Add New Payment Term'}\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Term Code *\"\n                  value={formData.term_code}\n                  onChange={(e) => setFormData(prev => ({ ...prev, term_code: e.target.value }))}\n                  placeholder=\"e.g., NET30\"\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Payment Type</InputLabel>\n                  <Select\n                    value={formData.payment_type}\n                    label=\"Payment Type\"\n                    onChange={(e) => setFormData(prev => ({ ...prev, payment_type: e.target.value }))}\n                  >\n                    {paymentTypes.map((type) => (\n                      <MenuItem key={type.value} value={type.value}>\n                        {type.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Term Name *\"\n                  value={formData.term_name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, term_name: e.target.value }))}\n                  placeholder=\"e.g., Net 30 Days\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Description\"\n                  multiline\n                  rows={2}\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                />\n              </Grid>\n              \n              {formData.payment_type === 'net_days' && (\n                <>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Due Days *\"\n                      type=\"number\"\n                      value={formData.due_days}\n                      onChange={(e) => setFormData(prev => ({ ...prev, due_days: parseInt(e.target.value) || 0 }))}\n                      InputProps={{ inputProps: { min: 0 } }}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Discount Days\"\n                      type=\"number\"\n                      value={formData.discount_days}\n                      onChange={(e) => setFormData(prev => ({ ...prev, discount_days: parseInt(e.target.value) || 0 }))}\n                      InputProps={{ inputProps: { min: 0 } }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Discount Percentage (%)\"\n                      type=\"number\"\n                      value={formData.discount_percentage}\n                      onChange={(e) => setFormData(prev => ({ ...prev, discount_percentage: parseFloat(e.target.value) || 0 }))}\n                      InputProps={{ inputProps: { min: 0, max: 100, step: 0.01 } }}\n                    />\n                  </Grid>\n                </>\n              )}\n              \n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.is_default}\n                      onChange={(e) => setFormData(prev => ({ ...prev, is_default: e.target.checked }))}\n                    />\n                  }\n                  label=\"Set as Default Payment Term\"\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => { setAddDialog(false); setEditDialog(false); }}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit} variant=\"contained\">\n              {selectedTerm ? 'Update' : 'Create'}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Container>\n  );\n};\n\nexport default PaymentTermsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/products.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[450,460],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[460,472],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[504,518],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[518,533],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Inventory' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Inventory"},"fix":{"range":[662,675],"text":""},"desc":"Remove unused variable 'Inventory'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[675,689],"text":""},"desc":"Remove unused variable 'Visibility'."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/masters/products.tsx\n\n// Standalone Products Page - Extract from masters/index.tsx\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  InputLabel,\n  FormControl,\n  TableSortLabel,\n  InputAdornment,\n  Autocomplete,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Inventory,\n  Visibility,\n  Search\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { masterDataService } from '../../services/authService';\nimport ExcelImportExport from '../../components/ExcelImportExport';\nimport { bulkImportProducts } from '../../services/masterService';\nimport Grid from '@mui/material/Grid';\nimport { useAuth } from '../../context/AuthContext';\n\n// Utility function to get product display name\nconst getProductDisplayName = (product: any): string => {\n  return product.product_name || product.name || '';\n};\n\nconst ProductsPage: React.FC = () => {\n  const router = useRouter();\n  const { action } = router.query;\n  const { isOrgContextReady } = useAuth();\n  const [itemDialog, setItemDialog] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  const [formData, setFormData] = useState({\n    product_name: '',\n    hsn_code: '',\n    part_number: '',\n    unit: '',\n    unit_price: '',\n    gst_rate: '',\n    is_gst_inclusive: false,\n    reorder_level: '',\n    description: '',\n    is_manufactured: false,\n    is_active: true\n  });\n  const queryClient = useQueryClient();\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: ['products'],\n    queryFn: () => masterDataService.getProducts(),\n    enabled: isOrgContextReady,\n  });\n\n  // Normalize products to ensure consistent product_name property\n  const normalizedProducts = useMemo(() => {\n    if (!products) {return [];}\n    return products.map((product: any) => ({\n      ...product,\n      product_name: product.product_name || product.name || '',\n    }));\n  }, [products]);\n\n  // Filter and sort products\n  const filteredAndSortedProducts = useMemo(() => {\n    if (!normalizedProducts) {return [];}\n    \n    // Filter products based on search term\n    const filtered = normalizedProducts.filter((product: any) => {\n      const searchLower = searchTerm.toLowerCase();\n      return (\n        (product.product_name || '').toLowerCase().includes(searchLower) ||\n        (product.hsn_code || '').toLowerCase().includes(searchLower) ||\n        (product.part_number || '').toLowerCase().includes(searchLower)\n      );\n    });\n    \n    // Sort products by name\n    filtered.sort((a: any, b: any) => {\n      const nameA = (a.product_name || '').toLowerCase();\n      const nameB = (b.product_name || '').toLowerCase();\n      \n      if (sortOrder === 'asc') {\n        return nameA.localeCompare(nameB);\n      } else {\n        return nameB.localeCompare(nameA);\n      }\n    });\n    \n    return filtered;\n  }, [normalizedProducts, searchTerm, sortOrder]);\n\n  const handleSortToggle = () => {\n    setSortOrder(prev => prev === 'asc' ? 'desc' : 'asc');\n  };\n\n  const createItemMutation = useMutation({\n    mutationFn: (data: any) => masterDataService.createProduct(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['products'] });\n      setItemDialog(false);\n      setSelectedItem(null);\n      setFormData({\n        product_name: '',\n        hsn_code: '',\n        part_number: '',\n        unit: '',\n        unit_price: '',\n        gst_rate: '',\n        is_gst_inclusive: false,\n        reorder_level: '',\n        description: '',\n        is_manufactured: false,\n        is_active: true\n      });\n    },\n    onError: (error: any) => {\n      console.error('Error creating product:', error);\n      setErrorMessage(error.response?.data?.detail || 'Failed to create product');\n    }\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: (data: any) => masterDataService.updateProduct(data.id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['products'] });\n      setItemDialog(false);\n      setSelectedItem(null);\n      setFormData({\n        product_name: '',\n        hsn_code: '',\n        part_number: '',\n        unit: '',\n        unit_price: '',\n        gst_rate: '',\n        is_gst_inclusive: false,\n        reorder_level: '',\n        description: '',\n        is_manufactured: false,\n        is_active: true\n      });\n    },\n    onError: (error: any) => {\n      console.error('Error updating product:', error);\n      setErrorMessage(error.response?.data?.detail || 'Failed to update product');\n    }\n  });\n\n  // HSN/Product bidirectional search functionality\n  const uniqueHsnCodes = useMemo(() => {\n    const hsnSet = new Set<string>();\n    normalizedProducts.forEach((product: any) => {\n      if (product.hsn_code && product.hsn_code.trim()) {\n        hsnSet.add(product.hsn_code.trim());\n      }\n    });\n    return Array.from(hsnSet).sort();\n  }, [normalizedProducts]);\n\n  const getProductsByHsn = useCallback((hsnCode: string) => {\n    if (!hsnCode.trim()) {return [];}\n    return normalizedProducts.filter((product: any) => \n      product.hsn_code && product.hsn_code.toLowerCase().includes(hsnCode.toLowerCase())\n    );\n  }, [normalizedProducts]);\n\n  const getHsnByProductName = useCallback((productName: string) => {\n    if (!productName.trim()) {return [];}\n    const matchingProducts = normalizedProducts.filter((product: any) =>\n      product.product_name.toLowerCase().includes(productName.toLowerCase())\n    );\n    const hsnCodes = matchingProducts\n      .map((product: any) => product.hsn_code)\n      .filter((hsn: string) => hsn && hsn.trim())\n      .filter((hsn: string, index: number, array: string[]) => array.indexOf(hsn) === index); // unique\n    return hsnCodes;\n  }, [normalizedProducts]);\n\n  // Auto-population effects\n  React.useEffect(() => {\n    // When product name changes, suggest HSN codes\n    if (formData.product_name && formData.product_name.length > 2) {\n      const suggestedHsns = getHsnByProductName(formData.product_name);\n      if (suggestedHsns.length === 1 && !formData.hsn_code) {\n        // Auto-populate if there's exactly one matching HSN and HSN field is empty\n        setFormData(prev => ({ ...prev, hsn_code: suggestedHsns[0] }));\n      }\n    }\n  }, [formData.product_name, formData.hsn_code, getHsnByProductName]);\n\n  React.useEffect(() => {\n    // When HSN code changes, suggest product info\n    if (formData.hsn_code && formData.hsn_code.length > 2) {\n      const matchingProducts = getProductsByHsn(formData.hsn_code);\n      if (matchingProducts.length > 0 && !formData.product_name) {\n        // If there's a strong match and product name is empty, suggest the most common unit/gst_rate\n        const commonUnit = matchingProducts[0].unit;\n        const commonGstRate = matchingProducts[0].gst_rate;\n        \n        if (commonUnit && commonUnit !== formData.unit) {\n          setFormData(prev => ({ ...prev, unit: commonUnit }));\n        }\n        if (commonGstRate && commonGstRate !== formData.gst_rate) {\n          setFormData(prev => ({ ...prev, gst_rate: String(commonGstRate) }));\n        }\n      }\n    }\n  }, [formData.hsn_code, formData.product_name, formData.unit, formData.gst_rate, getProductsByHsn]);\n\n  const deleteItemMutation = useMutation({\n    mutationFn: (id: number) => masterDataService.deleteProduct(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['products'] });\n    },\n    onError: (error: any) => {\n      console.error('Error deleting product:', error);\n      setErrorMessage(error.response?.data?.detail || 'Failed to delete product');\n    }\n  });\n\n  const openItemDialog = useCallback((item: any = null) => {\n    setSelectedItem(item);\n    if (item) {\n      setFormData({ ...item, product_name: item.product_name || item.name || '' });\n    } else {\n      setFormData({\n        product_name: '',\n        hsn_code: '',\n        part_number: '',\n        unit: '',\n        unit_price: '',\n        gst_rate: '',\n        is_gst_inclusive: false,\n        reorder_level: '',\n        description: '',\n        is_manufactured: false,\n        is_active: true\n      });\n    }\n    setErrorMessage('');\n    setItemDialog(true);\n  }, []);\n\n  const handleSubmit = () => {\n    const data = { \n      ...formData, \n      name: formData.product_name // Map back to 'name' for backend compatibility\n    };\n    \n    // Convert string numbers to actual numbers\n    if (data.unit_price) {(data as any).unit_price = parseFloat(data.unit_price as string);}\n    if (data.gst_rate) {(data as any).gst_rate = parseFloat(data.gst_rate as string);}\n    if (data.reorder_level) {(data as any).reorder_level = parseInt(data.reorder_level as string);}\n    \n    if (selectedItem) {\n      updateItemMutation.mutate({ ...selectedItem, ...data });\n    } else {\n      createItemMutation.mutate(data);\n    }\n  };\n\n  // Auto-open add dialog if action=add in URL\n  React.useEffect(() => {\n    if (action === 'add') {\n      openItemDialog(null);\n    }\n  }, [action, openItemDialog]);\n\n  if (!isOrgContextReady) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        {/* Header */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            Product Management\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={() => openItemDialog()}\n            sx={{ ml: 2 }}\n          >\n            Add Product\n          </Button>\n        </Box>\n\n        {/* Products Table */}\n        <Paper sx={{ p: 3 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">All Products</Typography>\n            <ExcelImportExport\n              data={products || []}\n              entity=\"Products\"\n              onImport={bulkImportProducts}\n            />\n          </Box>\n          \n          {/* Search Bar */}\n          <Box sx={{ mb: 2 }}>\n            <TextField\n              fullWidth\n              placeholder=\"Search products by name, HSN code, or part number...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Search />\n                  </InputAdornment>\n                ),\n              }}\n              sx={{ maxWidth: 500 }}\n            />\n          </Box>\n          \n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>\n                    <TableSortLabel\n                      active={true}\n                      direction={sortOrder}\n                      onClick={handleSortToggle}\n                    >\n                      Name\n                    </TableSortLabel>\n                  </TableCell>\n                  <TableCell>HSN Code</TableCell>\n                  <TableCell>Part Number</TableCell>\n                  <TableCell>Unit</TableCell>\n                  <TableCell>Unit Price</TableCell>\n                  <TableCell>GST Rate</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredAndSortedProducts?.map((item: any) => (\n                  <TableRow key={item.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\n                          {getProductDisplayName(item)}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          {item.description}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{item.hsn_code || 'N/A'}</TableCell>\n                    <TableCell>{item.part_number || 'N/A'}</TableCell>\n                    <TableCell>{item.unit}</TableCell>\n                    <TableCell>₹{item.unit_price}</TableCell>\n                    <TableCell>{item.gst_rate}%</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.is_manufactured ? 'Manufactured' : 'Purchased'}\n                        color={item.is_manufactured ? 'primary' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.is_active ? 'Active' : 'Inactive'}\n                        color={item.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton onClick={() => openItemDialog(item)} size=\"small\">\n                        <Edit />\n                      </IconButton>\n                      <IconButton onClick={() => deleteItemMutation.mutate(item.id)} size=\"small\" color=\"error\">\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n\n        {/* Add/Edit Dialog */}\n        <Dialog open={itemDialog} onClose={() => setItemDialog(false)} maxWidth=\"md\" fullWidth>\n          <DialogTitle>{selectedItem ? 'Edit Product' : 'Add New Product'}</DialogTitle>\n          <DialogContent>\n            {errorMessage && <Alert severity=\"error\" sx={{ mb: 2 }}>{errorMessage}</Alert>}\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Product Name\"\n                  value={formData.product_name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, product_name: e.target.value }))}\n                  required\n                  helperText={\n                    formData.product_name && formData.product_name.length > 2 && getHsnByProductName(formData.product_name).length > 0\n                      ? `Suggested HSN: ${getHsnByProductName(formData.product_name).slice(0, 3).join(', ')}`\n                      : undefined\n                  }\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <Autocomplete\n                  freeSolo\n                  options={uniqueHsnCodes}\n                  value={formData.hsn_code || ''}\n                  onInputChange={(_, newValue) => {\n                    setFormData(prev => ({ ...prev, hsn_code: newValue || '' }));\n                  }}\n                  onChange={(_, newValue) => {\n                    setFormData(prev => ({ ...prev, hsn_code: newValue || '' }));\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      fullWidth\n                      label=\"HSN Code\"\n                      placeholder=\"Search or enter HSN code...\"\n                      helperText={\n                        formData.hsn_code && getProductsByHsn(formData.hsn_code).length > 0\n                          ? `Found ${getProductsByHsn(formData.hsn_code).length} product(s) with this HSN`\n                          : undefined\n                      }\n                      InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                          <>\n                            {productsLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                            {params.InputProps.endAdornment}\n                          </>\n                        ),\n                      }}\n                    />\n                  )}\n                  renderOption={(props, option) => (\n                    <Box component=\"li\" {...props}>\n                      <Box sx={{ width: '100%' }}>\n                        <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\n                          {option}\n                        </Typography>\n                        {getProductsByHsn(option).length > 0 && (\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {getProductsByHsn(option).length} product(s): {getProductsByHsn(option).slice(0, 2).map(p => p.product_name).join(', ')}\n                            {getProductsByHsn(option).length > 2 && '...'}\n                          </Typography>\n                        )}\n                      </Box>\n                    </Box>\n                  )}\n                  noOptionsText=\"No HSN codes found\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Part Number\"\n                  value={formData.part_number}\n                  onChange={(e) => setFormData(prev => ({ ...prev, part_number: e.target.value }))}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Unit\"\n                  value={formData.unit}\n                  onChange={(e) => setFormData(prev => ({ ...prev, unit: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Unit Price\"\n                  type=\"number\"\n                  value={formData.unit_price}\n                  onChange={(e) => setFormData(prev => ({ ...prev, unit_price: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"GST Rate (%)\"\n                  type=\"number\"\n                  value={formData.gst_rate}\n                  onChange={(e) => setFormData(prev => ({ ...prev, gst_rate: e.target.value }))}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Reorder Level\"\n                  type=\"number\"\n                  value={formData.reorder_level}\n                  onChange={(e) => setFormData(prev => ({ ...prev, reorder_level: e.target.value }))}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={formData.is_gst_inclusive}\n                      onChange={(e) => setFormData(prev => ({ ...prev, is_gst_inclusive: e.target.checked }))}\n                    />\n                  }\n                  label=\"GST Inclusive Pricing\"\n                />\n              </Grid>\n              <Grid size={12}>\n                <TextField\n                  fullWidth\n                  label=\"Description\"\n                  multiline\n                  rows={3}\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={formData.is_manufactured}\n                      onChange={(e) => setFormData(prev => ({ ...prev, is_manufactured: e.target.checked }))}\n                    />\n                  }\n                  label=\"Manufactured Product\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={formData.is_active}\n                      onChange={(e) => setFormData(prev => ({ ...prev, is_active: e.target.checked }))}\n                    />\n                  }\n                  label=\"Active\"\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setItemDialog(false)}>Cancel</Button>\n            <Button onClick={handleSubmit} variant=\"contained\">Save</Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Container>\n  );\n};\n\nexport default ProductsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/tax-codes.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":43,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[597,624],"text":""},"desc":"Remove unused variable 'router'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n  Switch,\n  FormControlLabel\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Search,\n  Receipt,\n  Percent\n} from '@mui/icons-material';\n\nconst TaxCodesPage: React.FC = () => {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [addDialog, setAddDialog] = useState(false);\n  const [editDialog, setEditDialog] = useState(false);\n  const [selectedTaxCode, setSelectedTaxCode] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    tax_code: '',\n    tax_name: '',\n    tax_rate: 0,\n    tax_type: 'GST',\n    description: '',\n    is_default: false,\n    is_active: true\n  });\n\n  // Mock data for demonstration\n  const taxCodes = [\n    {\n      id: 1,\n      tax_code: 'GST_0',\n      tax_name: 'GST 0%',\n      tax_rate: 0,\n      tax_type: 'GST',\n      description: 'Nil GST rate for exempt items',\n      is_default: false,\n      is_active: true,\n      usage_count: 5\n    },\n    {\n      id: 2,\n      tax_code: 'GST_5',\n      tax_name: 'GST 5%',\n      tax_rate: 5,\n      tax_type: 'GST',\n      description: 'GST at 5% for essential items',\n      is_default: false,\n      is_active: true,\n      usage_count: 12\n    },\n    {\n      id: 3,\n      tax_code: 'GST_12',\n      tax_name: 'GST 12%',\n      tax_rate: 12,\n      tax_type: 'GST',\n      description: 'GST at 12% for standard items',\n      is_default: false,\n      is_active: true,\n      usage_count: 25\n    },\n    {\n      id: 4,\n      tax_code: 'GST_18',\n      tax_name: 'GST 18%',\n      tax_rate: 18,\n      tax_type: 'GST',\n      description: 'GST at 18% for most items',\n      is_default: true,\n      is_active: true,\n      usage_count: 45\n    },\n    {\n      id: 5,\n      tax_code: 'GST_28',\n      tax_name: 'GST 28%',\n      tax_rate: 28,\n      tax_type: 'GST',\n      description: 'GST at 28% for luxury items',\n      is_default: false,\n      is_active: true,\n      usage_count: 8\n    },\n    {\n      id: 6,\n      tax_code: 'IGST_18',\n      tax_name: 'IGST 18%',\n      tax_rate: 18,\n      tax_type: 'IGST',\n      description: 'Integrated GST at 18% for interstate sales',\n      is_default: false,\n      is_active: true,\n      usage_count: 15\n    }\n  ];\n\n  const taxTypes = [\n    { value: 'GST', label: 'GST (Goods and Services Tax)' },\n    { value: 'IGST', label: 'IGST (Integrated GST)' },\n    { value: 'CGST', label: 'CGST (Central GST)' },\n    { value: 'SGST', label: 'SGST (State GST)' },\n    { value: 'CESS', label: 'CESS' },\n    { value: 'VAT', label: 'VAT (Value Added Tax)' },\n    { value: 'OTHER', label: 'Other Tax' }\n  ];\n\n  const resetForm = () => {\n    setFormData({\n      tax_code: '',\n      tax_name: '',\n      tax_rate: 0,\n      tax_type: 'GST',\n      description: '',\n      is_default: false,\n      is_active: true\n    });\n  };\n\n  const handleAddClick = () => {\n    resetForm();\n    setAddDialog(true);\n  };\n\n  const handleEditClick = (taxCode: any) => {\n    setSelectedTaxCode(taxCode);\n    setFormData({\n      tax_code: taxCode.tax_code || '',\n      tax_name: taxCode.tax_name || '',\n      tax_rate: taxCode.tax_rate || 0,\n      tax_type: taxCode.tax_type || 'GST',\n      description: taxCode.description || '',\n      is_default: taxCode.is_default || false,\n      is_active: taxCode.is_active\n    });\n    setEditDialog(true);\n  };\n\n  const handleSubmit = () => {\n    if (selectedTaxCode) {\n      // TODO: Implement update functionality\n      console.log('Update tax code:', selectedTaxCode.id, formData);\n    } else {\n      // TODO: Implement create functionality\n      console.log('Create tax code:', formData);\n    }\n    setAddDialog(false);\n    setEditDialog(false);\n  };\n\n  const handleDeleteClick = (taxCode: any) => {\n    // TODO: Implement delete functionality\n    console.log('Delete tax code:', taxCode.id);\n  };\n\n  const filteredTaxCodes = taxCodes.filter((taxCode: any) =>\n    taxCode.tax_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    taxCode.tax_code?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    taxCode.tax_type?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getTotalUsage = () => {\n    return taxCodes.reduce((sum, taxCode) => sum + taxCode.usage_count, 0);\n  };\n\n  const getAverageRate = () => {\n    const activeTaxCodes = taxCodes.filter(tc => tc.is_active && tc.tax_rate > 0);\n    if (activeTaxCodes.length === 0) {return 0;}\n    const total = activeTaxCodes.reduce((sum, tc) => sum + tc.tax_rate, 0);\n    return (total / activeTaxCodes.length).toFixed(1);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Tax Codes\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleAddClick}\n          >\n            Add Tax Code\n          </Button>\n        </Box>\n\n        {/* Info Alert */}\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          Configure tax codes for different tax rates and types. These will be used automatically \n          in invoices, purchase orders, and financial calculations.\n        </Alert>\n\n        {/* Stats Cards */}\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Total Tax Codes\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {taxCodes.length}\n                    </Typography>\n                  </Box>\n                  <Receipt sx={{ fontSize: 40, color: 'primary.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Active Tax Codes\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {taxCodes.filter(tc => tc.is_active).length}\n                    </Typography>\n                  </Box>\n                  <Receipt sx={{ fontSize: 40, color: 'success.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Average Rate\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {getAverageRate()}%\n                    </Typography>\n                  </Box>\n                  <Percent sx={{ fontSize: 40, color: 'warning.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Total Usage\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {getTotalUsage()}\n                    </Typography>\n                  </Box>\n                  <Receipt sx={{ fontSize: 40, color: 'info.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mb: 3 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search tax codes by name, code, or type...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\n            }}\n          />\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Tax Code</TableCell>\n                <TableCell>Tax Name</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Rate (%)</TableCell>\n                <TableCell>Usage</TableCell>\n                <TableCell>Default</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredTaxCodes.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    <Box sx={{ py: 3 }}>\n                      <Receipt sx={{ fontSize: 48, color: 'action.disabled', mb: 2 }} />\n                      <Typography variant=\"h6\" color=\"textSecondary\">\n                        No tax codes found\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Add your first tax code to configure tax calculations\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredTaxCodes.map((taxCode: any) => (\n                  <TableRow key={taxCode.id}>\n                    <TableCell>\n                      <Typography variant=\"body1\" fontWeight=\"medium\">\n                        {taxCode.tax_code}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Receipt sx={{ mr: 2, color: 'primary.main' }} />\n                        <Box>\n                          <Typography variant=\"body1\">\n                            {taxCode.tax_name}\n                          </Typography>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            {taxCode.description}\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={taxCode.tax_type}\n                        size=\"small\"\n                        color=\"primary\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"h6\" color=\"secondary\">\n                        {taxCode.tax_rate}%\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={`${taxCode.usage_count} times`}\n                        size=\"small\"\n                        color=\"info\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {taxCode.is_default && (\n                        <Chip\n                          label=\"Default\"\n                          size=\"small\"\n                          color=\"warning\"\n                        />\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={taxCode.is_active ? 'Active' : 'Inactive'}\n                        color={taxCode.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" color=\"primary\" onClick={() => handleEditClick(taxCode)}>\n                        <Edit />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"error\" onClick={() => handleDeleteClick(taxCode)}>\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {/* Add/Edit Tax Code Dialog */}\n        <Dialog \n          open={addDialog || editDialog} \n          onClose={() => { setAddDialog(false); setEditDialog(false); }}\n          maxWidth=\"sm\" \n          fullWidth\n        >\n          <DialogTitle>\n            {selectedTaxCode ? 'Edit Tax Code' : 'Add New Tax Code'}\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Tax Code *\"\n                  value={formData.tax_code}\n                  onChange={(e) => setFormData(prev => ({ ...prev, tax_code: e.target.value }))}\n                  placeholder=\"e.g., GST_18\"\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Tax Rate (%) *\"\n                  type=\"number\"\n                  value={formData.tax_rate}\n                  onChange={(e) => setFormData(prev => ({ ...prev, tax_rate: parseFloat(e.target.value) || 0 }))}\n                  InputProps={{ inputProps: { min: 0, max: 100, step: 0.01 } }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Tax Name *\"\n                  value={formData.tax_name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, tax_name: e.target.value }))}\n                  placeholder=\"e.g., GST 18%\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <InputLabel>Tax Type</InputLabel>\n                  <Select\n                    value={formData.tax_type}\n                    label=\"Tax Type\"\n                    onChange={(e) => setFormData(prev => ({ ...prev, tax_type: e.target.value }))}\n                  >\n                    {taxTypes.map((type) => (\n                      <MenuItem key={type.value} value={type.value}>\n                        {type.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Description\"\n                  multiline\n                  rows={3}\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.is_default}\n                      onChange={(e) => setFormData(prev => ({ ...prev, is_default: e.target.checked }))}\n                    />\n                  }\n                  label=\"Set as Default Tax Code\"\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => { setAddDialog(false); setEditDialog(false); }}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit} variant=\"contained\">\n              {selectedTaxCode ? 'Update' : 'Create'}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Container>\n  );\n};\n\nexport default TaxCodesPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/units.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":47,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[661,688],"text":""},"desc":"Remove unused variable 'router'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n  Switch,\n  FormControlLabel,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Search,\n  Scale,\n  SwapHoriz,\n  ExpandMore\n} from '@mui/icons-material';\n\nconst UnitsPage: React.FC = () => {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [addDialog, setAddDialog] = useState(false);\n  const [editDialog, setEditDialog] = useState(false);\n  const [selectedUnit, setSelectedUnit] = useState<any>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    symbol: '',\n    description: '',\n    unit_type: 'weight', // weight, length, volume, quantity, etc.\n    base_unit: false,\n    conversion_factor: 1,\n    alternate_units: []\n  });\n\n  // Mock data for demonstration\n  const units = [\n    {\n      id: 1,\n      name: 'Kilogram',\n      symbol: 'kg',\n      description: 'Standard unit of mass',\n      unit_type: 'weight',\n      base_unit: true,\n      conversion_factor: 1,\n      alternate_units: [\n        { unit: 'Gram', symbol: 'g', conversion_factor: 1000 },\n        { unit: 'Pound', symbol: 'lb', conversion_factor: 2.205 }\n      ],\n      is_active: true\n    },\n    {\n      id: 2,\n      name: 'Meter',\n      symbol: 'm',\n      description: 'Standard unit of length',\n      unit_type: 'length',\n      base_unit: true,\n      conversion_factor: 1,\n      alternate_units: [\n        { unit: 'Centimeter', symbol: 'cm', conversion_factor: 100 },\n        { unit: 'Millimeter', symbol: 'mm', conversion_factor: 1000 },\n        { unit: 'Inch', symbol: 'in', conversion_factor: 39.37 }\n      ],\n      is_active: true\n    },\n    {\n      id: 3,\n      name: 'Liter',\n      symbol: 'L',\n      description: 'Standard unit of volume',\n      unit_type: 'volume',\n      base_unit: true,\n      conversion_factor: 1,\n      alternate_units: [\n        { unit: 'Milliliter', symbol: 'ml', conversion_factor: 1000 },\n        { unit: 'Gallon', symbol: 'gal', conversion_factor: 0.264 }\n      ],\n      is_active: true\n    },\n    {\n      id: 4,\n      name: 'Piece',\n      symbol: 'pcs',\n      description: 'Count unit for discrete items',\n      unit_type: 'quantity',\n      base_unit: true,\n      conversion_factor: 1,\n      alternate_units: [\n        { unit: 'Dozen', symbol: 'doz', conversion_factor: 0.083 },\n        { unit: 'Pair', symbol: 'pr', conversion_factor: 0.5 }\n      ],\n      is_active: true\n    }\n  ];\n\n  const unitTypes = [\n    { value: 'weight', label: 'Weight/Mass' },\n    { value: 'length', label: 'Length/Distance' },\n    { value: 'volume', label: 'Volume/Capacity' },\n    { value: 'quantity', label: 'Quantity/Count' },\n    { value: 'area', label: 'Area' },\n    { value: 'time', label: 'Time' },\n    { value: 'temperature', label: 'Temperature' },\n    { value: 'other', label: 'Other' }\n  ];\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      symbol: '',\n      description: '',\n      unit_type: 'weight',\n      base_unit: false,\n      conversion_factor: 1,\n      alternate_units: []\n    });\n  };\n\n  const handleAddClick = () => {\n    resetForm();\n    setAddDialog(true);\n  };\n\n  const handleEditClick = (unit: any) => {\n    setSelectedUnit(unit);\n    setFormData({\n      name: unit.name || '',\n      symbol: unit.symbol || '',\n      description: unit.description || '',\n      unit_type: unit.unit_type || 'weight',\n      base_unit: unit.base_unit || false,\n      conversion_factor: unit.conversion_factor || 1,\n      alternate_units: unit.alternate_units || []\n    });\n    setEditDialog(true);\n  };\n\n  const handleSubmit = () => {\n    if (selectedUnit) {\n      // TODO: Implement update functionality\n      console.log('Update unit:', selectedUnit.id, formData);\n    } else {\n      // TODO: Implement create functionality\n      console.log('Create unit:', formData);\n    }\n    setAddDialog(false);\n    setEditDialog(false);\n  };\n\n  const handleDeleteClick = (unit: any) => {\n    // TODO: Implement delete functionality\n    console.log('Delete unit:', unit.id);\n  };\n\n  const addAlternateUnit = () => {\n    setFormData(prev => ({\n      ...prev,\n      alternate_units: [\n        ...prev.alternate_units,\n        { unit: '', symbol: '', conversion_factor: 1 }\n      ]\n    }));\n  };\n\n  const removeAlternateUnit = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      alternate_units: prev.alternate_units.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateAlternateUnit = (index: number, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      alternate_units: prev.alternate_units.map((unit, i) => \n        i === index ? { ...unit, [field]: value } : unit\n      )\n    }));\n  };\n\n  const filteredUnits = units.filter((unit: any) =>\n    unit.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    unit.symbol?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    unit.unit_type?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Units of Measurement\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleAddClick}\n          >\n            Add Unit\n          </Button>\n        </Box>\n\n        {/* Info Alert */}\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          Define units of measurement for your inventory items. Set up alternate unit relations \n          to automatically convert between different units (e.g., kg to grams, meters to centimeters).\n        </Alert>\n\n        {/* Stats Cards */}\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Total Units\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {units.length}\n                    </Typography>\n                  </Box>\n                  <Scale sx={{ fontSize: 40, color: 'primary.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Base Units\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {units.filter(unit => unit.base_unit).length}\n                    </Typography>\n                  </Box>\n                  <Scale sx={{ fontSize: 40, color: 'success.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Unit Types\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {new Set(units.map(unit => unit.unit_type)).size}\n                    </Typography>\n                  </Box>\n                  <Scale sx={{ fontSize: 40, color: 'warning.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      Alternate Units\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {units.reduce((sum, unit) => sum + unit.alternate_units.length, 0)}\n                    </Typography>\n                  </Box>\n                  <SwapHoriz sx={{ fontSize: 40, color: 'info.main' }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mb: 3 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search units by name, symbol, or type...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\n            }}\n          />\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Symbol</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Base Unit</TableCell>\n                <TableCell>Alternate Units</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredUnits.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={7} align=\"center\">\n                    <Box sx={{ py: 3 }}>\n                      <Scale sx={{ fontSize: 48, color: 'action.disabled', mb: 2 }} />\n                      <Typography variant=\"h6\" color=\"textSecondary\">\n                        No units found\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Add your first unit of measurement\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                filteredUnits.map((unit: any) => (\n                  <TableRow key={unit.id}>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Scale sx={{ mr: 2, color: 'primary.main' }} />\n                        <Box>\n                          <Typography variant=\"body1\" fontWeight=\"medium\">\n                            {unit.name}\n                          </Typography>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            {unit.description}\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={unit.symbol}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={unit.unit_type}\n                        size=\"small\"\n                        color=\"primary\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={unit.base_unit ? 'Base' : 'Derived'}\n                        size=\"small\"\n                        color={unit.base_unit ? 'success' : 'default'}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={`${unit.alternate_units.length} units`}\n                        size=\"small\"\n                        color=\"info\"\n                        icon={<SwapHoriz />}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={unit.is_active ? 'Active' : 'Inactive'}\n                        color={unit.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\" color=\"primary\" onClick={() => handleEditClick(unit)}>\n                        <Edit />\n                      </IconButton>\n                      <IconButton size=\"small\" color=\"error\" onClick={() => handleDeleteClick(unit)}>\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {/* Add/Edit Unit Dialog */}\n        <Dialog \n          open={addDialog || editDialog} \n          onClose={() => { setAddDialog(false); setEditDialog(false); }}\n          maxWidth=\"md\" \n          fullWidth\n        >\n          <DialogTitle>\n            {selectedUnit ? 'Edit Unit' : 'Add New Unit'}\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={2} sx={{ mt: 1 }}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Unit Name *\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  fullWidth\n                  label=\"Symbol *\"\n                  value={formData.symbol}\n                  onChange={(e) => setFormData(prev => ({ ...prev, symbol: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Description\"\n                  multiline\n                  rows={2}\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Unit Type</InputLabel>\n                  <Select\n                    value={formData.unit_type}\n                    label=\"Unit Type\"\n                    onChange={(e) => setFormData(prev => ({ ...prev, unit_type: e.target.value }))}\n                  >\n                    {unitTypes.map((type) => (\n                      <MenuItem key={type.value} value={type.value}>\n                        {type.label}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.base_unit}\n                      onChange={(e) => setFormData(prev => ({ ...prev, base_unit: e.target.checked }))}\n                    />\n                  }\n                  label=\"Base Unit\"\n                />\n              </Grid>\n\n              {/* Alternate Units Section */}\n              <Grid item xs={12}>\n                <Accordion>\n                  <AccordionSummary expandIcon={<ExpandMore />}>\n                    <Typography variant=\"h6\">\n                      Alternate Unit Relations ({formData.alternate_units.length})\n                    </Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Box sx={{ mb: 2 }}>\n                      <Button\n                        variant=\"outlined\"\n                        startIcon={<Add />}\n                        onClick={addAlternateUnit}\n                        size=\"small\"\n                      >\n                        Add Alternate Unit\n                      </Button>\n                    </Box>\n                    \n                    {formData.alternate_units.map((altUnit: any, index: number) => (\n                      <Grid container spacing={2} key={index} sx={{ mb: 2 }}>\n                        <Grid item xs={4}>\n                          <TextField\n                            fullWidth\n                            label=\"Unit Name\"\n                            value={altUnit.unit}\n                            onChange={(e) => updateAlternateUnit(index, 'unit', e.target.value)}\n                            size=\"small\"\n                          />\n                        </Grid>\n                        <Grid item xs={3}>\n                          <TextField\n                            fullWidth\n                            label=\"Symbol\"\n                            value={altUnit.symbol}\n                            onChange={(e) => updateAlternateUnit(index, 'symbol', e.target.value)}\n                            size=\"small\"\n                          />\n                        </Grid>\n                        <Grid item xs={3}>\n                          <TextField\n                            fullWidth\n                            label=\"Conversion Factor\"\n                            type=\"number\"\n                            value={altUnit.conversion_factor}\n                            onChange={(e) => updateAlternateUnit(index, 'conversion_factor', parseFloat(e.target.value))}\n                            size=\"small\"\n                            helperText={`1 ${formData.symbol} = ${altUnit.conversion_factor} ${altUnit.symbol}`}\n                          />\n                        </Grid>\n                        <Grid item xs={2}>\n                          <IconButton\n                            color=\"error\"\n                            onClick={() => removeAlternateUnit(index)}\n                            size=\"small\"\n                          >\n                            <Delete />\n                          </IconButton>\n                        </Grid>\n                      </Grid>\n                    ))}\n                    \n                    {formData.alternate_units.length === 0 && (\n                      <Typography variant=\"body2\" color=\"textSecondary\" sx={{ textAlign: 'center', py: 2 }}>\n                        No alternate units defined. Click \"Add Alternate Unit\" to create unit conversions.\n                      </Typography>\n                    )}\n                  </AccordionDetails>\n                </Accordion>\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => { setAddDialog(false); setEditDialog(false); }}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit} variant=\"contained\">\n              {selectedUnit ? 'Update' : 'Create'}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </Container>\n  );\n};\n\nexport default UnitsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/masters/vendors.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Business' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Business"},"fix":{"range":[448,460],"text":""},"desc":"Remove unused variable 'Business'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[460,474],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ArrowUpward' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"ArrowUpward"},"fix":{"range":[498,513],"text":""},"desc":"Remove unused variable 'ArrowUpward'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ArrowDownward' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"ArrowDownward"},"fix":{"range":[513,530],"text":""},"desc":"Remove unused variable 'ArrowDownward'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Grid' is defined but never used.","line":38,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Grid"},"fix":{"range":[845,855],"text":""},"desc":"Remove unused variable 'Grid'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'errorMessage' is assigned a value but never used.","line":48,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"errorMessage"},"fix":{"range":[1286,1298],"text":""},"desc":"Remove unused variable 'errorMessage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSortBy' is assigned a value but never used.","line":51,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSortBy"},"fix":{"range":[1485,1496],"text":""},"desc":"Remove unused variable 'setSortBy'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'vendorsLoading' is assigned a value but never used.","line":54,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"vendorsLoading"},"fix":{"range":[1590,1617],"text":""},"desc":"Remove unused variable 'vendorsLoading'."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Standalone Vendors Page - Extract from masters/index.tsx\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  IconButton,\n  TextField,\n  InputAdornment,\n  TableSortLabel\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Email,\n  Phone,\n  Business,\n  Visibility,\n  Search as SearchIcon,\n  ArrowUpward,\n  ArrowDownward\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { masterDataService } from '../../services/authService';\nimport ExcelImportExport from '../../components/ExcelImportExport';\nimport { bulkImportVendors } from '../../services/masterService';\nimport Grid from '@mui/material/Grid';\nimport { useAuth } from '../../context/AuthContext';\nimport AddVendorModal from '../../components/AddVendorModal';\n\nconst VendorsPage: React.FC = () => {\n  const router = useRouter();\n  const { action } = router.query;\n  const { isOrgContextReady } = useAuth();\n  const [showAddVendorModal, setShowAddVendorModal] = useState(false);\n  const [addVendorLoading, setAddVendorLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  const [sortBy, setSortBy] = useState<'name'>('name');\n  const queryClient = useQueryClient();\n\n  const { data: vendors, isLoading: vendorsLoading } = useQuery({\n    queryKey: ['vendors'],\n    queryFn: () => masterDataService.getVendors(),\n    enabled: isOrgContextReady,\n  });\n\n  // Debounced search and sorting\n  const filteredAndSortedVendors = useMemo(() => {\n    if (!vendors) {return [];}\n\n    const filtered = vendors.filter((vendor: any) =>\n      vendor.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      vendor.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      vendor.contact_person?.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    // Sort by name\n    if (sortBy === 'name') {\n      filtered.sort((a: any, b: any) => {\n        const nameA = a.name?.toLowerCase() || '';\n        const nameB = b.name?.toLowerCase() || '';\n        if (sortOrder === 'asc') {\n          return nameA.localeCompare(nameB);\n        } else {\n          return nameB.localeCompare(nameA);\n        }\n      });\n    }\n\n    return filtered;\n  }, [vendors, searchTerm, sortBy, sortOrder]);\n\n  const handleSort = () => {\n    setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n  };\n\n  const handleVendorAdd = async (vendorData: any) => {\n    setAddVendorLoading(true);\n    try {\n      const response = await masterDataService.createVendor(vendorData);\n      const newVendor = response;\n      \n      // Update query data immediately\n      queryClient.setQueryData(['vendors'], (old: any) => old ? [...old, newVendor] : [newVendor]);\n      queryClient.invalidateQueries({ queryKey: ['vendors'] });\n      \n      setShowAddVendorModal(false);\n      alert('Vendor added successfully!');\n    } catch (error: any) {\n      console.error('Error adding vendor:', error);\n      let errorMsg = 'Error adding vendor';\n      if (error.response?.data?.detail) {\n        const detail = error.response.data.detail;\n        if (Array.isArray(detail)) {\n          errorMsg = detail.map((err: any) => err.msg || err).join(', ');\n        } else if (typeof detail === 'string') {\n          errorMsg = detail;\n        }\n      }\n      setErrorMessage(errorMsg);\n    } finally {\n      setAddVendorLoading(false);\n    }\n  };\n\n  const deleteItemMutation = useMutation({\n    mutationFn: (id: number) => masterDataService.deleteVendor(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['vendors'] });\n    },\n    onError: (error: any) => {\n      console.error('Error deleting vendor:', error);\n      setErrorMessage(error.response?.data?.detail || 'Failed to delete vendor');\n    }\n  });\n\n  const openAddVendorModal = useCallback(() => {\n    setErrorMessage('');\n    setShowAddVendorModal(true);\n  }, []);\n\n  // Auto-open add modal if action=add in URL\n  React.useEffect(() => {\n    if (action === 'add') {\n      openAddVendorModal();\n    }\n  }, [action, openAddVendorModal]);\n\n  if (!isOrgContextReady) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        {/* Header */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            Vendor Management\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={openAddVendorModal}\n            sx={{ ml: 2 }}\n          >\n            Add Vendor\n          </Button>\n        </Box>\n\n        {/* Vendors Table */}\n        <Paper sx={{ p: 3 }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">All Vendors</Typography>\n            <ExcelImportExport\n              data={vendors || []}\n              entity=\"Vendors\"\n              onImport={bulkImportVendors}\n            />\n          </Box>\n          \n          {/* Search Field */}\n          <Box sx={{ mb: 3 }}>\n            <TextField\n              placeholder=\"Search vendors by name, email, or contact person...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n              sx={{ width: 400 }}\n            />\n          </Box>\n          \n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>\n                    <TableSortLabel\n                      active={sortBy === 'name'}\n                      direction={sortBy === 'name' ? sortOrder : 'asc'}\n                      onClick={handleSort}\n                    >\n                      Name\n                    </TableSortLabel>\n                  </TableCell>\n                  <TableCell>Contact</TableCell>\n                  <TableCell>Email</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>GST Number</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredAndSortedVendors?.map((item: any) => (\n                  <TableRow key={item.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\n                          {item.name}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          {item.address1}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Phone sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n                        {item.contact_number}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Email sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n                        {item.email || 'N/A'}\n                      </Box>\n                    </TableCell>\n                    <TableCell>{item.city}, {item.state}</TableCell>\n                    <TableCell>{item.gst_number || 'N/A'}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.is_active ? 'Active' : 'Inactive'}\n                        color={item.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton disabled size=\"small\" title=\"Edit functionality temporarily disabled\">\n                        <Edit />\n                      </IconButton>\n                      <IconButton onClick={() => deleteItemMutation.mutate(item.id)} size=\"small\" color=\"error\">\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n\n        {/* Add Vendor Modal */}\n        <AddVendorModal\n          open={showAddVendorModal}\n          onClose={() => setShowAddVendorModal(false)}\n          onAdd={handleVendorAdd}\n          loading={addVendorLoading}\n        />\n      </Box>\n    </Container>\n  );\n};\n\nexport default VendorsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/migration/management.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Settings"},"fix":{"range":[579,591],"text":""},"desc":"Remove unused variable 'Settings'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Stop' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Stop"},"fix":{"range":[633,641],"text":""},"desc":"Remove unused variable 'Stop'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'History' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"History"},"fix":{"range":[649,660],"text":""},"desc":"Remove unused variable 'History'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadMigrationJobs' was used before it was defined.","line":91,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":91,"endColumn":22},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 76 column 10.","line":99,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":99,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 76 column 10.","line":99,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":99,"endColumn":19},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 76 column 10.","line":113,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":113,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 76 column 10.","line":113,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":113,"endColumn":19},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 76 column 10.","line":123,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":123,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 76 column 10.","line":123,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":123,"endColumn":19},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 76 column 10.","line":133,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":133,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 76 column 10.","line":133,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":133,"endColumn":19}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Migration Management Page\n * \n * Main page for managing data migrations and integrations.\n * Only accessible to super admins.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Paper,\n  Box,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Alert,\n  CircularProgress,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Tooltip,\n  LinearProgress\n} from '@mui/material';\nimport {\n  Add,\n  CloudUpload,\n  Timeline,\n  Settings,\n  Refresh,\n  Delete,\n  Edit,\n  PlayArrow,\n  Stop,\n  Undo,\n  History,\n  Integration\n} from '@mui/icons-material';\nimport { useAuth } from '../../context/AuthContext';\nimport { useRouter } from 'next/router';\nimport MigrationWizard from '../../components/MigrationWizard';\nimport IntegrationDashboard from '../../components/IntegrationDashboard';\nimport axios from 'axios';\n\ninterface MigrationJob {\n  id: number;\n  job_name: string;\n  description: string;\n  source_type: string;\n  data_types: string[];\n  status: string;\n  created_at: string;\n  updated_at: string;\n  progress_percentage?: number;\n  error_message?: string;\n  created_by_name?: string;\n}\n\nconst MigrationManagement: React.FC = () => {\n  const { user } = useAuth();\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [migrationJobs, setMigrationJobs] = useState<MigrationJob[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [wizardOpen, setWizardOpen] = useState(false);\n  const [dashboardOpen, setDashboardOpen] = useState(false);\n  const [selectedJobId, setSelectedJobId] = useState<number | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [jobToDelete, setJobToDelete] = useState<MigrationJob | null>(null);\n\n  // Check if user is super admin\n  const isSuperAdmin = user?.is_super_admin;\n\n  useEffect(() => {\n    if (!isSuperAdmin) {\n      router.push('/settings'); // Redirect if not super admin\n      return;\n    }\n    loadMigrationJobs();\n  }, [isSuperAdmin, router]);\n\n  const loadMigrationJobs = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('/api/v1/migration/jobs');\n      setMigrationJobs(response.data);\n    } catch (error) {\n      console.error('Failed to load migration jobs:', error);\n      setError('Failed to load migration jobs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteJob = async (job: MigrationJob) => {\n    try {\n      await axios.delete(`/api/v1/migration/jobs/${job.id}`);\n      await loadMigrationJobs();\n      setDeleteDialogOpen(false);\n      setJobToDelete(null);\n    } catch (error) {\n      console.error('Failed to delete job:', error);\n      setError('Failed to delete migration job');\n    }\n  };\n\n  const executeJob = async (jobId: number) => {\n    try {\n      await axios.post(`/api/v1/migration/jobs/${jobId}/execute`);\n      await loadMigrationJobs();\n    } catch (error) {\n      console.error('Failed to execute job:', error);\n      setError('Failed to execute migration job');\n    }\n  };\n\n  const rollbackJob = async (jobId: number) => {\n    try {\n      await axios.post(`/api/v1/migration/jobs/${jobId}/rollback`);\n      await loadMigrationJobs();\n    } catch (error) {\n      console.error('Failed to rollback job:', error);\n      setError('Failed to rollback migration job');\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'completed':\n        return 'success';\n      case 'running':\n        return 'info';\n      case 'failed':\n        return 'error';\n      case 'draft':\n        return 'default';\n      case 'approved':\n        return 'primary';\n      default:\n        return 'default';\n    }\n  };\n\n  const openWizard = (jobId?: number) => {\n    setSelectedJobId(jobId || null);\n    setWizardOpen(true);\n  };\n\n  const closeWizard = () => {\n    setWizardOpen(false);\n    setSelectedJobId(null);\n    loadMigrationJobs(); // Refresh the list\n  };\n\n  if (!isSuperAdmin) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          Access denied. Only super administrators can access migration management.\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Migration & Integration Management\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Timeline />}\n            onClick={() => setDashboardOpen(true)}\n          >\n            Integration Dashboard\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={() => openWizard()}\n          >\n            New Migration\n          </Button>\n        </Box>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Statistics Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"primary\">\n                {migrationJobs.length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Migrations\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"success.main\">\n                {migrationJobs.filter(job => job.status === 'completed').length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Completed\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"info.main\">\n                {migrationJobs.filter(job => job.status === 'running').length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Running\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" color=\"error.main\">\n                {migrationJobs.filter(job => job.status === 'failed').length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Failed\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Migration Jobs Table */}\n      <Paper sx={{ mb: 4 }}>\n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">Migration Jobs</Typography>\n          <Button\n            startIcon={<Refresh />}\n            onClick={loadMigrationJobs}\n            disabled={loading}\n          >\n            Refresh\n          </Button>\n        </Box>\n        \n        {loading ? (\n          <Box sx={{ p: 4, textAlign: 'center' }}>\n            <CircularProgress />\n          </Box>\n        ) : (\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Job Name</TableCell>\n                  <TableCell>Source Type</TableCell>\n                  <TableCell>Data Types</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Progress</TableCell>\n                  <TableCell>Created</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {migrationJobs.map((job) => (\n                  <TableRow key={job.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"subtitle2\">{job.job_name}</Typography>\n                        {job.description && (\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {job.description}\n                          </Typography>\n                        )}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip label={job.source_type} size=\"small\" variant=\"outlined\" />\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {job.data_types.map((type) => (\n                          <Chip key={type} label={type} size=\"small\" />\n                        ))}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip \n                        label={job.status} \n                        color={getStatusColor(job.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {job.progress_percentage !== undefined ? (\n                        <Box sx={{ width: 100 }}>\n                          <LinearProgress\n                            variant=\"determinate\"\n                            value={job.progress_percentage}\n                            sx={{ height: 8, borderRadius: 1 }}\n                          />\n                          <Typography variant=\"caption\">\n                            {job.progress_percentage}%\n                          </Typography>\n                        </Box>\n                      ) : (\n                        '-'\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"caption\">\n                        {new Date(job.created_at).toLocaleDateString()}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', gap: 1 }}>\n                        <Tooltip title=\"Open Wizard\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => openWizard(job.id)}\n                          >\n                            <Edit />\n                          </IconButton>\n                        </Tooltip>\n                        \n                        {job.status === 'approved' && (\n                          <Tooltip title=\"Execute Migration\">\n                            <IconButton\n                              size=\"small\"\n                              color=\"primary\"\n                              onClick={() => executeJob(job.id)}\n                            >\n                              <PlayArrow />\n                            </IconButton>\n                          </Tooltip>\n                        )}\n                        \n                        {job.status === 'completed' && (\n                          <Tooltip title=\"Rollback Migration\">\n                            <IconButton\n                              size=\"small\"\n                              color=\"warning\"\n                              onClick={() => rollbackJob(job.id)}\n                            >\n                              <Undo />\n                            </IconButton>\n                          </Tooltip>\n                        )}\n                        \n                        <Tooltip title=\"Delete Job\">\n                          <IconButton\n                            size=\"small\"\n                            color=\"error\"\n                            onClick={() => {\n                              setJobToDelete(job);\n                              setDeleteDialogOpen(true);\n                            }}\n                          >\n                            <Delete />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {migrationJobs.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} sx={{ textAlign: 'center', py: 4 }}>\n                      <Typography color=\"text.secondary\">\n                        No migration jobs found. Click \"New Migration\" to create one.\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </Paper>\n\n      {/* Recent Activity */}\n      <Paper sx={{ p: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Quick Actions\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6} md={4}>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              startIcon={<CloudUpload />}\n              onClick={() => openWizard()}\n              sx={{ py: 2 }}\n            >\n              Import from Tally\n            </Button>\n          </Grid>\n          <Grid item xs={12} sm={6} md={4}>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              startIcon={<CloudUpload />}\n              onClick={() => openWizard()}\n              sx={{ py: 2 }}\n            >\n              Import from Zoho\n            </Button>\n          </Grid>\n          <Grid item xs={12} sm={6} md={4}>\n            <Button\n              fullWidth\n              variant=\"outlined\"\n              startIcon={<Integration />}\n              onClick={() => setDashboardOpen(true)}\n              sx={{ py: 2 }}\n            >\n              Manage Integrations\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {/* Migration Wizard Dialog */}\n      <MigrationWizard\n        open={wizardOpen}\n        onClose={closeWizard}\n        jobId={selectedJobId || undefined}\n      />\n\n      {/* Integration Dashboard */}\n      <IntegrationDashboard\n        open={dashboardOpen}\n        onClose={() => setDashboardOpen(false)}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={deleteDialogOpen}\n        onClose={() => setDeleteDialogOpen(false)}\n      >\n        <DialogTitle>Confirm Delete</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete the migration job \"{jobToDelete?.job_name}\"? \n            This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n          <Button \n            color=\"error\" \n            onClick={() => jobToDelete && deleteJob(jobToDelete)}\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default MigrationManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/notification-demo.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[217,228],"text":""},"desc":"Remove unused variable 'Divider'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/pages/notification-demo.tsx\n// Demo page to showcase notification components\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  Alert\n} from '@mui/material';\nimport {\n  Notifications,\n  Settings,\n  Send,\n  Dashboard\n} from '@mui/icons-material';\nimport NotificationBell from '../components/NotificationBell';\nimport NotificationSettingsModal from '../components/NotificationSettingsModal';\nimport AlertsFeed from '../components/AlertsFeed';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ToastContainer } from 'react-toastify';\n\n// Create a query client for the demo\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: false,\n    },\n  },\n});\n\nconst NotificationDemo: React.FC = () => {\n  const [settingsOpen, setSettingsOpen] = useState(false);\n\n  const handleOpenSettings = () => {\n    setSettingsOpen(true);\n  };\n\n  const handleCloseSettings = () => {\n    setSettingsOpen(false);\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Container maxWidth=\"xl\" sx={{ py: 4 }}>\n        <Box sx={{ mb: 4 }}>\n          <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n            🔔 Notification & Alerts System Demo\n          </Typography>\n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n            Service CRM Vertical Slice Implementation\n          </Typography>\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\n            This demo showcases the complete notification system including real-time alerts, \n            user preferences, and workflow integration for the Service CRM platform.\n          </Alert>\n        </Box>\n\n        <Grid container spacing={4}>\n          {/* Notification Bell Demo */}\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <Notifications sx={{ mr: 1 }} />\n                  <Typography variant=\"h5\" component=\"h2\">\n                    Notification Bell\n                  </Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Real-time notification dropdown with unread count badge and quick actions.\n                </Typography>\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, bgcolor: 'grey.50', borderRadius: 1 }}>\n                  <NotificationBell onSettingsClick={handleOpenSettings} />\n                </Box>\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                  Click the bell icon to view notifications. Badge shows unread count.\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Settings Modal Demo */}\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <Settings sx={{ mr: 1 }} />\n                  <Typography variant=\"h5\" component=\"h2\">\n                    Notification Settings\n                  </Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Comprehensive user preference management for all notification types and channels.\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<Settings />}\n                  onClick={handleOpenSettings}\n                  fullWidth\n                >\n                  Open Settings Modal\n                </Button>\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                  Configure notification preferences for email, SMS, push, and in-app alerts.\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Alerts Feed Demo */}\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <Dashboard sx={{ mr: 1 }} />\n                  <Typography variant=\"h5\" component=\"h2\">\n                    Alerts Feed\n                  </Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n                  Real-time alerts and notifications feed with filtering, bulk actions, and priority indicators.\n                </Typography>\n                <AlertsFeed \n                  showFilters={true}\n                  maxHeight={400}\n                  autoRefresh={true}\n                  refreshInterval={30000}\n                />\n              </CardContent>\n            </Card>\n          </Grid>\n\n          {/* Feature Overview */}\n          <Grid item xs={12}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                🚀 Implemented Features\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Notifications color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Multi-Channel Notifications\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Email, SMS, Push, In-App\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Settings color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      User Preferences\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Granular opt-in/out controls\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Send color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Workflow Integration\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Automated triggers for CRM events\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Dashboard color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Real-Time Updates\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Live feed with auto-refresh\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n\n          {/* Implementation Status */}\n          <Grid item xs={12}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                📋 Implementation Status\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"success.main\" gutterBottom>\n                    ✅ Completed Backend Features\n                  </Typography>\n                  <ul style={{ margin: 0, paddingLeft: 20 }}>\n                    <li>SQLAlchemy models (NotificationTemplate, NotificationLog, NotificationPreference)</li>\n                    <li>FastAPI endpoints for CRUD operations</li>\n                    <li>User preference management API</li>\n                    <li>Multi-channel notification service</li>\n                    <li>Email/SMS/Push gateway integration (mockable)</li>\n                    <li>Automated trigger system</li>\n                    <li>Unit tests and service validation</li>\n                  </ul>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"success.main\" gutterBottom>\n                    ✅ Completed Frontend Features\n                  </Typography>\n                  <ul style={{ margin: 0, paddingLeft: 20 }}>\n                    <li>NotificationBell component with unread count</li>\n                    <li>NotificationSettingsModal for preferences</li>\n                    <li>AlertsFeed with filtering and bulk actions</li>\n                    <li>Real-time updates via polling</li>\n                    <li>Workflow integration utilities</li>\n                    <li>TypeScript interfaces and services</li>\n                    <li>Material-UI responsive design</li>\n                  </ul>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n        </Grid>\n\n        {/* Settings Modal */}\n        <NotificationSettingsModal\n          open={settingsOpen}\n          onClose={handleCloseSettings}\n          userId={1}\n          userType=\"user\"\n        />\n\n        {/* Toast Container for notifications */}\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n        />\n      </Container>\n    </QueryClientProvider>\n  );\n};\n\nexport default NotificationDemo;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/password-reset.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/reports.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Assessment' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Assessment"},"fix":{"range":[448,459],"text":""},"desc":"Remove unused variable 'Assessment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Download"},"fix":{"range":[488,500],"text":""},"desc":"Remove unused variable 'Download'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Print' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Print"},"fix":{"range":[500,509],"text":""},"desc":"Remove unused variable 'Print'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccountBalance' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccountBalance"},"fix":{"range":[566,584],"text":""},"desc":"Remove unused variable 'AccountBalance'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refetchStats' is assigned a value but never used.","line":125,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":79,"suggestions":[{"messageId":"removeVar","data":{"varName":"refetchStats"},"fix":{"range":[2904,2927],"text":""},"desc":"Remove unused variable 'refetchStats'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport '../styles/print.css';\nimport {\n  Box,\n  Container,\n  Typography,\n  Tab,\n  Tabs,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n  Switch,\n  FormControlLabel,\n  Alert\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport {\n  Assessment,\n  TrendingUp,\n  TrendingDown,\n  Download,\n  Print,\n  Refresh,\n  Business,\n  Person,\n  Inventory,\n  Warning,\n  AccountBalance\n} from '@mui/icons-material';\nimport { useQuery } from '@tanstack/react-query';\nimport { reportsService } from '../services/authService';\nimport MegaMenu from '../components/MegaMenu';\nimport ExportPrintToolbar from '../components/ExportPrintToolbar';\nimport { canAccessLedger } from '../types/user.types';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`reports-tabpanel-${index}`}\n      aria-labelledby={`reports-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst ReportsPage: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [user] = useState({ id: 1, email: 'demo@example.com', role: 'admin' });\n  const [dateRange, setDateRange] = useState({\n    start: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0], // First day of current month\n    end: new Date().toISOString().split('T')[0]\n  });\n\n  const [salesFilters, setSalesFilters] = useState({\n    customer_id: '',\n    search: ''\n  });\n  const [purchaseFilters, setPurchaseFilters] = useState({\n    vendor_id: '',\n    search: ''\n  });\n  const [inventoryFilters, setInventoryFilters] = useState({\n    include_zero_stock: false,\n    search: ''\n  });\n  const [pendingOrdersFilters, setPendingOrdersFilters] = useState({\n    order_type: 'all',\n    search: ''\n  });\n\n  // Ledger specific state\n  const [ledgerType, setLedgerType] = useState<'complete' | 'outstanding'>('complete');\n  const [ledgerFilters, setLedgerFilters] = useState({\n    start_date: dateRange.start,\n    end_date: dateRange.end,\n    account_type: 'all',\n    account_id: '',\n    voucher_type: 'all'\n  });\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleLogout = () => {\n    // Handle logout\n  };\n\n  const handleDateChange = (field: 'start' | 'end', value: string) => {\n    setDateRange(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Fetch dashboard statistics\n  const { data: dashboardStats, isLoading: statsLoading, refetch: refetchStats } = useQuery({\n    queryKey: ['dashboardStats'],\n    queryFn: reportsService.getDashboardStats,\n    enabled: true,\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  // Fetch sales report\n  const { data: salesReport, isLoading: salesLoading, refetch: refetchSales } = useQuery({\n    queryKey: ['salesReport', dateRange.start, dateRange.end, salesFilters],\n    queryFn: () => reportsService.getSalesReport({\n      start_date: dateRange.start,\n      end_date: dateRange.end,\n      customer_id: salesFilters.customer_id || undefined,\n      search: salesFilters.search || undefined\n    }),\n    enabled: tabValue === 1\n  });\n\n  // Fetch purchase report\n  const { data: purchaseReport, isLoading: purchaseLoading, refetch: refetchPurchase } = useQuery({\n    queryKey: ['purchaseReport', dateRange.start, dateRange.end, purchaseFilters],\n    queryFn: () => reportsService.getPurchaseReport({\n      start_date: dateRange.start,\n      end_date: dateRange.end,\n      vendor_id: purchaseFilters.vendor_id || undefined,\n      search: purchaseFilters.search || undefined\n    }),\n    enabled: tabValue === 2\n  });\n\n  // Fetch inventory report\n  const { data: inventoryReport, isLoading: inventoryLoading, refetch: refetchInventory } = useQuery({\n    queryKey: ['inventoryReport', inventoryFilters],\n    queryFn: () => reportsService.getInventoryReport(inventoryFilters.include_zero_stock),\n    enabled: tabValue === 3\n  });\n\n  // Fetch pending orders\n  const { data: pendingOrders, isLoading: ordersLoading, refetch: refetchOrders } = useQuery({\n    queryKey: ['pendingOrders', pendingOrdersFilters],\n    queryFn: () => reportsService.getPendingOrders(pendingOrdersFilters.order_type),\n    enabled: tabValue === 4\n  });\n\n  // Fetch complete ledger\n  const { data: completeLedger, isLoading: completeLedgerLoading, refetch: refetchCompleteLedger } = useQuery({\n    queryKey: ['completeLedger', ledgerFilters],\n    queryFn: () => reportsService.getCompleteLedger(ledgerFilters),\n    enabled: tabValue === 5 && ledgerType === 'complete' && canAccessLedger(user)\n  });\n\n  // Fetch outstanding ledger  \n  const { data: outstandingLedger, isLoading: outstandingLedgerLoading, refetch: refetchOutstandingLedger } = useQuery({\n    queryKey: ['outstandingLedger', ledgerFilters],\n    queryFn: () => reportsService.getOutstandingLedger(ledgerFilters),\n    enabled: tabValue === 5 && ledgerType === 'outstanding' && canAccessLedger(user)\n  });\n\n  const handleLedgerFilterChange = (field: string, value: string) => {\n    setLedgerFilters(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleLedgerTypeChange = (type: 'complete' | 'outstanding') => {\n    setLedgerType(type);\n  };\n\n  const renderSummaryCards = () => {\n    if (statsLoading || !dashboardStats) {\n      return <Typography>Loading statistics...</Typography>;\n    }\n\n    const cards = [\n      {\n        title: 'Vendors',\n        value: dashboardStats.masters?.vendors || 0,\n        color: '#1976D2',\n        icon: <Business />\n      },\n      {\n        title: 'Customers', \n        value: dashboardStats.masters?.customers || 0,\n        color: '#2E7D32',\n        icon: <Person />\n      },\n      {\n        title: 'Products',\n        value: dashboardStats.masters?.products || 0,\n        color: '#7B1FA2',\n        icon: <Inventory />\n      },\n      {\n        title: 'Low Stock Items',\n        value: dashboardStats.inventory?.low_stock_items || 0,\n        color: '#F57C00',\n        icon: <Warning />\n      }\n    ];\n\n    return (\n      <Grid container spacing={3}>\n        {cards.map((card, index) => (\n          <Grid\n            key={index}\n            size={{\n              xs: 12,\n              sm: 6,\n              md: 3\n            }}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      {card.title}\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {card.value}\n                    </Typography>\n                  </Box>\n                  <Box sx={{ color: card.color }}>\n                    {card.icon}\n                  </Box>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n\n  const renderVoucherTable = (vouchers: any[], title: string, reportType: string, filters?: any) => {\n    const getExportHandler = () => {\n      switch (reportType) {\n        case 'sales':\n          return () => reportsService.exportSalesReportExcel({\n            start_date: dateRange.start,\n            end_date: dateRange.end,\n            ...filters\n          });\n        case 'purchase':\n          return () => reportsService.exportPurchaseReportExcel({\n            start_date: dateRange.start,\n            end_date: dateRange.end,\n            ...filters\n          });\n        case 'pending-orders':\n          return () => reportsService.exportPendingOrdersExcel(filters);\n        default:\n          return undefined;\n      }\n    };\n\n    return (\n      <TableContainer component={Paper}>\n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">{title}</Typography>\n          <ExportPrintToolbar\n            onExportExcel={getExportHandler()}\n            filename={`${reportType.replace('-', '_')}_report`}\n            showCSV={false}\n            onPrint={() => window.print()}\n          />\n        </Box>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Voucher #</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Party</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>GST</TableCell>\n              <TableCell>Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {vouchers?.map((voucher) => (\n              <TableRow key={voucher.id}>\n                <TableCell>{voucher.voucher_number}</TableCell>\n                <TableCell>{new Date(voucher.date).toLocaleDateString()}</TableCell>\n                <TableCell>{voucher.vendor_name || voucher.customer_name}</TableCell>\n                <TableCell>₹{voucher.total_amount.toLocaleString()}</TableCell>\n                <TableCell>₹{voucher.gst_amount.toLocaleString()}</TableCell>\n                <TableCell>\n                  <Chip\n                    label={voucher.status}\n                    color={voucher.status === 'confirmed' ? 'success' : 'default'}\n                    size=\"small\"\n                  />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <MegaMenu user={user} onLogout={handleLogout} />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Reports & Analytics\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 4 }}>\n          Comprehensive business reports and data analytics\n        </Typography>\n\n        {/* Summary Cards */}\n        <Box sx={{ mb: 4 }}>\n          {renderSummaryCards()}\n        </Box>\n\n        {/* Reports Tabs */}\n        <Paper sx={{ mb: 4 }}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"reports tabs\">\n              <Tab label=\"Overview\" />\n              <Tab label=\"Sales Report\" />\n              <Tab label=\"Purchase Report\" />\n              <Tab label=\"Inventory Report\" />\n              <Tab label=\"Pending Orders\" />\n              <Tab label=\"Ledger\" />\n            </Tabs>\n          </Box>\n\n          <TabPanel value={tabValue} index={0}>\n            <Typography variant=\"h6\" gutterBottom>\n              Business Overview\n            </Typography>\n            <Grid container spacing={3}>\n              <Grid\n                size={{\n                  xs: 12,\n                  md: 6\n                }}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Sales Performance\n                    </Typography>\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <TrendingUp sx={{ color: 'green', mr: 1 }} />\n                      <Typography variant=\"body1\">\n                        Total Sales Vouchers: {dashboardStats?.vouchers?.sales_vouchers || 0}\n                      </Typography>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid\n                size={{\n                  xs: 12,\n                  md: 6\n                }}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Purchase Performance\n                    </Typography>\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <TrendingDown sx={{ color: 'orange', mr: 1 }} />\n                      <Typography variant=\"body1\">\n                        Total Purchase Vouchers: {dashboardStats?.vouchers?.purchase_vouchers || 0}\n                      </Typography>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={1}>\n            <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n              <TextField\n                label=\"Start Date\"\n                type=\"date\"\n                value={dateRange.start}\n                onChange={(e) => handleDateChange('start', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"End Date\"\n                type=\"date\"\n                value={dateRange.end}\n                onChange={(e) => handleDateChange('end', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"Search\"\n                placeholder=\"Search vouchers...\"\n                value={salesFilters.search}\n                onChange={(e) => setSalesFilters(prev => ({ ...prev, search: e.target.value }))}\n                size=\"small\"\n                sx={{ minWidth: 200 }}\n              />\n              <Button variant=\"contained\" startIcon={<Refresh />} onClick={() => refetchSales()}>\n                Refresh\n              </Button>\n            </Box>\n            \n            {salesLoading ? (\n              <Typography>Loading sales report...</Typography>\n            ) : salesReport ? (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography variant=\"h6\">Summary</Typography>\n                  <Typography>Total Vouchers: {salesReport.summary?.total_vouchers || 0}</Typography>\n                  <Typography>Total Sales: ₹{salesReport.summary?.total_sales?.toLocaleString() || 0}</Typography>\n                  <Typography>Total GST: ₹{salesReport.summary?.total_gst?.toLocaleString() || 0}</Typography>\n                </Box>\n                {renderVoucherTable(salesReport.vouchers || [], 'Sales Vouchers', 'sales', {\n                  customer_id: salesFilters.customer_id,\n                  search: salesFilters.search\n                })}\n              </>\n            ) : (\n              <Typography>No sales data available</Typography>\n            )}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={2}>\n            <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n              <TextField\n                label=\"Start Date\"\n                type=\"date\"\n                value={dateRange.start}\n                onChange={(e) => handleDateChange('start', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"End Date\"\n                type=\"date\"\n                value={dateRange.end}\n                onChange={(e) => handleDateChange('end', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"Search\"\n                placeholder=\"Search vouchers...\"\n                value={purchaseFilters.search}\n                onChange={(e) => setPurchaseFilters(prev => ({ ...prev, search: e.target.value }))}\n                size=\"small\"\n                sx={{ minWidth: 200 }}\n              />\n              <Button variant=\"contained\" startIcon={<Refresh />} onClick={() => refetchPurchase()}>\n                Refresh\n              </Button>\n            </Box>\n            \n            {purchaseLoading ? (\n              <Typography>Loading purchase report...</Typography>\n            ) : purchaseReport ? (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography variant=\"h6\">Summary</Typography>\n                  <Typography>Total Vouchers: {purchaseReport.summary?.total_vouchers || 0}</Typography>\n                  <Typography>Total Purchases: ₹{purchaseReport.summary?.total_purchases?.toLocaleString() || 0}</Typography>\n                  <Typography>Total GST: ₹{purchaseReport.summary?.total_gst?.toLocaleString() || 0}</Typography>\n                </Box>\n                {renderVoucherTable(purchaseReport.vouchers || [], 'Purchase Vouchers', 'purchase', {\n                  vendor_id: purchaseFilters.vendor_id,\n                  search: purchaseFilters.search\n                })}\n              </>\n            ) : (\n              <Typography>No purchase data available</Typography>\n            )}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={3}>\n            <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n              <Typography variant=\"h6\">Inventory Status</Typography>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={inventoryFilters.include_zero_stock}\n                    onChange={(e) => setInventoryFilters(prev => ({ ...prev, include_zero_stock: e.target.checked }))}\n                  />\n                }\n                label=\"Include Zero Stock\"\n              />\n              <TextField\n                label=\"Search Products\"\n                placeholder=\"Search products...\"\n                value={inventoryFilters.search}\n                onChange={(e) => setInventoryFilters(prev => ({ ...prev, search: e.target.value }))}\n                size=\"small\"\n                sx={{ minWidth: 200 }}\n              />\n              <Button variant=\"contained\" startIcon={<Refresh />} onClick={() => refetchInventory()}>\n                Refresh\n              </Button>\n            </Box>\n            \n            {inventoryLoading ? (\n              <Typography>Loading inventory report...</Typography>\n            ) : inventoryReport ? (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography>Total Items: {inventoryReport.summary?.total_items || 0}</Typography>\n                  <Typography>Total Value: ₹{inventoryReport.summary?.total_value?.toLocaleString() || 0}</Typography>\n                  <Typography>Low Stock Items: {inventoryReport.summary?.low_stock_items || 0}</Typography>\n                </Box>\n                <TableContainer component={Paper}>\n                  <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Typography variant=\"h6\">Inventory Items</Typography>\n                    <ExportPrintToolbar\n                      onExportExcel={() => reportsService.exportInventoryReportExcel({\n                        include_zero_stock: inventoryFilters.include_zero_stock\n                      })}\n                      filename=\"inventory_report\"\n                      showCSV={false}\n                      onPrint={() => window.print()}\n                    />\n                  </Box>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Product</TableCell>\n                        <TableCell>Quantity</TableCell>\n                        <TableCell>Unit</TableCell>\n                        <TableCell>Unit Price</TableCell>\n                        <TableCell>Total Value</TableCell>\n                        <TableCell>Status</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {inventoryReport.items?.map((item: any) => (\n                        <TableRow key={item.product_id}>\n                          <TableCell>{item.product_name}</TableCell>\n                          <TableCell>{item.quantity}</TableCell>\n                          <TableCell>{item.unit}</TableCell>\n                          <TableCell>₹{item.unit_price.toLocaleString()}</TableCell>\n                          <TableCell>₹{item.total_value.toLocaleString()}</TableCell>\n                          <TableCell>\n                            <Chip\n                              label={item.is_low_stock ? 'Low Stock' : 'Normal'}\n                              color={item.is_low_stock ? 'warning' : 'success'}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </>\n            ) : (\n              <Typography>No inventory data available</Typography>\n            )}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={4}>\n            <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n              <Typography variant=\"h6\">Pending Orders</Typography>\n              <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n                <InputLabel>Order Type</InputLabel>\n                <Select\n                  value={pendingOrdersFilters.order_type}\n                  label=\"Order Type\"\n                  onChange={(e) => setPendingOrdersFilters(prev => ({ ...prev, order_type: e.target.value }))}\n                >\n                  <MenuItem value=\"all\">All Orders</MenuItem>\n                  <MenuItem value=\"purchase\">Purchase Orders</MenuItem>\n                  <MenuItem value=\"sales\">Sales Orders</MenuItem>\n                </Select>\n              </FormControl>\n              <TextField\n                label=\"Search Orders\"\n                placeholder=\"Search orders...\"\n                value={pendingOrdersFilters.search}\n                onChange={(e) => setPendingOrdersFilters(prev => ({ ...prev, search: e.target.value }))}\n                size=\"small\"\n                sx={{ minWidth: 200 }}\n              />\n              <Button variant=\"contained\" startIcon={<Refresh />} onClick={() => refetchOrders()}>\n                Refresh\n              </Button>\n            </Box>\n            \n            {ordersLoading ? (\n              <Typography>Loading pending orders...</Typography>\n            ) : pendingOrders ? (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography>Total Orders: {pendingOrders.summary?.total_orders || 0}</Typography>\n                  <Typography>Total Value: ₹{pendingOrders.summary?.total_value?.toLocaleString() || 0}</Typography>\n                </Box>\n                <TableContainer component={Paper}>\n                  <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Typography variant=\"h6\">Pending Orders</Typography>\n                    <ExportPrintToolbar\n                      onExportExcel={() => reportsService.exportPendingOrdersExcel({\n                        order_type: pendingOrdersFilters.order_type\n                      })}\n                      filename=\"pending_orders_report\"\n                      showCSV={false}\n                      onPrint={() => window.print()}\n                    />\n                  </Box>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Type</TableCell>\n                        <TableCell>Order #</TableCell>\n                        <TableCell>Date</TableCell>\n                        <TableCell>Party</TableCell>\n                        <TableCell>Amount</TableCell>\n                        <TableCell>Status</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {pendingOrders.orders?.map((order: any) => (\n                        <TableRow key={`${order.type}-${order.id}`}>\n                          <TableCell>{order.type}</TableCell>\n                          <TableCell>{order.number}</TableCell>\n                          <TableCell>{new Date(order.date).toLocaleDateString()}</TableCell>\n                          <TableCell>{order.party}</TableCell>\n                          <TableCell>₹{order.amount.toLocaleString()}</TableCell>\n                          <TableCell>\n                            <Chip\n                              label={order.status}\n                              color={order.status === 'pending' ? 'warning' : 'default'}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </>\n            ) : (\n              <Typography>No pending orders</Typography>\n            )}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={5}>\n            {!canAccessLedger(user) ? (\n              <Alert severity=\"warning\">\n                You don't have permission to access the Ledger report. Contact your administrator for access.\n              </Alert>\n            ) : (\n              <>\n                <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n                  <Typography variant=\"h6\" sx={{ mr: 2 }}>\n                    Ledger Report\n                  </Typography>\n                  \n                  {/* Ledger Type Toggle */}\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={ledgerType === 'outstanding'}\n                        onChange={(e) => handleLedgerTypeChange(e.target.checked ? 'outstanding' : 'complete')}\n                        color=\"primary\"\n                      />\n                    }\n                    label={ledgerType === 'complete' ? 'Complete Ledger' : 'Outstanding Ledger'}\n                    sx={{ mr: 2 }}\n                  />\n\n                  {/* Date Range Filters */}\n                  <TextField\n                    label=\"Start Date\"\n                    type=\"date\"\n                    value={ledgerFilters.start_date}\n                    onChange={(e) => handleLedgerFilterChange('start_date', e.target.value)}\n                    InputLabelProps={{ shrink: true }}\n                    size=\"small\"\n                    sx={{ minWidth: 140 }}\n                  />\n                  <TextField\n                    label=\"End Date\"\n                    type=\"date\"\n                    value={ledgerFilters.end_date}\n                    onChange={(e) => handleLedgerFilterChange('end_date', e.target.value)}\n                    InputLabelProps={{ shrink: true }}\n                    size=\"small\"\n                    sx={{ minWidth: 140 }}\n                  />\n\n                  {/* Account Type Filter */}\n                  <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                    <InputLabel>Account Type</InputLabel>\n                    <Select\n                      value={ledgerFilters.account_type}\n                      label=\"Account Type\"\n                      onChange={(e) => handleLedgerFilterChange('account_type', e.target.value)}\n                    >\n                      <MenuItem value=\"all\">All</MenuItem>\n                      <MenuItem value=\"vendor\">Vendors</MenuItem>\n                      <MenuItem value=\"customer\">Customers</MenuItem>\n                    </Select>\n                  </FormControl>\n\n                  {/* Voucher Type Filter */}\n                  <FormControl size=\"small\" sx={{ minWidth: 140 }}>\n                    <InputLabel>Voucher Type</InputLabel>\n                    <Select\n                      value={ledgerFilters.voucher_type}\n                      label=\"Voucher Type\"\n                      onChange={(e) => handleLedgerFilterChange('voucher_type', e.target.value)}\n                    >\n                      <MenuItem value=\"all\">All</MenuItem>\n                      <MenuItem value=\"purchase_voucher\">Purchase</MenuItem>\n                      <MenuItem value=\"sales_voucher\">Sales</MenuItem>\n                      <MenuItem value=\"payment_voucher\">Payment</MenuItem>\n                      <MenuItem value=\"receipt_voucher\">Receipt</MenuItem>\n                      <MenuItem value=\"debit_note\">Debit Note</MenuItem>\n                      <MenuItem value=\"credit_note\">Credit Note</MenuItem>\n                    </Select>\n                  </FormControl>\n\n                  <Button \n                    variant=\"contained\" \n                    startIcon={<Refresh />} \n                    onClick={() => ledgerType === 'complete' ? refetchCompleteLedger() : refetchOutstandingLedger()}\n                  >\n                    Refresh\n                  </Button>\n                </Box>\n\n                {/* Complete Ledger View */}\n                {ledgerType === 'complete' && (\n                  <>\n                    {completeLedgerLoading ? (\n                      <Typography>Loading complete ledger...</Typography>\n                    ) : completeLedger ? (\n                      <>\n                        <Box sx={{ mb: 3 }}>\n                          <Typography variant=\"h6\">Summary</Typography>\n                          <Typography>Total Transactions: {completeLedger.summary?.transaction_count || 0}</Typography>\n                          <Typography>Total Debit: ₹{Number(completeLedger.total_debit || 0).toLocaleString()}</Typography>\n                          <Typography>Total Credit: ₹{Number(completeLedger.total_credit || 0).toLocaleString()}</Typography>\n                          <Typography>Net Balance: ₹{Number(completeLedger.net_balance || 0).toLocaleString()}</Typography>\n                        </Box>\n                        <TableContainer component={Paper}>\n                          <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                            <Typography variant=\"h6\">Complete Ledger Transactions</Typography>\n                            <ExportPrintToolbar\n                              onExportExcel={() => reportsService.exportCompleteLedgerExcel(ledgerFilters)}\n                              filename=\"complete_ledger_report\"\n                              showCSV={false}\n                              onPrint={() => window.print()}\n                            />\n                          </Box>\n                          <Table>\n                            <TableHead>\n                              <TableRow>\n                                <TableCell>Date</TableCell>\n                                <TableCell>Voucher Type</TableCell>\n                                <TableCell>Voucher #</TableCell>\n                                <TableCell>Account</TableCell>\n                                <TableCell>Debit</TableCell>\n                                <TableCell>Credit</TableCell>\n                                <TableCell>Balance</TableCell>\n                                <TableCell>Status</TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {completeLedger.transactions?.map((transaction: any) => (\n                                <TableRow key={`${transaction.voucher_type}-${transaction.id}`}>\n                                  <TableCell>{new Date(transaction.date).toLocaleDateString()}</TableCell>\n                                  <TableCell>{transaction.voucher_type.replace('_', ' ').toUpperCase()}</TableCell>\n                                  <TableCell>{transaction.voucher_number}</TableCell>\n                                  <TableCell>{transaction.account_name}</TableCell>\n                                  <TableCell>₹{Number(transaction.debit_amount || 0).toLocaleString()}</TableCell>\n                                  <TableCell>₹{Number(transaction.credit_amount || 0).toLocaleString()}</TableCell>\n                                  <TableCell>₹{Number(transaction.balance || 0).toLocaleString()}</TableCell>\n                                  <TableCell>\n                                    <Chip\n                                      label={transaction.status}\n                                      color={transaction.status === 'confirmed' ? 'success' : 'default'}\n                                      size=\"small\"\n                                    />\n                                  </TableCell>\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </TableContainer>\n                      </>\n                    ) : (\n                      <Typography>No complete ledger data available</Typography>\n                    )}\n                  </>\n                )}\n\n                {/* Outstanding Ledger View */}\n                {ledgerType === 'outstanding' && (\n                  <>\n                    {outstandingLedgerLoading ? (\n                      <Typography>Loading outstanding ledger...</Typography>\n                    ) : outstandingLedger ? (\n                      <>\n                        <Box sx={{ mb: 3 }}>\n                          <Typography variant=\"h6\">Outstanding Balances Summary</Typography>\n                          <Typography>Total Accounts: {outstandingLedger.summary?.total_accounts || 0}</Typography>\n                          <Typography color=\"error\">\n                            Total Payable: ₹{Math.abs(Number(outstandingLedger.total_payable || 0)).toLocaleString()} \n                            (Amount owed to vendors)\n                          </Typography>\n                          <Typography color=\"success.main\">\n                            Total Receivable: ₹{Number(outstandingLedger.total_receivable || 0).toLocaleString()} \n                            (Amount owed by customers)\n                          </Typography>\n                          <Typography>\n                            Net Outstanding: ₹{Number(outstandingLedger.net_outstanding || 0).toLocaleString()}\n                          </Typography>\n                        </Box>\n                        <TableContainer component={Paper}>\n                          <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                            <Typography variant=\"h6\">Outstanding Balances</Typography>\n                            <ExportPrintToolbar\n                              onExportExcel={() => reportsService.exportOutstandingLedgerExcel(ledgerFilters)}\n                              filename=\"outstanding_ledger_report\"\n                              showCSV={false}\n                              onPrint={() => window.print()}\n                            />\n                          </Box>\n                          <Table>\n                            <TableHead>\n                              <TableRow>\n                                <TableCell>Account Type</TableCell>\n                                <TableCell>Account Name</TableCell>\n                                <TableCell>Outstanding Amount</TableCell>\n                                <TableCell>Last Transaction</TableCell>\n                                <TableCell>Transaction Count</TableCell>\n                                <TableCell>Contact</TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {outstandingLedger.outstanding_balances?.map((balance: any) => (\n                                <TableRow key={`${balance.account_type}-${balance.account_id}`}>\n                                  <TableCell>\n                                    <Chip\n                                      label={balance.account_type.toUpperCase()}\n                                      color={balance.account_type === 'vendor' ? 'warning' : 'info'}\n                                      size=\"small\"\n                                    />\n                                  </TableCell>\n                                  <TableCell>{balance.account_name}</TableCell>\n                                  <TableCell>\n                                    <Typography \n                                      color={balance.outstanding_amount < 0 ? 'error' : 'success.main'}\n                                      fontWeight=\"bold\"\n                                    >\n                                      ₹{Math.abs(Number(balance.outstanding_amount || 0)).toLocaleString()}\n                                      {balance.outstanding_amount < 0 && ' (Payable)'}\n                                      {balance.outstanding_amount > 0 && ' (Receivable)'}\n                                    </Typography>\n                                  </TableCell>\n                                  <TableCell>\n                                    {balance.last_transaction_date \n                                      ? new Date(balance.last_transaction_date).toLocaleDateString()\n                                      : 'N/A'\n                                    }\n                                  </TableCell>\n                                  <TableCell>{balance.transaction_count || 0}</TableCell>\n                                  <TableCell>{balance.contact_info || 'N/A'}</TableCell>\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </TableContainer>\n                      </>\n                    ) : (\n                      <Typography>No outstanding ledger data available</Typography>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </TabPanel>\n        </Paper>\n      </Container>\n    </Box>\n  );\n};\n\nexport default ReportsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/accounts.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'BusinessIcon' is defined but never used.","line":46,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"BusinessIcon"},"fix":{"range":[626,654],"text":""},"desc":"Remove unused variable 'BusinessIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'LocationIcon' is defined but never used.","line":47,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"LocationIcon"},"fix":{"range":[654,684],"text":""},"desc":"Remove unused variable 'LocationIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PersonIcon' is defined but never used.","line":50,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"PersonIcon"},"fix":{"range":[728,752],"text":""},"desc":"Remove unused variable 'PersonIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUpIcon' is defined but never used.","line":51,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUpIcon"},"fix":{"range":[752,784],"text":""},"desc":"Remove unused variable 'TrendingUpIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MoneyIcon' is defined but never used.","line":52,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"MoneyIcon"},"fix":{"range":[784,815],"text":""},"desc":"Remove unused variable 'MoneyIcon'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  IconButton,\n  Chip,\n  TextField,\n  InputAdornment,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Tabs,\n  Tab,\n  CircularProgress,\n  Alert,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  Business as BusinessIcon,\n  LocationOn as LocationIcon,\n  Phone as PhoneIcon,\n  Email as EmailIcon,\n  Person as PersonIcon,\n  TrendingUp as TrendingUpIcon,\n  MonetizationOn as MoneyIcon,\n  Assignment as AssignmentIcon\n} from '@mui/icons-material';\n\ninterface Account {\n  id: number;\n  name: string;\n  type: 'customer' | 'prospect' | 'partner' | 'vendor';\n  industry: string;\n  size: 'small' | 'medium' | 'large' | 'enterprise';\n  revenue: number;\n  employees: number;\n  website: string;\n  phone: string;\n  email: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  status: 'active' | 'inactive' | 'prospect';\n  parentAccount: string | null;\n  accountManager: string;\n  source: string;\n  created_at: string;\n  lastActivity: string;\n  description: string;\n  totalContracts: number;\n  totalRevenue: number;\n  primaryContact: string;\n}\n\nconst AccountManagement: React.FC = () => {\n  const [accounts, setAccounts] = useState<Account[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [selectedAccount, setSelectedAccount] = useState<Account | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [dialogMode, setDialogMode] = useState<'view' | 'edit' | 'create'>('view');\n  const [tabValue, setTabValue] = useState(0);\n\n  // Mock data - replace with actual API call\n  useEffect(() => {\n    const fetchAccounts = async () => {\n      try {\n        setLoading(true);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        const mockData: Account[] = [\n          {\n            id: 1,\n            name: 'TechCorp Ltd',\n            type: 'customer',\n            industry: 'Technology',\n            size: 'large',\n            revenue: 50000000,\n            employees: 500,\n            website: 'www.techcorp.com',\n            phone: '+1-555-0123',\n            email: 'info@techcorp.com',\n            address: '123 Tech Street',\n            city: 'San Francisco',\n            state: 'CA',\n            zipCode: '94105',\n            country: 'USA',\n            status: 'active',\n            parentAccount: null,\n            accountManager: 'Sarah Johnson',\n            source: 'Website',\n            created_at: '2022-03-10',\n            lastActivity: '2024-01-20',\n            description: 'Leading technology company specializing in enterprise software solutions.',\n            totalContracts: 3,\n            totalRevenue: 450000,\n            primaryContact: 'John Smith'\n          },\n          {\n            id: 2,\n            name: 'Global Systems Inc',\n            type: 'customer',\n            industry: 'Manufacturing',\n            size: 'enterprise',\n            revenue: 200000000,\n            employees: 2000,\n            website: 'www.globalsystems.com',\n            phone: '+1-555-0124',\n            email: 'contact@globalsystems.com',\n            address: '456 Business Ave',\n            city: 'New York',\n            state: 'NY',\n            zipCode: '10001',\n            country: 'USA',\n            status: 'active',\n            parentAccount: null,\n            accountManager: 'David Brown',\n            source: 'Referral',\n            created_at: '2021-07-15',\n            lastActivity: '2024-01-18',\n            description: 'Global manufacturing conglomerate with operations in 50+ countries.',\n            totalContracts: 5,\n            totalRevenue: 850000,\n            primaryContact: 'Mike Wilson'\n          },\n          {\n            id: 3,\n            name: 'Manufacturing Co',\n            type: 'prospect',\n            industry: 'Manufacturing',\n            size: 'medium',\n            revenue: 25000000,\n            employees: 250,\n            website: 'www.manufacturing.com',\n            phone: '+1-555-0125',\n            email: 'info@manufacturing.com',\n            address: '789 Industrial Blvd',\n            city: 'Detroit',\n            state: 'MI',\n            zipCode: '48201',\n            country: 'USA',\n            status: 'prospect',\n            parentAccount: null,\n            accountManager: 'Sarah Johnson',\n            source: 'Cold Call',\n            created_at: '2024-01-10',\n            lastActivity: '2024-01-15',\n            description: 'Mid-size manufacturing company looking to modernize their ERP systems.',\n            totalContracts: 0,\n            totalRevenue: 0,\n            primaryContact: 'Lisa Davis'\n          },\n          {\n            id: 4,\n            name: 'Retail Corp',\n            type: 'customer',\n            industry: 'Retail',\n            size: 'medium',\n            revenue: 15000000,\n            employees: 150,\n            website: 'www.retailcorp.com',\n            phone: '+1-555-0126',\n            email: 'contact@retailcorp.com',\n            address: '321 Commerce St',\n            city: 'Los Angeles',\n            state: 'CA',\n            zipCode: '90210',\n            country: 'USA',\n            status: 'inactive',\n            parentAccount: null,\n            accountManager: 'Mike Wilson',\n            source: 'Trade Show',\n            created_at: '2022-01-18',\n            lastActivity: '2023-12-08',\n            description: 'Regional retail chain with 25 locations across the west coast.',\n            totalContracts: 2,\n            totalRevenue: 125000,\n            primaryContact: 'Robert Chen'\n          },\n          {\n            id: 5,\n            name: 'Data Solutions Ltd',\n            type: 'customer',\n            industry: 'Technology',\n            size: 'small',\n            revenue: 5000000,\n            employees: 50,\n            website: 'www.datasolutions.com',\n            phone: '+1-555-0127',\n            email: 'hello@datasolutions.com',\n            address: '654 Data Drive',\n            city: 'Austin',\n            state: 'TX',\n            zipCode: '73301',\n            country: 'USA',\n            status: 'active',\n            parentAccount: null,\n            accountManager: 'Lisa Thompson',\n            source: 'LinkedIn',\n            created_at: '2023-05-12',\n            lastActivity: '2024-01-22',\n            description: 'Data analytics startup focusing on AI-powered business intelligence.',\n            totalContracts: 1,\n            totalRevenue: 75000,\n            primaryContact: 'Emily Rodriguez'\n          }\n        ];\n        \n        setAccounts(mockData);\n      } catch (err) {\n        setError('Failed to load accounts');\n        console.error('Error fetching accounts:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAccounts();\n  }, []);\n\n  const filteredAccounts = accounts.filter(account => {\n    const matchesSearch = \n      account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      account.industry.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      account.accountManager.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = filterType === 'all' || account.type === filterType;\n    const matchesStatus = filterStatus === 'all' || account.status === filterStatus;\n    \n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  const handleViewAccount = (account: Account) => {\n    setSelectedAccount(account);\n    setDialogMode('view');\n    setDialogOpen(true);\n  };\n\n  const handleEditAccount = (account: Account) => {\n    setSelectedAccount(account);\n    setDialogMode('edit');\n    setDialogOpen(true);\n  };\n\n  const handleCreateAccount = () => {\n    setSelectedAccount(null);\n    setDialogMode('create');\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setSelectedAccount(null);\n    setTabValue(0);\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'customer': return 'success';\n      case 'prospect': return 'primary';\n      case 'partner': return 'warning';\n      case 'vendor': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'prospect': return 'primary';\n      case 'inactive': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const getSizeColor = (size: string) => {\n    switch (size) {\n      case 'enterprise': return 'error';\n      case 'large': return 'warning';\n      case 'medium': return 'primary';\n      case 'small': return 'success';\n      default: return 'default';\n    }\n  };\n\n  const accountStats = {\n    total: accounts.length,\n    customers: accounts.filter(a => a.type === 'customer').length,\n    prospects: accounts.filter(a => a.type === 'prospect').length,\n    totalRevenue: accounts.reduce((sum, a) => sum + a.totalRevenue, 0)\n  };\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress size={40} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Account Management\n      </Typography>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Total Accounts\n              </Typography>\n              <Typography variant=\"h4\">\n                {accountStats.total}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Active Customers\n              </Typography>\n              <Typography variant=\"h4\" color=\"success.main\">\n                {accountStats.customers}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Prospects\n              </Typography>\n              <Typography variant=\"h4\" color=\"primary.main\">\n                {accountStats.prospects}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Total Revenue\n              </Typography>\n              <Typography variant=\"h4\" color=\"success.main\">\n                ${(accountStats.totalRevenue / 1000).toFixed(0)}K\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Filters and Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3, flexWrap: 'wrap', gap: 2 }}>\n        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n          <TextField\n            placeholder=\"Search accounts...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ width: 300 }}\n          />\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel>Type</InputLabel>\n            <Select\n              value={filterType}\n              label=\"Type\"\n              onChange={(e) => setFilterType(e.target.value)}\n            >\n              <MenuItem value=\"all\">All</MenuItem>\n              <MenuItem value=\"customer\">Customer</MenuItem>\n              <MenuItem value=\"prospect\">Prospect</MenuItem>\n              <MenuItem value=\"partner\">Partner</MenuItem>\n              <MenuItem value=\"vendor\">Vendor</MenuItem>\n            </Select>\n          </FormControl>\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel>Status</InputLabel>\n            <Select\n              value={filterStatus}\n              label=\"Status\"\n              onChange={(e) => setFilterStatus(e.target.value)}\n            >\n              <MenuItem value=\"all\">All</MenuItem>\n              <MenuItem value=\"active\">Active</MenuItem>\n              <MenuItem value=\"prospect\">Prospect</MenuItem>\n              <MenuItem value=\"inactive\">Inactive</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={handleCreateAccount}\n        >\n          Add Account\n        </Button>\n      </Box>\n\n      {/* Accounts Table */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Account Name</TableCell>\n              <TableCell>Type</TableCell>\n              <TableCell>Industry</TableCell>\n              <TableCell>Size</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell align=\"right\">Revenue</TableCell>\n              <TableCell>Account Manager</TableCell>\n              <TableCell>Last Activity</TableCell>\n              <TableCell align=\"center\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredAccounts.map((account) => (\n              <TableRow key={account.id} hover>\n                <TableCell>\n                  <Box>\n                    <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold' }}>\n                      {account.name}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {account.city}, {account.state}\n                    </Typography>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={account.type}\n                    color={getTypeColor(account.type) as any}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>{account.industry}</TableCell>\n                <TableCell>\n                  <Chip \n                    label={account.size}\n                    color={getSizeColor(account.size) as any}\n                    size=\"small\"\n                    variant=\"outlined\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={account.status}\n                    color={getStatusColor(account.status) as any}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  ${account.totalRevenue.toLocaleString()}\n                </TableCell>\n                <TableCell>{account.accountManager}</TableCell>\n                <TableCell>{new Date(account.lastActivity).toLocaleDateString()}</TableCell>\n                <TableCell align=\"center\">\n                  <IconButton \n                    size=\"small\" \n                    onClick={() => handleViewAccount(account)}\n                    title=\"View Details\"\n                  >\n                    <ViewIcon />\n                  </IconButton>\n                  <IconButton \n                    size=\"small\" \n                    onClick={() => handleEditAccount(account)}\n                    title=\"Edit Account\"\n                  >\n                    <EditIcon />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Account Detail Dialog */}\n      <Dialog \n        open={dialogOpen} \n        onClose={handleCloseDialog}\n        maxWidth=\"lg\"\n        fullWidth\n      >\n        <DialogTitle>\n          {dialogMode === 'create' ? 'Add New Account' : \n           dialogMode === 'edit' ? 'Edit Account' : 'Account Details'}\n        </DialogTitle>\n        <DialogContent>\n          {selectedAccount && (\n            <Box sx={{ mt: 2 }}>\n              <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\n                <Tab label=\"General Information\" />\n                <Tab label=\"Contact Details\" />\n                <Tab label=\"Business Information\" />\n                <Tab label=\"Activity & Notes\" />\n              </Tabs>\n              \n              {tabValue === 0 && (\n                <Grid container spacing={3} sx={{ mt: 1 }}>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Account Name\"\n                      value={selectedAccount.name}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <FormControl fullWidth disabled={dialogMode === 'view'}>\n                      <InputLabel>Account Type</InputLabel>\n                      <Select value={selectedAccount.type} label=\"Account Type\">\n                        <MenuItem value=\"customer\">Customer</MenuItem>\n                        <MenuItem value=\"prospect\">Prospect</MenuItem>\n                        <MenuItem value=\"partner\">Partner</MenuItem>\n                        <MenuItem value=\"vendor\">Vendor</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Industry\"\n                      value={selectedAccount.industry}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <FormControl fullWidth disabled={dialogMode === 'view'}>\n                      <InputLabel>Company Size</InputLabel>\n                      <Select value={selectedAccount.size} label=\"Company Size\">\n                        <MenuItem value=\"small\">Small (1-50)</MenuItem>\n                        <MenuItem value=\"medium\">Medium (51-500)</MenuItem>\n                        <MenuItem value=\"large\">Large (501-5000)</MenuItem>\n                        <MenuItem value=\"enterprise\">Enterprise (5000+)</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <FormControl fullWidth disabled={dialogMode === 'view'}>\n                      <InputLabel>Status</InputLabel>\n                      <Select value={selectedAccount.status} label=\"Status\">\n                        <MenuItem value=\"active\">Active</MenuItem>\n                        <MenuItem value=\"prospect\">Prospect</MenuItem>\n                        <MenuItem value=\"inactive\">Inactive</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Account Manager\"\n                      value={selectedAccount.accountManager}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                </Grid>\n              )}\n              \n              {tabValue === 1 && (\n                <Grid container spacing={3} sx={{ mt: 1 }}>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Phone\"\n                      value={selectedAccount.phone}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      type=\"email\"\n                      value={selectedAccount.email}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Website\"\n                      value={selectedAccount.website}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Primary Contact\"\n                      value={selectedAccount.primaryContact}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Address\"\n                      value={selectedAccount.address}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={4}>\n                    <TextField\n                      fullWidth\n                      label=\"City\"\n                      value={selectedAccount.city}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={4}>\n                    <TextField\n                      fullWidth\n                      label=\"State\"\n                      value={selectedAccount.state}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={4}>\n                    <TextField\n                      fullWidth\n                      label=\"Zip Code\"\n                      value={selectedAccount.zipCode}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                </Grid>\n              )}\n              \n              {tabValue === 2 && (\n                <Grid container spacing={3} sx={{ mt: 1 }}>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Annual Revenue\"\n                      type=\"number\"\n                      value={selectedAccount.revenue}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Number of Employees\"\n                      type=\"number\"\n                      value={selectedAccount.employees}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Total Contracts\"\n                      type=\"number\"\n                      value={selectedAccount.totalContracts}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Total Revenue with Us\"\n                      type=\"number\"\n                      value={selectedAccount.totalRevenue}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Description\"\n                      multiline\n                      rows={4}\n                      value={selectedAccount.description}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                </Grid>\n              )}\n              \n              {tabValue === 3 && (\n                <Grid container spacing={3} sx={{ mt: 1 }}>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Source\"\n                      value={selectedAccount.source}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Last Activity Date\"\n                      type=\"date\"\n                      value={selectedAccount.lastActivity}\n                      disabled={dialogMode === 'view'}\n                      InputLabelProps={{ shrink: true }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom>Recent Activities</Typography>\n                    <List>\n                      <ListItem>\n                        <ListItemIcon>\n                          <AssignmentIcon color=\"primary\" />\n                        </ListItemIcon>\n                        <ListItemText \n                          primary=\"Contract Renewal Discussion\"\n                          secondary=\"Meeting scheduled with decision makers - Jan 20, 2024\"\n                        />\n                      </ListItem>\n                      <Divider />\n                      <ListItem>\n                        <ListItemIcon>\n                          <EmailIcon color=\"success\" />\n                        </ListItemIcon>\n                        <ListItemText \n                          primary=\"Proposal Sent\"\n                          secondary=\"Detailed proposal sent for Q2 implementation - Jan 15, 2024\"\n                        />\n                      </ListItem>\n                      <Divider />\n                      <ListItem>\n                        <ListItemIcon>\n                          <PhoneIcon color=\"warning\" />\n                        </ListItemIcon>\n                        <ListItemText \n                          primary=\"Follow-up Call\"\n                          secondary=\"Discussed technical requirements - Jan 10, 2024\"\n                        />\n                      </ListItem>\n                    </List>\n                  </Grid>\n                </Grid>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>\n            {dialogMode === 'view' ? 'Close' : 'Cancel'}\n          </Button>\n          {dialogMode !== 'view' && (\n            <Button variant=\"contained\" onClick={handleCloseDialog}>\n              {dialogMode === 'create' ? 'Create' : 'Save'}\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default AccountManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/commissions.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'setFilterStatus' is assigned a value but never used.","line":58,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFilterStatus"},"fix":{"range":[1297,1314],"text":""},"desc":"Remove unused variable 'setFilterStatus'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Button,\n  IconButton,\n  Chip,\n  TextField,\n  InputAdornment,\n  CircularProgress,\n  Alert\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  MonetizationOn as MoneyIcon,\n  TrendingUp as TrendingUpIcon,\n  CalendarToday as CalendarIcon,\n  Assessment as AssessmentIcon\n} from '@mui/icons-material';\nimport AddCommissionModal from '../../components/AddCommissionModal';\n\ninterface Commission {\n  id: number;\n  sales_person_id: number;\n  sales_person_name?: string;\n  opportunity_id?: number;\n  lead_id?: number;\n  commission_type: string;\n  commission_rate?: number;\n  commission_amount?: number;\n  base_amount: number;\n  commission_date: string;\n  payment_status: string;\n  notes?: string;\n  created_at: string;\n}\n\nconst CommissionTracking: React.FC = () => {\n  const [commissions, setCommissions] = useState<Commission[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [addLoading, setAddLoading] = useState(false);\n\n  // Fetch commissions from backend\n  const fetchCommissions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Implement commission service when backend endpoint is available\n      // For now, show empty state\n      setCommissions([]);\n    } catch (err) {\n      console.error('Error fetching commissions:', err);\n      setError('Failed to load commissions. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchCommissions();\n  }, []);\n\n  const handleAddCommission = async (commissionData: any) => {\n    try {\n      setAddLoading(true);\n      // TODO: Implement commission creation when backend endpoint is available\n      console.log('Commission data:', commissionData);\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock adding to state for now\n      const newCommission: Commission = {\n        id: Date.now(),\n        ...commissionData,\n        created_at: new Date().toISOString()\n      };\n      \n      setCommissions(prev => [newCommission, ...prev]);\n      setDialogOpen(false);\n    } catch (err) {\n      console.error('Error adding commission:', err);\n      throw err;\n    } finally {\n      setAddLoading(false);\n    }\n  };\n\n  const filteredCommissions = commissions.filter(commission => {\n    const matchesSearch = \n      (commission.sales_person_name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (commission.notes || '').toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = filterStatus === 'all' || commission.payment_status === filterStatus;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'warning';\n      case 'approved': return 'info';\n      case 'paid': return 'success';\n      case 'rejected': return 'error';\n      case 'on_hold': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const totalCommissions = commissions.reduce((sum, c) => sum + (c.commission_amount || 0), 0);\n  const pendingCommissions = commissions.filter(c => c.payment_status === 'pending').reduce((sum, c) => sum + (c.commission_amount || 0), 0);\n  const paidCommissions = commissions.filter(c => c.payment_status === 'paid').reduce((sum, c) => sum + (c.commission_amount || 0), 0);\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress size={40} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Commission Tracking\n      </Typography>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <MoneyIcon color=\"primary\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Total Commissions</Typography>\n              </Box>\n              <Typography variant=\"h4\" color=\"primary\">\n                ${totalCommissions.toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                All time\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <CalendarIcon color=\"warning\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Pending</Typography>\n              </Box>\n              <Typography variant=\"h4\" color=\"warning.main\">\n                ${pendingCommissions.toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Awaiting payment\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <AssessmentIcon color=\"success\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Paid</Typography>\n              </Box>\n              <Typography variant=\"h4\" color=\"success.main\">\n                ${paidCommissions.toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Completed payments\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <TrendingUpIcon color=\"info\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Records</Typography>\n              </Box>\n              <Typography variant=\"h4\" color=\"info.main\">\n                {commissions.length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total records\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Actions Bar */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <TextField\n          placeholder=\"Search commissions...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          sx={{ width: 300 }}\n        />\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={() => setDialogOpen(true)}\n        >\n          Add Commission\n        </Button>\n      </Box>\n\n      {/* Commissions Table */}\n      <Card>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Sales Person</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell align=\"right\">Base Amount</TableCell>\n                <TableCell align=\"right\">Rate/Amount</TableCell>\n                <TableCell align=\"right\">Commission</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell align=\"center\">Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredCommissions.map((commission) => (\n                <TableRow key={commission.id} hover>\n                  <TableCell>\n                    <Box>\n                      <Typography variant=\"subtitle2\">\n                        User ID: {commission.sales_person_id}\n                      </Typography>\n                      {commission.sales_person_name && (\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {commission.sales_person_name}\n                        </Typography>\n                      )}\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Chip \n                      label={commission.commission_type.replace('_', ' ').toUpperCase()} \n                      size=\"small\"\n                      variant=\"outlined\"\n                      sx={{ textTransform: 'capitalize' }}\n                    />\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    ${commission.base_amount.toLocaleString()}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {commission.commission_type === 'percentage' ? (\n                      `${commission.commission_rate}%`\n                    ) : (\n                      `$${commission.commission_amount?.toLocaleString() || 0}`\n                    )}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <Typography variant=\"subtitle2\" color=\"primary\">\n                      ${(commission.commission_amount || \n                        (commission.commission_rate ? \n                          (commission.base_amount * commission.commission_rate) / 100 : 0)\n                        ).toLocaleString()}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    {new Date(commission.commission_date).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <Chip \n                      label={commission.payment_status.replace('_', ' ').toUpperCase()} \n                      color={getStatusColor(commission.payment_status) as any}\n                      size=\"small\"\n                      sx={{ textTransform: 'capitalize' }}\n                    />\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <IconButton size=\"small\" title=\"View\">\n                      <ViewIcon />\n                    </IconButton>\n                    <IconButton size=\"small\" title=\"Edit\">\n                      <EditIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n              {filteredCommissions.length === 0 && (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ py: 4 }}>\n                      {commissions.length === 0 \n                        ? 'No commission records found. Start by adding your first commission record!' \n                        : 'No records match your search criteria.'}\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Card>\n\n      {/* Add Commission Modal */}\n      <AddCommissionModal\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        onAdd={handleAddCommission}\n        loading={addLoading}\n      />\n    </Container>\n  );\n};\n\nexport default CommissionTracking;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/contacts.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ContactPhoneIcon' is defined but never used.","line":43,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"ContactPhoneIcon"},"fix":{"range":[584,620],"text":""},"desc":"Remove unused variable 'ContactPhoneIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BusinessIcon' is defined but never used.","line":46,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"BusinessIcon"},"fix":{"range":[664,692],"text":""},"desc":"Remove unused variable 'BusinessIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PersonIcon' is defined but never used.","line":47,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"PersonIcon"},"fix":{"range":[692,716],"text":""},"desc":"Remove unused variable 'PersonIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'LocationIcon' is defined but never used.","line":48,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"LocationIcon"},"fix":{"range":[716,746],"text":""},"desc":"Remove unused variable 'LocationIcon'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  IconButton,\n  Chip,\n  TextField,\n  InputAdornment,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Tabs,\n  Tab,\n  CircularProgress,\n  Alert,\n  Avatar,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  ContactPhone as ContactPhoneIcon,\n  Email as EmailIcon,\n  Phone as PhoneIcon,\n  Business as BusinessIcon,\n  Person as PersonIcon,\n  LocationOn as LocationIcon\n} from '@mui/icons-material';\n\ninterface Contact {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  jobTitle: string;\n  company: string;\n  department: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  source: string;\n  status: 'active' | 'inactive' | 'lead';\n  tags: string[];\n  lastContact: string;\n  created_at: string;\n  assignedTo: string;\n  notes: string;\n}\n\nconst ContactManagement: React.FC = () => {\n  const [contacts, setContacts] = useState<Contact[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [dialogMode, setDialogMode] = useState<'view' | 'edit' | 'create'>('view');\n  const [tabValue, setTabValue] = useState(0);\n\n  // Mock data - replace with actual API call\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        setLoading(true);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        const mockData: Contact[] = [\n          {\n            id: 1,\n            firstName: 'John',\n            lastName: 'Smith',\n            email: 'john.smith@techcorp.com',\n            phone: '+1-555-0123',\n            jobTitle: 'CTO',\n            company: 'TechCorp Ltd',\n            department: 'Technology',\n            address: '123 Tech Street',\n            city: 'San Francisco',\n            state: 'CA',\n            zipCode: '94105',\n            country: 'USA',\n            source: 'Website',\n            status: 'active',\n            tags: ['decision-maker', 'technical'],\n            lastContact: '2024-01-20',\n            created_at: '2023-08-15',\n            assignedTo: 'Sarah Johnson',\n            notes: 'Primary technical contact. Interested in enterprise solutions.'\n          },\n          {\n            id: 2,\n            firstName: 'Mike',\n            lastName: 'Wilson',\n            email: 'mike.wilson@globalsystems.com',\n            phone: '+1-555-0124',\n            jobTitle: 'VP of Operations',\n            company: 'Global Systems Inc',\n            department: 'Operations',\n            address: '456 Business Ave',\n            city: 'New York',\n            state: 'NY',\n            zipCode: '10001',\n            country: 'USA',\n            source: 'Referral',\n            status: 'active',\n            tags: ['decision-maker', 'operations'],\n            lastContact: '2024-01-18',\n            created_at: '2023-06-20',\n            assignedTo: 'David Brown',\n            notes: 'Responsible for operational efficiency initiatives.'\n          },\n          {\n            id: 3,\n            firstName: 'Lisa',\n            lastName: 'Davis',\n            email: 'lisa.davis@manufacturing.com',\n            phone: '+1-555-0125',\n            jobTitle: 'IT Manager',\n            company: 'Manufacturing Co',\n            department: 'IT',\n            address: '789 Industrial Blvd',\n            city: 'Detroit',\n            state: 'MI',\n            zipCode: '48201',\n            country: 'USA',\n            source: 'Cold Call',\n            status: 'lead',\n            tags: ['technical', 'evaluating'],\n            lastContact: '2024-01-15',\n            created_at: '2024-01-10',\n            assignedTo: 'Sarah Johnson',\n            notes: 'Evaluating ERP solutions for manufacturing operations.'\n          },\n          {\n            id: 4,\n            firstName: 'Robert',\n            lastName: 'Chen',\n            email: 'robert.chen@retailcorp.com',\n            phone: '+1-555-0126',\n            jobTitle: 'Director of Finance',\n            company: 'Retail Corp',\n            department: 'Finance',\n            address: '321 Commerce St',\n            city: 'Los Angeles',\n            state: 'CA',\n            zipCode: '90210',\n            country: 'USA',\n            source: 'Trade Show',\n            status: 'inactive',\n            tags: ['finance', 'budget-holder'],\n            lastContact: '2023-12-08',\n            created_at: '2023-05-12',\n            assignedTo: 'Mike Wilson',\n            notes: 'Budget approved for Q2. Need to reconnect.'\n          },\n          {\n            id: 5,\n            firstName: 'Emily',\n            lastName: 'Rodriguez',\n            email: 'emily.rodriguez@datasolutions.com',\n            phone: '+1-555-0127',\n            jobTitle: 'Data Science Lead',\n            company: 'Data Solutions Ltd',\n            department: 'Analytics',\n            address: '654 Data Drive',\n            city: 'Austin',\n            state: 'TX',\n            zipCode: '73301',\n            country: 'USA',\n            source: 'LinkedIn',\n            status: 'active',\n            tags: ['technical', 'analytics'],\n            lastContact: '2024-01-22',\n            created_at: '2023-11-08',\n            assignedTo: 'Lisa Thompson',\n            notes: 'Interested in analytics and reporting capabilities.'\n          }\n        ];\n        \n        setContacts(mockData);\n      } catch (err) {\n        setError('Failed to load contacts');\n        console.error('Error fetching contacts:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchContacts();\n  }, []);\n\n  const filteredContacts = contacts.filter(contact => {\n    const matchesSearch = \n      contact.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      contact.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      contact.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      contact.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      contact.jobTitle.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = filterStatus === 'all' || contact.status === filterStatus;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const handleViewContact = (contact: Contact) => {\n    setSelectedContact(contact);\n    setDialogMode('view');\n    setDialogOpen(true);\n  };\n\n  const handleEditContact = (contact: Contact) => {\n    setSelectedContact(contact);\n    setDialogMode('edit');\n    setDialogOpen(true);\n  };\n\n  const handleCreateContact = () => {\n    setSelectedContact(null);\n    setDialogMode('create');\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setSelectedContact(null);\n    setTabValue(0);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'lead': return 'primary';\n      case 'inactive': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  const contactStats = {\n    total: contacts.length,\n    active: contacts.filter(c => c.status === 'active').length,\n    leads: contacts.filter(c => c.status === 'lead').length,\n    inactive: contacts.filter(c => c.status === 'inactive').length\n  };\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress size={40} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Contact Management\n      </Typography>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Total Contacts\n              </Typography>\n              <Typography variant=\"h4\">\n                {contactStats.total}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Active Contacts\n              </Typography>\n              <Typography variant=\"h4\" color=\"success.main\">\n                {contactStats.active}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Leads\n              </Typography>\n              <Typography variant=\"h4\" color=\"primary.main\">\n                {contactStats.leads}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Inactive\n              </Typography>\n              <Typography variant=\"h4\" color=\"text.secondary\">\n                {contactStats.inactive}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Filters and Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <TextField\n            placeholder=\"Search contacts...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ width: 300 }}\n          />\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Status</InputLabel>\n            <Select\n              value={filterStatus}\n              label=\"Status\"\n              onChange={(e) => setFilterStatus(e.target.value)}\n            >\n              <MenuItem value=\"all\">All</MenuItem>\n              <MenuItem value=\"active\">Active</MenuItem>\n              <MenuItem value=\"lead\">Lead</MenuItem>\n              <MenuItem value=\"inactive\">Inactive</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={handleCreateContact}\n        >\n          Add Contact\n        </Button>\n      </Box>\n\n      {/* Contacts Table */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Contact</TableCell>\n              <TableCell>Company & Title</TableCell>\n              <TableCell>Contact Info</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Tags</TableCell>\n              <TableCell>Assigned To</TableCell>\n              <TableCell>Last Contact</TableCell>\n              <TableCell align=\"center\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredContacts.map((contact) => (\n              <TableRow key={contact.id} hover>\n                <TableCell>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n                      {getInitials(contact.firstName, contact.lastName)}\n                    </Avatar>\n                    <Box>\n                      <Typography variant=\"subtitle2\">\n                        {contact.firstName} {contact.lastName}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        ID: {contact.id}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"body2\">{contact.company}</Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {contact.jobTitle}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {contact.department}\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Box>\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>\n                      <EmailIcon sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n                      <Typography variant=\"body2\">{contact.email}</Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <PhoneIcon sx={{ fontSize: 16, mr: 1, color: 'text.secondary' }} />\n                      <Typography variant=\"body2\">{contact.phone}</Typography>\n                    </Box>\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={contact.status}\n                    color={getStatusColor(contact.status) as any}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                    {contact.tags.slice(0, 2).map((tag, index) => (\n                      <Chip\n                        key={index}\n                        label={tag}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    ))}\n                    {contact.tags.length > 2 && (\n                      <Chip\n                        label={`+${contact.tags.length - 2}`}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    )}\n                  </Box>\n                </TableCell>\n                <TableCell>{contact.assignedTo}</TableCell>\n                <TableCell>{new Date(contact.lastContact).toLocaleDateString()}</TableCell>\n                <TableCell align=\"center\">\n                  <Tooltip title=\"View Details\">\n                    <IconButton \n                      size=\"small\" \n                      onClick={() => handleViewContact(contact)}\n                    >\n                      <ViewIcon />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Edit Contact\">\n                    <IconButton \n                      size=\"small\" \n                      onClick={() => handleEditContact(contact)}\n                    >\n                      <EditIcon />\n                    </IconButton>\n                  </Tooltip>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Contact Detail Dialog */}\n      <Dialog \n        open={dialogOpen} \n        onClose={handleCloseDialog}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          {dialogMode === 'create' ? 'Add New Contact' : \n           dialogMode === 'edit' ? 'Edit Contact' : 'Contact Details'}\n        </DialogTitle>\n        <DialogContent>\n          {selectedContact && (\n            <Box sx={{ mt: 2 }}>\n              <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\n                <Tab label=\"Personal Information\" />\n                <Tab label=\"Contact Details\" />\n                <Tab label=\"Notes & Activity\" />\n              </Tabs>\n              \n              {tabValue === 0 && (\n                <Grid container spacing={3} sx={{ mt: 1 }}>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"First Name\"\n                      value={selectedContact.firstName}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Last Name\"\n                      value={selectedContact.lastName}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Job Title\"\n                      value={selectedContact.jobTitle}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Department\"\n                      value={selectedContact.department}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Company\"\n                      value={selectedContact.company}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <FormControl fullWidth disabled={dialogMode === 'view'}>\n                      <InputLabel>Status</InputLabel>\n                      <Select value={selectedContact.status} label=\"Status\">\n                        <MenuItem value=\"active\">Active</MenuItem>\n                        <MenuItem value=\"lead\">Lead</MenuItem>\n                        <MenuItem value=\"inactive\">Inactive</MenuItem>\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Source\"\n                      value={selectedContact.source}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                </Grid>\n              )}\n              \n              {tabValue === 1 && (\n                <Grid container spacing={3} sx={{ mt: 1 }}>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      type=\"email\"\n                      value={selectedContact.email}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Phone\"\n                      value={selectedContact.phone}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Address\"\n                      value={selectedContact.address}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={4}>\n                    <TextField\n                      fullWidth\n                      label=\"City\"\n                      value={selectedContact.city}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={4}>\n                    <TextField\n                      fullWidth\n                      label=\"State\"\n                      value={selectedContact.state}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={4}>\n                    <TextField\n                      fullWidth\n                      label=\"Zip Code\"\n                      value={selectedContact.zipCode}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Country\"\n                      value={selectedContact.country}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                </Grid>\n              )}\n              \n              {tabValue === 2 && (\n                <Grid container spacing={3} sx={{ mt: 1 }}>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Notes\"\n                      multiline\n                      rows={4}\n                      value={selectedContact.notes}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Assigned To\"\n                      value={selectedContact.assignedTo}\n                      disabled={dialogMode === 'view'}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      fullWidth\n                      label=\"Last Contact Date\"\n                      type=\"date\"\n                      value={selectedContact.lastContact}\n                      disabled={dialogMode === 'view'}\n                      InputLabelProps={{ shrink: true }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h6\" gutterBottom>Activity Timeline</Typography>\n                    <Typography color=\"textSecondary\">\n                      Activity tracking will be implemented with backend integration.\n                    </Typography>\n                  </Grid>\n                </Grid>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>\n            {dialogMode === 'view' ? 'Close' : 'Cancel'}\n          </Button>\n          {dialogMode !== 'view' && (\n            <Button variant=\"contained\" onClick={handleCloseDialog}>\n              {dialogMode === 'create' ? 'Create' : 'Save'}\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default ContactManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/customer-analytics.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDownIcon' is defined but never used.","line":36,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingDownIcon"},"fix":{"range":[474,510],"text":""},"desc":"Remove unused variable 'TrendingDownIcon'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  LinearProgress,\n  CircularProgress,\n  Alert,\n  Tabs,\n  Tab,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider\n} from '@mui/material';\nimport {\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  People as PeopleIcon,\n  MonetizationOn as MoneyIcon,\n  ShoppingCart as ShoppingCartIcon,\n  Timeline as TimelineIcon,\n  Star as StarIcon,\n  Warning as WarningIcon\n} from '@mui/icons-material';\n\ninterface CustomerMetric {\n  customerId: number;\n  name: string;\n  totalRevenue: number;\n  totalOrders: number;\n  avgOrderValue: number;\n  lastOrderDate: string;\n  customerSince: string;\n  status: 'active' | 'inactive' | 'churned';\n  lifetimeValue: number;\n  satisfactionScore: number;\n}\n\ninterface AnalyticsData {\n  totalCustomers: number;\n  activeCustomers: number;\n  newCustomers: number;\n  churnedCustomers: number;\n  totalRevenue: number;\n  avgLifetimeValue: number;\n  avgSatisfactionScore: number;\n  topCustomers: CustomerMetric[];\n  customerSegments: {\n    segment: string;\n    count: number;\n    revenue: number;\n    percentage: number;\n  }[];\n}\n\nconst CustomerAnalytics: React.FC = () => {\n  const [analyticsData, setAnalyticsData] = useState<AnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [tabValue, setTabValue] = useState(0);\n  const [timeRange, setTimeRange] = useState('last_30_days');\n\n  // Mock data - replace with actual API call\n  useEffect(() => {\n    const fetchAnalyticsData = async () => {\n      try {\n        setLoading(true);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        const mockData: AnalyticsData = {\n          totalCustomers: 1245,\n          activeCustomers: 987,\n          newCustomers: 156,\n          churnedCustomers: 23,\n          totalRevenue: 2450000,\n          avgLifetimeValue: 12500,\n          avgSatisfactionScore: 4.2,\n          topCustomers: [\n            {\n              customerId: 1,\n              name: 'TechCorp Ltd',\n              totalRevenue: 450000,\n              totalOrders: 23,\n              avgOrderValue: 19565,\n              lastOrderDate: '2024-01-15',\n              customerSince: '2022-03-10',\n              status: 'active',\n              lifetimeValue: 450000,\n              satisfactionScore: 4.8\n            },\n            {\n              customerId: 2,\n              name: 'Global Systems Inc',\n              totalRevenue: 320000,\n              totalOrders: 18,\n              avgOrderValue: 17778,\n              lastOrderDate: '2024-01-20',\n              customerSince: '2021-07-15',\n              status: 'active',\n              lifetimeValue: 320000,\n              satisfactionScore: 4.5\n            },\n            {\n              customerId: 3,\n              name: 'Manufacturing Co',\n              totalRevenue: 275000,\n              totalOrders: 31,\n              avgOrderValue: 8871,\n              lastOrderDate: '2024-01-18',\n              customerSince: '2020-11-22',\n              status: 'active',\n              lifetimeValue: 275000,\n              satisfactionScore: 4.3\n            },\n            {\n              customerId: 4,\n              name: 'Retail Corp',\n              totalRevenue: 185000,\n              totalOrders: 42,\n              avgOrderValue: 4405,\n              lastOrderDate: '2023-12-08',\n              customerSince: '2022-01-18',\n              status: 'inactive',\n              lifetimeValue: 185000,\n              satisfactionScore: 3.9\n            },\n            {\n              customerId: 5,\n              name: 'Data Solutions Ltd',\n              totalRevenue: 165000,\n              totalOrders: 15,\n              avgOrderValue: 11000,\n              lastOrderDate: '2024-01-22',\n              customerSince: '2023-05-12',\n              status: 'active',\n              lifetimeValue: 165000,\n              satisfactionScore: 4.7\n            }\n          ],\n          customerSegments: [\n            { segment: 'Enterprise', count: 45, revenue: 1500000, percentage: 61.2 },\n            { segment: 'Mid-Market', count: 187, revenue: 650000, percentage: 26.5 },\n            { segment: 'Small Business', count: 456, revenue: 250000, percentage: 10.2 },\n            { segment: 'Startup', count: 557, revenue: 50000, percentage: 2.1 }\n          ]\n        };\n        \n        setAnalyticsData(mockData);\n      } catch (err) {\n        setError('Failed to load customer analytics');\n        console.error('Error fetching analytics:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAnalyticsData();\n  }, [timeRange]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'inactive': return 'warning';\n      case 'churned': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getSatisfactionIcon = (score: number) => {\n    if (score >= 4.5) {return <StarIcon color=\"success\" />;}\n    if (score >= 3.5) {return <StarIcon color=\"warning\" />;}\n    return <WarningIcon color=\"error\" />;\n  };\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress size={40} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\">Customer Analytics</Typography>\n        <FormControl size=\"small\" sx={{ minWidth: 200 }}>\n          <InputLabel>Time Range</InputLabel>\n          <Select\n            value={timeRange}\n            label=\"Time Range\"\n            onChange={(e) => setTimeRange(e.target.value)}\n          >\n            <MenuItem value=\"last_7_days\">Last 7 Days</MenuItem>\n            <MenuItem value=\"last_30_days\">Last 30 Days</MenuItem>\n            <MenuItem value=\"last_90_days\">Last 90 Days</MenuItem>\n            <MenuItem value=\"last_year\">Last Year</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n\n      {analyticsData && (\n        <>\n          {/* Key Metrics Cards */}\n          <Grid container spacing={3} sx={{ mb: 4 }}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <PeopleIcon color=\"primary\" sx={{ mr: 2 }} />\n                    <Box>\n                      <Typography color=\"textSecondary\" gutterBottom>\n                        Total Customers\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        {analyticsData.totalCustomers.toLocaleString()}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"success.main\">\n                        <TrendingUpIcon sx={{ fontSize: 16, mr: 0.5 }} />\n                        +{analyticsData.newCustomers} new\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <MoneyIcon color=\"success\" sx={{ mr: 2 }} />\n                    <Box>\n                      <Typography color=\"textSecondary\" gutterBottom>\n                        Total Revenue\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        ${(analyticsData.totalRevenue / 1000000).toFixed(1)}M\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        This period\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <TimelineIcon color=\"warning\" sx={{ mr: 2 }} />\n                    <Box>\n                      <Typography color=\"textSecondary\" gutterBottom>\n                        Avg Lifetime Value\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        ${analyticsData.avgLifetimeValue.toLocaleString()}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"success.main\">\n                        <TrendingUpIcon sx={{ fontSize: 16, mr: 0.5 }} />\n                        +12.5%\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <StarIcon color=\"info\" sx={{ mr: 2 }} />\n                    <Box>\n                      <Typography color=\"textSecondary\" gutterBottom>\n                        Satisfaction Score\n                      </Typography>\n                      <Typography variant=\"h4\">\n                        {analyticsData.avgSatisfactionScore}/5.0\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Average rating\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n\n          {/* Tabs for different analytics views */}\n          <Paper sx={{ mb: 3 }}>\n            <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\n              <Tab label=\"Customer Overview\" />\n              <Tab label=\"Segmentation\" />\n              <Tab label=\"Top Customers\" />\n            </Tabs>\n          </Paper>\n\n          {/* Customer Overview Tab */}\n          {tabValue === 0 && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>Customer Status Distribution</Typography>\n                    <Box sx={{ mb: 2 }}>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                        <Typography variant=\"body2\">Active Customers</Typography>\n                        <Typography variant=\"body2\">{analyticsData.activeCustomers}</Typography>\n                      </Box>\n                      <LinearProgress \n                        variant=\"determinate\" \n                        value={(analyticsData.activeCustomers / analyticsData.totalCustomers) * 100}\n                        color=\"success\"\n                        sx={{ height: 8, borderRadius: 4 }}\n                      />\n                    </Box>\n                    \n                    <Box sx={{ mb: 2 }}>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                        <Typography variant=\"body2\">New Customers</Typography>\n                        <Typography variant=\"body2\">{analyticsData.newCustomers}</Typography>\n                      </Box>\n                      <LinearProgress \n                        variant=\"determinate\" \n                        value={(analyticsData.newCustomers / analyticsData.totalCustomers) * 100}\n                        color=\"primary\"\n                        sx={{ height: 8, borderRadius: 4 }}\n                      />\n                    </Box>\n                    \n                    <Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                        <Typography variant=\"body2\">Churned Customers</Typography>\n                        <Typography variant=\"body2\">{analyticsData.churnedCustomers}</Typography>\n                      </Box>\n                      <LinearProgress \n                        variant=\"determinate\" \n                        value={(analyticsData.churnedCustomers / analyticsData.totalCustomers) * 100}\n                        color=\"error\"\n                        sx={{ height: 8, borderRadius: 4 }}\n                      />\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>Customer Health Metrics</Typography>\n                    <List>\n                      <ListItem>\n                        <ListItemIcon>\n                          <TrendingUpIcon color=\"success\" />\n                        </ListItemIcon>\n                        <ListItemText \n                          primary=\"Customer Retention Rate\"\n                          secondary=\"92.3% (up 2.1% from last period)\"\n                        />\n                      </ListItem>\n                      <Divider />\n                      <ListItem>\n                        <ListItemIcon>\n                          <ShoppingCartIcon color=\"primary\" />\n                        </ListItemIcon>\n                        <ListItemText \n                          primary=\"Repeat Purchase Rate\"\n                          secondary=\"78.5% of customers made repeat purchases\"\n                        />\n                      </ListItem>\n                      <Divider />\n                      <ListItem>\n                        <ListItemIcon>\n                          <WarningIcon color=\"warning\" />\n                        </ListItemIcon>\n                        <ListItemText \n                          primary=\"Churn Risk\"\n                          secondary=\"23 customers at risk of churning\"\n                        />\n                      </ListItem>\n                    </List>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          )}\n\n          {/* Customer Segmentation Tab */}\n          {tabValue === 1 && (\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>Customer Segments by Revenue</Typography>\n                    <TableContainer>\n                      <Table>\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Segment</TableCell>\n                            <TableCell align=\"right\">Customer Count</TableCell>\n                            <TableCell align=\"right\">Total Revenue</TableCell>\n                            <TableCell align=\"right\">Revenue %</TableCell>\n                            <TableCell align=\"right\">Avg Revenue per Customer</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {analyticsData.customerSegments.map((segment) => (\n                            <TableRow key={segment.segment}>\n                              <TableCell>\n                                <Chip \n                                  label={segment.segment}\n                                  color={segment.segment === 'Enterprise' ? 'success' : \n                                         segment.segment === 'Mid-Market' ? 'primary' :\n                                         segment.segment === 'Small Business' ? 'warning' : 'default'}\n                                />\n                              </TableCell>\n                              <TableCell align=\"right\">{segment.count}</TableCell>\n                              <TableCell align=\"right\">${segment.revenue.toLocaleString()}</TableCell>\n                              <TableCell align=\"right\">{segment.percentage}%</TableCell>\n                              <TableCell align=\"right\">\n                                ${Math.round(segment.revenue / segment.count).toLocaleString()}\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          )}\n\n          {/* Top Customers Tab */}\n          {tabValue === 2 && (\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>Top Customers by Revenue</Typography>\n                    <TableContainer>\n                      <Table>\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Customer Name</TableCell>\n                            <TableCell align=\"right\">Total Revenue</TableCell>\n                            <TableCell align=\"right\">Total Orders</TableCell>\n                            <TableCell align=\"right\">Avg Order Value</TableCell>\n                            <TableCell align=\"center\">Status</TableCell>\n                            <TableCell align=\"center\">Satisfaction</TableCell>\n                            <TableCell>Last Order</TableCell>\n                            <TableCell>Customer Since</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {analyticsData.topCustomers.map((customer) => (\n                            <TableRow key={customer.customerId} hover>\n                              <TableCell>{customer.name}</TableCell>\n                              <TableCell align=\"right\">${customer.totalRevenue.toLocaleString()}</TableCell>\n                              <TableCell align=\"right\">{customer.totalOrders}</TableCell>\n                              <TableCell align=\"right\">${customer.avgOrderValue.toLocaleString()}</TableCell>\n                              <TableCell align=\"center\">\n                                <Chip \n                                  label={customer.status}\n                                  color={getStatusColor(customer.status) as any}\n                                  size=\"small\"\n                                />\n                              </TableCell>\n                              <TableCell align=\"center\">\n                                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                                  {getSatisfactionIcon(customer.satisfactionScore)}\n                                  <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                                    {customer.satisfactionScore}\n                                  </Typography>\n                                </Box>\n                              </TableCell>\n                              <TableCell>\n                                {new Date(customer.lastOrderDate).toLocaleDateString()}\n                              </TableCell>\n                              <TableCell>\n                                {new Date(customer.customerSince).toLocaleDateString()}\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          )}\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default CustomerAnalytics;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/customers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/leads.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[217,226],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PersonAddIcon' is defined but never used.","line":35,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"PersonAddIcon"},"fix":{"range":[489,519],"text":""},"desc":"Remove unused variable 'PersonAddIcon'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  IconButton,\n  Chip,\n  TextField,\n  InputAdornment,\n  CircularProgress,\n  Alert,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  PersonAdd as PersonAddIcon,\n  Phone as PhoneIcon,\n  Email as EmailIcon\n} from '@mui/icons-material';\nimport AddLeadModal from '../../components/AddLeadModal';\nimport { crmService } from '../../services/crmService';\n\ninterface Lead {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  job_title?: string;\n  source: string;\n  status: string;\n  score: number;\n  created_at: string;\n  estimated_value?: number;\n  expected_close_date?: string;\n}\n\nconst LeadManagement: React.FC = () => {\n  const [leads, setLeads] = useState<Lead[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [openDialog, setOpenDialog] = useState(false);\n  const [addLoading, setAddLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch leads from API\n  const fetchLeads = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const leadsData = await crmService.getLeads();\n      setLeads(leadsData);\n    } catch (err) {\n      console.error('Error fetching leads:', err);\n      setError('Failed to load leads. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchLeads();\n  }, []);\n\n  const handleAddLead = async (leadData: any) => {\n    try {\n      setAddLoading(true);\n      await crmService.createLead(leadData);\n      await fetchLeads(); // Refresh the list\n      setOpenDialog(false);\n    } catch (err) {\n      console.error('Error adding lead:', err);\n      throw err; // Let the modal handle the error\n    } finally {\n      setAddLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new': return 'primary';\n      case 'contacted': return 'info';\n      case 'qualified': return 'warning';\n      case 'proposal_sent': return 'secondary';\n      case 'negotiation': return 'error';\n      case 'converted': return 'success';\n      case 'lost': return 'default';\n      case 'disqualified': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const filteredLeads = leads.filter(lead => {\n    const fullName = `${lead.first_name || ''} ${lead.last_name || ''}`.toLowerCase();\n    const matchesSearch = fullName.includes(searchTerm.toLowerCase()) ||\n                         (lead.email || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (lead.company || '').toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || lead.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 4, mb: 4 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Lead Management\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenDialog(true)}\n          >\n            Add Lead\n          </Button>\n        </Box>\n\n        {/* Summary Cards */}\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"primary\">\n                  Total Leads\n                </Typography>\n                <Typography variant=\"h4\">\n                  {leads.length}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"success.main\">\n                  Qualified\n                </Typography>\n                <Typography variant=\"h4\" color=\"success.main\">\n                  {leads.filter(l => l.status === 'qualified').length}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"info.main\">\n                  In Progress\n                </Typography>\n                <Typography variant=\"h4\" color=\"info.main\">\n                  {leads.filter(l => l.status === 'contacted').length}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" color=\"warning.main\">\n                  Avg. Score\n                </Typography>\n                <Typography variant=\"h4\" color=\"warning.main\">\n                  {leads.length > 0 ? Math.round(leads.reduce((sum, l) => sum + l.score, 0) / leads.length) : 0}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        {/* Filters */}\n        <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\n          <TextField\n            placeholder=\"Search leads...\"\n            variant=\"outlined\"\n            size=\"small\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n            sx={{ minWidth: 250 }}\n          />\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Status</InputLabel>\n            <Select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              label=\"Status\"\n            >\n              <MenuItem value=\"all\">All Status</MenuItem>\n              <MenuItem value=\"new\">New</MenuItem>\n              <MenuItem value=\"contacted\">Contacted</MenuItem>\n              <MenuItem value=\"qualified\">Qualified</MenuItem>\n              <MenuItem value=\"proposal_sent\">Proposal Sent</MenuItem>\n              <MenuItem value=\"negotiation\">Negotiation</MenuItem>\n              <MenuItem value=\"converted\">Converted</MenuItem>\n              <MenuItem value=\"lost\">Lost</MenuItem>\n              <MenuItem value=\"disqualified\">Disqualified</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n\n        {/* Error Display */}\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {/* Loading Display */}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {/* Leads Table */}\n        {!loading && (\n          <Card>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Contact</TableCell>\n                    <TableCell>Company</TableCell>\n                    <TableCell>Source</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Score</TableCell>\n                    <TableCell>Created</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {filteredLeads.map((lead) => (\n                    <TableRow key={lead.id}>\n                      <TableCell>\n                        <Typography variant=\"subtitle2\">\n                          {`${lead.first_name || ''} ${lead.last_name || ''}`}\n                        </Typography>\n                        {lead.job_title && (\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {lead.job_title}\n                          </Typography>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Box>\n                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>\n                            <EmailIcon sx={{ fontSize: 16, mr: 0.5, color: 'text.secondary' }} />\n                            <Typography variant=\"body2\">{lead.email}</Typography>\n                          </Box>\n                          {lead.phone && (\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <PhoneIcon sx={{ fontSize: 16, mr: 0.5, color: 'text.secondary' }} />\n                              <Typography variant=\"body2\">{lead.phone}</Typography>\n                            </Box>\n                          )}\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {lead.company || '-'}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>{lead.source}</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={lead.status.replace('_', ' ').toUpperCase()} \n                          color={getStatusColor(lead.status) as any}\n                          size=\"small\"\n                          sx={{ textTransform: 'capitalize' }}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\" color={lead.score >= 80 ? 'success.main' : 'text.primary'}>\n                          {lead.score}%\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <Typography variant=\"body2\">\n                          {new Date(lead.created_at).toLocaleDateString()}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>\n                        <IconButton size=\"small\" title=\"View\">\n                          <ViewIcon />\n                        </IconButton>\n                        <IconButton size=\"small\" title=\"Edit\">\n                          <EditIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {filteredLeads.length === 0 && !loading && (\n                    <TableRow>\n                      <TableCell colSpan={8} align=\"center\">\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ py: 4 }}>\n                          No leads found. {leads.length === 0 ? 'Start by adding your first lead!' : 'Try adjusting your search filters.'}\n                        </Typography>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Card>\n        )}\n\n        {/* Add Lead Modal */}\n        <AddLeadModal\n          open={openDialog}\n          onClose={() => setOpenDialog(false)}\n          onAdd={handleAddLead}\n          loading={addLoading}\n        />\n      </Box>\n    </Container>\n  );\n};\n\nexport default LeadManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/opportunities.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tabs"},"fix":{"range":[289,297],"text":""},"desc":"Remove unused variable 'Tabs'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tab' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tab"},"fix":{"range":[297,304],"text":""},"desc":"Remove unused variable 'Tab'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUpIcon' is defined but never used.","line":33,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUpIcon"},"fix":{"range":[453,485],"text":""},"desc":"Remove unused variable 'TrendingUpIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MoneyIcon' is defined but never used.","line":34,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"MoneyIcon"},"fix":{"range":[485,516],"text":""},"desc":"Remove unused variable 'MoneyIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TimelineIcon' is defined but never used.","line":35,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"TimelineIcon"},"fix":{"range":[516,544],"text":""},"desc":"Remove unused variable 'TimelineIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedOpportunity' is assigned a value but never used.","line":59,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedOpportunity"},"fix":{"range":[1245,1264],"text":""},"desc":"Remove unused variable 'selectedOpportunity'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tabValue' is assigned a value but never used.","line":62,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"tabValue"},"fix":{"range":[1447,1455],"text":""},"desc":"Remove unused variable 'tabValue'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setTabValue' is assigned a value but never used.","line":62,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setTabValue"},"fix":{"range":[1455,1468],"text":""},"desc":"Remove unused variable 'setTabValue'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCloseDialog' is assigned a value but never used.","line":117,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCloseDialog"},"fix":{"range":[3111,3209],"text":""},"desc":"Remove unused variable 'handleCloseDialog'."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  IconButton,\n  Chip,\n  TextField,\n  InputAdornment,\n  Tabs,\n  Tab,\n  CircularProgress,\n  Alert\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  TrendingUp as TrendingUpIcon,\n  MonetizationOn as MoneyIcon,\n  Timeline as TimelineIcon\n} from '@mui/icons-material';\nimport AddOpportunityModal from '../../components/AddOpportunityModal';\nimport { crmService } from '../../services/crmService';\n\ninterface Opportunity {\n  id: number;\n  name: string;\n  account_name?: string;\n  contact_name?: string;\n  stage: string;\n  amount: number;\n  probability: number;\n  close_date: string;\n  source: string;\n  created_at: string;\n  assigned_to_id?: number;\n}\n\nconst OpportunityTracking: React.FC = () => {\n  const [opportunities, setOpportunities] = useState<Opportunity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedOpportunity, setSelectedOpportunity] = useState<Opportunity | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [addLoading, setAddLoading] = useState(false);\n  const [tabValue, setTabValue] = useState(0);\n\n  // Fetch opportunities from API\n  const fetchOpportunities = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const opportunitiesData = await crmService.getOpportunities();\n      setOpportunities(opportunitiesData);\n    } catch (err) {\n      console.error('Error fetching opportunities:', err);\n      setError('Failed to load opportunities. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchOpportunities();\n  }, []);\n\n  const handleAddOpportunity = async (opportunityData: any) => {\n    try {\n      setAddLoading(true);\n      await crmService.createOpportunity(opportunityData);\n      await fetchOpportunities(); // Refresh the list\n      setDialogOpen(false);\n    } catch (err) {\n      console.error('Error adding opportunity:', err);\n      throw err; // Let the modal handle the error\n    } finally {\n      setAddLoading(false);\n    }\n  };\n\n  const filteredOpportunities = opportunities.filter(opportunity =>\n    opportunity.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (opportunity.account_name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (opportunity.contact_name || '').toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleViewOpportunity = (opportunity: Opportunity) => {\n    setSelectedOpportunity(opportunity);\n    // Add view functionality if needed\n  };\n\n  const handleEditOpportunity = (opportunity: Opportunity) => {\n    setSelectedOpportunity(opportunity);\n    // Add edit functionality if needed\n  };\n\n  const handleCreateOpportunity = () => {\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setSelectedOpportunity(null);\n  };\n\n  const getStageColor = (stage: string) => {\n    switch (stage) {\n      case 'prospecting': return 'info';\n      case 'qualification': return 'warning';\n      case 'needs_analysis': return 'secondary';\n      case 'proposal': return 'primary';\n      case 'negotiation': return 'error';\n      case 'closed_won': return 'success';\n      case 'closed_lost': return 'default';\n      default: return 'default';\n    }\n  };\n\n  const totalValue = opportunities.reduce((sum, opp) => sum + opp.amount, 0);\n  const weightedValue = opportunities.reduce((sum, opp) => sum + (opp.amount * opp.probability / 100), 0);\n  const avgProbability = opportunities.length > 0 \n    ? opportunities.reduce((sum, opp) => sum + opp.probability, 0) / opportunities.length \n    : 0;\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress size={40} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Opportunity Tracking\n      </Typography>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Total Opportunities\n              </Typography>\n              <Typography variant=\"h4\">\n                {opportunities.length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Total Value\n              </Typography>\n              <Typography variant=\"h4\">\n                ${totalValue.toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Weighted Value\n              </Typography>\n              <Typography variant=\"h4\">\n                ${Math.round(weightedValue).toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Avg Probability\n              </Typography>\n              <Typography variant=\"h4\">\n                {Math.round(avgProbability)}%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Actions Bar */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <TextField\n          placeholder=\"Search opportunities...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          sx={{ width: 300 }}\n        />\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={handleCreateOpportunity}\n        >\n          Add Opportunity\n        </Button>\n      </Box>\n\n      {/* Opportunities Table */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Opportunity Name</TableCell>\n              <TableCell>Account</TableCell>\n              <TableCell>Contact</TableCell>\n              <TableCell>Stage</TableCell>\n              <TableCell align=\"right\">Amount</TableCell>\n              <TableCell align=\"right\">Probability</TableCell>\n              <TableCell>Close Date</TableCell>\n              <TableCell>Source</TableCell>\n              <TableCell align=\"center\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredOpportunities.map((opportunity) => (\n              <TableRow key={opportunity.id} hover>\n                <TableCell>{opportunity.name}</TableCell>\n                <TableCell>{opportunity.account_name || '-'}</TableCell>\n                <TableCell>{opportunity.contact_name || '-'}</TableCell>\n                <TableCell>\n                  <Chip \n                    label={opportunity.stage.replace('_', ' ').toUpperCase()} \n                    color={getStageColor(opportunity.stage) as any}\n                    size=\"small\"\n                    sx={{ textTransform: 'capitalize' }}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">${opportunity.amount.toLocaleString()}</TableCell>\n                <TableCell align=\"right\">{opportunity.probability}%</TableCell>\n                <TableCell>{new Date(opportunity.close_date).toLocaleDateString()}</TableCell>\n                <TableCell>{opportunity.source}</TableCell>\n                <TableCell align=\"center\">\n                  <IconButton \n                    size=\"small\" \n                    onClick={() => handleViewOpportunity(opportunity)}\n                    title=\"View Details\"\n                  >\n                    <ViewIcon />\n                  </IconButton>\n                  <IconButton \n                    size=\"small\" \n                    onClick={() => handleEditOpportunity(opportunity)}\n                    title=\"Edit Opportunity\"\n                  >\n                    <EditIcon />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n            {filteredOpportunities.length === 0 && !loading && (\n              <TableRow>\n                <TableCell colSpan={9} align=\"center\">\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ py: 4 }}>\n                    No opportunities found. {opportunities.length === 0 ? 'Start by adding your first opportunity!' : 'Try adjusting your search terms.'}\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Add Opportunity Modal */}\n      <AddOpportunityModal\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        onAdd={handleAddOpportunity}\n        loading={addLoading}\n      />\n    </Container>\n  );\n};\n\nexport default OpportunityTracking;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/pipeline.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[172,180],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"List"},"fix":{"range":[252,260],"text":""},"desc":"Remove unused variable 'List'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItem"},"fix":{"range":[260,272],"text":""},"desc":"Remove unused variable 'ListItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemText"},"fix":{"range":[272,288],"text":""},"desc":"Remove unused variable 'ListItemText'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemSecondaryAction"},"fix":{"range":[288,315],"text":""},"desc":"Remove unused variable 'ListItemSecondaryAction'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TimelineIcon' is defined but never used.","line":33,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"TimelineIcon"},"fix":{"range":[472,500],"text":""},"desc":"Remove unused variable 'TimelineIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUpIcon' is defined but never used.","line":34,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUpIcon"},"fix":{"range":[500,532],"text":""},"desc":"Remove unused variable 'TrendingUpIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MoneyIcon' is defined but never used.","line":35,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"MoneyIcon"},"fix":{"range":[532,563],"text":""},"desc":"Remove unused variable 'MoneyIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pipelines' is assigned a value but never used.","line":67,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"pipelines"},"fix":{"range":[1079,1088],"text":""},"desc":"Remove unused variable 'pipelines'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":399,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":399,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[13355,13362],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Paper,\n  Button,\n  IconButton,\n  Chip,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  CircularProgress,\n  Alert,\n  LinearProgress\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  DragIndicator as DragIcon,\n  Timeline as TimelineIcon,\n  TrendingUp as TrendingUpIcon,\n  MonetizationOn as MoneyIcon\n} from '@mui/icons-material';\n\ninterface PipelineStage {\n  id: string;\n  name: string;\n  probability: number;\n  color: string;\n  order: number;\n}\n\ninterface Opportunity {\n  id: number;\n  name: string;\n  account: string;\n  amount: number;\n  stage: string;\n  owner: string;\n  closeDate: string;\n  probability: number;\n}\n\ninterface Pipeline {\n  id: number;\n  name: string;\n  description: string;\n  stages: PipelineStage[];\n  isDefault: boolean;\n  isActive: boolean;\n}\n\nconst SalesPipeline: React.FC = () => {\n  const [pipelines, setPipelines] = useState<Pipeline[]>([]);\n  const [selectedPipeline, setSelectedPipeline] = useState<Pipeline | null>(null);\n  const [opportunities, setOpportunities] = useState<{[stageId: string]: Opportunity[]}>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  // Mock data - replace with actual API call\n  useEffect(() => {\n    const fetchPipelineData = async () => {\n      try {\n        setLoading(true);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        const mockStages: PipelineStage[] = [\n          { id: 'qualification', name: 'Qualification', probability: 10, color: '#f44336', order: 1 },\n          { id: 'needs-analysis', name: 'Needs Analysis', probability: 25, color: '#ff9800', order: 2 },\n          { id: 'proposal', name: 'Proposal', probability: 50, color: '#2196f3', order: 3 },\n          { id: 'negotiation', name: 'Negotiation', probability: 75, color: '#4caf50', order: 4 },\n          { id: 'closed-won', name: 'Closed Won', probability: 100, color: '#8bc34a', order: 5 }\n        ];\n\n        const mockPipeline: Pipeline = {\n          id: 1,\n          name: 'Standard Sales Pipeline',\n          description: 'Default sales pipeline for all opportunities',\n          stages: mockStages,\n          isDefault: true,\n          isActive: true\n        };\n\n        const mockOpportunities: {[stageId: string]: Opportunity[]} = {\n          'qualification': [\n            {\n              id: 1,\n              name: 'ERP Implementation',\n              account: 'Manufacturing Co',\n              amount: 75000,\n              stage: 'qualification',\n              owner: 'Sarah Johnson',\n              closeDate: '2024-03-30',\n              probability: 10\n            },\n            {\n              id: 4,\n              name: 'CRM Software',\n              account: 'Retail Corp',\n              amount: 25000,\n              stage: 'qualification',\n              owner: 'Mike Wilson',\n              closeDate: '2024-04-15',\n              probability: 10\n            }\n          ],\n          'needs-analysis': [\n            {\n              id: 5,\n              name: 'Analytics Platform',\n              account: 'Data Co',\n              amount: 50000,\n              stage: 'needs-analysis',\n              owner: 'Lisa Davis',\n              closeDate: '2024-03-15',\n              probability: 25\n            }\n          ],\n          'proposal': [\n            {\n              id: 2,\n              name: 'Enterprise Software License',\n              account: 'TechCorp Ltd',\n              amount: 150000,\n              stage: 'proposal',\n              owner: 'Sarah Johnson',\n              closeDate: '2024-02-15',\n              probability: 50\n            }\n          ],\n          'negotiation': [\n            {\n              id: 3,\n              name: 'Cloud Migration Project',\n              account: 'Global Systems Inc',\n              amount: 300000,\n              stage: 'negotiation',\n              owner: 'David Brown',\n              closeDate: '2024-02-28',\n              probability: 75\n            }\n          ],\n          'closed-won': [\n            {\n              id: 6,\n              name: 'Small Business Package',\n              account: 'Local Startup',\n              amount: 15000,\n              stage: 'closed-won',\n              owner: 'Mike Wilson',\n              closeDate: '2024-01-30',\n              probability: 100\n            }\n          ]\n        };\n        \n        setPipelines([mockPipeline]);\n        setSelectedPipeline(mockPipeline);\n        setOpportunities(mockOpportunities);\n      } catch (err) {\n        setError('Failed to load pipeline data');\n        console.error('Error fetching pipeline data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPipelineData();\n  }, []);\n\n  const calculateStageMetrics = (stageId: string) => {\n    const stageOpps = opportunities[stageId] || [];\n    const count = stageOpps.length;\n    const value = stageOpps.reduce((sum, opp) => sum + opp.amount, 0);\n    const weightedValue = stageOpps.reduce((sum, opp) => sum + (opp.amount * opp.probability / 100), 0);\n    \n    return { count, value, weightedValue };\n  };\n\n  const getTotalPipelineValue = () => {\n    return Object.values(opportunities).flat().reduce((sum, opp) => sum + opp.amount, 0);\n  };\n\n  const getWeightedPipelineValue = () => {\n    return Object.values(opportunities).flat().reduce((sum, opp) => sum + (opp.amount * opp.probability / 100), 0);\n  };\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress size={40} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Sales Pipeline\n      </Typography>\n\n      {/* Pipeline Summary */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Total Opportunities\n              </Typography>\n              <Typography variant=\"h4\">\n                {Object.values(opportunities).flat().length}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Pipeline Value\n              </Typography>\n              <Typography variant=\"h4\">\n                ${getTotalPipelineValue().toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Weighted Value\n              </Typography>\n              <Typography variant=\"h4\">\n                ${Math.round(getWeightedPipelineValue()).toLocaleString()}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Conversion Rate\n              </Typography>\n              <Typography variant=\"h4\">\n                {Object.values(opportunities).flat().length > 0 \n                  ? Math.round((opportunities['closed-won']?.length || 0) / Object.values(opportunities).flat().length * 100)\n                  : 0}%\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {selectedPipeline && (\n        <Box>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n            <Typography variant=\"h5\">{selectedPipeline.name}</Typography>\n            <Button\n              variant=\"outlined\"\n              startIcon={<EditIcon />}\n              onClick={() => setDialogOpen(true)}\n            >\n              Configure Pipeline\n            </Button>\n          </Box>\n\n          {/* Pipeline Stages */}\n          <Grid container spacing={2}>\n            {selectedPipeline.stages.map((stage) => {\n              const metrics = calculateStageMetrics(stage.id);\n              const stageOpps = opportunities[stage.id] || [];\n              \n              return (\n                <Grid item xs={12} md={2.4} key={stage.id}>\n                  <Paper \n                    sx={{ \n                      p: 2, \n                      height: '500px',\n                      borderTop: `4px solid ${stage.color}`,\n                      display: 'flex',\n                      flexDirection: 'column'\n                    }}\n                  >\n                    {/* Stage Header */}\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"h6\" sx={{ fontSize: '14px', fontWeight: 'bold' }}>\n                        {stage.name}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {stage.probability}% probability\n                      </Typography>\n                      <Divider sx={{ my: 1 }} />\n                      <Typography variant=\"body2\">\n                        {metrics.count} opp{metrics.count !== 1 ? 's' : ''} • ${metrics.value.toLocaleString()}\n                      </Typography>\n                      <LinearProgress \n                        variant=\"determinate\" \n                        value={(metrics.weightedValue / metrics.value) * 100 || 0}\n                        sx={{ mt: 1, height: 6, borderRadius: 3 }}\n                      />\n                    </Box>\n\n                    {/* Opportunities List */}\n                    <Box sx={{ flexGrow: 1, overflowY: 'auto' }}>\n                      {stageOpps.map((opportunity) => (\n                        <Card \n                          key={opportunity.id} \n                          sx={{ \n                            mb: 1, \n                            cursor: 'pointer',\n                            '&:hover': { backgroundColor: 'action.hover' }\n                          }}\n                          onClick={() => {\n                            // Handle opportunity click - navigate to detail view\n                            console.log('Opportunity clicked:', opportunity.id);\n                          }}\n                        >\n                          <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\n                            <Typography variant=\"subtitle2\" sx={{ fontSize: '12px', fontWeight: 'bold' }}>\n                              {opportunity.name}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontSize: '11px' }}>\n                              {opportunity.account}\n                            </Typography>\n                            <Typography variant=\"body2\" sx={{ fontSize: '12px', fontWeight: 'bold', mt: 1 }}>\n                              ${opportunity.amount.toLocaleString()}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontSize: '11px' }}>\n                              {opportunity.owner}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ fontSize: '11px' }}>\n                              Close: {new Date(opportunity.closeDate).toLocaleDateString()}\n                            </Typography>\n                          </CardContent>\n                        </Card>\n                      ))}\n                      \n                      {/* Add Opportunity Button */}\n                      <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        startIcon={<AddIcon />}\n                        fullWidth\n                        sx={{ mt: 1, fontSize: '11px' }}\n                        onClick={() => {\n                          // Handle add opportunity to this stage\n                          console.log('Add opportunity to stage:', stage.id);\n                        }}\n                      >\n                        Add Opportunity\n                      </Button>\n                    </Box>\n                  </Paper>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Box>\n      )}\n\n      {/* Pipeline Configuration Dialog */}\n      <Dialog \n        open={dialogOpen} \n        onClose={() => setDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Configure Sales Pipeline</DialogTitle>\n        <DialogContent>\n          <Box sx={{ mt: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>Pipeline Stages</Typography>\n            {selectedPipeline?.stages.map((stage, index) => (\n              <Card key={stage.id} sx={{ mb: 2 }}>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                    <IconButton size=\"small\">\n                      <DragIcon />\n                    </IconButton>\n                    <TextField\n                      label=\"Stage Name\"\n                      value={stage.name}\n                      sx={{ flexGrow: 1 }}\n                      disabled\n                    />\n                    <TextField\n                      label=\"Probability %\"\n                      type=\"number\"\n                      value={stage.probability}\n                      sx={{ width: 120 }}\n                      disabled\n                    />\n                    <Box\n                      sx={{\n                        width: 24,\n                        height: 24,\n                        backgroundColor: stage.color,\n                        borderRadius: 1,\n                        border: '1px solid #ccc'\n                      }}\n                    />\n                  </Box>\n                </CardContent>\n              </Card>\n            ))}\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              Pipeline customization will be available with backend integration. \n              Contact your administrator to modify pipeline stages.\n            </Alert>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDialogOpen(false)}>Close</Button>\n          <Button variant=\"contained\" disabled>Save Changes</Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default SalesPipeline;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sales/reports.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'List' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"List"},"fix":{"range":[349,357],"text":""},"desc":"Remove unused variable 'List'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItem' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItem"},"fix":{"range":[357,369],"text":""},"desc":"Remove unused variable 'ListItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemText' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemText"},"fix":{"range":[369,385],"text":""},"desc":"Remove unused variable 'ListItemText'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemIcon' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemIcon"},"fix":{"range":[385,401],"text":""},"desc":"Remove unused variable 'ListItemIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[401,412],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PieChartIcon' is defined but never used.","line":44,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"PieChartIcon"},"fix":{"range":[698,726],"text":""},"desc":"Remove unused variable 'PieChartIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DownloadIcon' is defined but never used.","line":45,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"DownloadIcon"},"fix":{"range":[726,754],"text":""},"desc":"Remove unused variable 'DownloadIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ShareIcon' is defined but never used.","line":47,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"ShareIcon"},"fix":{"range":[776,798],"text":""},"desc":"Remove unused variable 'ShareIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'reportType' is assigned a value but never used.","line":93,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"reportType"},"fix":{"range":[1758,1768],"text":""},"desc":"Remove unused variable 'reportType'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setReportType' is assigned a value but never used.","line":93,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"setReportType"},"fix":{"range":[1768,1783],"text":""},"desc":"Remove unused variable 'setReportType'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'exportToExcel' was used before it was defined.","line":166,"column":15,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":166,"endColumn":28},{"ruleId":"no-use-before-define","severity":2,"message":"'exportToPDF' was used before it was defined.","line":168,"column":15,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":168,"endColumn":26},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 91 column 10.","line":170,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":170,"endColumn":19},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 91 column 10.","line":170,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":170,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'avgGrowth' is not defined.","line":184,"column":48,"nodeType":"Identifier","messageId":"undef","endLine":184,"endColumn":57},{"ruleId":"no-undef","severity":2,"message":"'avgConversion' is not defined.","line":185,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":185,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'totalLeads' is not defined.","line":186,"column":42,"nodeType":"Identifier","messageId":"undef","endLine":186,"endColumn":52},{"ruleId":"no-undef","severity":2,"message":"'avgGrowth' is not defined.","line":243,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":243,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'avgConversion' is not defined.","line":244,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":244,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'totalLeads' is not defined.","line":245,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":245,"endColumn":40}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Card,\n  CardContent,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Tabs,\n  Tab,\n  CircularProgress,\n  Alert,\n  LinearProgress,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  ButtonGroup\n} from '@mui/material';\nimport {\n  Assessment as AssessmentIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  MonetizationOn as MoneyIcon,\n  Person as PersonIcon,\n  Business as BusinessIcon,\n  Timeline as TimelineIcon,\n  BarChart as BarChartIcon,\n  PieChart as PieChartIcon,\n  Download as DownloadIcon,\n  Print as PrintIcon,\n  Share as ShareIcon,\n  FileDownload as ExcelIcon,\n  PictureAsPdf as PdfIcon\n} from '@mui/icons-material';\nimport * as XLSX from 'exceljs';\nimport { saveAs } from 'file-saver';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\ninterface SalesData {\n  period: string;\n  revenue: number;\n  deals: number;\n  averageDealSize: number;\n  conversionRate: number;\n  growth: number;\n}\n\ninterface SalespersonPerformance {\n  name: string;\n  revenue: number;\n  deals: number;\n  quota: number;\n  achievement: number;\n  commission: number;\n}\n\ninterface ProductPerformance {\n  product: string;\n  revenue: number;\n  units: number;\n  margin: number;\n  growth: number;\n}\n\ninterface RegionPerformance {\n  region: string;\n  revenue: number;\n  deals: number;\n  growth: number;\n}\n\nconst SalesReports: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [timeRange, setTimeRange] = useState('last_quarter');\n  const [reportType, setReportType] = useState('overview');\n  const [tabValue, setTabValue] = useState(0);\n  \n  const [salesData, setSalesData] = useState<SalesData[]>([]);\n  const [salespersonData, setSalespersonData] = useState<SalespersonPerformance[]>([]);\n  const [productData, setProductData] = useState<ProductPerformance[]>([]);\n  const [regionData, setRegionData] = useState<RegionPerformance[]>([]);\n\n  // Mock data - replace with actual API call\n  useEffect(() => {\n    const fetchReportData = async () => {\n      try {\n        setLoading(true);\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        const mockSalesData: SalesData[] = [\n          { period: 'Jan 2024', revenue: 850000, deals: 23, averageDealSize: 36956, conversionRate: 23.5, growth: 12.3 },\n          { period: 'Feb 2024', revenue: 920000, deals: 27, averageDealSize: 34074, conversionRate: 25.1, growth: 8.2 },\n          { period: 'Mar 2024', revenue: 780000, deals: 21, averageDealSize: 37143, conversionRate: 21.8, growth: -15.2 },\n          { period: 'Apr 2024', revenue: 1050000, deals: 31, averageDealSize: 33871, conversionRate: 28.3, growth: 34.6 },\n          { period: 'May 2024', revenue: 1120000, deals: 29, averageDealSize: 38621, conversionRate: 26.7, growth: 6.7 },\n          { period: 'Jun 2024', revenue: 980000, deals: 25, averageDealSize: 39200, conversionRate: 24.5, growth: -12.5 }\n        ];\n\n        const mockSalespersonData: SalespersonPerformance[] = [\n          { name: 'Sarah Johnson', revenue: 450000, deals: 12, quota: 400000, achievement: 112.5, commission: 36000 },\n          { name: 'David Brown', revenue: 380000, deals: 9, quota: 350000, achievement: 108.6, commission: 30400 },\n          { name: 'Mike Wilson', revenue: 320000, deals: 14, quota: 300000, achievement: 106.7, commission: 25600 },\n          { name: 'Lisa Thompson', revenue: 275000, deals: 8, quota: 280000, achievement: 98.2, commission: 22000 },\n          { name: 'Robert Chen', revenue: 195000, deals: 6, quota: 250000, achievement: 78.0, commission: 15600 }\n        ];\n\n        const mockProductData: ProductPerformance[] = [\n          { product: 'ERP Software', revenue: 1200000, units: 15, margin: 65.5, growth: 18.2 },\n          { product: 'CRM Software', revenue: 850000, units: 23, margin: 58.3, growth: 12.7 },\n          { product: 'Analytics Platform', revenue: 650000, units: 18, margin: 72.1, growth: 25.4 },\n          { product: 'Cloud Services', revenue: 480000, units: 12, margin: 45.8, growth: 8.9 },\n          { product: 'Support Services', revenue: 320000, units: 35, margin: 38.2, growth: 5.1 }\n        ];\n\n        const mockRegionData: RegionPerformance[] = [\n          { region: 'West Coast', revenue: 1850000, deals: 42, growth: 15.8 },\n          { region: 'East Coast', revenue: 1650000, deals: 38, growth: 12.3 },\n          { region: 'Central', revenue: 980000, deals: 24, growth: 8.7 },\n          { region: 'South', revenue: 720000, deals: 18, growth: 22.1 }\n        ];\n        \n        setSalesData(mockSalesData);\n        setSalespersonData(mockSalespersonData);\n        setProductData(mockProductData);\n        setRegionData(mockRegionData);\n      } catch (err) {\n        setError('Failed to load report data');\n        console.error('Error fetching reports:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReportData();\n  }, [timeRange]);\n\n  const totalRevenue = salesData.reduce((sum, data) => sum + data.revenue, 0);\n  const totalDeals = salesData.reduce((sum, data) => sum + data.deals, 0);\n  const avgDealSize = totalDeals > 0 ? totalRevenue / totalDeals : 0;\n  const avgConversionRate = salesData.length > 0 \n    ? salesData.reduce((sum, data) => sum + data.conversionRate, 0) / salesData.length \n    : 0;\n\n  const handleExport = async (format: 'excel' | 'pdf') => {\n    try {\n      if (format === 'excel') {\n        await exportToExcel();\n      } else if (format === 'pdf') {\n        await exportToPDF();\n      }\n    } catch (error) {\n      console.error(`Error exporting as ${format}:`, error);\n    }\n  };\n\n  const exportToExcel = async () => {\n    const workbook = new XLSX.Workbook();\n    \n    // Sales Overview Sheet\n    const overviewSheet = workbook.addWorksheet('Sales Overview');\n    \n    // Add headers\n    overviewSheet.addRow(['Metric', 'Value']);\n    overviewSheet.addRow(['Total Revenue', `$${totalRevenue.toLocaleString()}`]);\n    overviewSheet.addRow(['Revenue Growth', `${avgGrowth.toFixed(1)}%`]);\n    overviewSheet.addRow(['Conversion Rate', `${avgConversion.toFixed(1)}%`]);\n    overviewSheet.addRow(['Total Leads', totalLeads]);\n    overviewSheet.addRow(['Export Date', new Date().toLocaleDateString()]);\n    overviewSheet.addRow(['Time Range', timeRange.replace('_', ' ').toUpperCase()]);\n\n    // Style the header row\n    overviewSheet.getRow(1).font = { bold: true };\n    overviewSheet.getColumn(1).width = 20;\n    overviewSheet.getColumn(2).width = 20;\n\n    // Sales Data Sheet\n    const dataSheet = workbook.addWorksheet('Sales Data');\n    \n    // Add headers for sales data\n    dataSheet.addRow(['Period', 'Revenue', 'Leads', 'Customers', 'Conversion Rate (%)', 'Growth (%)']);\n    \n    // Add sales data\n    salesData.forEach(data => {\n      dataSheet.addRow([\n        data.period,\n        data.revenue,\n        data.leads,\n        data.customers,\n        data.conversionRate,\n        data.growth\n      ]);\n    });\n\n    // Style the header row\n    dataSheet.getRow(1).font = { bold: true };\n    dataSheet.columns.forEach(column => {\n      column.width = 15;\n    });\n\n    // Generate buffer and save file\n    const buffer = await workbook.xlsx.writeBuffer();\n    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    saveAs(blob, `sales-report-${timeRange}-${new Date().toISOString().split('T')[0]}.xlsx`);\n  };\n\n  const exportToPDF = () => {\n    const doc = new jsPDF();\n    \n    // Add title\n    doc.setFontSize(20);\n    doc.text('Sales Report', 20, 20);\n    \n    // Add metadata\n    doc.setFontSize(12);\n    doc.text(`Time Range: ${timeRange.replace('_', ' ').toUpperCase()}`, 20, 35);\n    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 45);\n    \n    // Add summary metrics\n    doc.setFontSize(14);\n    doc.text('Summary Metrics:', 20, 65);\n    \n    doc.setFontSize(11);\n    doc.text(`Total Revenue: $${totalRevenue.toLocaleString()}`, 20, 75);\n    doc.text(`Revenue Growth: ${avgGrowth.toFixed(1)}%`, 20, 85);\n    doc.text(`Conversion Rate: ${avgConversion.toFixed(1)}%`, 20, 95);\n    doc.text(`Total Leads: ${totalLeads}`, 20, 105);\n\n    // Add sales data table\n    const tableData = salesData.map(data => [\n      data.period,\n      `$${data.revenue.toLocaleString()}`,\n      data.leads.toString(),\n      data.customers.toString(),\n      `${data.conversionRate}%`,\n      `${data.growth}%`\n    ]);\n\n    (doc as any).autoTable({\n      head: [['Period', 'Revenue', 'Leads', 'Customers', 'Conversion Rate', 'Growth']],\n      body: tableData,\n      startY: 120,\n      styles: { fontSize: 10 },\n      headStyles: { fillColor: [41, 128, 185] }\n    });\n\n    // Save the PDF\n    doc.save(`sales-report-${timeRange}-${new Date().toISOString().split('T')[0]}.pdf`);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  if (loading) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress size={40} />\n        </Box>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\">Sales Reports</Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n            <InputLabel>Time Range</InputLabel>\n            <Select\n              value={timeRange}\n              label=\"Time Range\"\n              onChange={(e) => setTimeRange(e.target.value)}\n            >\n              <MenuItem value=\"last_week\">Last Week</MenuItem>\n              <MenuItem value=\"last_month\">Last Month</MenuItem>\n              <MenuItem value=\"last_quarter\">Last Quarter</MenuItem>\n              <MenuItem value=\"last_year\">Last Year</MenuItem>\n              <MenuItem value=\"ytd\">Year to Date</MenuItem>\n            </Select>\n          </FormControl>\n          <ButtonGroup variant=\"outlined\" size=\"small\">\n            <Button startIcon={<ExcelIcon />} onClick={() => handleExport('excel')}>\n              Excel\n            </Button>\n            <Button startIcon={<PdfIcon />} onClick={() => handleExport('pdf')}>\n              PDF\n            </Button>\n            <Button startIcon={<PrintIcon />} onClick={handlePrint}>\n              Print\n            </Button>\n          </ButtonGroup>\n        </Box>\n      </Box>\n\n      {/* Summary Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <MoneyIcon color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Revenue\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    ${(totalRevenue / 1000000).toFixed(1)}M\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"success.main\">\n                    <TrendingUpIcon sx={{ fontSize: 16, mr: 0.5 }} />\n                    +12.5% vs last period\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <AssessmentIcon color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Deals\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {totalDeals}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"primary.main\">\n                    Closed deals\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <TimelineIcon color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Avg Deal Size\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    ${Math.round(avgDealSize).toLocaleString()}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"warning.main\">\n                    <TrendingUpIcon sx={{ fontSize: 16, mr: 0.5 }} />\n                    +8.3% improvement\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <BarChartIcon color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Conversion Rate\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {avgConversionRate.toFixed(1)}%\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"info.main\">\n                    Average rate\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tabs for different report types */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>\n          <Tab label=\"Sales Trends\" />\n          <Tab label=\"Salesperson Performance\" />\n          <Tab label=\"Product Performance\" />\n          <Tab label=\"Regional Analysis\" />\n        </Tabs>\n      </Paper>\n\n      {/* Sales Trends Tab */}\n      {tabValue === 0 && (\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>Monthly Sales Performance</Typography>\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Period</TableCell>\n                        <TableCell align=\"right\">Revenue</TableCell>\n                        <TableCell align=\"right\">Deals</TableCell>\n                        <TableCell align=\"right\">Avg Deal Size</TableCell>\n                        <TableCell align=\"right\">Conversion Rate</TableCell>\n                        <TableCell align=\"right\">Growth</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {salesData.map((data, index) => (\n                        <TableRow key={index} hover>\n                          <TableCell>{data.period}</TableCell>\n                          <TableCell align=\"right\">${data.revenue.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">{data.deals}</TableCell>\n                          <TableCell align=\"right\">${data.averageDealSize.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">{data.conversionRate}%</TableCell>\n                          <TableCell align=\"right\">\n                            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                              {data.growth >= 0 ? (\n                                <TrendingUpIcon color=\"success\" sx={{ mr: 0.5, fontSize: 16 }} />\n                              ) : (\n                                <TrendingDownIcon color=\"error\" sx={{ mr: 0.5, fontSize: 16 }} />\n                              )}\n                              <Typography \n                                color={data.growth >= 0 ? 'success.main' : 'error.main'}\n                                variant=\"body2\"\n                              >\n                                {data.growth > 0 ? '+' : ''}{data.growth}%\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Salesperson Performance Tab */}\n      {tabValue === 1 && (\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>Salesperson Performance</Typography>\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Salesperson</TableCell>\n                        <TableCell align=\"right\">Revenue</TableCell>\n                        <TableCell align=\"right\">Deals</TableCell>\n                        <TableCell align=\"right\">Quota</TableCell>\n                        <TableCell align=\"right\">Achievement</TableCell>\n                        <TableCell align=\"right\">Commission</TableCell>\n                        <TableCell>Quota Progress</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {salespersonData.map((person, index) => (\n                        <TableRow key={index} hover>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <PersonIcon sx={{ mr: 1, color: 'primary.main' }} />\n                              {person.name}\n                            </Box>\n                          </TableCell>\n                          <TableCell align=\"right\">${person.revenue.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">{person.deals}</TableCell>\n                          <TableCell align=\"right\">${person.quota.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">\n                            <Typography \n                              color={person.achievement >= 100 ? 'success.main' : 'warning.main'}\n                              variant=\"body2\"\n                              sx={{ fontWeight: 'bold' }}\n                            >\n                              {person.achievement}%\n                            </Typography>\n                          </TableCell>\n                          <TableCell align=\"right\">${person.commission.toLocaleString()}</TableCell>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center', minWidth: 120 }}>\n                              <LinearProgress\n                                variant=\"determinate\"\n                                value={Math.min(person.achievement, 100)}\n                                sx={{ flexGrow: 1, mr: 1, height: 8, borderRadius: 4 }}\n                                color={person.achievement >= 100 ? 'success' : 'primary'}\n                              />\n                              <Typography variant=\"body2\" color=\"textSecondary\">\n                                {Math.round(person.achievement)}%\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Product Performance Tab */}\n      {tabValue === 2 && (\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>Product Performance</Typography>\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Product</TableCell>\n                        <TableCell align=\"right\">Revenue</TableCell>\n                        <TableCell align=\"right\">Units Sold</TableCell>\n                        <TableCell align=\"right\">Profit Margin</TableCell>\n                        <TableCell align=\"right\">Growth</TableCell>\n                        <TableCell align=\"right\">Avg Price</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {productData.map((product, index) => (\n                        <TableRow key={index} hover>\n                          <TableCell>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <BusinessIcon sx={{ mr: 1, color: 'secondary.main' }} />\n                              {product.product}\n                            </Box>\n                          </TableCell>\n                          <TableCell align=\"right\">${product.revenue.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">{product.units}</TableCell>\n                          <TableCell align=\"right\">\n                            <Typography \n                              color={product.margin >= 60 ? 'success.main' : product.margin >= 40 ? 'warning.main' : 'error.main'}\n                              variant=\"body2\"\n                            >\n                              {product.margin}%\n                            </Typography>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                              {product.growth >= 0 ? (\n                                <TrendingUpIcon color=\"success\" sx={{ mr: 0.5, fontSize: 16 }} />\n                              ) : (\n                                <TrendingDownIcon color=\"error\" sx={{ mr: 0.5, fontSize: 16 }} />\n                              )}\n                              <Typography \n                                color={product.growth >= 0 ? 'success.main' : 'error.main'}\n                                variant=\"body2\"\n                              >\n                                {product.growth > 0 ? '+' : ''}{product.growth}%\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            ${Math.round(product.revenue / product.units).toLocaleString()}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n\n      {/* Regional Analysis Tab */}\n      {tabValue === 3 && (\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>Regional Performance</Typography>\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Region</TableCell>\n                        <TableCell align=\"right\">Revenue</TableCell>\n                        <TableCell align=\"right\">Deals</TableCell>\n                        <TableCell align=\"right\">Avg Deal Size</TableCell>\n                        <TableCell align=\"right\">Growth</TableCell>\n                        <TableCell>Performance</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {regionData.map((region, index) => (\n                        <TableRow key={index} hover>\n                          <TableCell>\n                            <Typography variant=\"subtitle2\">{region.region}</Typography>\n                          </TableCell>\n                          <TableCell align=\"right\">${region.revenue.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\">{region.deals}</TableCell>\n                          <TableCell align=\"right\">\n                            ${Math.round(region.revenue / region.deals).toLocaleString()}\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                              {region.growth >= 0 ? (\n                                <TrendingUpIcon color=\"success\" sx={{ mr: 0.5, fontSize: 16 }} />\n                              ) : (\n                                <TrendingDownIcon color=\"error\" sx={{ mr: 0.5, fontSize: 16 }} />\n                              )}\n                              <Typography \n                                color={region.growth >= 0 ? 'success.main' : 'error.main'}\n                                variant=\"body2\"\n                              >\n                                {region.growth > 0 ? '+' : ''}{region.growth}%\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell>\n                            <LinearProgress\n                              variant=\"determinate\"\n                              value={(region.revenue / Math.max(...regionData.map(r => r.revenue))) * 100}\n                              sx={{ height: 8, borderRadius: 4 }}\n                              color=\"primary\"\n                            />\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n    </Container>\n  );\n};\n\nexport default SalesReports;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/service-desk/index.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":114,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":114,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":115,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[2257,2284],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":120,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[2563,2570],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'loadServiceDeskData' was used before it was defined.","line":127,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":127,"endColumn":24}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/service-desk/index.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  TextField,\n  InputAdornment,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Tabs,\n  Tab,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Divider,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  Support as SupportIcon,\n  Chat as ChatIcon,\n  Assessment as AssessmentIcon,\n  Schedule as ScheduleIcon,\n  Person as PersonIcon,\n  SmartToy as SmartToyIcon,\n  Feedback as FeedbackIcon,\n  CheckCircle as CheckCircleIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '@/context/AuthContext';\n\ninterface Ticket {\n  id: number;\n  ticket_number: string;\n  title: string;\n  description?: string;\n  status: string;\n  priority: string;\n  ticket_type: string;\n  customer_id: number;\n  customer_name: string;\n  assigned_to_id?: number;\n  assigned_to_name?: string;\n  created_at: string;\n  due_date?: string;\n}\n\ninterface ChatbotConversation {\n  id: number;\n  conversation_id: string;\n  customer_name?: string;\n  channel: string;\n  status: string;\n  intent?: string;\n  escalated_to_human: boolean;\n  started_at: string;\n  last_message_at?: string;\n}\n\ninterface ServiceDeskAnalytics {\n  total_tickets: number;\n  open_tickets: number;\n  in_progress_tickets: number;\n  resolved_tickets: number;\n  tickets_by_priority: Record<string, number>;\n  average_resolution_time_hours: number;\n  sla_compliance_rate: number;\n  customer_satisfaction_score: number;\n  first_contact_resolution_rate: number;\n}\n\nconst ticketStatusColors: Record<string, string> = {\n  open: 'error',\n  in_progress: 'warning',\n  resolved: 'success',\n  closed: 'primary',\n  cancelled: 'default',\n};\n\nconst priorityColors: Record<string, string> = {\n  low: 'success',\n  medium: 'info',\n  high: 'warning',\n  urgent: 'error',\n};\n\nconst conversationStatusColors: Record<string, string> = {\n  active: 'info',\n  escalated: 'warning',\n  resolved: 'success',\n  closed: 'default',\n};\n\nexport default function ServiceDeskDashboard() {\n  const { user } = useAuth();\n  const [currentTab, setCurrentTab] = useState(0);\n  const [tickets, setTickets] = useState<Ticket[]>([]);\n  const [conversations, setConversations] = useState<ChatbotConversation[]>([]);\n  const [analytics, setAnalytics] = useState<ServiceDeskAnalytics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [openTicketDialog, setOpenTicketDialog] = useState(false);\n  const [selectedPriority, setSelectedPriority] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState('');\n\n  useEffect(() => {\n    loadServiceDeskData();\n  }, []);\n\n  const loadServiceDeskData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API calls - in production these would be real API calls\n      const mockTickets: Ticket[] = [\n        {\n          id: 1,\n          ticket_number: 'TKT000001',\n          title: 'Software Installation Issue',\n          description: 'Unable to install the latest software update',\n          status: 'open',\n          priority: 'high',\n          ticket_type: 'support',\n          customer_id: 1,\n          customer_name: 'ABC Corp',\n          assigned_to_id: 1,\n          assigned_to_name: 'John Smith',\n          created_at: '2024-08-27T09:00:00Z',\n          due_date: '2024-08-28T17:00:00Z',\n        },\n        {\n          id: 2,\n          ticket_number: 'TKT000002',\n          title: 'Printer Maintenance Request',\n          description: 'Regular maintenance for office printer',\n          status: 'in_progress',\n          priority: 'medium',\n          ticket_type: 'maintenance',\n          customer_id: 2,\n          customer_name: 'XYZ Inc',\n          assigned_to_id: 2,\n          assigned_to_name: 'Jane Doe',\n          created_at: '2024-08-26T14:30:00Z',\n          due_date: '2024-08-29T12:00:00Z',\n        },\n        {\n          id: 3,\n          ticket_number: 'TKT000003',\n          title: 'Network Configuration',\n          description: 'Setup new network configuration',\n          status: 'resolved',\n          priority: 'low',\n          ticket_type: 'installation',\n          customer_id: 3,\n          customer_name: 'Tech Solutions',\n          assigned_to_id: 1,\n          assigned_to_name: 'John Smith',\n          created_at: '2024-08-25T10:15:00Z',\n        },\n      ];\n\n      const mockConversations: ChatbotConversation[] = [\n        {\n          id: 1,\n          conversation_id: 'conv_001',\n          customer_name: 'Sarah Johnson',\n          channel: 'web_chat',\n          status: 'active',\n          intent: 'product_inquiry',\n          escalated_to_human: false,\n          started_at: '2024-08-27T10:30:00Z',\n          last_message_at: '2024-08-27T10:35:00Z',\n        },\n        {\n          id: 2,\n          conversation_id: 'conv_002',\n          customer_name: 'Mike Brown',\n          channel: 'whatsapp',\n          status: 'escalated',\n          intent: 'support_request',\n          escalated_to_human: true,\n          started_at: '2024-08-27T09:15:00Z',\n          last_message_at: '2024-08-27T09:45:00Z',\n        },\n        {\n          id: 3,\n          conversation_id: 'conv_003',\n          customer_name: 'Lisa Davis',\n          channel: 'web_chat',\n          status: 'resolved',\n          intent: 'billing_inquiry',\n          escalated_to_human: false,\n          started_at: '2024-08-27T08:00:00Z',\n          last_message_at: '2024-08-27T08:15:00Z',\n        },\n      ];\n\n      const mockAnalytics: ServiceDeskAnalytics = {\n        total_tickets: 25,\n        open_tickets: 8,\n        in_progress_tickets: 12,\n        resolved_tickets: 5,\n        tickets_by_priority: {\n          low: 5,\n          medium: 12,\n          high: 6,\n          urgent: 2,\n        },\n        average_resolution_time_hours: 18.5,\n        sla_compliance_rate: 92.5,\n        customer_satisfaction_score: 4.3,\n        first_contact_resolution_rate: 68.5,\n      };\n\n      setTickets(mockTickets);\n      setConversations(mockConversations);\n      setAnalytics(mockAnalytics);\n    } catch (error) {\n      console.error('Error loading service desk data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredTickets = tickets.filter((ticket) => {\n    const matchesSearch =\n      ticket.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.ticket_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      ticket.customer_name.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesPriority = !selectedPriority || ticket.priority === selectedPriority;\n    const matchesStatus = !selectedStatus || ticket.status === selectedStatus;\n    \n    return matchesSearch && matchesPriority && matchesStatus;\n  });\n\n  const filteredConversations = conversations.filter((conv) =>\n    conv.customer_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    conv.conversation_id.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const renderAnalyticsCards = () => {\n    if (!analytics) {return null;}\n\n    return (\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <SupportIcon color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Tickets\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {analytics.total_tickets}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {analytics.open_tickets} open\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <ScheduleIcon color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Avg Resolution\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {analytics.average_resolution_time_hours}h\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {analytics.sla_compliance_rate}% SLA compliance\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <FeedbackIcon color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Satisfaction Score\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {analytics.customer_satisfaction_score}/5\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {analytics.first_contact_resolution_rate}% FCR\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                <ChatIcon color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Chats\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"div\">\n                    {conversations.filter(c => c.status === 'active').length}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {conversations.filter(c => c.escalated_to_human).length} escalated\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderTicketsTable = () => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Ticket #</TableCell>\n            <TableCell>Title</TableCell>\n            <TableCell>Customer</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Priority</TableCell>\n            <TableCell>Assigned To</TableCell>\n            <TableCell>Due Date</TableCell>\n            <TableCell>Created</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {filteredTickets.map((ticket) => (\n            <TableRow key={ticket.id} hover>\n              <TableCell>{ticket.ticket_number}</TableCell>\n              <TableCell>\n                <Typography variant=\"body2\" fontWeight=\"medium\">\n                  {ticket.title}\n                </Typography>\n                <Typography variant=\"caption\" color=\"textSecondary\">\n                  {ticket.ticket_type}\n                </Typography>\n              </TableCell>\n              <TableCell>{ticket.customer_name}</TableCell>\n              <TableCell>\n                <Chip\n                  label={ticket.status.replace('_', ' ')}\n                  color={ticketStatusColors[ticket.status] as any}\n                  size=\"small\"\n                />\n              </TableCell>\n              <TableCell>\n                <Chip\n                  label={ticket.priority}\n                  color={priorityColors[ticket.priority] as any}\n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              </TableCell>\n              <TableCell>{ticket.assigned_to_name || 'Unassigned'}</TableCell>\n              <TableCell>\n                {ticket.due_date ? (\n                  <Typography \n                    variant=\"body2\"\n                    color={new Date(ticket.due_date) < new Date() ? 'error' : 'textSecondary'}\n                  >\n                    {new Date(ticket.due_date).toLocaleDateString()}\n                  </Typography>\n                ) : '-'}\n              </TableCell>\n              <TableCell>\n                {new Date(ticket.created_at).toLocaleDateString()}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  const renderConversationsList = () => (\n    <Paper>\n      <List>\n        {filteredConversations.map((conversation, index) => (\n          <React.Fragment key={conversation.id}>\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar>\n                  {conversation.escalated_to_human ? <PersonIcon /> : <SmartToyIcon />}\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText\n                primary={\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Typography variant=\"body1\">\n                      {conversation.customer_name || 'Anonymous'}\n                    </Typography>\n                    <Chip\n                      label={conversation.status}\n                      color={conversationStatusColors[conversation.status] as any}\n                      size=\"small\"\n                    />\n                    <Chip\n                      label={conversation.channel.replace('_', ' ')}\n                      variant=\"outlined\"\n                      size=\"small\"\n                    />\n                  </Box>\n                }\n                secondary={\n                  <Box>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Intent: {conversation.intent?.replace('_', ' ') || 'Unknown'}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Started: {new Date(conversation.started_at).toLocaleString()}\n                      {conversation.last_message_at && \n                        ` • Last message: ${new Date(conversation.last_message_at).toLocaleString()}`\n                      }\n                    </Typography>\n                  </Box>\n                }\n              />\n              {conversation.status === 'resolved' && (\n                <CheckCircleIcon color=\"success\" />\n              )}\n            </ListItem>\n            {index < filteredConversations.length - 1 && <Divider variant=\"inset\" component=\"li\" />}\n          </React.Fragment>\n        ))}\n      </List>\n    </Paper>\n  );\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Service Desk Dashboard\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenTicketDialog(true)}\n          >\n            Create Ticket\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<AssessmentIcon />}\n          >\n            Reports\n          </Button>\n        </Box>\n      </Box>\n\n      {renderAnalyticsCards()}\n\n      <Card>\n        <CardContent>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n            <Tabs value={currentTab} onChange={(_, newValue) => setCurrentTab(newValue)}>\n              <Tab label=\"Tickets\" />\n              <Tab label=\"Chatbot Conversations\" />\n            </Tabs>\n          </Box>\n\n          <Box sx={{ display: 'flex', gap: 2, mb: 2, flexWrap: 'wrap' }}>\n            <TextField\n              placeholder=\"Search...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }}\n              sx={{ minWidth: 300 }}\n            />\n            {currentTab === 0 && (\n              <>\n                <FormControl sx={{ minWidth: 120 }}>\n                  <InputLabel>Priority</InputLabel>\n                  <Select\n                    value={selectedPriority}\n                    onChange={(e) => setSelectedPriority(e.target.value)}\n                  >\n                    <MenuItem value=\"\">All</MenuItem>\n                    <MenuItem value=\"low\">Low</MenuItem>\n                    <MenuItem value=\"medium\">Medium</MenuItem>\n                    <MenuItem value=\"high\">High</MenuItem>\n                    <MenuItem value=\"urgent\">Urgent</MenuItem>\n                  </Select>\n                </FormControl>\n                <FormControl sx={{ minWidth: 120 }}>\n                  <InputLabel>Status</InputLabel>\n                  <Select\n                    value={selectedStatus}\n                    onChange={(e) => setSelectedStatus(e.target.value)}\n                  >\n                    <MenuItem value=\"\">All</MenuItem>\n                    <MenuItem value=\"open\">Open</MenuItem>\n                    <MenuItem value=\"in_progress\">In Progress</MenuItem>\n                    <MenuItem value=\"resolved\">Resolved</MenuItem>\n                    <MenuItem value=\"closed\">Closed</MenuItem>\n                  </Select>\n                </FormControl>\n              </>\n            )}\n          </Box>\n\n          {currentTab === 0 && renderTicketsTable()}\n          {currentTab === 1 && renderConversationsList()}\n        </CardContent>\n      </Card>\n\n      {/* Create Ticket Dialog - Placeholder */}\n      <Dialog\n        open={openTicketDialog}\n        onClose={() => setOpenTicketDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Create New Ticket</DialogTitle>\n        <DialogContent>\n          <Box sx={{ pt: 1 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Title\"\n                  fullWidth\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Customer</InputLabel>\n                  <Select>\n                    <MenuItem value=\"1\">ABC Corp</MenuItem>\n                    <MenuItem value=\"2\">XYZ Inc</MenuItem>\n                    <MenuItem value=\"3\">Tech Solutions</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Priority</InputLabel>\n                  <Select defaultValue=\"medium\">\n                    <MenuItem value=\"low\">Low</MenuItem>\n                    <MenuItem value=\"medium\">Medium</MenuItem>\n                    <MenuItem value=\"high\">High</MenuItem>\n                    <MenuItem value=\"urgent\">Urgent</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Type</InputLabel>\n                  <Select defaultValue=\"support\">\n                    <MenuItem value=\"support\">Support</MenuItem>\n                    <MenuItem value=\"maintenance\">Maintenance</MenuItem>\n                    <MenuItem value=\"installation\">Installation</MenuItem>\n                    <MenuItem value=\"complaint\">Complaint</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  label=\"Due Date\"\n                  type=\"datetime-local\"\n                  fullWidth\n                  InputLabelProps={{ shrink: true }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Description\"\n                  multiline\n                  rows={4}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenTicketDialog(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setOpenTicketDialog(false)}>\n            Create Ticket\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/service/dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/service/dispatch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/service/feedback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/settings.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":62,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":62,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Settings Page Page Component\n * \n * This component provides the main settings interface for users with different roles.\n * It uses centralized role and permission functions from user.types.ts to ensure\n * consistent behavior across the application.\n * \n * Role Display:\n * - Uses getDisplayRole(user.role, user.is_super_admin) for consistent role naming\n * - Prioritizes is_super_admin flag over role string for App Super Admin detection\n * \n * Permission Checks:\n * - isAppSuperAdmin(user): Determines if user is an app-level super admin\n * - canFactoryReset(user): Determines if user can perform reset operations  \n * - canManageUsers(user): Determines if user can manage other users\n * \n * Features shown based on permissions:\n * - App Super Admin: All features including cross-org management\n * - Org Admin: Organization-level management and reset options\n * - Standard User: Basic profile and company detail access only\n */\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  Divider,\n  DialogContentText\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport { \n  Warning,\n  DeleteSweep,\n  Security,\n  Business,\n  Add\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\nimport axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\nimport { \n  getDisplayRole, \n  isAppSuperAdmin, \n  canFactoryReset, \n  canManageUsers, \n  canAccessOrganizationSettings,\n  canShowFactoryResetOnly,\n  canShowOrgDataResetOnly\n} from '../types/user.types';\n\nexport default function Settings() {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [resetDialogOpen, setResetDialogOpen] = useState(false);\n  const [factoryResetDialogOpen, setFactoryResetDialogOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [factoryLoading, setFactoryLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  // Get token for API calls\n  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n  \n  // Use centralized permission and role functions\n  const displayRole = getDisplayRole(user?.role || '', user?.is_super_admin);\n  const isSuperAdmin = isAppSuperAdmin(user);\n  const canReset = canFactoryReset(user);\n  const canManage = canManageUsers(user);\n  const canAccessOrgSettings = canAccessOrganizationSettings(user);\n  const showFactoryResetOnly = canShowFactoryResetOnly(user);\n  const showOrgDataResetOnly = canShowOrgDataResetOnly(user);\n  /**\n   * @deprecated Organization name should come from React user context, not localStorage\n   * Organization context is automatically managed by the backend session\n   */\n  const organizationName = user?.organization_id ? 'Current Organization' : null;\n\n  const handleResetData = async () => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    try {\n      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n      const response = await axios.post(\n        `${API_BASE_URL}/api/v1/organizations/reset-data`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      setSuccess(response.data.message);\n      setResetDialogOpen(false);\n      \n      // For organization admins, refresh the page to reflect changes\n      if (!isSuperAdmin) {\n        setTimeout(() => {\n          window.location.reload();\n        }, 2000);\n      }\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to reset data');\n      setResetDialogOpen(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFactoryReset = async () => {\n    setFactoryLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    try {\n      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n      const response = await axios.post(\n        `${API_BASE_URL}/api/v1/organizations/factory-default`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      setSuccess(response.data.message);\n      setFactoryResetDialogOpen(false);\n      \n      // Refresh the page to reflect changes\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to perform factory reset');\n      setFactoryResetDialogOpen(false);\n    } finally {\n      setFactoryLoading(false);\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Settings\n      </Typography>\n      {/* User Role Information */}\n      <Paper sx={{ p: 2, mb: 3, bgcolor: 'info.main', color: 'info.contrastText' }}>\n        <Typography variant=\"body1\">\n          <strong>Current Role:</strong> {displayRole} {organizationName && `• Organization: ${organizationName}`}\n        </Typography>\n        {canManage && (\n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            You have administrative privileges to manage users and organization settings.\n          </Typography>\n        )}\n      </Paper>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 3 }}>\n          {success}\n        </Alert>\n      )}\n      <Grid container spacing={3}>\n        {/* Admin Section - For App Admin User Creation */}\n        {isSuperAdmin && (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Security sx={{ mr: 1 }} />\n                Admin Management\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              \n              <Alert severity=\"info\" sx={{ mb: 2 }}>\n                <Typography variant=\"body2\">\n                  App admins can create organization licenses but cannot create other app admin users.\n                </Typography>\n              </Alert>\n\n              <Button\n                variant=\"contained\"\n                onClick={() => router.push('/admin/license-management')}\n                sx={{ mb: 2, mr: 2 }}\n                startIcon={<Business />}\n                color=\"primary\"\n              >\n                License Management\n              </Button>\n              \n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/admin/organizations')}\n                sx={{ mb: 2 }}\n                startIcon={<Business />}\n              >\n                Manage Organizations\n              </Button>\n            </Paper>\n          </Grid>\n        )}\n\n        {/* Organization Settings - Hidden from App Super Admins */}\n        {canAccessOrgSettings && (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Business sx={{ mr: 1 }} />\n                Organization Settings\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              \n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/masters/company-details')}\n                sx={{ mb: 2, mr: 2 }}\n              >\n                Edit Company Details\n              </Button>\n\n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/profile')}\n                sx={{ mb: 2 }}\n              >\n                User Profile\n              </Button>\n\n              {/* User Management for Organization Admins - Now in Settings */}\n              {canManage && (\n                <>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() => router.push('/settings/user-management')}\n                    sx={{ mb: 2, mr: 2 }}\n                    startIcon={<Security />}\n                    color=\"primary\"\n                  >\n                    Manage Users\n                  </Button>\n                  \n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => router.push('/settings/add-user')}\n                    sx={{ mb: 2 }}\n                    startIcon={<Add />}\n                  >\n                    Add User\n                  </Button>\n                </>\n              )}\n            </Paper>\n          </Grid>\n        )}\n\n        {/* User Profile for App Super Admins (when Organization Settings is hidden) */}\n        {!canAccessOrgSettings && (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Business sx={{ mr: 1 }} />\n                User Profile\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              \n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/profile')}\n                sx={{ mb: 2 }}\n              >\n                Edit Profile\n              </Button>\n            </Paper>\n          </Grid>\n        )}\n\n        {/* Data Management */}\n        {canReset && (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Security sx={{ mr: 1 }} />\n                Data Management\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              \n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                <Typography variant=\"body2\">\n                  <strong>Warning:</strong> Database reset will permanently delete data\n                  {showFactoryResetOnly ? ' for all organizations' : ' for your organization'}. \n                  This action cannot be undone.\n                </Typography>\n              </Alert>\n\n              {/* App Super Admin: Only Factory Reset */}\n              {showFactoryResetOnly && (\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  startIcon={<Warning />}\n                  onClick={() => setFactoryResetDialogOpen(true)}\n                  disabled={loading || factoryLoading}\n                  sx={{ mt: 1 }}\n                >\n                  {factoryLoading ? (\n                    <CircularProgress size={20} color=\"inherit\" />\n                  ) : (\n                    'Restore to Factory Defaults'\n                  )}\n                </Button>\n              )}\n\n              {/* Org Super Admin: Only Reset Organization Data */}\n              {showOrgDataResetOnly && (\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  startIcon={<DeleteSweep />}\n                  onClick={() => setResetDialogOpen(true)}\n                  disabled={loading || factoryLoading}\n                  sx={{ mt: 1 }}\n                >\n                  {loading ? (\n                    <CircularProgress size={20} color=\"inherit\" />\n                  ) : (\n                    'Reset Organization Data'\n                  )}\n                </Button>\n              )}\n\n              {/* Legacy: Both options for other admin types */}\n              {!showFactoryResetOnly && !showOrgDataResetOnly && (\n                <>\n                  <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    startIcon={<DeleteSweep />}\n                    onClick={() => setResetDialogOpen(true)}\n                    disabled={loading || factoryLoading}\n                    sx={{ mt: 1, mr: 2 }}\n                  >\n                    {loading ? (\n                      <CircularProgress size={20} color=\"inherit\" />\n                    ) : (\n                      `Reset ${isSuperAdmin ? 'All' : 'Organization'} Data`\n                    )}\n                  </Button>\n\n                  <Button\n                    variant=\"outlined\"\n                    color=\"warning\"\n                    startIcon={<Warning />}\n                    onClick={() => setFactoryResetDialogOpen(true)}\n                    disabled={loading || factoryLoading}\n                    sx={{ mt: 1 }}\n                  >\n                    {factoryLoading ? (\n                      <CircularProgress size={20} color=\"inherit\" />\n                    ) : (\n                      'Factory Default Reset'\n                    )}\n                  </Button>\n                </>\n              )}\n\n              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1 }}>\n                {showFactoryResetOnly \n                  ? 'Restore to Factory Defaults: Wipes all app data including organizations, licenses, and license holders'\n                  : showOrgDataResetOnly\n                  ? 'Reset Organization Data: Removes all business data but not organization settings'\n                  : isSuperAdmin \n                  ? 'As app super admin, this will reset all organization data'\n                  : 'Reset data: removes all business data but keeps organization settings'\n                }\n              </Typography>\n            </Paper>\n          </Grid>\n        )}\n\n        {/* System Administration - App-level controls only */}\n        {isSuperAdmin && (\n          <Grid size={12}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Warning sx={{ mr: 1, color: 'warning.main' }} />\n                System Administration\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              \n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                <Typography variant=\"body2\">\n                  System-level controls for application management. Use with caution.\n                </Typography>\n              </Alert>\n\n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/dashboard')}\n                sx={{ mr: 2, mb: 2 }}\n                startIcon={<Business />}\n              >\n                App Dashboard\n              </Button>\n            </Paper>\n          </Grid>\n        )}\n      </Grid>\n      {/* Reset Confirmation Dialog */}\n      <Dialog\n        open={resetDialogOpen}\n        onClose={() => setResetDialogOpen(false)}\n      >\n        <DialogTitle sx={{ display: 'flex', alignItems: 'center' }}>\n          <Warning sx={{ mr: 1, color: 'error.main' }} />\n          Confirm Data Reset\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to reset {showOrgDataResetOnly ? 'your organization&apos;s' : isSuperAdmin ? 'all' : 'your organization&apos;s'} data? \n            This action will permanently delete:\n          </DialogContentText>\n          <Box component=\"ul\" sx={{ mt: 2, mb: 2 }}>\n            <li>All companies</li>\n            <li>All vendors and customers</li>\n            <li>All products and inventory</li>\n            <li>All vouchers and transactions</li>\n            <li>All audit logs</li>\n            {isSuperAdmin && !showOrgDataResetOnly && (\n              <>\n                <li>All organization users (except super admin)</li>\n                <li>All organizations</li>\n              </>\n            )}\n          </Box>\n          <DialogContentText color=\"error\">\n            <strong>This action cannot be undone!</strong>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={() => setResetDialogOpen(false)} \n            disabled={loading}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleResetData} \n            color=\"error\" \n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={16} /> : <DeleteSweep />}\n          >\n            {loading ? 'Resetting...' : 'Reset Data'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Factory Default Confirmation Dialog */}\n      <Dialog\n        open={factoryResetDialogOpen}\n        onClose={() => setFactoryResetDialogOpen(false)}\n      >\n        <DialogTitle sx={{ display: 'flex', alignItems: 'center' }}>\n          <Warning sx={{ mr: 1, color: 'warning.main' }} />\n          {showFactoryResetOnly ? 'Confirm Restore to Factory Defaults' : 'Confirm Factory Default Reset'}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {showFactoryResetOnly ? (\n              <>\n                Are you sure you want to restore the entire application to factory defaults? \n                This action will permanently delete:\n              </>\n            ) : (\n              <>\n                Are you sure you want to perform a factory default reset? \n                This action will permanently restore your organization to its initial state:\n              </>\n            )}\n          </DialogContentText>\n          <Box component=\"ul\" sx={{ mt: 2, mb: 2 }}>\n            {showFactoryResetOnly ? (\n              <>\n                <li>All organizations and their data</li>\n                <li>All licenses and license holders</li>\n                <li>All users (except the primary super admin)</li>\n                <li>All companies, vendors, customers</li>\n                <li>All products and inventory</li>\n                <li>All vouchers and transactions</li>\n                <li>All audit logs</li>\n                <li>System returns to initial installation state</li>\n              </>\n            ) : (\n              <>\n                <li>All business data will be deleted (same as data reset)</li>\n                <li>Organization settings will be reset to defaults</li>\n                <li>Business type will be set to &quot;Other&quot;</li>\n                <li>Timezone will be set to &quot;Asia/Kolkata&quot;</li>\n                <li>Currency will be set to &quot;INR&quot;</li>\n                <li>Company details status will be reset</li>\n              </>\n            )}\n          </Box>\n          <DialogContentText color={showFactoryResetOnly ? 'error' : 'warning.main'}>\n            <strong>\n              {showFactoryResetOnly \n                ? 'This action cannot be undone and will completely reset the entire application!'\n                : 'This action cannot be undone and will reset both data and settings!'\n              }\n            </strong>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={() => setFactoryResetDialogOpen(false)} \n            disabled={factoryLoading}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleFactoryReset} \n            color={showFactoryResetOnly ? 'error' : 'warning'} \n            variant=\"contained\"\n            disabled={factoryLoading}\n            startIcon={factoryLoading ? <CircularProgress size={16} /> : <Warning />}\n          >\n            {factoryLoading ? 'Resetting...' : (showFactoryResetOnly ? 'Restore to Factory Defaults' : 'Factory Default Reset')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/settings/DataManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/settings/FactoryReset.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[243,254],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'response' is assigned a value but never used.","line":52,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"response"},"fix":{"range":[1525,1571],"text":""},"desc":"Remove unused variable 'response'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'response' is assigned a value but never used.","line":64,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"response"},"fix":{"range":[1847,1899],"text":""},"desc":"Remove unused variable 'response'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Revised: v1/frontend/src/pages/settings/FactoryReset.tsx\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Alert,\n  Divider,\n  Grid\n} from '@mui/material';\nimport {\n  RestartAlt,\n  Warning,\n  Security\n} from '@mui/icons-material';\nimport { useAuth } from '../../context/AuthContext';\nimport { requestResetOTP, confirmReset } from '../../services/resetService';\nimport { canFactoryReset, isAppSuperAdmin, isOrgSuperAdmin } from '../../types/user.types';\n\nconst FactoryReset: React.FC = () => {\n  const { user } = useAuth();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [otp, setOtp] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [resetType, setResetType] = useState<'organization_data' | 'factory_default'>('organization_data');\n\n  const isSuperAdmin = isAppSuperAdmin(user);\n  const isOrgAdmin = isOrgSuperAdmin(user);\n  const canReset = canFactoryReset(user);\n\n  if (!canReset) {\n    return (\n      <Alert severity=\"error\">\n        You don&apos;t have permission to access reset functionality. Only organization administrators and app super administrators can perform resets.\n      </Alert>\n    );\n  }\n\n  const handleRequestOTP = async (type: 'organization_data' | 'factory_default') => {\n    setResetType(type);\n    setLoading(true);\n    try {\n      const scope = type === 'organization_data' ? 'organization' : 'all_organizations';\n      const response = await requestResetOTP(scope);\n      // Success message would be handled by the service\n      setIsModalVisible(true);\n    } catch (error) {\n      console.error('Failed to request OTP:', error);\n    }\n    setLoading(false);\n  };\n\n  const handleConfirm = async () => {\n    setLoading(true);\n    try {\n      const response = await confirmReset(otp, resetType);\n      // Success would be handled by the service\n      setIsModalVisible(false);\n      setOtp('');\n    } catch (error) {\n      console.error('Invalid OTP or reset failed:', error);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Reset & Recovery Options\n      </Typography>\n      <Grid container spacing={3}>\n        {/* Organization Super Admin - Reset All Data */}\n        {isOrgAdmin && (\n          <Grid size={{ xs: 12, md: 6 }}>\n            <Paper sx={{ p: 3, height: '100%' }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <RestartAlt color=\"warning\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Reset All Data</Typography>\n              </Box>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                Removes all business data (customers, vendors, products, stock, vouchers) \n                from your organization while keeping users and organization settings intact.\n              </Typography>\n              \n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                This action cannot be undone. All your business data will be permanently deleted.\n              </Alert>\n              \n              <Button\n                variant=\"contained\"\n                color=\"warning\"\n                fullWidth\n                startIcon={<RestartAlt />}\n                onClick={() => handleRequestOTP('organization_data')}\n                disabled={loading}\n              >\n                Reset All Data\n              </Button>\n            </Paper>\n          </Grid>\n        )}\n\n        {/* App Super Admin - Factory Default */}\n        {isSuperAdmin && (\n          <Grid size={{ xs: 12, md: 6 }}>\n            <Paper sx={{ p: 3, height: '100%' }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Security color=\"error\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Factory Default</Typography>\n              </Box>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                Complete system reset that removes ALL organizations, licenses, users, \n                and data. Resets the entire application to initial state.\n              </Typography>\n              \n              <Alert severity=\"error\" sx={{ mb: 2 }}>\n                <strong>DANGER:</strong> This will delete everything in the system including \n                all organizations and users. Only use for complete system recovery.\n              </Alert>\n              \n              <Button\n                variant=\"contained\"\n                color=\"error\"\n                fullWidth\n                startIcon={<Security />}\n                onClick={() => handleRequestOTP('factory_default')}\n                disabled={loading}\n              >\n                Factory Default\n              </Button>\n            </Paper>\n          </Grid>\n        )}\n      </Grid>\n      {/* OTP Confirmation Dialog */}\n      <Dialog \n        open={isModalVisible} \n        onClose={() => setIsModalVisible(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Warning color=\"error\" sx={{ mr: 1 }} />\n            Confirm {resetType === 'organization_data' ? 'Data Reset' : 'Factory Default'}\n          </Box>\n        </DialogTitle>\n        \n        <DialogContent>\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            An OTP has been sent to your email. Enter it below to confirm this irreversible action.\n          </Alert>\n          \n          <TextField\n            fullWidth\n            label=\"Enter OTP\"\n            value={otp}\n            onChange={(e) => setOtp(e.target.value)}\n            placeholder=\"Enter the 6-digit OTP\"\n            sx={{ mt: 2 }}\n          />\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={() => setIsModalVisible(false)}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleConfirm}\n            variant=\"contained\"\n            color=\"error\"\n            disabled={loading || otp.length !== 6}\n          >\n            {loading ? 'Processing...' : 'Confirm Reset'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default FactoryReset;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/settings/Settings.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[144,155],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'StickyNote2' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"StickyNote2"},"fix":{"range":[292,307],"text":""},"desc":"Remove unused variable 'StickyNote2'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Revised: v1/frontend/src/pages/settings/Settings.tsx\n\nimport React from 'react';\nimport {\n  Container,\n  Typography,\n  Paper,\n  Box,\n  Button,\n  Divider\n} from '@mui/material';\nimport {\n  Person,\n  PersonAdd,\n  Settings as SettingsIcon,\n  Security,\n  Integration,\n  CloudUpload,\n  Timeline,\n  StickyNote2\n} from '@mui/icons-material';\nimport { useRouter } from 'next/router';\nimport FactoryReset from './FactoryReset';\nimport { useAuth } from '../../context/AuthContext';\nimport { getDisplayRole, canAccessAdvancedSettings, isOrgSuperAdmin, canManageUsers } from '../../types/user.types';\nimport Grid from '@mui/material/Grid';\nimport UserPreferences from './UserPreferences';\n\nconst Settings: React.FC = () => {\n  const { user } = useAuth();\n  const router = useRouter();\n  const displayRole = getDisplayRole(user?.role || 'unknown', user?.is_super_admin);\n  const isAuthorized = canAccessAdvancedSettings(user);\n  const isOrgAdmin = isOrgSuperAdmin(user);\n  const canManage = canManageUsers(user);\n\n  console.log('Current user in Settings:', JSON.stringify(user, null, 2));\n  console.log('Display Role:', displayRole);\n  console.log('Is Authorized:', isAuthorized);\n  console.log('Is Org Admin:', isOrgAdmin);\n  console.log('Can Manage Users:', canManage);\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n        <SettingsIcon sx={{ mr: 2 }} />\n        Settings\n      </Typography>\n\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>Account Information</Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Current Role: <strong>{displayRole}</strong>\n        </Typography>\n      </Paper>\n\n      <Grid container spacing={3}>\n        {/* User Preferences - Available to all users */}\n        <Grid size={{ xs: 12, md: isOrgAdmin && canManage ? 4 : (isOrgAdmin ? 6 : 12) }}>\n          <UserPreferences />\n        </Grid>\n\n        {/* User Management - Only for Organization Super Admins */}\n        {isOrgAdmin && canManage && (\n          <Grid size={{ xs: 12, md: 6 }}>\n            <Paper sx={{ p: 3, height: '100%' }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Person sx={{ mr: 1 }} />\n                User Management\n              </Typography>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                Manage users within your organization. Add new users, edit existing ones, \n                and control their access permissions.\n              </Typography>\n              \n              <Box sx={{ display: 'flex', gap: 1, flexDirection: 'column' }}>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<Person />}\n                  onClick={() => router.push('/settings/user-management')}\n                  fullWidth\n                >\n                  Manage Users\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<PersonAdd />}\n                  onClick={() => router.push('/settings/add-user')}\n                  fullWidth\n                >\n                  Add New User\n                </Button>\n              </Box>\n            </Paper>\n          </Grid>\n        )}\n\n        {/* Integration Management - For Super Admins */}\n        {isOrgAdmin && (\n          <Grid size={{ xs: 12, md: canManage ? 6 : 12 }}>\n            <Paper sx={{ p: 3, height: '100%' }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Integration sx={{ mr: 1 }} />\n                Integration Management\n              </Typography>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                Manage external integrations like Tally, Zoho, email services, and data migration.\n                Configure connections and monitor integration health.\n              </Typography>\n              \n              <Box sx={{ display: 'flex', gap: 1, flexDirection: 'column' }}>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<Timeline />}\n                  onClick={() => router.push('/migration/management')}\n                  fullWidth\n                >\n                  Migration & Integrations\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<CloudUpload />}\n                  onClick={() => router.push('/migration/management')}\n                  fullWidth\n                >\n                  Data Import Wizard\n                </Button>\n              </Box>\n            </Paper>\n          </Grid>\n        )}\n\n        {/* Advanced Settings - For authorized users */}\n        {isAuthorized && (\n          <Grid size={{ xs: 12, md: isOrgAdmin ? (canManage ? 4 : 6) : 12 }}>\n            <Paper sx={{ p: 3, height: '100%' }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Security sx={{ mr: 1 }} />\n                Advanced Options\n              </Typography>\n              \n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                Advanced reset and recovery options. Use with caution as these actions \n                cannot be undone.\n              </Typography>\n              \n              <FactoryReset />\n            </Paper>\n          </Grid>\n        )}\n\n        {/* Message for users without advanced access */}\n        {!isAuthorized && !canManage && (\n          <Grid size={{ xs: 12 }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                Advanced options and user management are not available for your role: <strong>{displayRole}</strong>\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                Contact your organization administrator if you need access to additional features.\n              </Typography>\n            </Paper>\n          </Grid>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Settings;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/settings/UserPreferences.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[76,87],"text":""},"desc":"Remove unused variable 'useEffect'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/settings/UserPreferences.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Paper,\n  Typography,\n  Box,\n  FormControlLabel,\n  Switch,\n  CircularProgress,\n  Alert,\n  Divider\n} from '@mui/material';\nimport {\n  StickyNote2,\n  PersonOutline\n} from '@mui/icons-material';\nimport useStickyNotes from '../../hooks/useStickyNotes';\n\nconst UserPreferences: React.FC = () => {\n  const { userSettings, toggleStickyNotes, refreshSettings } = useStickyNotes();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  const handleStickyNotesToggle = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const enabled = event.target.checked;\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    try {\n      await toggleStickyNotes(enabled);\n      setSuccess(enabled ? 'Sticky notes enabled' : 'Sticky notes disabled');\n      \n      // Clear success message after 3 seconds\n      setTimeout(() => setSuccess(null), 3000);\n    } catch (err) {\n      console.error('Error updating sticky notes setting:', err);\n      setError('Failed to update sticky notes setting');\n      \n      // Refresh settings to ensure UI is in sync\n      await refreshSettings();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Paper sx={{ p: 3, height: '100%' }}>\n      <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n        <PersonOutline sx={{ mr: 1 }} />\n        User Preferences\n      </Typography>\n      \n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Customize your dashboard experience and personal settings.\n      </Typography>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 2 }} onClose={() => setSuccess(null)}>\n          {success}\n        </Alert>\n      )}\n\n      {/* Dashboard Settings */}\n      <Box sx={{ mb: 2 }}>\n        <Typography variant=\"subtitle2\" sx={{ mb: 1.5, fontWeight: 600 }}>\n          Dashboard Settings\n        </Typography>\n        \n        <FormControlLabel\n          control={\n            <Switch\n              checked={userSettings.sticky_notes_enabled}\n              onChange={handleStickyNotesToggle}\n              disabled={loading}\n              color=\"primary\"\n            />\n          }\n          label={\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <StickyNote2 sx={{ mr: 1, fontSize: 20, color: 'text.secondary' }} />\n              <Box>\n                <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n                  Enable Sticky Notes\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Show sticky notes panel on your dashboard\n                </Typography>\n              </Box>\n            </Box>\n          }\n          sx={{ \n            alignItems: 'flex-start',\n            ml: 0,\n            '& .MuiFormControlLabel-label': {\n              ml: 1\n            }\n          }}\n        />\n        \n        {loading && (\n          <Box sx={{ display: 'flex', alignItems: 'center', mt: 1, ml: 4 }}>\n            <CircularProgress size={16} sx={{ mr: 1 }} />\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Updating preferences...\n            </Typography>\n          </Box>\n        )}\n      </Box>\n\n      <Divider sx={{ my: 2 }} />\n\n      {/* Future preferences can be added here */}\n      <Box>\n        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\n          More customization options will be available in future updates.\n        </Typography>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default UserPreferences;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/settings/add-user.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[165,185],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Checkbox"},"fix":{"range":[185,197],"text":""},"desc":"Remove unused variable 'Checkbox'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormGroup' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormGroup"},"fix":{"range":[197,210],"text":""},"desc":"Remove unused variable 'FormGroup'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loading' is assigned a value but never used.","line":31,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"loading"},"fix":{"range":[712,719],"text":""},"desc":"Remove unused variable 'loading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used.","line":31,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"setLoading"},"fix":{"range":[719,731],"text":""},"desc":"Remove unused variable 'setLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":65,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[1823,1827],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 32 column 10.","line":73,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":73,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 32 column 10.","line":73,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":73,"endColumn":25}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  FormGroup,\n  Alert,\n  CircularProgress,\n  Divider,\n  IconButton\n} from '@mui/material';\nimport { ArrowBack, Person, Save, Cancel } from '@mui/icons-material';\nimport { useRouter } from 'next/router';\nimport { useMutation } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\nimport { canManageUsers, isAppSuperAdmin } from '../../types/user.types';\n\nconst AddUser: React.FC = () => {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    email: '',\n    full_name: '',\n    password: '',\n    role: 'standard_user',\n    department: '',\n    designation: '',\n    employee_id: '',\n    phone: ''\n  });\n\n  // Get user info for authorization (no token here—moved to mutation)\n  const canAddUser = canManageUsers(user);\n  const isSuperAdmin = isAppSuperAdmin(user);\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const token = localStorage.getItem('token'); // Moved here: Only runs on client during mutation\n      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n      const response = await axios.post(\n        `${API_BASE_URL}/api/v1/users/`,\n        userData,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      return response.data;\n    },\n    onSuccess: (data) => {\n      setSuccess('User created successfully!');\n      setError(null);\n      // Redirect to user management after 2 seconds\n      setTimeout(() => {\n        router.push('/settings/user-management');\n      }, 2000);\n    },\n    onError: (error: any) => {\n      setError(error.response?.data?.detail || 'Failed to create user');\n      setSuccess(null);\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n    setSuccess(null);\n\n    // Basic validation\n    if (!formData.email || !formData.full_name || !formData.password) {\n      setError('Please fill in all required fields');\n      return;\n    }\n\n    // Password validation\n    if (formData.password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      return;\n    }\n\n    createUserMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string) => (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | { target: { value: string } }) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: e.target.value\n    }));\n  };\n\n  const resetForm = () => {\n    setFormData({\n      email: '',\n      full_name: '',\n      password: '',\n      role: 'standard_user',\n      department: '',\n      designation: '',\n      employee_id: '',\n      phone: ''\n    });\n    setError(null);\n    setSuccess(null);\n  };\n\n  // Check authorization\n  if (!canAddUser) {\n    return (\n      <Container maxWidth=\"md\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          You don&apos;t have permission to add users. Only organization administrators can add users.\n        </Alert>\n        <Button \n          startIcon={<ArrowBack />} \n          onClick={() => router.push('/settings')}\n          sx={{ mt: 2 }}\n        >\n          Back to Settings\n        </Button>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n        <IconButton onClick={() => router.push('/settings')} sx={{ mr: 2 }}>\n          <ArrowBack />\n        </IconButton>\n        <Typography variant=\"h4\" component=\"h1\">\n          Add New User\n        </Typography>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 3 }}>\n          {success}\n        </Alert>\n      )}\n\n      <Paper sx={{ p: 4 }}>\n        <form onSubmit={handleSubmit}>\n          <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n            <Person sx={{ mr: 1 }} />\n            User Information\n          </Typography>\n          <Divider sx={{ mb: 3 }} />\n\n          {/* Basic Information */}\n          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 3 }}>\n            <TextField\n              fullWidth\n              label=\"Email *\"\n              type=\"email\"\n              value={formData.email}\n              onChange={handleInputChange('email')}\n              required\n              helperText=\"User's login email address (username will be auto-generated)\"\n            />\n            <TextField\n              fullWidth\n              label=\"Full Name *\"\n              value={formData.full_name}\n              onChange={handleInputChange('full_name')}\n              required\n            />\n          </Box>\n\n          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 3 }}>\n            <TextField\n              fullWidth\n              label=\"Password *\"\n              type=\"password\"\n              value={formData.password}\n              onChange={handleInputChange('password')}\n              required\n              helperText=\"Minimum 8 characters\"\n            />\n            <FormControl fullWidth>\n              <InputLabel>Role *</InputLabel>\n              <Select\n                value={formData.role}\n                label=\"Role *\"\n                onChange={handleInputChange('role')}\n              >\n                <MenuItem value=\"standard_user\">Standard User</MenuItem>\n                <MenuItem value=\"admin\">Admin</MenuItem>\n                {isSuperAdmin && (\n                  <MenuItem value=\"org_admin\">Organization Admin</MenuItem>\n                )}\n              </Select>\n            </FormControl>\n          </Box>\n\n          {/* Additional Information */}\n          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 4 }}>\n            <TextField\n              fullWidth\n              label=\"Department\"\n              value={formData.department}\n              onChange={handleInputChange('department')}\n            />\n            <TextField\n              fullWidth\n              label=\"Designation\"\n              value={formData.designation}\n              onChange={handleInputChange('designation')}\n            />\n          </Box>\n\n          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 3, mb: 4 }}>\n            <TextField\n              fullWidth\n              label=\"Employee ID\"\n              value={formData.employee_id}\n              onChange={handleInputChange('employee_id')}\n            />\n            <TextField\n              fullWidth\n              label=\"Phone\"\n              value={formData.phone}\n              onChange={handleInputChange('phone')}\n            />\n          </Box>\n\n          {/* Action Buttons */}\n          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n            <Button\n              variant=\"outlined\"\n              startIcon={<Cancel />}\n              onClick={() => router.push('/settings')}\n              disabled={createUserMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"outlined\"\n              onClick={resetForm}\n              disabled={createUserMutation.isPending}\n            >\n              Reset\n            </Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              startIcon={createUserMutation.isPending ? <CircularProgress size={20} /> : <Save />}\n              disabled={createUserMutation.isPending}\n            >\n              {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n            </Button>\n          </Box>\n        </form>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default AddUser;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/settings/user-management.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[488,502],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Security' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Security"},"fix":{"range":[512,524],"text":""},"desc":"Remove unused variable 'Security'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AdminPanelSettings' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"AdminPanelSettings"},"fix":{"range":[524,546],"text":""},"desc":"Remove unused variable 'AdminPanelSettings'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userService' is defined but never used.","line":47,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"userService"},"fix":{"range":[706,763],"text":""},"desc":"Remove unused variable 'userService'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":67,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[1291,1318],"text":""},"desc":"Remove unused variable 'router'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":110,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":110,"endColumn":16},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":121,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":121,"endColumn":16}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  Alert,\n  Divider\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Lock,\n  LockOpen,\n  RestartAlt,\n  Visibility,\n  Person,\n  Security,\n  AdminPanelSettings,\n  Group\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRouter } from 'next/router';\nimport { userService } from '../../services/authService';\nimport { organizationService } from '../../services/organizationService';\nimport { useAuthWithOrgContext } from '../../context/AuthContext';\nimport { getDisplayRole, canManageUsers, canResetPasswords } from '../../types/user.types';\n\ninterface User {\n  id: number;\n  email: string;\n  username: string;\n  full_name: string;\n  role: string;\n  is_super_admin?: boolean;\n  department?: string;\n  designation?: string;\n  is_active: boolean;\n  created_at: string;\n  last_login?: string;\n}\n\nconst UserManagement: React.FC = () => {\n  const router = useRouter();\n  const queryClient = useQueryClient();\n  const { user: currentUser, isReady: authReady } = useAuthWithOrgContext();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [actionDialogOpen, setActionDialogOpen] = useState(false);\n  const [actionType, setActionType] = useState<'reset' | 'activate' | 'deactivate' | 'delete' | null>(null);\n  const [formData, setFormData] = useState({\n    email: '',\n    username: '',\n    full_name: '',\n    password: '',\n    role: 'standard_user',\n    department: '',\n    designation: '',\n    modules: {\n      masters: false,\n      inventory: false,\n      vouchers: false,\n      reports: false\n    }\n  });\n\n  // Permission checks\n  const canManage = canManageUsers(currentUser);\n  const canReset = canResetPasswords(currentUser);\n\n  // Get current organization ID from auth context only (no localStorage fallback)\n  const currentOrgId = currentUser?.organization_id;\n\n  // Real API calls using organization-scoped endpoints - all hooks must be at the top\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: ['organization-users', currentOrgId],\n    queryFn: () => organizationService.getOrganizationUsers(currentOrgId!),\n    enabled: canManage && !!currentOrgId && authReady // Only fetch if user has permission and org ID exists\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: (userData: any) => organizationService.createUserInOrganization(currentOrgId!, userData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['organization-users', currentOrgId] });\n      setCreateDialogOpen(false);\n      resetForm();\n    }\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: ({ userId, userData }: { userId: number; userData: any }) => \n      organizationService.updateUserInOrganization(currentOrgId!, userId, userData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['organization-users', currentOrgId] });\n      setEditDialogOpen(false);\n      setSelectedUser(null);\n      resetForm();\n    }\n  });\n\n  const userActionMutation = useMutation({\n    mutationFn: ({ userId, action }: { userId: number; action: string }) => {\n      switch (action) {\n        case 'delete':\n          return organizationService.deleteUserFromOrganization(currentOrgId!, userId);\n        default:\n          throw new Error('Invalid action');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['organization-users', currentOrgId] });\n      setActionDialogOpen(false);\n      setSelectedUser(null);\n      setActionType(null);\n    }\n  });\n\n  // Wait for authentication and organization context to be ready\n  if (!authReady) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n          <Typography>Loading organization context...</Typography>\n        </Box>\n      </Container>\n    );\n  }\n\n  // Ensure we have a valid organization ID\n  if (!currentOrgId) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          Organization context not available. Please refresh the page.\n        </Alert>\n      </Container>\n    );\n  }\n\n  // If user doesn't have permission to manage users, redirect or show message\n  if (!canManage) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          You don&apos;t have permission to manage users. Only organization administrators can manage users.\n        </Alert>\n      </Container>\n    );\n  }\n\n  const resetForm = () => {\n    setFormData({\n      email: '',\n      username: '',\n      full_name: '',\n      password: '',\n      role: 'standard_user',\n      department: '',\n      designation: '',\n      modules: {\n        masters: false,\n        inventory: false,\n        vouchers: false,\n        reports: false\n      }\n    });\n  };\n\n  const handleCreateUser = () => {\n    const userData = {\n      email: formData.email,\n      username: formData.username,\n      full_name: formData.full_name,\n      password: formData.password || 'TempPassword123!', // Generate temp password if not provided\n      role: formData.role,\n      department: formData.department,\n      designation: formData.designation,\n    };\n    createUserMutation.mutate(userData);\n  };\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    setFormData({\n      email: user.email,\n      username: user.username,\n      full_name: user.full_name,\n      password: '',\n      role: user.role,\n      department: user.department || '',\n      designation: user.designation || '',\n      modules: {\n        masters: true, // These would come from user permissions\n        inventory: true,\n        vouchers: user.role === 'admin',\n        reports: true\n      }\n    });\n    setEditDialogOpen(true);\n  };\n\n  const handleUpdateUser = () => {\n    if (selectedUser) {\n      const userData: any = {\n        email: formData.email,\n        username: formData.username,\n        full_name: formData.full_name,\n        role: formData.role,\n        department: formData.department,\n        designation: formData.designation,\n      };\n      // Only include password if provided\n      if (formData.password) {\n        userData.password = formData.password;\n      }\n      updateUserMutation.mutate({\n        userId: selectedUser.id,\n        userData: userData\n      });\n    }\n  };\n\n  const handleAction = (user: User, action: 'reset' | 'activate' | 'deactivate' | 'delete') => {\n    setSelectedUser(user);\n    setActionType(action);\n    setActionDialogOpen(true);\n  };\n\n  const confirmAction = () => {\n    if (selectedUser && actionType) {\n      userActionMutation.mutate({\n        userId: selectedUser.id,\n        action: actionType\n      });\n    }\n  };\n\n  const getRoleChip = (role: string, is_super_admin?: boolean) => {\n    const displayRole = getDisplayRole(role, is_super_admin);\n    \n    // Color mapping based on actual role levels\n    let color: 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' = 'default';\n    \n    if (is_super_admin || role === 'super_admin') {\n      color = 'error'; // Red for highest privilege\n    } else if (role === 'org_admin') {\n      color = 'secondary'; // Purple for org admin\n    } else if (role === 'admin') {\n      color = 'primary'; // Blue for admin\n    } else {\n      color = 'default'; // Gray for standard users\n    }\n    \n    return <Chip label={displayRole} color={color} size=\"small\" />;\n  };\n\n  const getStatusChip = (isActive: boolean) => {\n    return (\n      <Chip \n        label={isActive ? 'Active' : 'Inactive'} \n        color={isActive ? 'success' : 'error'} \n        size=\"small\" \n      />\n    );\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Box>\n          <Typography variant=\"h4\" component=\"h1\">\n            User Management\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"text.secondary\">\n            Managing users for {currentUser?.is_super_admin ? 'all organizations' : 'your organization'}\n            {currentOrgId > 0 && !currentUser?.is_super_admin && ` (ID: ${currentOrgId})`}\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => setCreateDialogOpen(true)}\n        >\n          Add New User\n        </Button>\n      </Box>\n      <Paper sx={{ mb: 3, p: 2 }}>\n        <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n          <Group sx={{ mr: 1 }} />\n          Users Overview\n        </Typography>\n        <Divider sx={{ mb: 2 }} />\n        \n        <Grid container spacing={3}>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"primary\">\n                {users?.length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Total Users\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"success.main\">\n                {users?.filter((user: User) => user.is_active).length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Active Users\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"info.main\">\n                {users?.filter((user: User) => user.role === 'admin').length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Admin Users\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid size={{ xs: 12, sm: 6, md: 3 }}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"secondary.main\">\n                {users?.filter((user: User) => user.role === 'standard_user').length || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Standard Users\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </Paper>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>User</TableCell>\n              <TableCell>Email</TableCell>\n              <TableCell>Role</TableCell>\n              <TableCell>Department</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Last Login</TableCell>\n              <TableCell>Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {isLoading ? (\n              <TableRow>\n                <TableCell colSpan={7} align=\"center\">\n                  Loading...\n                </TableCell>\n              </TableRow>\n            ) : users?.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} align=\"center\">\n                  No users found. Add your first user to get started.\n                </TableCell>\n              </TableRow>\n            ) : (\n              users?.map((user: User) => (\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Person sx={{ mr: 1, color: 'primary.main' }} />\n                      <Box>\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {user.full_name}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          @{user.username}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\">\n                      {user.email}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    {getRoleChip(user.role, user.is_super_admin)}\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\">\n                      {user.department || '-'}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      {user.designation || ''}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    {getStatusChip(user.is_active)}\n                  </TableCell>\n                  <TableCell>\n                    <Typography variant=\"body2\">\n                      {user.last_login ? new Date(user.last_login).toLocaleDateString() : 'Never'}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <IconButton\n                      size=\"small\"\n                      color=\"primary\"\n                      onClick={() => handleEditUser(user)}\n                      title=\"Edit User\"\n                    >\n                      <Edit />\n                    </IconButton>\n                    {canReset && (\n                      <IconButton\n                        size=\"small\"\n                        color=\"info\"\n                        onClick={() => handleAction(user, 'reset')}\n                        title=\"Reset Password\"\n                      >\n                        <RestartAlt />\n                      </IconButton>\n                    )}\n                    {user.is_active ? (\n                      <IconButton\n                        size=\"small\"\n                        color=\"warning\"\n                        onClick={() => handleAction(user, 'deactivate')}\n                        title=\"Deactivate User\"\n                      >\n                        <Lock />\n                      </IconButton>\n                    ) : (\n                      <IconButton\n                        size=\"small\"\n                        color=\"success\"\n                        onClick={() => handleAction(user, 'activate')}\n                        title=\"Activate User\"\n                      >\n                        <LockOpen />\n                      </IconButton>\n                    )}\n                    <IconButton\n                      size=\"small\"\n                      color=\"error\"\n                      onClick={() => handleAction(user, 'delete')}\n                      title=\"Delete User\"\n                    >\n                      <Delete />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {/* Create User Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Add New User</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Full Name\"\n                value={formData.full_name}\n                onChange={(e) => setFormData(prev => ({ ...prev, full_name: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Username\"\n                value={formData.username}\n                onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <FormControl fullWidth>\n                <InputLabel>Role</InputLabel>\n                <Select\n                  value={formData.role}\n                  label=\"Role\"\n                  onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value as string }))}\n                >\n                  <MenuItem value=\"standard_user\">Standard User</MenuItem>\n                  <MenuItem value=\"admin\">Admin</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Department\"\n                value={formData.department}\n                onChange={(e) => setFormData(prev => ({ ...prev, department: e.target.value }))}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Designation\"\n                value={formData.designation}\n                onChange={(e) => setFormData(prev => ({ ...prev, designation: e.target.value }))}\n              />\n            </Grid>\n            <Grid size={12}>\n              <Typography variant=\"h6\" gutterBottom>\n                Module Access\n              </Typography>\n              <FormGroup row>\n                {Object.entries(formData.modules).map(([module, checked]) => (\n                  <FormControlLabel\n                    key={module}\n                    control={\n                      <Checkbox\n                        checked={checked}\n                        onChange={(e) => setFormData(prev => ({\n                          ...prev,\n                          modules: { ...prev.modules, [module]: e.target.checked }\n                        }))}\n                        disabled={formData.role === 'admin'} // Admin gets all modules\n                      />\n                    }\n                    label={module.charAt(0).toUpperCase() + module.slice(1)}\n                  />\n                ))}\n              </FormGroup>\n              {formData.role === 'admin' && (\n                <Typography variant=\"caption\" color=\"textSecondary\">\n                  Admin users have access to all modules except user creation.\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleCreateUser} \n            variant=\"contained\"\n            disabled={createUserMutation.isPending}\n          >\n            {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Edit User Dialog */}\n      <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Edit User</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Full Name\"\n                value={formData.full_name}\n                onChange={(e) => setFormData(prev => ({ ...prev, full_name: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Username\"\n                value={formData.username}\n                onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <FormControl fullWidth>\n                <InputLabel>Role</InputLabel>\n                <Select\n                  value={formData.role}\n                  label=\"Role\"\n                  onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value as string }))}\n                >\n                  <MenuItem value=\"standard_user\">Standard User</MenuItem>\n                  <MenuItem value=\"admin\">Admin</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Department\"\n                value={formData.department}\n                onChange={(e) => setFormData(prev => ({ ...prev, department: e.target.value }))}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Designation\"\n                value={formData.designation}\n                onChange={(e) => setFormData(prev => ({ ...prev, designation: e.target.value }))}\n              />\n            </Grid>\n            <Grid size={12}>\n              <Typography variant=\"h6\" gutterBottom>\n                Module Access\n              </Typography>\n              <FormGroup row>\n                {Object.entries(formData.modules).map(([module, checked]) => (\n                  <FormControlLabel\n                    key={module}\n                    control={\n                      <Checkbox\n                        checked={checked}\n                        onChange={(e) => setFormData(prev => ({\n                          ...prev,\n                          modules: { ...prev.modules, [module]: e.target.checked }\n                        }))}\n                        disabled={formData.role === 'admin'} // Admin gets all modules\n                      />\n                    }\n                    label={module.charAt(0).toUpperCase() + module.slice(1)}\n                  />\n                ))}\n              </FormGroup>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setEditDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleUpdateUser} \n            variant=\"contained\"\n            disabled={updateUserMutation.isPending}\n          >\n            {updateUserMutation.isPending ? 'Updating...' : 'Update User'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Action Confirmation Dialog */}\n      <Dialog open={actionDialogOpen} onClose={() => setActionDialogOpen(false)}>\n        <DialogTitle>\n          Confirm {actionType === 'reset' ? 'Password Reset' : \n                   actionType === 'activate' ? 'User Activation' : \n                   actionType === 'deactivate' ? 'User Deactivation' : 'User Deletion'}\n        </DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to {actionType} user \n            <strong> {selectedUser?.full_name}</strong>?\n          </Typography>\n          {actionType === 'reset' && (\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              A new temporary password will be generated and sent to the user&apos;s email.\n            </Alert>\n          )}\n          {actionType === 'delete' && (\n            <Alert severity=\"warning\" sx={{ mt: 2 }}>\n              This action cannot be undone. The user will lose access permanently.\n            </Alert>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setActionDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={confirmAction} \n            variant=\"contained\"\n            color={actionType === 'delete' ? 'error' : 'primary'}\n            disabled={userActionMutation.isPending}\n          >\n            {userActionMutation.isPending ? 'Processing...' : 'Confirm'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default UserManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/sla/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[61,72],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[484,495],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[575,590],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Schedule"},"fix":{"range":[590,602],"text":""},"desc":"Remove unused variable 'Schedule'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":47,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[602,616],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Timeline' is defined but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Timeline"},"fix":{"range":[640,652],"text":""},"desc":"Remove unused variable 'Timeline'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SLAMetrics' is defined but never used.","line":53,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"SLAMetrics"},"fix":{"range":[827,839],"text":""},"desc":"Remove unused variable 'SLAMetrics'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'policiesLoading' is assigned a value but never used.","line":108,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"policiesLoading"},"fix":{"range":[2197,2229],"text":""},"desc":"Remove unused variable 'policiesLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'metricsLoading' is assigned a value but never used.","line":117,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"metricsLoading"},"fix":{"range":[2419,2450],"text":""},"desc":"Remove unused variable 'metricsLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'breachedLoading' is assigned a value but never used.","line":125,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"breachedLoading"},"fix":{"range":[2647,2679],"text":""},"desc":"Remove unused variable 'breachedLoading'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":137,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":137,"endColumn":16},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":147,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":147,"endColumn":16},{"ruleId":"no-use-before-define","severity":2,"message":"'resetForm' was used before it was defined.","line":167,"column":5,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":167,"endColumn":14}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/sla/index.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Tab,\n  Tabs,\n  Paper,\n  Chip,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControlLabel,\n  Switch,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControl,\n  InputAdornment,\n  Stack,\n  Grid,\n  Alert,\n  Card,\n  CardContent,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Tooltip,\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Refresh,\n  Warning,\n  CheckCircle,\n  Schedule,\n  TrendingUp,\n  Assessment,\n  Policy,\n  Timeline,\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { slaService, SLAPolicy, SLAPolicyCreate, SLAPolicyUpdate, SLAMetrics } from '../../services/slaService';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`sla-tabpanel-${index}`}\n      aria-labelledby={`sla-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst SLAManagement: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [policyDialog, setPolicyDialog] = useState(false);\n  const [selectedPolicy, setSelectedPolicy] = useState<SLAPolicy | null>(null);\n  const [deleteDialog, setDeleteDialog] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Get organization ID from context/auth\n  const organizationId = 1; // This should come from auth context\n\n  // Form state for policy dialog\n  const [policyForm, setPolicyForm] = useState<SLAPolicyCreate>({\n    name: '',\n    description: '',\n    priority: '',\n    ticket_type: '',\n    response_time_hours: 2,\n    resolution_time_hours: 24,\n    escalation_enabled: true,\n    escalation_threshold_percent: 80,\n    is_active: true,\n    is_default: false,\n  });\n\n  // API calls\n  const {\n    data: policies = [],\n    isLoading: policiesLoading,\n    refetch: refetchPolicies,\n  } = useQuery({\n    queryKey: ['sla-policies', organizationId],\n    queryFn: () => slaService.getPolicies(organizationId),\n  });\n\n  const {\n    data: metrics,\n    isLoading: metricsLoading,\n  } = useQuery({\n    queryKey: ['sla-metrics', organizationId],\n    queryFn: () => slaService.getSLAMetrics(organizationId, undefined, undefined, 30),\n  });\n\n  const {\n    data: breachedSLAs = [],\n    isLoading: breachedLoading,\n  } = useQuery({\n    queryKey: ['breached-slas', organizationId],\n    queryFn: () => slaService.getBreachedSLAs(organizationId, 20),\n  });\n\n  // Mutations\n  const createPolicyMutation = useMutation({\n    mutationFn: (policy: SLAPolicyCreate) => slaService.createPolicy(organizationId, policy),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['sla-policies'] });\n      setPolicyDialog(false);\n      resetForm();\n    },\n  });\n\n  const updatePolicyMutation = useMutation({\n    mutationFn: ({ id, policy }: { id: number; policy: SLAPolicyUpdate }) =>\n      slaService.updatePolicy(organizationId, id, policy),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['sla-policies'] });\n      setPolicyDialog(false);\n      resetForm();\n    },\n  });\n\n  const deletePolicyMutation = useMutation({\n    mutationFn: (id: number) => slaService.deletePolicy(organizationId, id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['sla-policies'] });\n      setDeleteDialog(false);\n      setSelectedPolicy(null);\n    },\n  });\n\n  // Event handlers\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleCreatePolicy = () => {\n    setSelectedPolicy(null);\n    resetForm();\n    setPolicyDialog(true);\n  };\n\n  const handleEditPolicy = (policy: SLAPolicy) => {\n    setSelectedPolicy(policy);\n    setPolicyForm({\n      name: policy.name,\n      description: policy.description || '',\n      priority: policy.priority || '',\n      ticket_type: policy.ticket_type || '',\n      response_time_hours: policy.response_time_hours,\n      resolution_time_hours: policy.resolution_time_hours,\n      escalation_enabled: policy.escalation_enabled,\n      escalation_threshold_percent: policy.escalation_threshold_percent,\n      is_active: policy.is_active,\n      is_default: policy.is_default,\n    });\n    setPolicyDialog(true);\n  };\n\n  const handleDeletePolicy = (policy: SLAPolicy) => {\n    setSelectedPolicy(policy);\n    setDeleteDialog(true);\n  };\n\n  const handleSubmitPolicy = () => {\n    if (selectedPolicy) {\n      updatePolicyMutation.mutate({ id: selectedPolicy.id, policy: policyForm });\n    } else {\n      createPolicyMutation.mutate(policyForm);\n    }\n  };\n\n  const resetForm = () => {\n    setPolicyForm({\n      name: '',\n      description: '',\n      priority: '',\n      ticket_type: '',\n      response_time_hours: 2,\n      resolution_time_hours: 24,\n      escalation_enabled: true,\n      escalation_threshold_percent: 80,\n      is_active: true,\n      is_default: false,\n    });\n  };\n\n  const getPriorityColor = (priority?: string) => {\n    switch (priority) {\n      case 'urgent': return 'error';\n      case 'high': return 'warning';\n      case 'medium': return 'info';\n      case 'low': return 'success';\n      default: return 'default';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'met': return 'success';\n      case 'breached': return 'error';\n      case 'pending': return 'warning';\n      default: return 'default';\n    }\n  };\n\n  // Render summary cards\n  const renderSummaryCards = () => {\n    if (!metrics) {return null;}\n\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Total Tickets\n              </Typography>\n              <Typography variant=\"h4\" component=\"div\">\n                {metrics.total_tickets}\n              </Typography>\n              <Typography variant=\"body2\">\n                Last 30 days\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Response SLA\n              </Typography>\n              <Typography variant=\"h4\" component=\"div\" color={metrics.response_sla_percentage >= 95 ? 'success.main' : 'warning.main'}>\n                {metrics.response_sla_percentage.toFixed(1)}%\n              </Typography>\n              <Typography variant=\"body2\">\n                {metrics.response_sla_met} / {metrics.total_tickets} met\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Resolution SLA\n              </Typography>\n              <Typography variant=\"h4\" component=\"div\" color={metrics.resolution_sla_percentage >= 95 ? 'success.main' : 'warning.main'}>\n                {metrics.resolution_sla_percentage.toFixed(1)}%\n              </Typography>\n              <Typography variant=\"body2\">\n                {metrics.resolution_sla_met} / {metrics.total_tickets} met\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Typography color=\"textSecondary\" gutterBottom>\n                Escalated Tickets\n              </Typography>\n              <Typography variant=\"h4\" component=\"div\" color={metrics.escalated_tickets > 0 ? 'error.main' : 'success.main'}>\n                {metrics.escalated_tickets}\n              </Typography>\n              <Typography variant=\"body2\">\n                Requiring attention\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n        <Box>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            SLA Management\n          </Typography>\n          <Typography variant=\"body1\" color=\"textSecondary\">\n            Manage service level agreements and track performance\n          </Typography>\n        </Box>\n        <Button\n          variant=\"contained\"\n          startIcon={<Refresh />}\n          onClick={() => {\n            refetchPolicies();\n            queryClient.invalidateQueries({ queryKey: ['sla-metrics'] });\n            queryClient.invalidateQueries({ queryKey: ['breached-slas'] });\n          }}\n        >\n          Refresh\n        </Button>\n      </Box>\n\n      {/* Summary Cards */}\n      <Box sx={{ mb: 4 }}>\n        {renderSummaryCards()}\n      </Box>\n\n      {/* SLA Tabs */}\n      <Paper sx={{ mb: 4 }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"SLA management tabs\">\n            <Tab label=\"SLA Policies\" icon={<Policy />} />\n            <Tab label=\"Performance Dashboard\" icon={<Assessment />} />\n            <Tab label=\"Breached SLAs\" icon={<Warning />} />\n          </Tabs>\n        </Box>\n\n        <TabPanel value={tabValue} index={0}>\n          {/* SLA Policies Tab */}\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n            <Typography variant=\"h6\">SLA Policies</Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={handleCreatePolicy}\n            >\n              Create Policy\n            </Button>\n          </Box>\n\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Priority</TableCell>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Response Time</TableCell>\n                  <TableCell>Resolution Time</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell>Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {policies.map((policy) => (\n                  <TableRow key={policy.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"body1\">{policy.name}</Typography>\n                        {policy.is_default && (\n                          <Chip label=\"Default\" size=\"small\" color=\"primary\" sx={{ mt: 0.5 }} />\n                        )}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      {policy.priority ? (\n                        <Chip\n                          label={policy.priority}\n                          size=\"small\"\n                          color={getPriorityColor(policy.priority) as any}\n                        />\n                      ) : (\n                        'All'\n                      )}\n                    </TableCell>\n                    <TableCell>{policy.ticket_type || 'All'}</TableCell>\n                    <TableCell>{policy.response_time_hours}h</TableCell>\n                    <TableCell>{policy.resolution_time_hours}h</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={policy.is_active ? 'Active' : 'Inactive'}\n                        size=\"small\"\n                        color={policy.is_active ? 'success' : 'default'}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <IconButton onClick={() => handleEditPolicy(policy)} size=\"small\">\n                        <Edit />\n                      </IconButton>\n                      <IconButton onClick={() => handleDeletePolicy(policy)} size=\"small\" color=\"error\">\n                        <Delete />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={1}>\n          {/* Performance Dashboard Tab */}\n          <Typography variant=\"h6\" gutterBottom>\n            SLA Performance Dashboard\n          </Typography>\n          {metrics && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Average Response Time\n                    </Typography>\n                    <Typography variant=\"h4\" color=\"primary\">\n                      {metrics.avg_response_time_hours?.toFixed(1) || 'N/A'}h\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Average Resolution Time\n                    </Typography>\n                    <Typography variant=\"h4\" color=\"primary\">\n                      {metrics.avg_resolution_time_hours?.toFixed(1) || 'N/A'}h\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          )}\n        </TabPanel>\n\n        <TabPanel value={tabValue} index={2}>\n          {/* Breached SLAs Tab */}\n          <Typography variant=\"h6\" gutterBottom>\n            Breached SLAs\n          </Typography>\n          {breachedSLAs.length === 0 ? (\n            <Alert severity=\"success\">\n              <Typography>No SLA breaches found. Great job!</Typography>\n            </Alert>\n          ) : (\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Ticket ID</TableCell>\n                    <TableCell>Response Status</TableCell>\n                    <TableCell>Resolution Status</TableCell>\n                    <TableCell>Response Breach</TableCell>\n                    <TableCell>Resolution Breach</TableCell>\n                    <TableCell>Escalated</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {breachedSLAs.map((tracking) => (\n                    <TableRow key={tracking.id}>\n                      <TableCell>{tracking.ticket_id}</TableCell>\n                      <TableCell>\n                        <Chip\n                          label={tracking.response_status}\n                          size=\"small\"\n                          color={getStatusColor(tracking.response_status) as any}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={tracking.resolution_status}\n                          size=\"small\"\n                          color={getStatusColor(tracking.resolution_status) as any}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {tracking.response_breach_hours && tracking.response_breach_hours > 0\n                          ? `+${tracking.response_breach_hours.toFixed(1)}h`\n                          : 'On time'}\n                      </TableCell>\n                      <TableCell>\n                        {tracking.resolution_breach_hours && tracking.resolution_breach_hours > 0\n                          ? `+${tracking.resolution_breach_hours.toFixed(1)}h`\n                          : 'On time'}\n                      </TableCell>\n                      <TableCell>\n                        {tracking.escalation_triggered ? (\n                          <Chip label={`Level ${tracking.escalation_level}`} size=\"small\" color=\"error\" />\n                        ) : (\n                          'No'\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n        </TabPanel>\n      </Paper>\n\n      {/* Policy Create/Edit Dialog */}\n      <Dialog open={policyDialog} onClose={() => setPolicyDialog(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {selectedPolicy ? 'Edit SLA Policy' : 'Create SLA Policy'}\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Policy Name\"\n                value={policyForm.name}\n                onChange={(e) => setPolicyForm({ ...policyForm, name: e.target.value })}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Priority</InputLabel>\n                <Select\n                  value={policyForm.priority}\n                  onChange={(e) => setPolicyForm({ ...policyForm, priority: e.target.value })}\n                >\n                  <MenuItem value=\"\">All Priorities</MenuItem>\n                  <MenuItem value=\"low\">Low</MenuItem>\n                  <MenuItem value=\"medium\">Medium</MenuItem>\n                  <MenuItem value=\"high\">High</MenuItem>\n                  <MenuItem value=\"urgent\">Urgent</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Description\"\n                value={policyForm.description}\n                onChange={(e) => setPolicyForm({ ...policyForm, description: e.target.value })}\n                multiline\n                rows={2}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Response Time\"\n                type=\"number\"\n                value={policyForm.response_time_hours}\n                onChange={(e) => setPolicyForm({ ...policyForm, response_time_hours: Number(e.target.value) })}\n                InputProps={{\n                  endAdornment: <InputAdornment position=\"end\">hours</InputAdornment>,\n                }}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Resolution Time\"\n                type=\"number\"\n                value={policyForm.resolution_time_hours}\n                onChange={(e) => setPolicyForm({ ...policyForm, resolution_time_hours: Number(e.target.value) })}\n                InputProps={{\n                  endAdornment: <InputAdornment position=\"end\">hours</InputAdornment>,\n                }}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Escalation Threshold\"\n                type=\"number\"\n                value={policyForm.escalation_threshold_percent}\n                onChange={(e) => setPolicyForm({ ...policyForm, escalation_threshold_percent: Number(e.target.value) })}\n                InputProps={{\n                  endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Stack spacing={2}>\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={policyForm.escalation_enabled}\n                      onChange={(e) => setPolicyForm({ ...policyForm, escalation_enabled: e.target.checked })}\n                    />\n                  }\n                  label=\"Enable Escalation\"\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={policyForm.is_active}\n                      onChange={(e) => setPolicyForm({ ...policyForm, is_active: e.target.checked })}\n                    />\n                  }\n                  label=\"Active\"\n                />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={policyForm.is_default}\n                      onChange={(e) => setPolicyForm({ ...policyForm, is_default: e.target.checked })}\n                    />\n                  }\n                  label=\"Default Policy\"\n                />\n              </Stack>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setPolicyDialog(false)}>Cancel</Button>\n          <Button\n            onClick={handleSubmitPolicy}\n            variant=\"contained\"\n            disabled={createPolicyMutation.isPending || updatePolicyMutation.isPending}\n          >\n            {selectedPolicy ? 'Update' : 'Create'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={deleteDialog} onClose={() => setDeleteDialog(false)}>\n        <DialogTitle>Delete SLA Policy</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete the SLA policy \"{selectedPolicy?.name}\"?\n            This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDeleteDialog(false)}>Cancel</Button>\n          <Button\n            onClick={() => selectedPolicy && deletePolicyMutation.mutate(selectedPolicy.id)}\n            color=\"error\"\n            variant=\"contained\"\n            disabled={deletePolicyMutation.isPending}\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default SLAManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/tasks/dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[198,207],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[233,247],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":77,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":19},{"ruleId":"no-shadow","severity":2,"message":"'stats' is already declared in the upper scope on line 49 column 10.","line":87,"column":36,"nodeType":"Identifier","messageId":"noShadow","endLine":87,"endColumn":52},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'stats' is already declared in the upper scope on line 49 column 10.","line":87,"column":36,"nodeType":"Identifier","messageId":"noShadow","endLine":87,"endColumn":52}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/tasks/dashboard.tsx\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CircularProgress,\n  Alert,\n  Paper,\n  LinearProgress,\n  Chip,\n  IconButton,\n  Button\n} from '@mui/material';\nimport {\n  Task,\n  Dashboard,\n  TrendingUp,\n  Assignment,\n  Timer,\n  Today,\n  Warning,\n  CheckCircle,\n  Add\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\n\ninterface TaskStats {\n  total_tasks: number;\n  todo_tasks: number;\n  in_progress_tasks: number;\n  review_tasks: number;\n  done_tasks: number;\n  cancelled_tasks: number;\n  overdue_tasks: number;\n  due_today_tasks: number;\n  due_this_week_tasks: number;\n  assigned_to_me: number;\n  created_by_me: number;\n}\n\nconst TaskDashboard: React.FC = () => {\n  const router = useRouter();\n  const [stats, setStats] = useState<TaskStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Simulate API call - replace with actual API integration\n    const fetchStats = async () => {\n      try {\n        setLoading(true);\n        // TODO: Replace with actual API call to /api/v1/tasks/dashboard\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate delay\n        \n        // Mock data for demonstration\n        const mockStats: TaskStats = {\n          total_tasks: 45,\n          todo_tasks: 12,\n          in_progress_tasks: 8,\n          review_tasks: 3,\n          done_tasks: 20,\n          cancelled_tasks: 2,\n          overdue_tasks: 5,\n          due_today_tasks: 3,\n          due_this_week_tasks: 8,\n          assigned_to_me: 15,\n          created_by_me: 23\n        };\n        \n        setStats(mockStats);\n      } catch (err) {\n        setError('Failed to load task dashboard data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchStats();\n  }, []);\n\n  const getCompletionPercentage = (stats: TaskStats) => {\n    if (stats.total_tasks === 0) {return 0;}\n    return Math.round((stats.done_tasks / stats.total_tasks) * 100);\n  };\n\n  const handleNavigate = (path: string) => {\n    router.push(path);\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"info\">No task data available</Alert>\n      </Box>\n    );\n  }\n\n  const completionPercentage = getCompletionPercentage(stats);\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Dashboard color=\"primary\" />\n          Task Management Dashboard\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => handleNavigate('/tasks/create')}\n        >\n          Create Task\n        </Button>\n      </Box>\n\n      {/* Overview Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Tasks\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {stats.total_tasks}\n                  </Typography>\n                </Box>\n                <Task color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Assigned to Me\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {stats.assigned_to_me}\n                  </Typography>\n                </Box>\n                <Assignment color=\"info\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Overdue Tasks\n                  </Typography>\n                  <Typography variant=\"h5\" color={stats.overdue_tasks > 0 ? \"error\" : \"textPrimary\"}>\n                    {stats.overdue_tasks}\n                  </Typography>\n                </Box>\n                <Warning color={stats.overdue_tasks > 0 ? \"error\" : \"disabled\"} sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Completion Rate\n                  </Typography>\n                  <Typography variant=\"h5\" color=\"success.main\">\n                    {completionPercentage}%\n                  </Typography>\n                </Box>\n                <CheckCircle color=\"success\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Task Status Breakdown */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Task Status Breakdown\n              </Typography>\n              <Box sx={{ mt: 2 }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Typography variant=\"body2\">To Do</Typography>\n                  <Typography variant=\"body2\">{stats.todo_tasks}</Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={stats.total_tasks > 0 ? (stats.todo_tasks / stats.total_tasks) * 100 : 0}\n                  sx={{ mb: 2, height: 8, borderRadius: 1 }}\n                />\n\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Typography variant=\"body2\">In Progress</Typography>\n                  <Typography variant=\"body2\">{stats.in_progress_tasks}</Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={stats.total_tasks > 0 ? (stats.in_progress_tasks / stats.total_tasks) * 100 : 0}\n                  color=\"warning\"\n                  sx={{ mb: 2, height: 8, borderRadius: 1 }}\n                />\n\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Typography variant=\"body2\">Review</Typography>\n                  <Typography variant=\"body2\">{stats.review_tasks}</Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={stats.total_tasks > 0 ? (stats.review_tasks / stats.total_tasks) * 100 : 0}\n                  color=\"info\"\n                  sx={{ mb: 2, height: 8, borderRadius: 1 }}\n                />\n\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                  <Typography variant=\"body2\">Done</Typography>\n                  <Typography variant=\"body2\">{stats.done_tasks}</Typography>\n                </Box>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={stats.total_tasks > 0 ? (stats.done_tasks / stats.total_tasks) * 100 : 0}\n                  color=\"success\"\n                  sx={{ mb: 2, height: 8, borderRadius: 1 }}\n                />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Quick Actions\n              </Typography>\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<Task />}\n                  onClick={() => handleNavigate('/tasks')}\n                  fullWidth\n                >\n                  View All Tasks\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<Assignment />}\n                  onClick={() => handleNavigate('/tasks/projects')}\n                  fullWidth\n                >\n                  Manage Projects\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<Timer />}\n                  onClick={() => handleNavigate('/tasks/time-logs')}\n                  fullWidth\n                >\n                  Time Tracking\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<TrendingUp />}\n                  onClick={() => handleNavigate('/tasks/reports')}\n                  fullWidth\n                >\n                  Task Reports\n                </Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Upcoming Deadlines */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Today color=\"primary\" />\n                Due Today\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Chip\n                  label={`${stats.due_today_tasks} tasks`}\n                  color={stats.due_today_tasks > 0 ? \"warning\" : \"default\"}\n                  size=\"small\"\n                />\n                {stats.due_today_tasks > 0 && (\n                  <Button\n                    size=\"small\"\n                    onClick={() => handleNavigate('/tasks?filter=due_today')}\n                  >\n                    View Tasks\n                  </Button>\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Timer color=\"primary\" />\n                Due This Week\n              </Typography>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                <Chip\n                  label={`${stats.due_this_week_tasks} tasks`}\n                  color={stats.due_this_week_tasks > 0 ? \"info\" : \"default\"}\n                  size=\"small\"\n                />\n                {stats.due_this_week_tasks > 0 && (\n                  <Button\n                    size=\"small\"\n                    onClick={() => handleNavigate('/tasks?filter=due_this_week')}\n                  >\n                    View Tasks\n                  </Button>\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TaskDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/transport.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":4,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[89,100],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[356,366],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[366,381],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[381,398],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogActions"},"fix":{"range":[398,415],"text":""},"desc":"Remove unused variable 'DialogActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[428,443],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[443,457],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[457,467],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[467,479],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Accordion' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Accordion"},"fix":{"range":[519,532],"text":""},"desc":"Remove unused variable 'Accordion'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionSummary' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionSummary"},"fix":{"range":[532,552],"text":""},"desc":"Remove unused variable 'AccordionSummary'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionDetails' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionDetails"},"fix":{"range":[552,572],"text":""},"desc":"Remove unused variable 'AccordionDetails'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DeleteIcon' is defined but never used.","line":44,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"DeleteIcon"},"fix":{"range":[643,667],"text":""},"desc":"Remove unused variable 'DeleteIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'RouteIcon' is defined but never used.","line":46,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"RouteIcon"},"fix":{"range":[705,727],"text":""},"desc":"Remove unused variable 'RouteIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AssessmentIcon' is defined but never used.","line":49,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"AssessmentIcon"},"fix":{"range":[797,829],"text":""},"desc":"Remove unused variable 'AssessmentIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ExpandMoreIcon' is defined but never used.","line":51,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"ExpandMoreIcon"},"fix":{"range":[867,899],"text":""},"desc":"Remove unused variable 'ExpandMoreIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorIcon' is defined but never used.","line":53,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"ErrorIcon"},"fix":{"range":[933,955],"text":""},"desc":"Remove unused variable 'ErrorIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'WarningIcon' is defined but never used.","line":54,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"WarningIcon"},"fix":{"range":[955,981],"text":""},"desc":"Remove unused variable 'WarningIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useMutation' is defined but never used.","line":57,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"useMutation"},"fix":{"range":[1074,1087],"text":""},"desc":"Remove unused variable 'useMutation'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'queryClient' is assigned a value but never used.","line":88,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"queryClient"},"fix":{"range":[1780,1817],"text":""},"desc":"Remove unused variable 'queryClient'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'openDialog' is assigned a value but never used.","line":90,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"openDialog"},"fix":{"range":[1874,1884],"text":""},"desc":"Remove unused variable 'openDialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedItem' is assigned a value but never used.","line":91,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedItem"},"fix":{"range":[1978,1990],"text":""},"desc":"Remove unused variable 'selectedItem'."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/transport.tsx\n// Transport and Freight Management page\n\nimport React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Card,\n  CardContent,\n  Tab,\n  Tabs,\n  Button,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  Tooltip,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  LocalShipping as LocalShippingIcon,\n  Route as RouteIcon,\n  AttachMoney as AttachMoneyIcon,\n  TrackChanges as TrackChangesIcon,\n  Assessment as AssessmentIcon,\n  CompareArrows as CompareArrowsIcon,\n  ExpandMore as ExpandMoreIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Warning as WarningIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../hooks/useAuth';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { transportService } from '../services/transportService';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`transport-tabpanel-${index}`}\n      aria-labelledby={`transport-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst TransportManagementPage: NextPage = () => {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [tabValue, setTabValue] = useState(0);\n  const [openDialog, setOpenDialog] = useState<'carrier' | 'route' | 'rate' | 'shipment' | null>(null);\n  const [selectedItem, setSelectedItem] = useState<any>(null);\n  const [rateComparisonData, setRateComparisonData] = useState({\n    origin_city: '',\n    destination_city: '',\n    weight_kg: 0,\n    volume_cbm: 0,\n  });\n\n  // Fetch dashboard summary\n  const { data: dashboardData, isLoading: dashboardLoading } = useQuery({\n    queryKey: ['transportDashboard'],\n    queryFn: transportService.getDashboardSummary,\n    enabled: !!user,\n  });\n\n  // Fetch carriers\n  const { data: carriers, isLoading: carriersLoading } = useQuery({\n    queryKey: ['carriers'],\n    queryFn: () => transportService.getCarriers(),\n    enabled: !!user,\n  });\n\n  // Fetch routes\n  const { data: routes, isLoading: routesLoading } = useQuery({\n    queryKey: ['routes'],\n    queryFn: () => transportService.getRoutes(),\n    enabled: !!user,\n  });\n\n  // Fetch freight rates\n  const { data: freightRates, isLoading: ratesLoading } = useQuery({\n    queryKey: ['freightRates'],\n    queryFn: () => transportService.getFreightRates(),\n    enabled: !!user,\n  });\n\n  // Fetch shipments\n  const { data: shipments, isLoading: shipmentsLoading } = useQuery({\n    queryKey: ['shipments'],\n    queryFn: () => transportService.getShipments(),\n    enabled: !!user,\n  });\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'success';\n      case 'booked': return 'info';\n      case 'in_transit': return 'warning';\n      case 'delivered': return 'success';\n      case 'cancelled': return 'error';\n      case 'delayed': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getCarrierTypeIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'road': return '🚛';\n      case 'rail': return '🚂';\n      case 'air': return '✈️';\n      case 'sea': return '🚢';\n      case 'courier': return '📦';\n      default: return '🚚';\n    }\n  };\n\n  if (!user) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          Please log in to access Transport Management.\n        </Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <LocalShippingIcon color=\"primary\" />\n          Transport & Freight Management\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Manage carriers, routes, freight rates, shipments, and logistics operations\n        </Typography>\n      </Box>\n\n      {/* Dashboard Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Carriers\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.total_carriers || 0}\n                  </Typography>\n                </Box>\n                <LocalShippingIcon color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Shipments\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.active_shipments || 0}\n                  </Typography>\n                </Box>\n                <TrackChangesIcon color=\"warning\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Delivered This Month\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.delivered_this_month || 0}\n                  </Typography>\n                </Box>\n                <CheckCircleIcon color=\"success\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Freight Cost MTD\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : \n                     `$${(dashboardData?.total_freight_cost_this_month || 0).toLocaleString()}`}\n                  </Typography>\n                </Box>\n                <AttachMoneyIcon color=\"info\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs\n          value={tabValue}\n          onChange={handleTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Carriers\" />\n          <Tab label=\"Routes\" />\n          <Tab label=\"Freight Rates\" />\n          <Tab label=\"Shipments\" />\n          <Tab label=\"Rate Comparison\" />\n          <Tab label=\"Analytics\" />\n        </Tabs>\n      </Paper>\n\n      {/* Tab Panels */}\n      <TabPanel value={tabValue} index={0}>\n        {/* Carriers */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Carrier Management</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenDialog('carrier')}\n          >\n            Add Carrier\n          </Button>\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Carrier Code</TableCell>\n                <TableCell>Carrier Name</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Contact</TableCell>\n                <TableCell>Rating</TableCell>\n                <TableCell>On-Time %</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Preferred</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {carriersLoading ? (\n                <TableRow>\n                  <TableCell colSpan={9} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                carriers?.map((carrier: any) => (\n                  <TableRow key={carrier.id}>\n                    <TableCell>{carrier.carrier_code}</TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <span>{getCarrierTypeIcon(carrier.carrier_type)}</span>\n                        {carrier.carrier_name}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={carrier.carrier_type}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>{carrier.phone || carrier.email || '-'}</TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        ⭐ {carrier.rating.toFixed(1)}\n                      </Box>\n                    </TableCell>\n                    <TableCell>{carrier.on_time_percentage.toFixed(1)}%</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={carrier.is_active ? 'Active' : 'Inactive'}\n                        color={carrier.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {carrier.is_preferred && (\n                        <Chip label=\"Preferred\" color=\"primary\" size=\"small\" />\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n                            setSelectedItem(carrier);\n                            setOpenDialog('carrier');\n                          }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={1}>\n        {/* Routes */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Route Management</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenDialog('route')}\n          >\n            Add Route\n          </Button>\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Route Code</TableCell>\n                <TableCell>Route Name</TableCell>\n                <TableCell>Carrier</TableCell>\n                <TableCell>Origin</TableCell>\n                <TableCell>Destination</TableCell>\n                <TableCell>Distance</TableCell>\n                <TableCell>Transit Time</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {routesLoading ? (\n                <TableRow>\n                  <TableCell colSpan={9} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                routes?.map((route: any) => (\n                  <TableRow key={route.id}>\n                    <TableCell>{route.route_code}</TableCell>\n                    <TableCell>{route.route_name}</TableCell>\n                    <TableCell>{route.carrier_id}</TableCell>\n                    <TableCell>{route.origin_city}</TableCell>\n                    <TableCell>{route.destination_city}</TableCell>\n                    <TableCell>\n                      {route.distance_km ? `${route.distance_km} km` : '-'}\n                    </TableCell>\n                    <TableCell>\n                      {route.estimated_transit_time_hours ? \n                        `${route.estimated_transit_time_hours}h` : '-'}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={route.status}\n                        color={getStatusColor(route.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n                            setSelectedItem(route);\n                            setOpenDialog('route');\n                          }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={2}>\n        {/* Freight Rates */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Freight Rate Management</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenDialog('rate')}\n          >\n            Add Rate\n          </Button>\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Rate Code</TableCell>\n                <TableCell>Carrier</TableCell>\n                <TableCell>Mode</TableCell>\n                <TableCell>Rate Basis</TableCell>\n                <TableCell>Minimum Charge</TableCell>\n                <TableCell>Effective Date</TableCell>\n                <TableCell>Expiry Date</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {ratesLoading ? (\n                <TableRow>\n                  <TableCell colSpan={9} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                freightRates?.map((rate: any) => (\n                  <TableRow key={rate.id}>\n                    <TableCell>{rate.rate_code}</TableCell>\n                    <TableCell>{rate.carrier_id}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={rate.freight_mode}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>{rate.rate_basis}</TableCell>\n                    <TableCell>${rate.minimum_charge}</TableCell>\n                    <TableCell>\n                      {new Date(rate.effective_date).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell>\n                      {rate.expiry_date ? \n                        new Date(rate.expiry_date).toLocaleDateString() : 'No Expiry'}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={rate.is_active ? 'Active' : 'Inactive'}\n                        color={rate.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n                            setSelectedItem(rate);\n                            setOpenDialog('rate');\n                          }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={3}>\n        {/* Shipments */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Shipment Tracking</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setOpenDialog('shipment')}\n          >\n            Create Shipment\n          </Button>\n        </Box>\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Shipment #</TableCell>\n                <TableCell>Carrier</TableCell>\n                <TableCell>Origin</TableCell>\n                <TableCell>Destination</TableCell>\n                <TableCell>Weight</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Pickup Date</TableCell>\n                <TableCell>Expected Delivery</TableCell>\n                <TableCell>Total Charges</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {shipmentsLoading ? (\n                <TableRow>\n                  <TableCell colSpan={10} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                shipments?.map((shipment: any) => (\n                  <TableRow key={shipment.id}>\n                    <TableCell>{shipment.shipment_number}</TableCell>\n                    <TableCell>{shipment.carrier_id}</TableCell>\n                    <TableCell>{shipment.origin_city}</TableCell>\n                    <TableCell>{shipment.destination_city}</TableCell>\n                    <TableCell>{shipment.total_weight_kg} kg</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={shipment.status}\n                        color={getStatusColor(shipment.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {shipment.pickup_date ? \n                        new Date(shipment.pickup_date).toLocaleDateString() : '-'}\n                    </TableCell>\n                    <TableCell>\n                      {shipment.expected_delivery_date ? \n                        new Date(shipment.expected_delivery_date).toLocaleDateString() : '-'}\n                    </TableCell>\n                    <TableCell>${shipment.total_charges}</TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Track\">\n                        <IconButton size=\"small\">\n                          <TrackChangesIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={4}>\n        {/* Rate Comparison */}\n        <Typography variant=\"h6\" sx={{ mb: 3 }}>Freight Rate Comparison</Typography>\n        \n        <Paper sx={{ p: 3, mb: 3 }}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={3}>\n              <TextField\n                fullWidth\n                label=\"Origin City\"\n                value={rateComparisonData.origin_city}\n                onChange={(e) => setRateComparisonData(prev => ({\n                  ...prev,\n                  origin_city: e.target.value\n                }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <TextField\n                fullWidth\n                label=\"Destination City\"\n                value={rateComparisonData.destination_city}\n                onChange={(e) => setRateComparisonData(prev => ({\n                  ...prev,\n                  destination_city: e.target.value\n                }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <TextField\n                fullWidth\n                label=\"Weight (kg)\"\n                type=\"number\"\n                value={rateComparisonData.weight_kg}\n                onChange={(e) => setRateComparisonData(prev => ({\n                  ...prev,\n                  weight_kg: parseFloat(e.target.value) || 0\n                }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <TextField\n                fullWidth\n                label=\"Volume (cbm)\"\n                type=\"number\"\n                value={rateComparisonData.volume_cbm}\n                onChange={(e) => setRateComparisonData(prev => ({\n                  ...prev,\n                  volume_cbm: parseFloat(e.target.value) || 0\n                }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"large\"\n                startIcon={<CompareArrowsIcon />}\n              >\n                Compare Rates\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Enter shipment details above to compare freight rates across carriers and routes.\n        </Typography>\n      </TabPanel>\n\n      <TabPanel value={tabValue} index={5}>\n        {/* Analytics */}\n        <Typography variant=\"h6\" sx={{ mb: 3 }}>Transport Analytics</Typography>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Carrier Performance Report\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Compare carrier performance metrics\n                </Typography>\n                <Button variant=\"outlined\">Generate Report</Button>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Freight Cost Analysis\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Analyze freight costs and optimization opportunities\n                </Typography>\n                <Button variant=\"outlined\">Generate Report</Button>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </TabPanel>\n    </Container>\n  );\n};\n\nexport default TransportManagementPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/ui-test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Financial-Vouchers/contra-voucher.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[132,139],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":3,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":102,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[168,184],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":3,"column":104,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":111,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[184,193],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":3,"column":113,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":118,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[193,200],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Autocomplete' is defined but never used.","line":3,"column":120,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":132,"suggestions":[{"messageId":"removeVar","data":{"varName":"Autocomplete"},"fix":{"range":[200,214],"text":""},"desc":"Remove unused variable 'Autocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":3,"column":134,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":139,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[214,221],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[364,375],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":4,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[374,380],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":10,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[816,833],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setMode' is assigned a value but never used.","line":19,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"setMode"},"fix":{"range":[1044,1057],"text":""},"desc":"Remove unused variable 'setMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":23,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[1108,1124],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":24,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[1124,1143],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":25,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[1143,1157],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":26,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[1157,1174],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":27,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[1174,1186],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":28,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[1186,1201],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":29,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[1201,1223],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":40,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1315,1345],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":56,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[1627,1645],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refreshMasterData' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"refreshMasterData"},"fix":{"range":[1729,1752],"text":""},"desc":"Remove unused variable 'refreshMasterData'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":148,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":148,"endColumn":38}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Contra Voucher Page - Refactored using VoucherLayout\nimport React from 'react';\nimport { Box, Button, TextField, Typography, Grid, Alert, CircularProgress, Container, InputAdornment, Tooltip, Modal, Autocomplete, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport { Visibility, Edit } from '@mui/icons-material';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, getVoucherStyles, parseRateField, formatRateField } from '../../../utils/voucherUtils';\n\nconst ContraVoucher: React.FC = () => {\n  const config = getVoucherConfig('contra-voucher');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showFullModal,\n    contextMenu,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    errors,\n\n    // Data\n    voucherList,\n    vendorList,\n    customerList,\n    sortedVouchers,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu: handleContextMenuClose,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Watch form values\n  const watchedValues = watch();\n  const totalAmount = watchedValues?.amount || 0;\n\n  // Handle voucher click to load details\n  const handleVoucherClick = (voucher: any) => {\n    // Load the selected voucher into the form\n    reset(voucher);\n    // Set the form with the voucher data\n    Object.keys(voucher).forEach(key => {\n      setValue(key, voucher[key]);\n    });\n  };\n\n  // Bank account options (these would typically come from a master data service)\n  const bankAccounts = [\n    'Bank Account 1',\n    'Bank Account 2', \n    'Cash Account',\n    'Petty Cash',\n    'Current Account - SBI',\n    'Savings Account - HDFC',\n    'Fixed Deposit Account'\n  ];\n\n  // Transfer types for contra vouchers\n  const transferTypes = [\n    'Bank to Bank',\n    'Bank to Cash',\n    'Cash to Bank',\n    'Cash to Cash'\n  ];\n\n  // Index Content - Left Panel (40%)\n  const indexContent = (\n    <TableContainer sx={{ maxHeight: 400 }}>\n      <Table stickyHeader size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Type</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n            <TableCell align=\"right\" sx={{ fontSize: 12, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(sortedVouchers?.length === 0) ? (\n            <TableRow>\n              <TableCell colSpan={5} align=\"center\">No contra vouchers available</TableCell>\n            </TableRow>\n          ) : (\n            sortedVouchers?.slice(0, 7).map((voucher: any) => (\n              <TableRow \n                key={voucher.id} \n                hover\n                onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                sx={{ cursor: 'pointer' }}\n              >\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }} onClick={() => handleVoucherClick(voucher)}>\n                  {voucher.voucher_number}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {new Date(voucher.date).toLocaleDateString()}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {voucher.transfer_type || 'N/A'}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  ₹{voucher.amount?.toFixed(2) || '0.00'}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ fontSize: 11, p: 0 }}>\n                  <VoucherContextMenu\n                    voucher={voucher}\n                    voucherType=\"Contra Voucher\"\n                    onView={() => handleView(voucher.id)}\n                    onEdit={() => handleEdit(voucher.id)}\n                    onDelete={() => handleDelete(voucher)}\n                    onPrint={() => handleGeneratePDF()}\n                    showKebab={true}\n                    onClose={() => {}}\n                  />\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  // Form Content - Right Panel (60%)\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\" sx={{ fontSize: 18, fontWeight: 'bold', textAlign: 'center', flex: 1 }}>\n          Contra Voucher - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType=\"Contra Voucher\"\n          voucherRoute=\"/vouchers/Financial-Vouchers/contra-voucher\"\n          currentId={watch('id')}\n        />\n      </Box>\n\n      {(createMutation.isPending || updateMutation.isPending) && (\n        <Box display=\"flex\" justifyContent=\"center\" my={2}>\n          <CircularProgress />\n        </Box>\n      )}\n\n      <Box \n        component=\"form\" \n        onSubmit={handleSubmit(handleSubmitForm)} \n        sx={{ \n          mt: 2,\n          ...voucherStyles.formContainer\n        }}\n      >\n        <Grid container spacing={2}>\n          <Grid size={6}>\n            <TextField\n              {...control.register('voucher_number')}\n              label=\"Voucher Number\"\n              fullWidth\n              disabled={true}\n              sx={voucherStyles.centerField}\n              InputProps={{\n                readOnly: true,\n                style: { textAlign: 'center', fontWeight: 'bold' }\n              }}\n            />\n          </Grid>\n          <Grid size={6}>\n            <TextField\n              {...control.register('date')}\n              label=\"Date\"\n              type=\"date\"\n              fullWidth\n              disabled={isViewMode}\n              sx={voucherStyles.centerField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              inputProps={{ style: { textAlign: 'center' } }}\n              error={!!errors.date}\n              helperText={errors.date?.message?.toString()}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <FormControl fullWidth disabled={isViewMode}>\n              <InputLabel>Transfer Type</InputLabel>\n              <Select\n                {...control.register('transfer_type')}\n                value={watch('transfer_type') || ''}\n                onChange={(e) => setValue('transfer_type', e.target.value)}\n                error={!!errors.transfer_type}\n                required\n              >\n                {transferTypes.map((type) => (\n                  <MenuItem key={type} value={type}>\n                    {type}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              {...control.register('amount', {\n                required: 'Amount is required',\n                min: { value: 0.01, message: 'Amount must be greater than 0' },\n                setValueAs: (value) => parseRateField(value)\n              })}\n              label=\"Amount\"\n              type=\"number\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.amount}\n              helperText={errors.amount?.message?.toString()}\n              sx={{\n                ...voucherStyles.rateField,\n                ...voucherStyles.centerField\n              }}\n              InputProps={{\n                inputProps: { \n                  step: \"0.01\",\n                  style: { textAlign: 'center' }\n                }\n              }}\n              onChange={(e) => {\n                const value = parseRateField(e.target.value);\n                setValue('amount', value);\n              }}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <FormControl fullWidth disabled={isViewMode}>\n              <InputLabel>From Account</InputLabel>\n              <Select\n                {...control.register('from_account')}\n                value={watch('from_account') || ''}\n                onChange={(e) => setValue('from_account', e.target.value)}\n                error={!!errors.from_account}\n                required\n              >\n                {bankAccounts.map((account) => (\n                  <MenuItem key={account} value={account}>\n                    {account}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid size={6}>\n            <FormControl fullWidth disabled={isViewMode}>\n              <InputLabel>To Account</InputLabel>\n              <Select\n                {...control.register('to_account')}\n                value={watch('to_account') || ''}\n                onChange={(e) => setValue('to_account', e.target.value)}\n                error={!!errors.to_account}\n                required\n              >\n                {bankAccounts.map((account) => (\n                  <MenuItem key={account} value={account}>\n                    {account}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              {...control.register('reference')}\n              label=\"Reference\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.reference}\n              helperText={errors.reference?.message?.toString()}\n              placeholder=\"Enter reference number or details...\"\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              {...control.register('description')}\n              label=\"Description\"\n              multiline\n              rows={3}\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.description}\n              helperText={errors.description?.message?.toString()}\n              placeholder=\"Enter transaction description...\"\n            />\n          </Grid>\n\n          {totalAmount > 0 && (\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Amount in Words\"\n                value={getAmountInWords(totalAmount)}\n                disabled\n                InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n                size=\"small\"\n              />\n            </Grid>\n          )}\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box display=\"flex\" gap={2}>\n              {mode !== 'view' && (\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"success\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n              <Button\n                variant=\"outlined\"\n                onClick={handleCreate}\n                sx={{ fontSize: 12 }}\n              >\n                Clear\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType=\"Contra Vouchers\"\n        voucherTitle=\"Contra Voucher\"\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={handleModalOpen}\n        showAllButton={true}\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showFullModal}\n            onClose={handleModalClose}\n            voucherType=\"Contra Vouchers\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEdit}\n            onView={handleView}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n            vendorList={vendorList}\n          />\n        }\n      />\n      \n      {/* Keep context menu for right-click functionality */}\n      <VoucherContextMenu\n        voucherType=\"Contra Voucher\"\n        contextMenu={contextMenu}\n        onClose={handleContextMenuClose}\n        onEdit={(id) => {\n          handleEdit(id);\n          handleContextMenuClose();\n        }}\n        onView={(id) => {\n          handleView(id);\n          handleContextMenuClose();\n        }}\n        onDelete={(id) => {\n          handleDelete(id);\n          handleContextMenuClose();\n        }}\n      />\n    </>\n  );\n};\n\nexport default ContraVoucher;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Financial-Vouchers/credit-note.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":3,"column":148,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":153,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[252,259],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":3,"column":191,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":205,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableContainer"},"fix":{"range":[295,311],"text":""},"desc":"Remove unused variable 'TableContainer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[369,381],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":4,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[381,387],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":10,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[795,810],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'parseRateField' is defined but never used.","line":10,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"parseRateField"},"fix":{"range":[828,844],"text":""},"desc":"Remove unused variable 'parseRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":10,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":92,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[844,861],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddCustomerLoading' is assigned a value but never used.","line":23,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddCustomerLoading"},"fix":{"range":[1164,1191],"text":""},"desc":"Remove unused variable 'setAddCustomerLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":26,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[1227,1243],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":27,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[1243,1262],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":28,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[1262,1276],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":29,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[1276,1293],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":30,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[1293,1305],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":31,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[1305,1320],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1434,1464],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[1560,1601],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[1730,1748],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'customerFilter' is assigned a value but never used.","line":75,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"customerFilter"},"fix":{"range":[2107,2152],"text":""},"desc":"Remove unused variable 'customerFilter'."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Credit Note Page - Refactored using shared DRY logic with 40:60 split layout\nimport React from 'react';\nimport { Box, Button, TextField, Typography, Grid, Alert, CircularProgress, Container, Autocomplete, createFilterOptions, InputAdornment, Tooltip, Modal, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport { Add, Visibility, Edit } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, getVoucherStyles, parseRateField, formatRateField } from '../../../utils/voucherUtils';\n\nconst CreditNotePage: React.FC = () => {\n  const config = getVoucherConfig('credit-note');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    showFullModal,\n    contextMenu,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    errors,\n\n    // Data\n    voucherList,\n    customerList,\n    sortedVouchers,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu: handleContextMenuClose,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Watch form values\n  const watchedValues = watch();\n  const totalAmount = watchedValues?.total_amount || 0;\n\n  // Combined customer options for autocomplete\n  const customerFilter = createFilterOptions();\n\n  // Handle voucher click to load details\n  const handleVoucherClick = (voucher: any) => {\n    // Load the selected voucher into the form\n    reset(voucher);\n    // Set the form with the voucher data\n    Object.keys(voucher).forEach(key => {\n      setValue(key, voucher[key]);\n    });\n  };\n\n  // Handle customer creation success\n  const handleCustomerCreated = async (newCustomer: any): Promise<void> => {\n    setValue('customer_id', newCustomer.id);\n    refreshMasterData();\n  };\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 2 }}>\n      <Grid container spacing={3}>\n        {/* Left side - Voucher List (40%) */}\n        <Grid size={{ xs: 12, md: 5 }}>\n          <Paper sx={{ p: 2, height: 'calc(100vh - 120px)', display: 'flex', flexDirection: 'column' }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n              <Typography variant=\"h6\">Credit Notes</Typography>\n              <VoucherHeaderActions\n                mode=\"create\"\n                voucherType=\"Credit Note\"\n                voucherRoute=\"/vouchers/financial-vouchers/credit-note\"\n                onModalOpen={handleModalOpen}\n              />\n            </Box>\n\n            {isLoading ? (\n              <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n                <CircularProgress />\n              </Box>\n            ) : (\n              <Box sx={{ flexGrow: 1, overflow: 'auto' }}>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Sr.</TableCell>\n                      <TableCell>Voucher #</TableCell>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Customer</TableCell>\n                      <TableCell>Amount</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {sortedVouchers.slice(0, 7).map((voucher: any, index: number) => (\n                      <TableRow \n                        key={voucher.id}\n                        onClick={() => handleVoucherClick(voucher)}\n                        onContextMenu={(e) => handleContextMenu(e, voucher)}\n                        sx={{ \n                          cursor: 'pointer',\n                          '&:hover': { bgcolor: 'action.hover' }\n                        }}\n                      >\n                        <TableCell>{index + 1}</TableCell>\n                        <TableCell>{voucher.voucher_number}</TableCell>\n                        <TableCell>{new Date(voucher.date).toLocaleDateString()}</TableCell>\n                        <TableCell>\n                          {customerList?.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A'}\n                        </TableCell>\n                        <TableCell>₹{voucher.total_amount?.toFixed(2) || '0.00'}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Right side - Voucher Form (60%) */}\n        <Grid size={{ xs: 12, md: 7 }}>\n          <Paper sx={{ p: 3, height: 'calc(100vh - 120px)', overflow: 'auto' }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n              <Typography variant=\"h6\">\n                {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'} Credit Note\n              </Typography>\n              {mode !== 'create' && (\n                <Box>\n                  <Button \n                    variant=\"outlined\" \n                    size=\"small\" \n                    onClick={() => handleGeneratePDF()}\n                    sx={{ mr: 1 }}\n                  >\n                    Generate PDF\n                  </Button>\n                </Box>\n              )}\n            </Box>\n\n            {(createMutation.isPending || updateMutation.isPending) && (\n              <Box display=\"flex\" justifyContent=\"center\" my={2}>\n                <CircularProgress />\n              </Box>\n            )}\n\n            <Box \n              component=\"form\" \n              onSubmit={handleSubmit(handleSubmitForm)} \n              sx={{ \n                mt: 3,\n                ...voucherStyles.formContainer\n              }}\n            >\n              <Grid container spacing={3}>\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('voucher_number')}\n                    label=\"Credit Note Number\"\n                    fullWidth\n                    disabled={true}\n                    sx={voucherStyles.centerField}\n                    InputProps={{\n                      readOnly: true,\n                      style: { textAlign: 'center', fontWeight: 'bold' }\n                    }}\n                  />\n                </Grid>\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('date')}\n                    label=\"Date\"\n                    type=\"date\"\n                    fullWidth\n                    InputLabelProps={{ shrink: true }}\n                    sx={voucherStyles.centerField}\n                    disabled={isViewMode}\n                  />\n                </Grid>\n\n                <Grid size={12}>\n                  <Autocomplete\n                    options={customerList || []}\n                    getOptionLabel={(option) => option.name || ''}\n                    value={customerList?.find((c: any) => c.id === watch('customer_id')) || null}\n                    onChange={(_, newValue) => {\n                      setValue('customer_id', newValue?.id || null);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Customer\"\n                        required\n                        disabled={isViewMode}\n                        error={!!errors.customer_id}\n                        helperText={errors.customer_id?.message?.toString()}\n                        InputProps={{\n                          ...params.InputProps,\n                          endAdornment: (\n                            <>\n                              {!isViewMode && (\n                                <Tooltip title=\"Add New Customer\">\n                                  <Button\n                                    size=\"small\"\n                                    onClick={() => setShowAddCustomerModal(true)}\n                                    sx={{ minWidth: 'auto', p: 0.5 }}\n                                  >\n                                    <Add fontSize=\"small\" />\n                                  </Button>\n                                </Tooltip>\n                              )}\n                              {params.InputProps.endAdornment}\n                            </>\n                          ),\n                        }}\n                      />\n                    )}\n                    disabled={isViewMode}\n                  />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('total_amount')}\n                    label=\"Total Amount\"\n                    type=\"number\"\n                    fullWidth\n                    required\n                    disabled={isViewMode}\n                    sx={voucherStyles.centerField}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">₹</InputAdornment>,\n                    }}\n                  />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('reference')}\n                    label=\"Reference\"\n                    fullWidth\n                    disabled={isViewMode}\n                    sx={voucherStyles.centerField}\n                  />\n                </Grid>\n\n                <Grid size={12}>\n                  <TextField\n                    {...control.register('notes')}\n                    label=\"Notes\"\n                    fullWidth\n                    multiline\n                    rows={3}\n                    disabled={isViewMode}\n                  />\n                </Grid>\n\n                {totalAmount > 0 && (\n                  <Grid size={12}>\n                    <Alert severity=\"info\">\n                      <Typography variant=\"body2\">\n                        Amount in words: {getAmountInWords(totalAmount)}\n                      </Typography>\n                    </Alert>\n                  </Grid>\n                )}\n\n                {!isViewMode && (\n                  <Grid size={12}>\n                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n                      <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        disabled={createMutation.isPending || updateMutation.isPending}\n                      >\n                        {mode === 'create' ? 'Create' : 'Update'} Credit Note\n                      </Button>\n                    </Box>\n                  </Grid>\n                )}\n              </Grid>\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Add Customer Modal */}\n      <AddCustomerModal\n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={handleCustomerCreated}\n        loading={addCustomerLoading}\n      />\n\n      {/* Context Menu */}\n      <VoucherContextMenu\n        voucherType=\"credit-note\"\n        contextMenu={contextMenu}\n        onClose={handleContextMenuClose}\n        onView={handleView}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n        onPrint={() => handleGeneratePDF()}\n      />\n\n      {/* Voucher List Modal */}\n      <VoucherListModal\n        open={showFullModal}\n        onClose={handleModalClose}\n        vouchers={filteredVouchers}\n        voucherType=\"Credit Note\"\n        onVoucherClick={handleView}\n        onView={handleView}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n        onGeneratePDF={handleGeneratePDF}\n      />\n    </Container>\n  );\n};\n\nexport default CreditNotePage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Financial-Vouchers/debit-note.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":3,"column":148,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":153,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[251,258],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":3,"column":191,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":205,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableContainer"},"fix":{"range":[294,310],"text":""},"desc":"Remove unused variable 'TableContainer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[368,380],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":4,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[380,386],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":10,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[794,809],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'parseRateField' is defined but never used.","line":10,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"parseRateField"},"fix":{"range":[827,843],"text":""},"desc":"Remove unused variable 'parseRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":10,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":92,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[843,860],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddCustomerLoading' is assigned a value but never used.","line":24,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddCustomerLoading"},"fix":{"range":[1174,1201],"text":""},"desc":"Remove unused variable 'setAddCustomerLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":27,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[1237,1253],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":28,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[1253,1272],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":29,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[1272,1286],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":30,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[1286,1303],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":31,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[1303,1315],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":32,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[1315,1330],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1444,1474],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[1570,1611],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[1740,1758],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'customerFilter' is assigned a value but never used.","line":76,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"customerFilter"},"fix":{"range":[2117,2162],"text":""},"desc":"Remove unused variable 'customerFilter'."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Debit Note Page - Refactored using shared DRY logic with 40:60 split layout\nimport React from 'react';\nimport { Box, Button, TextField, Typography, Grid, Alert, CircularProgress, Container, Autocomplete, createFilterOptions, InputAdornment, Tooltip, Modal, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport { Add, Visibility, Edit } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, getVoucherStyles, parseRateField, formatRateField } from '../../../utils/voucherUtils';\n\nconst DebitNotePage: React.FC = () => {\n  const config = getVoucherConfig('debit-note');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    showFullModal,\n    contextMenu,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    errors,\n\n    // Data\n    voucherList,\n    customerList,\n    sortedVouchers,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu: handleContextMenuClose,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Watch form values\n  const watchedValues = watch();\n  const totalAmount = watchedValues?.total_amount || 0;\n\n  // Combined customer options for autocomplete\n  const customerFilter = createFilterOptions();\n\n  // Handle voucher click to load details\n  const handleVoucherClick = (voucher: any) => {\n    // Load the selected voucher into the form\n    reset(voucher);\n    // Set the form with the voucher data\n    Object.keys(voucher).forEach(key => {\n      setValue(key, voucher[key]);\n    });\n  };\n\n  // Handle customer creation success\n  const handleCustomerCreated = async (newCustomer: any): Promise<void> => {\n    setValue('customer_id', newCustomer.id);\n    refreshMasterData();\n  };\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 2 }}>\n      <Grid container spacing={3}>\n        {/* Left side - Voucher List (40%) */}\n        <Grid size={{ xs: 12, md: 5 }}>\n          <Paper sx={{ p: 2, height: 'calc(100vh - 120px)', display: 'flex', flexDirection: 'column' }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n              <Typography variant=\"h6\">Debit Notes</Typography>\n              <VoucherHeaderActions\n                mode={mode}\n                voucherType=\"Debit Note\"\n                voucherRoute=\"/vouchers/Financial-Vouchers/debit-note\"\n                onModeChange={(newMode) => setMode(newMode)}\n                onModalOpen={handleModalOpen}\n              />\n            </Box>\n\n            {isLoading ? (\n              <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n                <CircularProgress />\n              </Box>\n            ) : (\n              <Box sx={{ flexGrow: 1, overflow: 'auto' }}>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Sr.</TableCell>\n                      <TableCell>Voucher #</TableCell>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Customer</TableCell>\n                      <TableCell>Amount</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {sortedVouchers.slice(0, 7).map((voucher: any, index: number) => (\n                      <TableRow \n                        key={voucher.id}\n                        onClick={() => handleVoucherClick(voucher)}\n                        onContextMenu={(e) => handleContextMenu(e, voucher)}\n                        sx={{ \n                          cursor: 'pointer',\n                          '&:hover': { bgcolor: 'action.hover' }\n                        }}\n                      >\n                        <TableCell>{index + 1}</TableCell>\n                        <TableCell>{voucher.voucher_number}</TableCell>\n                        <TableCell>{new Date(voucher.date).toLocaleDateString()}</TableCell>\n                        <TableCell>\n                          {customerList?.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A'}\n                        </TableCell>\n                        <TableCell>₹{voucher.total_amount?.toFixed(2) || '0.00'}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Right side - Voucher Form (60%) */}\n        <Grid size={{ xs: 12, md: 7 }}>\n          <Paper sx={{ p: 3, height: 'calc(100vh - 120px)', overflow: 'auto' }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n              <Typography variant=\"h6\">\n                {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'} Debit Note\n              </Typography>\n              {mode !== 'create' && (\n                <Box>\n                  <Button \n                    variant=\"outlined\" \n                    size=\"small\" \n                    onClick={() => handleGeneratePDF()}\n                    sx={{ mr: 1 }}\n                  >\n                    Generate PDF\n                  </Button>\n                </Box>\n              )}\n            </Box>\n\n            {(createMutation.isPending || updateMutation.isPending) && (\n              <Box display=\"flex\" justifyContent=\"center\" my={2}>\n                <CircularProgress />\n              </Box>\n            )}\n\n            <Box \n              component=\"form\" \n              onSubmit={handleSubmit(handleSubmitForm)} \n              sx={{ \n                mt: 3,\n                ...voucherStyles.formContainer\n              }}\n            >\n              <Grid container spacing={3}>\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('voucher_number')}\n                    label=\"Debit Note Number\"\n                    fullWidth\n                    disabled={true}\n                    sx={voucherStyles.centerField}\n                    InputProps={{\n                      readOnly: true,\n                      style: { textAlign: 'center', fontWeight: 'bold' }\n                    }}\n                  />\n                </Grid>\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('date')}\n                    label=\"Date\"\n                    type=\"date\"\n                    fullWidth\n                    InputLabelProps={{ shrink: true }}\n                    sx={voucherStyles.centerField}\n                    disabled={isViewMode}\n                  />\n                </Grid>\n\n                <Grid size={12}>\n                  <Autocomplete\n                    options={customerList || []}\n                    getOptionLabel={(option) => option.name || ''}\n                    value={customerList?.find((c: any) => c.id === watch('customer_id')) || null}\n                    onChange={(_, newValue) => {\n                      setValue('customer_id', newValue?.id || null);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Customer\"\n                        required\n                        disabled={isViewMode}\n                        error={!!errors.customer_id}\n                        helperText={errors.customer_id?.message as string}\n                        InputProps={{\n                          ...params.InputProps,\n                          endAdornment: (\n                            <>\n                              {!isViewMode && (\n                                <Tooltip title=\"Add New Customer\">\n                                  <Button\n                                    size=\"small\"\n                                    onClick={() => setShowAddCustomerModal(true)}\n                                    sx={{ minWidth: 'auto', p: 0.5 }}\n                                  >\n                                    <Add fontSize=\"small\" />\n                                  </Button>\n                                </Tooltip>\n                              )}\n                              {params.InputProps.endAdornment}\n                            </>\n                          ),\n                        }}\n                      />\n                    )}\n                    disabled={isViewMode}\n                  />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('total_amount')}\n                    label=\"Total Amount\"\n                    type=\"number\"\n                    fullWidth\n                    required\n                    disabled={isViewMode}\n                    sx={voucherStyles.centerField}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">₹</InputAdornment>,\n                    }}\n                  />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('reference')}\n                    label=\"Reference\"\n                    fullWidth\n                    disabled={isViewMode}\n                    sx={voucherStyles.centerField}\n                  />\n                </Grid>\n\n                <Grid size={12}>\n                  <TextField\n                    {...control.register('notes')}\n                    label=\"Notes\"\n                    fullWidth\n                    multiline\n                    rows={3}\n                    disabled={isViewMode}\n                  />\n                </Grid>\n\n                {totalAmount > 0 && (\n                  <Grid size={12}>\n                    <Alert severity=\"info\">\n                      <Typography variant=\"body2\">\n                        Amount in words: {getAmountInWords(totalAmount)}\n                      </Typography>\n                    </Alert>\n                  </Grid>\n                )}\n\n                {!isViewMode && (\n                  <Grid size={12}>\n                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n                      <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        disabled={createMutation.isPending || updateMutation.isPending}\n                      >\n                        {mode === 'create' ? 'Create' : 'Update'} Debit Note\n                      </Button>\n                    </Box>\n                  </Grid>\n                )}\n              </Grid>\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Add Customer Modal */}\n      <AddCustomerModal\n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={handleCustomerCreated}\n        loading={addCustomerLoading}\n        \n      />\n\n      {/* Context Menu */}\n      <VoucherContextMenu\n        voucherType=\"debit-note\"\n        contextMenu={contextMenu}\n        onClose={handleContextMenuClose}\n        onView={handleView}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n        onPrint={() => handleGeneratePDF()}\n      />\n\n      {/* Voucher List Modal */}\n      <VoucherListModal\n        open={showFullModal}\n        onClose={handleModalClose}\n        vouchers={filteredVouchers}\n        voucherType=\"Debit Note\"\n        onVoucherClick={handleView}\n        onView={handleView}\n        onEdit={handleEdit}\n        onDelete={handleDelete}\n        onGeneratePDF={handleGeneratePDF}\n      />\n    </Container>\n  );\n};\n\nexport default DebitNotePage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Financial-Vouchers/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Financial-Vouchers/journal-voucher.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[133,140],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Autocomplete' is defined but never used.","line":3,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":100,"suggestions":[{"messageId":"removeVar","data":{"varName":"Autocomplete"},"fix":{"range":[169,183],"text":""},"desc":"Remove unused variable 'Autocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":3,"column":102,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":116,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[183,199],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":3,"column":118,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":125,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[199,208],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":3,"column":127,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":132,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[208,215],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":3,"column":134,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":139,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[215,222],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[322,333],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":4,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[332,338],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":11,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[805,820],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":11,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":92,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[854,871],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":23,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[1135,1151],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":24,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[1151,1170],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":25,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[1170,1184],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":26,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[1184,1201],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":27,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[1201,1213],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":28,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[1213,1228],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":29,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[1228,1250],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":40,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1342,1372],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":56,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[1654,1672],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refreshMasterData' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"refreshMasterData"},"fix":{"range":[1756,1779],"text":""},"desc":"Remove unused variable 'refreshMasterData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalAmount' is assigned a value but never used.","line":70,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalAmount"},"fix":{"range":[1926,1979],"text":""},"desc":"Remove unused variable 'totalAmount'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":129,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":129,"endColumn":38}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Journal Voucher Page - Refactored using VoucherLayout\nimport React from 'react';\nimport { Box, Button, TextField, Typography, Grid, Alert, CircularProgress, Container, Autocomplete, InputAdornment, Tooltip, Modal, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport { Visibility, Edit } from '@mui/icons-material';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport EntitySelector from '../../../components/EntitySelector';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, getVoucherStyles, parseRateField, formatRateField } from '../../../utils/voucherUtils';\n\nconst JournalVoucher: React.FC = () => {\n  const config = getVoucherConfig('journal-voucher');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    isLoading,\n    showFullModal,\n    contextMenu,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    errors,\n\n    // Data\n    voucherList,\n    vendorList,\n    customerList,\n    sortedVouchers,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu: handleContextMenuClose,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Watch form values\n  const watchedValues = watch();\n  const totalAmount = watchedValues?.total_amount || 0;\n\n  // Handle voucher click to load details\n  const handleVoucherClick = (voucher: any) => {\n    // Load the selected voucher into the form\n    reset(voucher);\n    // Set the form with the voucher data\n    Object.keys(voucher).forEach(key => {\n      setValue(key, voucher[key]);\n    });\n  };\n\n  // Index Content - Left Panel (40%)\n  const indexContent = (\n    <TableContainer sx={{ maxHeight: 400 }}>\n      <Table stickyHeader size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Debit</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Credit</TableCell>\n            <TableCell align=\"right\" sx={{ fontSize: 12, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(sortedVouchers?.length === 0) ? (\n            <TableRow>\n              <TableCell colSpan={5} align=\"center\">No journal vouchers available</TableCell>\n            </TableRow>\n          ) : (\n            sortedVouchers?.slice(0, 7).map((voucher: any) => (\n              <TableRow \n                key={voucher.id} \n                hover\n                onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                sx={{ cursor: 'pointer' }}\n              >\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }} onClick={() => handleVoucherClick(voucher)}>\n                  {voucher.voucher_number}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {new Date(voucher.date).toLocaleDateString()}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  ₹{voucher.debit_amount?.toFixed(2) || '0.00'}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  ₹{voucher.credit_amount?.toFixed(2) || '0.00'}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ fontSize: 11, p: 0 }}>\n                  <VoucherContextMenu\n                    voucher={voucher}\n                    voucherType=\"Journal Voucher\"\n                    onView={() => handleView(voucher.id)}\n                    onEdit={() => handleEdit(voucher.id)}\n                    onDelete={() => handleDelete(voucher)}\n                    onPrint={() => handleGeneratePDF()}\n                    showKebab={true}\n                    onClose={() => {}}\n                  />\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  // Form Content - Right Panel (60%)\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\" sx={{ fontSize: 18, fontWeight: 'bold', textAlign: 'center', flex: 1 }}>\n          Journal Voucher - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType=\"Journal Voucher\"\n          voucherRoute=\"/vouchers/Financial-Vouchers/journal-voucher\"\n          currentId={watch('id')}\n        />\n      </Box>\n\n      {(createMutation.isPending || updateMutation.isPending) && (\n        <Box display=\"flex\" justifyContent=\"center\" my={2}>\n          <CircularProgress />\n        </Box>\n      )}\n\n      <Box \n        component=\"form\" \n        onSubmit={handleSubmit(handleSubmitForm)} \n        sx={{ \n          mt: 2,\n          ...voucherStyles.formContainer\n        }}\n      >\n        <Grid container spacing={2}>\n          <Grid size={6}>\n            <TextField\n              {...control.register('voucher_number')}\n              label=\"Voucher Number\"\n              fullWidth\n              disabled={true}\n              sx={voucherStyles.centerField}\n              InputProps={{\n                readOnly: true,\n                style: { textAlign: 'center', fontWeight: 'bold' }\n              }}\n            />\n          </Grid>\n          <Grid size={6}>\n            <TextField\n              {...control.register('date')}\n              label=\"Date\"\n              type=\"date\"\n              fullWidth\n              disabled={isViewMode}\n              sx={voucherStyles.centerField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              inputProps={{ style: { textAlign: 'center' } }}\n              error={!!errors.date}\n              helperText={errors.date?.message as string}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <EntitySelector\n              name=\"debit_account\"\n              control={control}\n              label=\"Debit Account\"\n              entityTypes={['ExpenseAccount', 'Customer', 'Vendor', 'Employee']}\n              allowTypeSelection={true}\n              required={true}\n              disabled={isViewMode}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              {...control.register('debit_amount', {\n                required: 'Debit amount is required',\n                min: { value: 0.01, message: 'Amount must be greater than 0' },\n                setValueAs: (value) => parseRateField(value)\n              })}\n              label=\"Debit Amount\"\n              type=\"number\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.debit_amount}\n              helperText={errors.debit_amount?.message as string}\n              sx={{\n                ...voucherStyles.rateField,\n                ...voucherStyles.centerField\n              }}\n              InputProps={{\n                inputProps: { \n                  step: \"0.01\",\n                  style: { textAlign: 'center' }\n                }\n              }}\n              onChange={(e) => {\n                const value = parseRateField(e.target.value);\n                setValue('debit_amount', value);\n                // Auto-set credit amount to match (for balanced entry)\n                setValue('credit_amount', value);\n              }}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              {...control.register('credit_amount', {\n                required: 'Credit amount is required',\n                min: { value: 0.01, message: 'Amount must be greater than 0' },\n                setValueAs: (value) => parseRateField(value)\n              })}\n              label=\"Credit Amount\"\n              type=\"number\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.credit_amount}\n              helperText={errors.credit_amount?.message as string}\n              sx={{\n                ...voucherStyles.rateField,\n                ...voucherStyles.centerField\n              }}\n              InputProps={{\n                inputProps: { \n                  step: \"0.01\",\n                  style: { textAlign: 'center' }\n                }\n              }}\n              onChange={(e) => {\n                const value = parseRateField(e.target.value);\n                setValue('credit_amount', value);\n                // Auto-set debit amount to match (for balanced entry)\n                setValue('debit_amount', value);\n              }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <EntitySelector\n              name=\"credit_account\"\n              control={control}\n              label=\"Credit Account\"\n              entityTypes={['ExpenseAccount', 'Customer', 'Vendor', 'Employee']}\n              allowTypeSelection={true}\n              required={true}\n              disabled={isViewMode}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              {...control.register('description')}\n              label=\"Description\"\n              multiline\n              rows={3}\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.description}\n              helperText={errors.description?.message as string}\n              placeholder=\"Enter transaction description...\"\n            />\n          </Grid>\n\n          {(watch('debit_amount') > 0 || watch('credit_amount') > 0) && (\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Amount in Words\"\n                value={getAmountInWords(Math.max(watch('debit_amount') || 0, watch('credit_amount') || 0))}\n                disabled\n                InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n                size=\"small\"\n              />\n            </Grid>\n          )}\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box display=\"flex\" gap={2}>\n              {mode !== 'view' && (\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"success\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n              <Button\n                variant=\"outlined\"\n                onClick={handleCreate}\n                sx={{ fontSize: 12 }}\n              >\n                Clear\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType=\"Journal Vouchers\"\n        voucherTitle=\"Journal Voucher\"\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={handleModalOpen}\n        showAllButton={true}\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showFullModal}\n            onClose={handleModalClose}\n            voucherType=\"Journal Vouchers\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEdit}\n            onView={handleView}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n            vendorList={vendorList}\n          />\n        }\n      />\n      \n      {/* Keep context menu for right-click functionality */}\n      <VoucherContextMenu\n        voucherType=\"Journal Voucher\"\n        contextMenu={contextMenu}\n        onClose={handleContextMenuClose}\n        onEdit={(id) => {\n          handleEdit(id);\n          handleContextMenuClose();\n        }}\n        onView={(id) => {\n          handleView(id);\n          handleContextMenuClose();\n        }}\n        onDelete={(id) => {\n          handleDelete(id);\n          handleContextMenuClose();\n        }}\n      />\n    </>\n  );\n};\n\nexport default JournalVoucher;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Financial-Vouchers/non-sales-credit-note.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[139,146],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Autocomplete' is defined but never used.","line":3,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":100,"suggestions":[{"messageId":"removeVar","data":{"varName":"Autocomplete"},"fix":{"range":[175,189],"text":""},"desc":"Remove unused variable 'Autocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":3,"column":102,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":116,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[189,205],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":3,"column":118,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":125,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[205,214],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":3,"column":127,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":132,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[214,221],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":3,"column":134,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":139,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[221,228],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[371,382],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":4,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[381,387],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":4,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[387,392],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":12,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[936,951],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":12,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":92,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[985,1002],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddCustomerLoading' is assigned a value but never used.","line":25,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddCustomerLoading"},"fix":{"range":[1319,1346],"text":""},"desc":"Remove unused variable 'setAddCustomerLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":28,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[1382,1398],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":29,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[1398,1417],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":30,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[1417,1431],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":31,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[1431,1448],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":32,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[1448,1460],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":33,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[1460,1475],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":34,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[1475,1497],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1589,1619],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[1901,1919],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refreshMasterData' is assigned a value but never used.","line":67,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"refreshMasterData"},"fix":{"range":[2026,2049],"text":""},"desc":"Remove unused variable 'refreshMasterData'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":171,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":171,"endColumn":38}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Non-Sales Credit Note Page - Refactored using VoucherLayout\nimport React from 'react';\nimport { Box, Button, TextField, Typography, Grid, Alert, CircularProgress, Container, Autocomplete, InputAdornment, Tooltip, Modal, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport { Visibility, Edit, Add } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport SearchableDropdown from '../../../components/SearchableDropdown';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, getVoucherStyles, parseRateField, formatRateField } from '../../../utils/voucherUtils';\n\nconst NonSalesCreditNote: React.FC = () => {\n  const config = getVoucherConfig('non-sales-credit-note');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    showFullModal,\n    contextMenu,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    errors,\n\n    // Data\n    voucherList,\n    vendorList,\n    customerList,\n    sortedVouchers,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu: handleContextMenuClose,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    handleAddCustomer,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Watch form values\n  const watchedValues = watch();\n  const totalAmount = watchedValues?.total_amount || 0;\n\n  // Handle voucher click to load details\n  const handleVoucherClick = (voucher: any) => {\n    // Load the selected voucher into the form\n    reset(voucher);\n    // Set the form with the voucher data\n    Object.keys(voucher).forEach(key => {\n      setValue(key, voucher[key]);\n    });\n  };\n\n  // Combined list of all parties (customers + vendors) for unified dropdown\n  const allParties = [\n    ...(customerList || []).map((customer: any) => ({\n      id: customer.id,\n      name: customer.name,\n      email: customer.email,\n      type: 'Customer',\n      value: customer.id,\n      label: `${customer.name} (Customer)`\n    })),\n    ...(vendorList || []).map((vendor: any) => ({\n      id: vendor.id,\n      name: vendor.name,\n      email: vendor.email,\n      type: 'Vendor',\n      value: vendor.id,\n      label: `${vendor.name} (Vendor)`\n    }))\n  ];\n\n  // Credit note reasons\n  const creditNoteReasons = [\n    'Product Return',\n    'Defective Product',\n    'Wrong Product Shipped',\n    'Pricing Error',\n    'Customer Dissatisfaction',\n    'Promotional Adjustment',\n    'Volume Discount',\n    'Settlement Discount',\n    'Other'\n  ];\n\n  // Get selected entity from form\n  const selectedEntity = watch('entity');\n\n  // Index Content - Left Panel (40%)\n  const indexContent = (\n    <TableContainer sx={{ maxHeight: 400 }}>\n      <Table stickyHeader size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Credit Note No.</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Party</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n            <TableCell align=\"right\" sx={{ fontSize: 12, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(sortedVouchers?.length === 0) ? (\n            <TableRow>\n              <TableCell colSpan={5} align=\"center\">No credit notes available</TableCell>\n            </TableRow>\n          ) : (\n            sortedVouchers?.slice(0, 7).map((voucher: any) => (\n              <TableRow \n                key={voucher.id} \n                hover\n                onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                sx={{ cursor: 'pointer' }}\n              >\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }} onClick={() => handleVoucherClick(voucher)}>\n                  {voucher.credit_note_number || voucher.voucher_number}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {new Date(voucher.date).toLocaleDateString()}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {voucher.entity?.name || voucher.customer?.name || 'N/A'}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  ₹{voucher.total_amount?.toFixed(2) || '0.00'}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ fontSize: 11, p: 0 }}>\n                  <VoucherContextMenu\n                    voucher={voucher}\n                    voucherType=\"Non Sales Credit Note\"\n                    onView={() => handleView(voucher.id)}\n                    onEdit={() => handleEdit(voucher.id)}\n                    onDelete={() => handleDelete(voucher)}\n                    onPrint={() => handleGeneratePDF()}\n                    showKebab={true}\n                    onClose={() => {}}\n                  />\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  // Form Content - Right Panel (60%)\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\" sx={{ fontSize: 18, fontWeight: 'bold', textAlign: 'center', flex: 1 }}>\n          Non Sales Credit Note - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType=\"Non Sales Credit Note\"\n          voucherRoute=\"/vouchers/Financial-Vouchers/non-sales-credit-note\"\n          currentId={selectedEntity?.id}\n        />\n      </Box>\n\n      {(createMutation.isPending || updateMutation.isPending) && (\n        <Box display=\"flex\" justifyContent=\"center\" my={2}>\n          <CircularProgress />\n        </Box>\n      )}\n\n      <Box \n        component=\"form\" \n        onSubmit={handleSubmit(handleSubmitForm)} \n        sx={{ \n          mt: 2,\n          ...voucherStyles.formContainer\n        }}\n      >\n        <Grid container spacing={2}>\n          <Grid size={6}>\n            <TextField\n              {...control.register('credit_note_number')}\n              label=\"Credit Note Number\"\n              fullWidth\n              disabled={true}\n              sx={voucherStyles.centerField}\n              InputProps={{\n                readOnly: true,\n                style: { textAlign: 'center', fontWeight: 'bold' }\n              }}\n            />\n          </Grid>\n          <Grid size={6}>\n            <TextField\n              {...control.register('date')}\n              label=\"Date\"\n              type=\"date\"\n              fullWidth\n              disabled={isViewMode}\n              sx={voucherStyles.centerField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              inputProps={{ style: { textAlign: 'center' } }}\n              error={!!errors.date}\n              helperText={errors.date?.message as string}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <SearchableDropdown\n              label=\"Party Name\"\n              options={allParties}\n              value={selectedEntity?.id || null}\n              onChange={(value) => {\n                const party = allParties.find(p => p.id === value);\n                if (party) {\n                  setValue('entity', {\n                    id: party.id,\n                    name: party.name,\n                    type: party.type,\n                    value: party.id,\n                    label: party.name\n                  });\n                }\n              }}\n              getOptionLabel={(option) => option.label}\n              getOptionValue={(option) => option.id}\n              placeholder=\"Select or search party...\"\n              noOptionsText=\"No parties found\"\n              disabled={isViewMode}\n              fullWidth\n              required\n              error={!!errors.entity}\n              helperText={errors.entity?.message as string}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <FormControl fullWidth disabled={isViewMode}>\n              <InputLabel>Reason</InputLabel>\n              <Select\n                {...control.register('reason')}\n                value={watch('reason') || ''}\n                onChange={(e) => setValue('reason', e.target.value)}\n                error={!!errors.reason}\n                sx={{ height: 56 }} // Match height with Party Name field\n              >\n                {creditNoteReasons.map((reason) => (\n                  <MenuItem key={reason} value={reason}>\n                    {reason}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              {...control.register('reference_number')}\n              label=\"Reference Number\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.reference_number}\n              helperText={errors.reference_number?.message as string}\n              placeholder=\"Enter reference invoice/bill number...\"\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              {...control.register('total_amount', {\n                required: 'Amount is required',\n                min: { value: 0.01, message: 'Amount must be greater than 0' },\n                setValueAs: (value) => parseRateField(value)\n              })}\n              label=\"Credit Amount\"\n              type=\"number\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.total_amount}\n              helperText={errors.total_amount?.message as string}\n              sx={{\n                ...voucherStyles.rateField,\n                ...voucherStyles.centerField\n              }}\n              InputProps={{\n                inputProps: { \n                  step: \"0.01\",\n                  style: { textAlign: 'center' }\n                }\n              }}\n              onChange={(e) => {\n                const value = parseRateField(e.target.value);\n                setValue('total_amount', value);\n              }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              {...control.register('description')}\n              label=\"Description\"\n              multiline\n              rows={4}\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.description}\n              helperText={errors.description?.message as string}\n              placeholder=\"Enter detailed description of the credit note...\"\n            />\n          </Grid>\n\n          {totalAmount > 0 && (\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Amount in Words\"\n                value={getAmountInWords(totalAmount)}\n                disabled\n                InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n                size=\"small\"\n              />\n            </Grid>\n          )}\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box display=\"flex\" gap={2}>\n              {mode !== 'view' && (\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"success\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n              <Button\n                variant=\"outlined\"\n                onClick={handleCreate}\n                sx={{ fontSize: 12 }}\n              >\n                Clear\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType=\"Non Sales Credit Notes\"\n        voucherTitle=\"Non Sales Credit Note\"\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={handleModalOpen}\n        showAllButton={true}\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showFullModal}\n            onClose={handleModalClose}\n            voucherType=\"Non Sales Credit Notes\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEdit}\n            onView={handleView}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n            vendorList={vendorList}\n          />\n        }\n      />\n      \n      {/* Add Customer Modal */}\n      <AddCustomerModal\n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={handleAddCustomer}\n        loading={addCustomerLoading}\n      />\n      \n      {/* Keep context menu for right-click functionality */}\n      <VoucherContextMenu\n        voucherType=\"Non Sales Credit Note\"\n        contextMenu={contextMenu}\n        onClose={handleContextMenuClose}\n        onEdit={(id) => {\n          handleEdit(id);\n          handleContextMenuClose();\n        }}\n        onView={(id) => {\n          handleView(id);\n          handleContextMenuClose();\n        }}\n        onDelete={(id) => {\n          handleDelete(id);\n          handleContextMenuClose();\n        }}\n      />\n    </>\n  );\n};\n\nexport default NonSalesCreditNote;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Financial-Vouchers/payment-voucher.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":2,"column":95,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":109,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[133,149],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":2,"column":111,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":118,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[149,158],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":2,"column":120,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":125,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[158,165],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":2,"column":170,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":175,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[208,215],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[315,319],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":3,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[318,330],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[330,336],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'EntitySelector' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"EntitySelector"},"fix":{"range":[374,394],"text":""},"desc":"Remove unused variable 'EntitySelector'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":11,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[910,927],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":24,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[1258,1274],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":25,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[1274,1293],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":26,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[1293,1307],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":27,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[1307,1324],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":28,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[1324,1336],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":29,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[1336,1351],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":30,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[1351,1373],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":41,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1465,1495],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[1795,1813],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedModule' is assigned a value but never used.","line":81,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedModule"},"fix":{"range":[2345,2359],"text":""},"desc":"Remove unused variable 'selectedModule'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedModule' is assigned a value but never used.","line":81,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSelectedModule"},"fix":{"range":[2359,2378],"text":""},"desc":"Remove unused variable 'setSelectedModule'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleEntityCreated' is assigned a value but never used.","line":105,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleEntityCreated"},"fix":{"range":[3018,3295],"text":""},"desc":"Remove unused variable 'handleEntityCreated'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":194,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":194,"endColumn":38}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Box, Button, TextField, Typography, Grid, CircularProgress, Container, Autocomplete, InputAdornment, Tooltip, Modal, FormControl, InputLabel, Select, MenuItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport { Add, Visibility, Edit } from '@mui/icons-material';\nimport EntitySelector from '../../../components/EntitySelector';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport SearchableDropdown from '../../../components/SearchableDropdown';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, getVoucherStyles, parseRateField, formatRateField } from '../../../utils/voucherUtils';\nimport { useReferenceOptions } from '../../../utils/nameRefUtils';\n\nconst PaymentVoucher: React.FC = () => {\n  const config = getVoucherConfig('payment-voucher');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    isLoading,\n    showFullModal,\n    contextMenu,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    errors,\n\n    // Data\n    voucherList,\n    vendorList,\n    customerList,\n    employeeList,\n    sortedVouchers,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu: handleContextMenuClose,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Handle voucher click to load details\n  const handleVoucherClick = (voucher: any) => {\n    // Load the selected voucher into the form\n    reset(voucher);\n    // Set the form with the voucher data\n    Object.keys(voucher).forEach(key => {\n      setValue(key, voucher[key]);\n    });\n  };\n\n  // Payment voucher specific state\n  const [selectedModule, setSelectedModule] = useState<'Vendor' | 'Customer' | null>(null);\n  \n  const totalAmountValue = watch('total_amount');\n  const selectedEntity = watch('entity'); // Now using entity instead of name_id/name_type\n\n  // Get reference options including unpaid vouchers for the selected entity\n  const referenceOptions = useReferenceOptions(\n    selectedEntity?.id || null, \n    selectedEntity?.type || null\n  );\n\n  // Payment methods for payment vouchers\n  const paymentMethods = [\n    'Cash',\n    'Bank Transfer',\n    'Cheque',\n    'Credit Card',\n    'Debit Card',\n    'Online Payment',\n    'UPI',\n    'Net Banking'\n  ];\n\n  // Handle entity creation success\n  const handleEntityCreated = (newEntity: any) => {\n    setValue('entity', {\n      id: newEntity.id,\n      name: newEntity.name,\n      type: newEntity.type || 'Customer', // Default type\n      value: newEntity.id,\n      label: newEntity.name\n    });\n    refreshMasterData();\n  };\n\n  // Combined list of all parties (customers + vendors + employees) for unified dropdown\n  const allParties = [\n    ...(customerList || []).map((customer: any) => ({\n      id: customer.id,\n      name: customer.name,\n      email: customer.email,\n      type: 'Customer',\n      value: customer.id,\n      label: `${customer.name} (Customer)`\n    })),\n    ...(vendorList || []).map((vendor: any) => ({\n      id: vendor.id,\n      name: vendor.name,\n      email: vendor.email,\n      type: 'Vendor',\n      value: vendor.id,\n      label: `${vendor.name} (Vendor)`\n    })),\n    ...(employeeList || []).map((employee: any) => ({\n      id: employee.id,\n      name: employee.name,\n      email: employee.email,\n      type: 'Employee',\n      value: employee.id,\n      label: `${employee.name} (Employee)`\n    }))\n  ];\n\n  // Index Content - Left Panel (40%)\n  const indexContent = (\n    <TableContainer sx={{ maxHeight: 400 }}>\n      <Table stickyHeader size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Party</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n            <TableCell align=\"right\" sx={{ fontSize: 12, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(sortedVouchers?.length === 0) ? (\n            <TableRow>\n              <TableCell colSpan={5} align=\"center\">No payment vouchers available</TableCell>\n            </TableRow>\n          ) : (\n            sortedVouchers?.slice(0, 7).map((voucher: any) => (\n              <TableRow \n                key={voucher.id} \n                hover\n                onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                sx={{ cursor: 'pointer' }}\n              >\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }} onClick={() => handleVoucherClick(voucher)}>\n                  {voucher.voucher_number}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {new Date(voucher.date).toLocaleDateString()}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {voucher.entity?.name || \n                   (voucher.name_type === 'Vendor' \n                    ? vendorList?.find((v: any) => v.id === voucher.name_id)?.name \n                    : customerList?.find((c: any) => c.id === voucher.name_id)?.name) || 'N/A'}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  ₹{voucher.total_amount?.toFixed(2) || '0.00'}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ fontSize: 11, p: 0 }}>\n                  <VoucherContextMenu\n                    voucher={voucher}\n                    voucherType=\"Payment Voucher\"\n                    onView={() => handleView(voucher.id)}\n                    onEdit={() => handleEdit(voucher.id)}\n                    onDelete={() => handleDelete(voucher)}\n                    onPrint={() => handleGeneratePDF()}\n                    showKebab={true}\n                    onClose={() => {}}\n                  />\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  // Form Content - Right Panel (60%)\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\" sx={{ fontSize: 18, fontWeight: 'bold', textAlign: 'center', flex: 1 }}>\n          Payment Voucher - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType=\"Payment Voucher\"\n          voucherRoute=\"/vouchers/Financial-Vouchers/payment-voucher\"\n          currentId={selectedEntity?.id}\n        />\n      </Box>\n\n      {(createMutation.isPending || updateMutation.isPending) && (\n        <Box display=\"flex\" justifyContent=\"center\" my={2}>\n          <CircularProgress />\n        </Box>\n      )}\n\n      <Box \n        component=\"form\" \n        onSubmit={handleSubmit(handleSubmitForm)} \n        sx={{ \n          mt: 2,\n          ...voucherStyles.formContainer\n        }}\n      >\n        <Grid container spacing={2}>\n          <Grid size={6}>\n            <TextField\n              {...control.register('voucher_number')}\n              label=\"Voucher Number\"\n              fullWidth\n              disabled={true}\n              sx={voucherStyles.centerField}\n              InputProps={{\n                readOnly: true,\n                style: { textAlign: 'center', fontWeight: 'bold' }\n              }}\n            />\n          </Grid>\n          <Grid size={6}>\n            <TextField\n              {...control.register('date')}\n              label=\"Date\"\n              type=\"date\"\n              fullWidth\n              disabled={isViewMode}\n              sx={voucherStyles.centerField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              inputProps={{ style: { textAlign: 'center' } }}\n              error={!!errors.date}\n              helperText={errors.date?.message as string}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <SearchableDropdown\n              label=\"Party Name\"\n              options={allParties}\n              value={selectedEntity?.id || null}\n              onChange={(value) => {\n                const party = allParties.find(p => p.id === value);\n                if (party) {\n                  setValue('entity', {\n                    id: party.id,\n                    name: party.name,\n                    type: party.type,\n                    value: party.id,\n                    label: party.name\n                  });\n                }\n              }}\n              getOptionLabel={(option) => option.label}\n              getOptionValue={(option) => option.id}\n              placeholder=\"Select or search party...\"\n              noOptionsText=\"No parties found\"\n              disabled={isViewMode}\n              fullWidth\n              required\n              error={!!errors.entity}\n              helperText={errors.entity?.message as string}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <FormControl fullWidth disabled={isViewMode}>\n              <InputLabel>Payment Method</InputLabel>\n              <Select\n                {...control.register('payment_method')}\n                value={watch('payment_method') || ''}\n                onChange={(e) => setValue('payment_method', e.target.value)}\n                error={!!errors.payment_method}\n                sx={{ height: 56 }} // Match height with Party Name field\n              >\n                {paymentMethods.map((method) => (\n                  <MenuItem key={method} value={method}>\n                    {method}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid size={6}>\n            <Autocomplete\n              freeSolo\n              options={referenceOptions}\n              value={watch('reference') || ''}\n              onChange={(_, newValue) => setValue('reference', newValue || '')}\n              disabled={isViewMode}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Reference\"\n                  error={!!errors.reference}\n                  helperText={errors.reference?.message as string}\n                />\n              )}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              {...control.register('total_amount', {\n                required: 'Amount is required',\n                min: { value: 0.01, message: 'Amount must be greater than 0' },\n                setValueAs: (value) => parseRateField(value)\n              })}\n              label=\"Amount\"\n              type=\"number\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.total_amount}\n              helperText={errors.total_amount?.message as string}\n              sx={{\n                ...voucherStyles.rateField,\n                ...voucherStyles.centerField\n              }}\n              InputProps={{\n                inputProps: { \n                  step: \"0.01\",\n                  style: { textAlign: 'center' }\n                }\n              }}\n              onChange={(e) => {\n                const value = parseRateField(e.target.value);\n                setValue('total_amount', value);\n              }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              {...control.register('notes')}\n              label=\"Notes\"\n              multiline\n              rows={3}\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.notes}\n              helperText={errors.notes?.message as string}\n            />\n          </Grid>\n\n          {totalAmountValue > 0 && (\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Amount in Words\"\n                value={getAmountInWords(totalAmountValue)}\n                disabled\n                InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n                size=\"small\"\n              />\n            </Grid>\n          )}\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box display=\"flex\" gap={2}>\n              {mode !== 'view' && (\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"success\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n              <Button\n                variant=\"outlined\"\n                onClick={handleCreate}\n                sx={{ fontSize: 12 }}\n              >\n                Clear\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType=\"Payment Vouchers\"\n        voucherTitle=\"Payment Voucher\"\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={handleModalOpen}\n        showAllButton={true}\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showFullModal}\n            onClose={handleModalClose}\n            voucherType=\"Payment Vouchers\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEdit}\n            onView={handleView}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n            vendorList={vendorList}\n          />\n        }\n      />\n      \n      {/* Keep context menu for right-click functionality */}\n      <VoucherContextMenu\n        voucherType=\"Payment Voucher\"\n        contextMenu={contextMenu}\n        onClose={handleContextMenuClose}\n        onEdit={(id) => {\n          handleEdit(id);\n          handleContextMenuClose();\n        }}\n        onView={(id) => {\n          handleView(id);\n          handleContextMenuClose();\n        }}\n        onDelete={(id) => {\n          handleDelete(id);\n          handleContextMenuClose();\n        }}\n      />\n    </>\n  );\n};\n\nexport default PaymentVoucher;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Financial-Vouchers/receipt-voucher.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[133,140],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Autocomplete' is defined but never used.","line":3,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":100,"suggestions":[{"messageId":"removeVar","data":{"varName":"Autocomplete"},"fix":{"range":[169,183],"text":""},"desc":"Remove unused variable 'Autocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":3,"column":123,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":137,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[204,220],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":3,"column":139,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":146,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[220,229],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":3,"column":148,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":153,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[229,236],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":3,"column":155,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":160,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[236,243],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[386,390],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[389,401],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":4,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[401,407],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Controller' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"Controller"},"fix":{"range":[438,483],"text":""},"desc":"Remove unused variable 'Controller'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'EntitySelector' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"EntitySelector"},"fix":{"range":[980,1000],"text":""},"desc":"Remove unused variable 'EntitySelector'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":15,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":92,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[1176,1193],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddVendorLoading' is assigned a value but never used.","line":30,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddVendorLoading"},"fix":{"range":[1549,1574],"text":""},"desc":"Remove unused variable 'setAddVendorLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddCustomerLoading' is assigned a value but never used.","line":32,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddCustomerLoading"},"fix":{"range":[1598,1625],"text":""},"desc":"Remove unused variable 'setAddCustomerLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":35,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[1661,1677],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":36,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[1677,1696],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":37,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[1696,1710],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":38,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[1710,1727],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":39,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[1727,1739],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":40,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[1739,1754],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":41,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[1754,1776],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1868,1898],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":68,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[2180,2198],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'allNameOptions' is assigned a value but never used.","line":82,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"allNameOptions"},"fix":{"range":[2518,2692],"text":""},"desc":"Remove unused variable 'allNameOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'nameFilter' is assigned a value but never used.","line":87,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"nameFilter"},"fix":{"range":[2696,2737],"text":""},"desc":"Remove unused variable 'nameFilter'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":182,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":182,"endColumn":38}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Receipt Voucher Page - Refactored using VoucherLayout\nimport React from 'react';\nimport { Box, Button, TextField, Typography, Grid, Alert, CircularProgress, Container, Autocomplete, createFilterOptions, InputAdornment, Tooltip, Modal, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport { Add, Visibility, Edit } from '@mui/icons-material';\nimport { Controller } from 'react-hook-form';\nimport AddVendorModal from '../../../components/AddVendorModal';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport SearchableDropdown from '../../../components/SearchableDropdown';\nimport EntitySelector from '../../../components/EntitySelector';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, getVoucherStyles, parseRateField, formatRateField } from '../../../utils/voucherUtils';\n\nconst ReceiptVoucher: React.FC = () => {\n  const config = getVoucherConfig('receipt-voucher');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    isLoading,\n    showAddVendorModal,\n    setShowAddVendorModal,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    addVendorLoading,\n    setAddVendorLoading,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    showFullModal,\n    contextMenu,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    errors,\n\n    // Data\n    voucherList,\n    vendorList,\n    customerList,\n    sortedVouchers,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu: handleContextMenuClose,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    handleAddVendor,\n    handleAddCustomer,\n  } = useVoucherPage(config);\n\n  // Watch form values\n  const watchedValues = watch();\n  const totalAmount = watchedValues?.total_amount || 0;\n\n  // Combined name options for autocomplete\n  const allNameOptions = [\n    ...(vendorList || []).map((v: any) => ({ ...v, type: 'Vendor' })),\n    ...(customerList || []).map((c: any) => ({ ...c, type: 'Customer' }))\n  ];\n\n  const nameFilter = createFilterOptions();\n\n  // Handle voucher click to load details\n  const handleVoucherClick = (voucher: any) => {\n    // Load the selected voucher into the form\n    reset(voucher);\n    // Set the form with the voucher data\n    Object.keys(voucher).forEach(key => {\n      setValue(key, voucher[key]);\n    });\n  };\n\n  // Combined list of all parties (customers + vendors) for unified dropdown\n  const allParties = [\n    ...(customerList || []).map((customer: any) => ({\n      id: customer.id,\n      name: customer.name,\n      email: customer.email,\n      type: 'Customer',\n      value: customer.id,\n      label: `${customer.name} (Customer)`\n    })),\n    ...(vendorList || []).map((vendor: any) => ({\n      id: vendor.id,\n      name: vendor.name,\n      email: vendor.email,\n      type: 'Vendor',\n      value: vendor.id,\n      label: `${vendor.name} (Vendor)`\n    }))\n  ];\n\n  // Payment methods for receipt vouchers\n  const paymentMethods = [\n    'Cash',\n    'Bank Transfer',\n    'Cheque',\n    'Credit Card',\n    'Debit Card',\n    'Online Payment',\n    'UPI',\n    'Net Banking'\n  ];\n\n  // Get selected entity from form\n  const selectedEntity = watch('entity');\n  const isViewMode = mode === 'view';\n\n  // Index Content - Left Panel (40%)\n  const indexContent = (\n    <TableContainer sx={{ maxHeight: 400 }}>\n      <Table stickyHeader size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Party</TableCell>\n            <TableCell align=\"center\" sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n            <TableCell align=\"right\" sx={{ fontSize: 12, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(sortedVouchers?.length === 0) ? (\n            <TableRow>\n              <TableCell colSpan={5} align=\"center\">No receipt vouchers available</TableCell>\n            </TableRow>\n          ) : (\n            sortedVouchers?.slice(0, 7).map((voucher: any) => (\n              <TableRow \n                key={voucher.id} \n                hover\n                onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                sx={{ cursor: 'pointer' }}\n              >\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }} onClick={() => handleVoucherClick(voucher)}>\n                  {voucher.voucher_number}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {new Date(voucher.date).toLocaleDateString()}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  {voucher.vendor?.name || voucher.customer?.name || 'N/A'}\n                </TableCell>\n                <TableCell align=\"center\" sx={{ fontSize: 11, p: 1 }}>\n                  ₹{voucher.total_amount?.toFixed(2) || '0.00'}\n                </TableCell>\n                <TableCell align=\"right\" sx={{ fontSize: 11, p: 0 }}>\n                  <VoucherContextMenu\n                    voucher={voucher}\n                    voucherType=\"Receipt Voucher\"\n                    onView={() => handleView(voucher.id)}\n                    onEdit={() => handleEdit(voucher.id)}\n                    onDelete={() => handleDelete(voucher)}\n                    onPrint={() => handleGeneratePDF()}\n                    showKebab={true}\n                    onClose={() => {}}\n                  />\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  // Form Content - Right Panel (60%)\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h6\" sx={{ fontSize: 18, fontWeight: 'bold', textAlign: 'center', flex: 1 }}>\n          Receipt Voucher - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType=\"Receipt Voucher\"\n          voucherRoute=\"/vouchers/Financial-Vouchers/receipt-voucher\"\n          currentId={selectedEntity?.id}\n        />\n      </Box>\n\n      {(createMutation.isPending || updateMutation.isPending) && (\n        <Box display=\"flex\" justifyContent=\"center\" my={2}>\n          <CircularProgress />\n        </Box>\n      )}\n\n      <Box \n        component=\"form\" \n        onSubmit={handleSubmit(handleSubmitForm)} \n        sx={{ \n          mt: 2,\n          ...voucherStyles.formContainer\n        }}\n      >\n        <Grid container spacing={2}>\n          <Grid size={6}>\n            <TextField\n              {...control.register('voucher_number')}\n              label=\"Voucher Number\"\n              fullWidth\n              disabled={true}\n              sx={voucherStyles.centerField}\n              InputProps={{\n                readOnly: true,\n                style: { textAlign: 'center', fontWeight: 'bold' }\n              }}\n            />\n          </Grid>\n          <Grid size={6}>\n            <TextField\n              {...control.register('date')}\n              label=\"Date\"\n              type=\"date\"\n              fullWidth\n              disabled={isViewMode}\n              sx={voucherStyles.centerField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              inputProps={{ style: { textAlign: 'center' } }}\n              error={!!errors.date}\n              helperText={errors.date?.message as string}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <SearchableDropdown\n              label=\"Party Name\"\n              options={allParties}\n              value={selectedEntity?.id || null}\n              onChange={(value) => {\n                const party = allParties.find(p => p.id === value);\n                if (party) {\n                  setValue('entity', {\n                    id: party.id,\n                    name: party.name,\n                    type: party.type,\n                    value: party.id,\n                    label: party.name\n                  });\n                }\n              }}\n              getOptionLabel={(option) => option.label}\n              getOptionValue={(option) => option.id}\n              placeholder=\"Select or search party...\"\n              noOptionsText=\"No parties found\"\n              disabled={isViewMode}\n              fullWidth\n              required\n              error={!!errors.entity}\n              helperText={errors.entity?.message as string}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <FormControl fullWidth disabled={isViewMode}>\n              <InputLabel>Payment Method</InputLabel>\n              <Select\n                {...control.register('payment_method')}\n                value={watch('payment_method') || ''}\n                onChange={(e) => setValue('payment_method', e.target.value)}\n                error={!!errors.payment_method}\n                sx={{ height: 56 }} // Match height with Party Name field\n              >\n                {paymentMethods.map((method) => (\n                  <MenuItem key={method} value={method}>\n                    {method}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              {...control.register('reference')}\n              label=\"Reference\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.reference}\n              helperText={errors.reference?.message as string}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              {...control.register('total_amount', {\n                required: 'Amount is required',\n                min: { value: 0.01, message: 'Amount must be greater than 0' },\n                setValueAs: (value) => parseRateField(value)\n              })}\n              label=\"Amount\"\n              type=\"number\"\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.total_amount}\n              helperText={errors.total_amount?.message as string}\n              sx={{\n                ...voucherStyles.rateField,\n                ...voucherStyles.centerField\n              }}\n              InputProps={{\n                inputProps: { \n                  step: \"0.01\",\n                  style: { textAlign: 'center' }\n                }\n              }}\n              onChange={(e) => {\n                const value = parseRateField(e.target.value);\n                setValue('total_amount', value);\n              }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              {...control.register('notes')}\n              label=\"Notes\"\n              multiline\n              rows={3}\n              fullWidth\n              disabled={isViewMode}\n              error={!!errors.notes}\n              helperText={errors.notes?.message as string}\n            />\n          </Grid>\n\n          {totalAmount > 0 && (\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Amount in Words\"\n                value={numberToWords(totalAmount)}\n                disabled\n                InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n                size=\"small\"\n              />\n            </Grid>\n          )}\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box display=\"flex\" gap={2}>\n              {mode !== 'view' && (\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"success\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n              <Button\n                variant=\"outlined\"\n                onClick={handleCreate}\n                sx={{ fontSize: 12 }}\n              >\n                Clear\n              </Button>\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType=\"Receipt Vouchers\"\n        voucherTitle=\"Receipt Voucher\"\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={handleModalOpen}\n        showAllButton={true}\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showFullModal}\n            onClose={handleModalClose}\n            voucherType=\"Receipt Vouchers\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEdit}\n            onView={handleView}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n            vendorList={vendorList}\n          />\n        }\n      />\n      \n      {/* Add Customer Modal */}\n      <AddCustomerModal\n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={handleAddCustomer}\n        loading={addCustomerLoading}\n      />\n\n      {/* Add Vendor Modal */}\n      <AddVendorModal\n        open={showAddVendorModal}\n        onClose={() => setShowAddVendorModal(false)}\n        onAdd={handleAddVendor}\n        loading={addVendorLoading}\n      />\n      \n      {/* Keep context menu for right-click functionality */}\n      {contextMenu && (\n        <VoucherContextMenu\n          voucherType=\"Receipt Voucher\"\n          contextMenu={contextMenu}\n          onClose={handleContextMenuClose}\n          onEdit={(id) => {\n            handleEdit(id);\n            handleContextMenuClose();\n          }}\n          onView={(id) => {\n            handleView(id);\n            handleContextMenuClose();\n          }}\n          onDelete={(id) => {\n            handleDelete(id);\n            handleContextMenuClose();\n          }}\n          showKebab={false}\n          open={true}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{ top: contextMenu.mouseY, left: contextMenu.mouseX }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ReceiptVoucher;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/finished-good-receipt.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LinearProgress' is defined but never used.","line":2,"column":76,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":90,"suggestions":[{"messageId":"removeVar","data":{"varName":"LinearProgress"},"fix":{"range":[100,116],"text":""},"desc":"Remove unused variable 'LinearProgress'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getCompletionPercentage' is assigned a value but never used.","line":41,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"getCompletionPercentage"},"fix":{"range":[1077,1208],"text":""},"desc":"Remove unused variable 'getCompletionPercentage'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Typography, Container, Box, Alert, Grid, Card, CardContent, Chip, LinearProgress } from '@mui/material';\nimport { CheckCircle, Schedule, Build, Inventory } from '@mui/icons-material';\n\nconst FinishedGoodsReceipt: React.FC = () => {\n  // Mock data for demonstration\n  const recentProduction = [\n    {\n      id: 1,\n      productionOrder: 'MO/2425/00000001',\n      bomName: 'Laptop Assembly v1.0',\n      plannedQty: 50,\n      producedQty: 45,\n      goodQty: 42,\n      rejectQty: 3,\n      status: 'completed',\n      completionDate: '2024-08-14'\n    },\n    {\n      id: 2,\n      productionOrder: 'MO/2425/00000002',\n      bomName: 'Desktop PC v2.1',\n      plannedQty: 30,\n      producedQty: 28,\n      goodQty: 25,\n      rejectQty: 3,\n      status: 'in_progress',\n      completionDate: null\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'success';\n      case 'in_progress': return 'warning';\n      case 'quality_check': return 'info';\n      default: return 'default';\n    }\n  };\n\n  const getCompletionPercentage = (produced: number, planned: number) => {\n    return Math.min((produced / planned) * 100, 100);\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box sx={{ mt: 3 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Finished Goods Receipt\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n          Track and receive finished goods from production orders.\n        </Typography>\n\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          <Typography variant=\"body2\">\n            This module shows completed production orders ready for finished goods receipt.\n            Integrate with your production workflow to automatically update inventory.\n          </Typography>\n        </Alert>\n\n        <Typography variant=\"h6\" gutterBottom sx={{ mt: 3 }}>\n          Recent Production Orders\n        </Typography>\n\n        <Grid container spacing={3}>\n          {recentProduction.map((order) => (\n            <Grid size={{ xs: 12, md: 6 }} key={order.id}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\n                    <Box>\n                      <Typography variant=\"h6\" gutterBottom>\n                        {order.productionOrder}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {order.bomName}\n                      </Typography>\n                    </Box>\n                    <Chip \n                      label={order.status.replace('_', ' ')} \n                      color={getStatusColor(order.status)}\n                      size=\"small\"\n                    />\n                  </Box>\n\n                  {/* <Box sx={{ mb: 2 }}>\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                      <Typography variant=\"body2\">\n                        Production Progress\n                      </Typography>\n                      <Typography variant=\"body2\">\n                        {order.producedQty}/{order.plannedQty}\n                      </Typography>\n                    </Box>\n                    <LinearProgress \n                      variant=\"determinate\" \n                      value={getCompletionPercentage(order.producedQty, order.plannedQty)}\n                      sx={{ height: 8, borderRadius: 4 }}\n                    />\n                  </Box> */}\n\n                  <Grid container spacing={2}>\n                    <Grid size={6}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <CheckCircle color=\"success\" fontSize=\"small\" />\n                        <Typography variant=\"body2\">\n                          Good: {order.goodQty}\n                        </Typography>\n                      </Box>\n                    </Grid>\n                    <Grid size={6}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Build color=\"error\" fontSize=\"small\" />\n                        <Typography variant=\"body2\">\n                          Reject: {order.rejectQty}\n                        </Typography>\n                      </Box>\n                    </Grid>\n                  </Grid>\n\n                  {order.completionDate && (\n                    <Box sx={{ mt: 2 }}>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        Completed on: {order.completionDate}\n                      </Typography>\n                    </Box>\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Integration Points\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid size={{ xs: 12, md: 4 }}>\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>\n                    <Inventory color=\"primary\" />\n                    <Typography variant=\"subtitle1\">\n                      Inventory Update\n                    </Typography>\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Automatically update finished goods inventory upon receipt confirmation.\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid size={{ xs: 12, md: 4 }}>\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>\n                    <Schedule color=\"primary\" />\n                    <Typography variant=\"subtitle1\">\n                      Quality Control\n                    </Typography>\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Route goods through quality control before final inventory receipt.\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid size={{ xs: 12, md: 4 }}>\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 1 }}>\n                    <Build color=\"primary\" />\n                    <Typography variant=\"subtitle1\">\n                      Cost Calculation\n                    </Typography>\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Calculate actual production costs vs. planned costs for analysis.\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n\nexport default FinishedGoodsReceipt;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/job-card-temp.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[232,242],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[622,636],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[636,645],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[645,656],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherContextMenu' is defined but never used.","line":51,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherContextMenu"},"fix":{"range":[917,941],"text":""},"desc":"Remove unused variable 'VoucherContextMenu'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherHeaderActions' is defined but never used.","line":52,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherHeaderActions"},"fix":{"range":[990,1016],"text":""},"desc":"Remove unused variable 'VoucherHeaderActions'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":152,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":152,"endColumn":39},{"ruleId":"no-redeclare","severity":2,"message":"'JobCardVoucher' is already defined.","line":152,"column":25,"nodeType":"Identifier","messageId":"redeclared","endLine":152,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":153,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[3566,3593],"text":""},"desc":"Remove unused variable 'router'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'errors' is assigned a value but never used.","line":159,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"errors"},"fix":{"range":[3882,3905],"text":""},"desc":"Remove unused variable 'errors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isFetching' is assigned a value but never used.","line":206,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"isFetching"},"fix":{"range":[4982,4994],"text":""},"desc":"Remove unused variable 'isFetching'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleEdit' is assigned a value but never used.","line":303,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":303,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleEdit"},"fix":{"range":[8271,8378],"text":""},"desc":"Remove unused variable 'handleEdit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleView' is assigned a value but never used.","line":308,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":308,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleView"},"fix":{"range":[8382,8489],"text":""},"desc":"Remove unused variable 'handleView'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDelete' is assigned a value but never used.","line":313,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":313,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDelete"},"fix":{"range":[8493,8664],"text":""},"desc":"Remove unused variable 'handleDelete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":382,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":382,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[10471,10478],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":" \nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Box, \n  Button, \n  TextField, \n  Typography, \n  Grid, \n  IconButton, \n  Alert, \n  CircularProgress, \n  Container, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper, \n  Autocomplete, \n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Card,\n  CardContent,\n  Checkbox,\n  FormControlLabel,\n  Tabs,\n  Tab,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport { \n  Add, \n  Remove,\n  Visibility, \n  Edit, \n  Delete, \n  Save,\n  Cancel,\n  ExpandMore\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../../../lib/api';\nimport { getProducts, getVendors } from '../../../services/masterService';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\n\ninterface JobCardSuppliedMaterial {\n  product_id: number;\n  quantity_supplied: number;\n  unit: string;\n  unit_rate: number;\n  batch_number?: string;\n  lot_number?: string;\n  supply_date?: string;\n}\n\ninterface JobCardReceivedOutput {\n  product_id: number;\n  quantity_received: number;\n  unit: string;\n  unit_rate: number;\n  quality_status?: string;\n  inspection_date?: string;\n  inspection_remarks?: string;\n  batch_number?: string;\n  receipt_date?: string;\n}\n\ninterface JobCardVoucher {\n  id?: number;\n  voucher_number: string;\n  date: string;\n  job_type: string;\n  vendor_id: number;\n  manufacturing_order_id?: number;\n  job_description: string;\n  job_category?: string;\n  expected_completion_date?: string;\n  actual_completion_date?: string;\n  materials_supplied_by: string;\n  delivery_address?: string;\n  transport_mode?: string;\n  job_status: string;\n  quality_specifications?: string;\n  quality_check_required: boolean;\n  notes?: string;\n  status: string;\n  total_amount: number;\n  supplied_materials: JobCardSuppliedMaterial[];\n  received_outputs: JobCardReceivedOutput[];\n}\n\nconst defaultValues: Partial<JobCardVoucher> = {\n  voucher_number: '',\n  date: new Date().toISOString().split('T')[0],\n  job_type: 'outsourcing',\n  materials_supplied_by: 'company',\n  job_status: 'planned',\n  quality_check_required: true,\n  status: 'draft',\n  total_amount: 0,\n  supplied_materials: [],\n  received_outputs: []\n};\n\nconst jobTypeOptions = [\n  { value: 'outsourcing', label: 'Outsourcing' },\n  { value: 'subcontracting', label: 'Subcontracting' },\n  { value: 'processing', label: 'Processing' }\n];\n\nconst jobStatusOptions = [\n  { value: 'planned', label: 'Planned' },\n  { value: 'in_progress', label: 'In Progress' },\n  { value: 'completed', label: 'Completed' },\n  { value: 'cancelled', label: 'Cancelled' }\n];\n\nconst materialsSuppliedByOptions = [\n  { value: 'company', label: 'Company' },\n  { value: 'vendor', label: 'Vendor' },\n  { value: 'mixed', label: 'Mixed' }\n];\n\nconst qualityStatusOptions = [\n  { value: 'accepted', label: 'Accepted' },\n  { value: 'rejected', label: 'Rejected' },\n  { value: 'rework', label: 'Rework Required' }\n];\n\nfunction TabPanel({ children, value, index, ...other }: any) {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`job-card-tabpanel-${index}`}\n      aria-labelledby={`job-card-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nexport default function JobCardVoucher() {\n  const router = useRouter();\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>('create');\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const queryClient = useQueryClient();\n\n  const { control, handleSubmit, watch, setValue, reset, formState: { errors } } = useForm<JobCardVoucher>({\n    defaultValues\n  });\n\n  const {\n    fields: materialFields,\n    append: appendMaterial,\n    remove: removeMaterial\n  } = useFieldArray({\n    control,\n    name: 'supplied_materials'\n  });\n\n  const {\n    fields: outputFields,\n    append: appendOutput,\n    remove: removeOutput\n  } = useFieldArray({\n    control,\n    name: 'received_outputs'\n  });\n\n  // Fetch vouchers list\n  const { data: voucherList, isLoading } = useQuery({\n    queryKey: ['job-card-vouchers'],\n    queryFn: () => api.get('/job-card-vouchers').then(res => res.data),\n  });\n\n  // Fetch vendors\n  const { data: vendorList } = useQuery({\n    queryKey: ['vendors'],\n    queryFn: getVendors\n  });\n\n  // Fetch manufacturing orders\n  const { data: manufacturingOrders } = useQuery({\n    queryKey: ['manufacturing-orders'],\n    queryFn: () => api.get('/manufacturing-orders').then(res => res.data),\n  });\n\n  // Fetch products\n  const { data: productList } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts\n  });\n\n  // Fetch specific voucher\n  const { data: voucherData, isFetching } = useQuery({\n    queryKey: ['job-card-voucher', selectedId],\n    queryFn: () => api.get(`/job-card-vouchers/${selectedId}`).then(res => res.data),\n    enabled: !!selectedId\n  });\n\n  // Fetch next voucher number\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: ['nextJobCardNumber'],\n    queryFn: () => api.get('/job-card-vouchers/next-number').then(res => res.data),\n    enabled: mode === 'create',\n  });\n\n  const sortedVouchers = voucherList ? [...voucherList].sort((a, b) => \n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n  ) : [];\n\n  const latestVouchers = sortedVouchers.slice(0, 10);\n  const productOptions = productList || [];\n  const vendorOptions = vendorList || [];\n  const manufacturingOrderOptions = manufacturingOrders || [];\n\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (voucherData) {\n      reset(voucherData);\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [voucherData, mode, reset, nextVoucherNumber, setValue]);\n\n  // Calculate totals\n  useEffect(() => {\n    const suppliedMaterials = watch('supplied_materials') || [];\n    const receivedOutputs = watch('received_outputs') || [];\n    \n    const suppliedValue = suppliedMaterials.reduce((sum, item) => \n      sum + (item.quantity_supplied * item.unit_rate), 0);\n    const outputValue = receivedOutputs.reduce((sum, item) => \n      sum + (item.quantity_received * item.unit_rate), 0);\n    \n    // Net job work value\n    const total = outputValue - suppliedValue;\n    setValue('total_amount', total);\n  }, [watch('supplied_materials'), watch('received_outputs'), setValue]);\n\n  // Mutations\n  const createMutation = useMutation({\n    mutationFn: (data: JobCardVoucher) => api.post('/job-card-vouchers', data),\n    onSuccess: async () => {\n      queryClient.invalidateQueries({ queryKey: ['job-card-vouchers'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('Error creating job card voucher:', error);\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: JobCardVoucher }) => \n      api.put(`/job-card-vouchers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['job-card-vouchers'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n    },\n    onError: (error: any) => {\n      console.error('Error updating job card voucher:', error);\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/job-card-vouchers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['job-card-vouchers'] });\n      if (selectedId) {\n        setSelectedId(null);\n        setMode('create');\n        reset(defaultValues);\n      }\n    }\n  });\n\n  const onSubmit = (data: JobCardVoucher) => {\n    if (mode === 'edit' && selectedId) {\n      updateMutation.mutate({ id: selectedId, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (voucher: JobCardVoucher) => {\n    setSelectedId(voucher.id!);\n    setMode('edit');\n  };\n\n  const handleView = (voucher: JobCardVoucher) => {\n    setSelectedId(voucher.id!);\n    setMode('view');\n  };\n\n  const handleDelete = (voucherId: number) => {\n    if (window.confirm('Are you sure you want to delete this voucher?')) {\n      deleteMutation.mutate(voucherId);\n    }\n  };\n\n  const handleCancel = () => {\n    setMode('create');\n    setSelectedId(null);\n    reset(defaultValues);\n  };\n\n  const addMaterial = () => {\n    appendMaterial({\n      product_id: 0,\n      quantity_supplied: 0,\n      unit: '',\n      unit_rate: 0\n    });\n  };\n\n  const addOutput = () => {\n    appendOutput({\n      product_id: 0,\n      quantity_received: 0,\n      unit: '',\n      unit_rate: 0\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Job Card Vouchers\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* Voucher List - Left Side  */}\n        <Grid size={{ xs: 12, md: 5 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">Recent Vouchers</Typography>\n                {/* VoucherHeaderActions commented out  */}\n              </Box>\n              \n              <TableContainer component={Paper}>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Voucher No.</TableCell>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Vendor</TableCell>\n                      <TableCell>Job Type</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell align=\"center\">Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {latestVouchers.map((voucher, index) => (\n                      <TableRow key={voucher.id}>\n                        <TableCell>{voucher.voucher_number}</TableCell>\n                        <TableCell>{new Date(voucher.date).toLocaleDateString()}</TableCell>\n                        <TableCell>{voucher.vendor?.name}</TableCell>\n                        <TableCell>\n                          <Chip \n                            label={voucher.job_type} \n                            size=\"small\"\n                            color=\"primary\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          {/* <Chip \n                            label={voucher.job_status} \n                            size=\"small\"\n                            color={voucher.job_status === 'completed' ? 'success' : 'default'}\n                          /> */}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {/* <VoucherContextMenu\n                            voucher={voucher}\n                            voucherType=\"Job Card\"\n                            onView={() => handleView(voucher)}\n                            onEdit={() => handleEdit(voucher)}\n                            onDelete={() => handleDelete(voucher.id!)}\n                            onClose={() => {}}\n                          /> */}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Voucher Form - Right Side  */}\n        <Grid size={{ xs: 12, md: 7 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">\n                  {mode === 'create' && 'Create Job Card Voucher'}\n                  {mode === 'edit' && 'Edit Job Card Voucher'}\n                  {mode === 'view' && 'View Job Card Voucher'}\n                </Typography>\n                {mode !== 'create' && (\n                  <Button \n                    variant=\"outlined\" \n                    onClick={handleCancel}\n                    startIcon={<Cancel />}\n                  >\n                    Cancel\n                  </Button>\n                )}\n              </Box>\n\n              <form onSubmit={handleSubmit(onSubmit)}>\n                {/* Basic Details  */}\n                <Grid container spacing={2} mb={3}>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    {/* <TextField\n                      label=\"Voucher Number\"\n                      {...control.register('voucher_number')}\n                      fullWidth\n                      disabled\n                      value={watch('voucher_number')}\n                    /> */}\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    {/* <TextField\n                      label=\"Date\"\n                      type=\"date\"\n                      {...control.register('date')}\n                      fullWidth\n                      InputLabelProps={{ shrink: true }}\n                      disabled={mode === 'view'}\n                    /> */}\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    <FormControl fullWidth>\n                      <InputLabel>Job Type</InputLabel>\n                      <Select\n                        value={watch('job_type')}\n                        onChange={(e) => setValue('job_type', e.target.value)}\n                        disabled={mode === 'view'}\n                      >\n                        {jobTypeOptions.map((option) => (\n                          <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    <Autocomplete\n                      options={vendorOptions}\n                      getOptionLabel={(option) => option.name || ''}\n                      value={vendorOptions.find((vendor: any) => vendor.id === watch('vendor_id')) || null}\n                      onChange={(_, newValue) => setValue('vendor_id', newValue?.id || 0)}\n                      renderInput={(params) => (\n                        <TextField {...params} label=\"Vendor\" required />\n                      )}\n                      disabled={mode === 'view'}\n                    />\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    <Autocomplete\n                      options={manufacturingOrderOptions}\n                      getOptionLabel={(option) => option.voucher_number || ''}\n                      value={manufacturingOrderOptions.find((mo: any) => mo.id === watch('manufacturing_order_id')) || null}\n                      onChange={(_, newValue) => setValue('manufacturing_order_id', newValue?.id || undefined)}\n                      renderInput={(params) => (\n                        <TextField {...params} label=\"Manufacturing Order (Optional)\" />\n                      )}\n                      disabled={mode === 'view'}\n                    />\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    <FormControl fullWidth>\n                      <InputLabel>Job Status</InputLabel>\n                      <Select\n                        value={watch('job_status')}\n                        onChange={(e) => setValue('job_status', e.target.value)}\n                        disabled={mode === 'view'}\n                      >\n                        {jobStatusOptions.map((option) => (\n                          <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                {/* Job Details  */}\n                <Accordion defaultExpanded>\n                  <AccordionSummary expandIcon={<ExpandMore />}>\n                    <Typography variant=\"h6\">Job Details</Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Grid container spacing={2}>\n                      <Grid size={12}>\n                        <TextField\n                          label=\"Job Description\"\n                          {...control.register('job_description')}\n                          fullWidth\n                          required\n                          multiline\n                          rows={3}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <TextField\n                          label=\"Job Category\"\n                          {...control.register('job_category')}\n                          fullWidth\n                          placeholder=\"e.g., Machining, Assembly, Finishing\"\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <FormControl fullWidth>\n                          <InputLabel>Materials Supplied By</InputLabel>\n                          <Select\n                            value={watch('materials_supplied_by')}\n                            onChange={(e) => setValue('materials_supplied_by', e.target.value)}\n                            disabled={mode === 'view'}\n                          >\n                            {materialsSuppliedByOptions.map((option) => (\n                              <MenuItem key={option.value} value={option.value}>\n                                {option.label}\n                              </MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <TextField\n                          label=\"Expected Completion Date\"\n                          type=\"date\"\n                          {...control.register('expected_completion_date')}\n                          fullWidth\n                          InputLabelProps={{ shrink: true }}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <TextField\n                          label=\"Actual Completion Date\"\n                          type=\"date\"\n                          {...control.register('actual_completion_date')}\n                          fullWidth\n                          InputLabelProps={{ shrink: true }}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <TextField\n                          label=\"Transport Mode\"\n                          {...control.register('transport_mode')}\n                          fullWidth\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={12}>\n                        <TextField\n                          label=\"Delivery Address\"\n                          {...control.register('delivery_address')}\n                          fullWidth\n                          multiline\n                          rows={2}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n\n                {/* Quality Requirements  */}\n                <Accordion>\n                  <AccordionSummary expandIcon={<ExpandMore />}>\n                    <Typography variant=\"h6\">Quality Requirements</Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Grid container spacing={2}>\n                      <Grid size={12}>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={watch('quality_check_required')}\n                              onChange={(e) => setValue('quality_check_required', e.target.checked)}\n                              disabled={mode === 'view'}\n                            />\n                          }\n                          label=\"Quality Check Required\"\n                        />\n                      </Grid>\n                      <Grid size={12}>\n                        <TextField\n                          label=\"Quality Specifications\"\n                          {...control.register('quality_specifications')}\n                          fullWidth\n                          multiline\n                          rows={3}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n\n                {/* Materials and Outputs Tabs  */}\n                <Box mt={3}>\n                  <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)}>\n                    <Tab label=\"Supplied Materials\" />\n                    <Tab label=\"Received Outputs\" />\n                  </Tabs>\n\n                  {/* Supplied Materials Tab  */}\n                  <TabPanel value={activeTab} index={0}>\n                    {mode !== 'view' && (\n                      <Box mb={2}>\n                        <Button\n                          variant=\"outlined\"\n                          onClick={addMaterial}\n                          startIcon={<Add />}\n                        >\n                          Add Material\n                        </Button>\n                      </Box>\n                    )}\n\n                    <TableContainer component={Paper}>\n                      <Table size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Product</TableCell>\n                            <TableCell>Quantity</TableCell>\n                            <TableCell>Unit</TableCell>\n                            <TableCell>Rate</TableCell>\n                            <TableCell>Value</TableCell>\n                            <TableCell>Batch</TableCell>\n                            <TableCell>Supply Date</TableCell>\n                            {mode !== 'view' && <TableCell>Actions</TableCell>}\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {materialFields.map((field, index) => (\n                            <TableRow key={field.id}>\n                              <TableCell>\n                                <Autocomplete\n                                  options={productOptions}\n                                  getOptionLabel={(option) => option.name || ''}\n                                  value={productOptions.find((p: any) => p.id === watch(`supplied_materials.${index}.product_id`)) || null}\n                                  onChange={(_, newValue) => {\n                                    setValue(`supplied_materials.${index}.product_id`, newValue?.id || 0);\n                                    setValue(`supplied_materials.${index}.unit`, newValue?.unit || '');\n                                    setValue(`supplied_materials.${index}.unit_rate`, newValue?.price || 0);\n                                  }}\n                                  renderInput={(params) => (\n                                    <TextField {...params} size=\"small\" />\n                                  )}\n                                  disabled={mode === 'view'}\n                                  sx={{ minWidth: 150 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"number\"\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.quantity_supplied`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.quantity_supplied`, parseFloat(e.target.value) || 0)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 80 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.unit`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.unit`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 70 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"number\"\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.unit_rate`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.unit_rate`, parseFloat(e.target.value) || 0)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 80 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <Typography variant=\"body2\">\n                                  ₹{((watch(`supplied_materials.${index}.quantity_supplied`) || 0) * (watch(`supplied_materials.${index}.unit_rate`) || 0)).toFixed(2)}\n                                </Typography>\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.batch_number`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.batch_number`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 100 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"date\"\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.supply_date`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.supply_date`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 120 }}\n                                />\n                              </TableCell>\n                              {mode !== 'view' && (\n                                <TableCell>\n                                  <IconButton\n                                    onClick={() => removeMaterial(index)}\n                                    size=\"small\"\n                                    color=\"error\"\n                                  >\n                                    <Remove />\n                                  </IconButton>\n                                </TableCell>\n                              )}\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </TabPanel>\n\n                  {/* Received Outputs Tab  */}\n                  <TabPanel value={activeTab} index={1}>\n                    {mode !== 'view' && (\n                      <Box mb={2}>\n                        <Button\n                          variant=\"outlined\"\n                          onClick={addOutput}\n                          startIcon={<Add />}\n                        >\n                          Add Output\n                        </Button>\n                      </Box>\n                    )}\n\n                    <TableContainer component={Paper}>\n                      <Table size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Product</TableCell>\n                            <TableCell>Quantity</TableCell>\n                            <TableCell>Unit</TableCell>\n                            <TableCell>Rate</TableCell>\n                            <TableCell>Value</TableCell>\n                            <TableCell>Quality</TableCell>\n                            <TableCell>Receipt Date</TableCell>\n                            {mode !== 'view' && <TableCell>Actions</TableCell>}\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {outputFields.map((field, index) => (\n                            <TableRow key={field.id}>\n                              <TableCell>\n                                <Autocomplete\n                                  options={productOptions}\n                                  getOptionLabel={(option) => option.name || ''}\n                                  value={productOptions.find((p: any) => p.id === watch(`received_outputs.${index}.product_id`)) || null}\n                                  onChange={(_, newValue) => {\n                                    setValue(`received_outputs.${index}.product_id`, newValue?.id || 0);\n                                    setValue(`received_outputs.${index}.unit`, newValue?.unit || '');\n                                    setValue(`received_outputs.${index}.unit_rate`, newValue?.price || 0);\n                                  }}\n                                  renderInput={(params) => (\n                                    <TextField {...params} size=\"small\" />\n                                  )}\n                                  disabled={mode === 'view'}\n                                  sx={{ minWidth: 150 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"number\"\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.quantity_received`)}\n                                  onChange={(e) => setValue(`received_outputs.${index}.quantity_received`, parseFloat(e.target.value) || 0)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 80 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.unit`)}\n                                  onChange={(e) => setValue(`received_outputs.${index}.unit`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 70 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"number\"\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.unit_rate`)}\n                                  onChange={(e) => setValue(`received_outputs.${index}.unit_rate`, parseFloat(e.target.value) || 0)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 80 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <Typography variant=\"body2\">\n                                  ₹{((watch(`received_outputs.${index}.quantity_received`) || 0) * (watch(`received_outputs.${index}.unit_rate`) || 0)).toFixed(2)}\n                                </Typography>\n                              </TableCell>\n                              <TableCell>\n                                <Select\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.quality_status`) || ''}\n                                  onChange={(e) => setValue(`received_outputs.${index}.quality_status`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 100 }}\n                                >\n                                  {qualityStatusOptions.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                      {option.label}\n                                    </MenuItem>\n                                  ))}\n                                </Select>\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"date\"\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.receipt_date`)}\n                                  onChange={(e) => setValue(`received_outputs.${index}.receipt_date`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 120 }}\n                                />\n                              </TableCell>\n                              {mode !== 'view' && (\n                                <TableCell>\n                                  <IconButton\n                                    onClick={() => removeOutput(index)}\n                                    size=\"small\"\n                                    color=\"error\"\n                                  >\n                                    <Remove />\n                                  </IconButton>\n                                </TableCell>\n                              )}\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </TabPanel>\n                </Box>\n\n                {/* Notes  */}\n                <Grid container spacing={2} mt={2}>\n                  <Grid size={12}>\n                    <TextField\n                      label=\"Notes\"\n                      {...control.register('notes')}\n                      fullWidth\n                      multiline\n                      rows={3}\n                      disabled={mode === 'view'}\n                    />\n                  </Grid>\n                </Grid>\n\n                {/* Total Amount  */}\n                <Box display=\"flex\" justifyContent=\"flex-end\" mt={2}>\n                  <Typography variant=\"h6\">\n                    Net Job Work Value: ₹{(watch('total_amount') || 0).toFixed(2)}\n                  </Typography>\n                </Box>\n\n                {/* Action Buttons  */}\n                {mode !== 'view' && (\n                  <Box mt={3} display=\"flex\" gap={2}>\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={createMutation.isPending || updateMutation.isPending}\n                      startIcon={<Save />}\n                    >\n                      {mode === 'edit' ? 'Update' : 'Create'} Voucher\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      onClick={handleCancel}\n                      startIcon={<Cancel />}\n                    >\n                      Cancel\n                    </Button>\n                  </Box>\n                )}\n              </form>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/job-card.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[232,242],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[622,636],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[636,645],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[645,656],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherContextMenu' is defined but never used.","line":51,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherContextMenu"},"fix":{"range":[917,941],"text":""},"desc":"Remove unused variable 'VoucherContextMenu'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherHeaderActions' is defined but never used.","line":52,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherHeaderActions"},"fix":{"range":[990,1016],"text":""},"desc":"Remove unused variable 'VoucherHeaderActions'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":152,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":152,"endColumn":39},{"ruleId":"no-redeclare","severity":2,"message":"'JobCardVoucher' is already defined.","line":152,"column":25,"nodeType":"Identifier","messageId":"redeclared","endLine":152,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":153,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[3566,3593],"text":""},"desc":"Remove unused variable 'router'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'errors' is assigned a value but never used.","line":159,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"errors"},"fix":{"range":[3882,3905],"text":""},"desc":"Remove unused variable 'errors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isFetching' is assigned a value but never used.","line":206,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"isFetching"},"fix":{"range":[4982,4994],"text":""},"desc":"Remove unused variable 'isFetching'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleEdit' is assigned a value but never used.","line":303,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":303,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleEdit"},"fix":{"range":[8271,8378],"text":""},"desc":"Remove unused variable 'handleEdit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleView' is assigned a value but never used.","line":308,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":308,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleView"},"fix":{"range":[8382,8489],"text":""},"desc":"Remove unused variable 'handleView'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDelete' is assigned a value but never used.","line":313,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":313,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDelete"},"fix":{"range":[8493,8664],"text":""},"desc":"Remove unused variable 'handleDelete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":382,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":382,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[10471,10478],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":" \nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Box, \n  Button, \n  TextField, \n  Typography, \n  Grid, \n  IconButton, \n  Alert, \n  CircularProgress, \n  Container, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper, \n  Autocomplete, \n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Card,\n  CardContent,\n  Checkbox,\n  FormControlLabel,\n  Tabs,\n  Tab,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport { \n  Add, \n  Remove,\n  Visibility, \n  Edit, \n  Delete, \n  Save,\n  Cancel,\n  ExpandMore\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../../../lib/api';\nimport { getProducts, getVendors } from '../../../services/masterService';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\n\ninterface JobCardSuppliedMaterial {\n  product_id: number;\n  quantity_supplied: number;\n  unit: string;\n  unit_rate: number;\n  batch_number?: string;\n  lot_number?: string;\n  supply_date?: string;\n}\n\ninterface JobCardReceivedOutput {\n  product_id: number;\n  quantity_received: number;\n  unit: string;\n  unit_rate: number;\n  quality_status?: string;\n  inspection_date?: string;\n  inspection_remarks?: string;\n  batch_number?: string;\n  receipt_date?: string;\n}\n\ninterface JobCardVoucher {\n  id?: number;\n  voucher_number: string;\n  date: string;\n  job_type: string;\n  vendor_id: number;\n  manufacturing_order_id?: number;\n  job_description: string;\n  job_category?: string;\n  expected_completion_date?: string;\n  actual_completion_date?: string;\n  materials_supplied_by: string;\n  delivery_address?: string;\n  transport_mode?: string;\n  job_status: string;\n  quality_specifications?: string;\n  quality_check_required: boolean;\n  notes?: string;\n  status: string;\n  total_amount: number;\n  supplied_materials: JobCardSuppliedMaterial[];\n  received_outputs: JobCardReceivedOutput[];\n}\n\nconst defaultValues: Partial<JobCardVoucher> = {\n  voucher_number: '',\n  date: new Date().toISOString().split('T')[0],\n  job_type: 'outsourcing',\n  materials_supplied_by: 'company',\n  job_status: 'planned',\n  quality_check_required: true,\n  status: 'draft',\n  total_amount: 0,\n  supplied_materials: [],\n  received_outputs: []\n};\n\nconst jobTypeOptions = [\n  { value: 'outsourcing', label: 'Outsourcing' },\n  { value: 'subcontracting', label: 'Subcontracting' },\n  { value: 'processing', label: 'Processing' }\n];\n\nconst jobStatusOptions = [\n  { value: 'planned', label: 'Planned' },\n  { value: 'in_progress', label: 'In Progress' },\n  { value: 'completed', label: 'Completed' },\n  { value: 'cancelled', label: 'Cancelled' }\n];\n\nconst materialsSuppliedByOptions = [\n  { value: 'company', label: 'Company' },\n  { value: 'vendor', label: 'Vendor' },\n  { value: 'mixed', label: 'Mixed' }\n];\n\nconst qualityStatusOptions = [\n  { value: 'accepted', label: 'Accepted' },\n  { value: 'rejected', label: 'Rejected' },\n  { value: 'rework', label: 'Rework Required' }\n];\n\nfunction TabPanel({ children, value, index, ...other }: any) {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`job-card-tabpanel-${index}`}\n      aria-labelledby={`job-card-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  );\n}\n\nexport default function JobCardVoucher() {\n  const router = useRouter();\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>('create');\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const queryClient = useQueryClient();\n\n  const { control, handleSubmit, watch, setValue, reset, formState: { errors } } = useForm<JobCardVoucher>({\n    defaultValues\n  });\n\n  const {\n    fields: materialFields,\n    append: appendMaterial,\n    remove: removeMaterial\n  } = useFieldArray({\n    control,\n    name: 'supplied_materials'\n  });\n\n  const {\n    fields: outputFields,\n    append: appendOutput,\n    remove: removeOutput\n  } = useFieldArray({\n    control,\n    name: 'received_outputs'\n  });\n\n  // Fetch vouchers list\n  const { data: voucherList, isLoading } = useQuery({\n    queryKey: ['job-card-vouchers'],\n    queryFn: () => api.get('/job-card-vouchers').then(res => res.data),\n  });\n\n  // Fetch vendors\n  const { data: vendorList } = useQuery({\n    queryKey: ['vendors'],\n    queryFn: getVendors\n  });\n\n  // Fetch manufacturing orders\n  const { data: manufacturingOrders } = useQuery({\n    queryKey: ['manufacturing-orders'],\n    queryFn: () => api.get('/manufacturing-orders').then(res => res.data),\n  });\n\n  // Fetch products\n  const { data: productList } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts\n  });\n\n  // Fetch specific voucher\n  const { data: voucherData, isFetching } = useQuery({\n    queryKey: ['job-card-voucher', selectedId],\n    queryFn: () => api.get(`/job-card-vouchers/${selectedId}`).then(res => res.data),\n    enabled: !!selectedId\n  });\n\n  // Fetch next voucher number\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: ['nextJobCardNumber'],\n    queryFn: () => api.get('/job-card-vouchers/next-number').then(res => res.data),\n    enabled: mode === 'create',\n  });\n\n  const sortedVouchers = voucherList ? [...voucherList].sort((a, b) => \n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n  ) : [];\n\n  const latestVouchers = sortedVouchers.slice(0, 10);\n  const productOptions = productList || [];\n  const vendorOptions = vendorList || [];\n  const manufacturingOrderOptions = manufacturingOrders || [];\n\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (voucherData) {\n      reset(voucherData);\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [voucherData, mode, reset, nextVoucherNumber, setValue]);\n\n  // Calculate totals\n  useEffect(() => {\n    const suppliedMaterials = watch('supplied_materials') || [];\n    const receivedOutputs = watch('received_outputs') || [];\n    \n    const suppliedValue = suppliedMaterials.reduce((sum, item) => \n      sum + (item.quantity_supplied * item.unit_rate), 0);\n    const outputValue = receivedOutputs.reduce((sum, item) => \n      sum + (item.quantity_received * item.unit_rate), 0);\n    \n    // Net job work value\n    const total = outputValue - suppliedValue;\n    setValue('total_amount', total);\n  }, [watch('supplied_materials'), watch('received_outputs'), setValue]);\n\n  // Mutations\n  const createMutation = useMutation({\n    mutationFn: (data: JobCardVoucher) => api.post('/job-card-vouchers', data),\n    onSuccess: async () => {\n      queryClient.invalidateQueries({ queryKey: ['job-card-vouchers'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('Error creating job card voucher:', error);\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: JobCardVoucher }) => \n      api.put(`/job-card-vouchers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['job-card-vouchers'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n    },\n    onError: (error: any) => {\n      console.error('Error updating job card voucher:', error);\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/job-card-vouchers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['job-card-vouchers'] });\n      if (selectedId) {\n        setSelectedId(null);\n        setMode('create');\n        reset(defaultValues);\n      }\n    }\n  });\n\n  const onSubmit = (data: JobCardVoucher) => {\n    if (mode === 'edit' && selectedId) {\n      updateMutation.mutate({ id: selectedId, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (voucher: JobCardVoucher) => {\n    setSelectedId(voucher.id!);\n    setMode('edit');\n  };\n\n  const handleView = (voucher: JobCardVoucher) => {\n    setSelectedId(voucher.id!);\n    setMode('view');\n  };\n\n  const handleDelete = (voucherId: number) => {\n    if (window.confirm('Are you sure you want to delete this voucher?')) {\n      deleteMutation.mutate(voucherId);\n    }\n  };\n\n  const handleCancel = () => {\n    setMode('create');\n    setSelectedId(null);\n    reset(defaultValues);\n  };\n\n  const addMaterial = () => {\n    appendMaterial({\n      product_id: 0,\n      quantity_supplied: 0,\n      unit: '',\n      unit_rate: 0\n    });\n  };\n\n  const addOutput = () => {\n    appendOutput({\n      product_id: 0,\n      quantity_received: 0,\n      unit: '',\n      unit_rate: 0\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Job Card Vouchers\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* Voucher List - Left Side  */}\n        <Grid size={{ xs: 12, md: 5 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">Recent Vouchers</Typography>\n                {/* VoucherHeaderActions commented out  */}\n              </Box>\n              \n              <TableContainer component={Paper}>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Voucher No.</TableCell>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Vendor</TableCell>\n                      <TableCell>Job Type</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell align=\"center\">Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {latestVouchers.map((voucher, index) => (\n                      <TableRow key={voucher.id}>\n                        <TableCell>{voucher.voucher_number}</TableCell>\n                        <TableCell>{new Date(voucher.date).toLocaleDateString()}</TableCell>\n                        <TableCell>{voucher.vendor?.name}</TableCell>\n                        <TableCell>\n                          <Chip \n                            label={voucher.job_type} \n                            size=\"small\"\n                            color=\"primary\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          {/* <Chip \n                            label={voucher.job_status} \n                            size=\"small\"\n                            color={voucher.job_status === 'completed' ? 'success' : 'default'}\n                          /> */}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {/* <VoucherContextMenu\n                            voucher={voucher}\n                            voucherType=\"Job Card\"\n                            onView={() => handleView(voucher)}\n                            onEdit={() => handleEdit(voucher)}\n                            onDelete={() => handleDelete(voucher.id!)}\n                            onClose={() => {}}\n                          /> */}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Voucher Form - Right Side  */}\n        <Grid size={{ xs: 12, md: 7 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">\n                  {mode === 'create' && 'Create Job Card Voucher'}\n                  {mode === 'edit' && 'Edit Job Card Voucher'}\n                  {mode === 'view' && 'View Job Card Voucher'}\n                </Typography>\n                {mode !== 'create' && (\n                  <Button \n                    variant=\"outlined\" \n                    onClick={handleCancel}\n                    startIcon={<Cancel />}\n                  >\n                    Cancel\n                  </Button>\n                )}\n              </Box>\n\n              <form onSubmit={handleSubmit(onSubmit)}>\n                {/* Basic Details  */}\n                <Grid container spacing={2} mb={3}>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    {/* <TextField\n                      label=\"Voucher Number\"\n                      {...control.register('voucher_number')}\n                      fullWidth\n                      disabled\n                      value={watch('voucher_number')}\n                    /> */}\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    {/* <TextField\n                      label=\"Date\"\n                      type=\"date\"\n                      {...control.register('date')}\n                      fullWidth\n                      InputLabelProps={{ shrink: true }}\n                      disabled={mode === 'view'}\n                    /> */}\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    <FormControl fullWidth>\n                      <InputLabel>Job Type</InputLabel>\n                      <Select\n                        value={watch('job_type')}\n                        onChange={(e) => setValue('job_type', e.target.value)}\n                        disabled={mode === 'view'}\n                      >\n                        {jobTypeOptions.map((option) => (\n                          <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    <Autocomplete\n                      options={vendorOptions}\n                      getOptionLabel={(option) => option.name || ''}\n                      value={vendorOptions.find((vendor: any) => vendor.id === watch('vendor_id')) || null}\n                      onChange={(_, newValue) => setValue('vendor_id', newValue?.id || 0)}\n                      renderInput={(params) => (\n                        <TextField {...params} label=\"Vendor\" required />\n                      )}\n                      disabled={mode === 'view'}\n                    />\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    <Autocomplete\n                      options={manufacturingOrderOptions}\n                      getOptionLabel={(option) => option.voucher_number || ''}\n                      value={manufacturingOrderOptions.find((mo: any) => mo.id === watch('manufacturing_order_id')) || null}\n                      onChange={(_, newValue) => setValue('manufacturing_order_id', newValue?.id || undefined)}\n                      renderInput={(params) => (\n                        <TextField {...params} label=\"Manufacturing Order (Optional)\" />\n                      )}\n                      disabled={mode === 'view'}\n                    />\n                  </Grid>\n                  <Grid size={{ xs: 12, sm: 6 }}>\n                    <FormControl fullWidth>\n                      <InputLabel>Job Status</InputLabel>\n                      <Select\n                        value={watch('job_status')}\n                        onChange={(e) => setValue('job_status', e.target.value)}\n                        disabled={mode === 'view'}\n                      >\n                        {jobStatusOptions.map((option) => (\n                          <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Grid>\n                </Grid>\n\n                {/* Job Details  */}\n                <Accordion defaultExpanded>\n                  <AccordionSummary expandIcon={<ExpandMore />}>\n                    <Typography variant=\"h6\">Job Details</Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Grid container spacing={2}>\n                      <Grid size={12}>\n                        <TextField\n                          label=\"Job Description\"\n                          {...control.register('job_description')}\n                          fullWidth\n                          required\n                          multiline\n                          rows={3}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <TextField\n                          label=\"Job Category\"\n                          {...control.register('job_category')}\n                          fullWidth\n                          placeholder=\"e.g., Machining, Assembly, Finishing\"\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <FormControl fullWidth>\n                          <InputLabel>Materials Supplied By</InputLabel>\n                          <Select\n                            value={watch('materials_supplied_by')}\n                            onChange={(e) => setValue('materials_supplied_by', e.target.value)}\n                            disabled={mode === 'view'}\n                          >\n                            {materialsSuppliedByOptions.map((option) => (\n                              <MenuItem key={option.value} value={option.value}>\n                                {option.label}\n                              </MenuItem>\n                            ))}\n                          </Select>\n                        </FormControl>\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <TextField\n                          label=\"Expected Completion Date\"\n                          type=\"date\"\n                          {...control.register('expected_completion_date')}\n                          fullWidth\n                          InputLabelProps={{ shrink: true }}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <TextField\n                          label=\"Actual Completion Date\"\n                          type=\"date\"\n                          {...control.register('actual_completion_date')}\n                          fullWidth\n                          InputLabelProps={{ shrink: true }}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={{ xs: 12, sm: 6 }}>\n                        <TextField\n                          label=\"Transport Mode\"\n                          {...control.register('transport_mode')}\n                          fullWidth\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                      <Grid size={12}>\n                        <TextField\n                          label=\"Delivery Address\"\n                          {...control.register('delivery_address')}\n                          fullWidth\n                          multiline\n                          rows={2}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n\n                {/* Quality Requirements  */}\n                <Accordion>\n                  <AccordionSummary expandIcon={<ExpandMore />}>\n                    <Typography variant=\"h6\">Quality Requirements</Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Grid container spacing={2}>\n                      <Grid size={12}>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={watch('quality_check_required')}\n                              onChange={(e) => setValue('quality_check_required', e.target.checked)}\n                              disabled={mode === 'view'}\n                            />\n                          }\n                          label=\"Quality Check Required\"\n                        />\n                      </Grid>\n                      <Grid size={12}>\n                        <TextField\n                          label=\"Quality Specifications\"\n                          {...control.register('quality_specifications')}\n                          fullWidth\n                          multiline\n                          rows={3}\n                          disabled={mode === 'view'}\n                        />\n                      </Grid>\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n\n                {/* Materials and Outputs Tabs  */}\n                <Box mt={3}>\n                  <Tabs value={activeTab} onChange={(_, newValue) => setActiveTab(newValue)}>\n                    <Tab label=\"Supplied Materials\" />\n                    <Tab label=\"Received Outputs\" />\n                  </Tabs>\n\n                  {/* Supplied Materials Tab  */}\n                  <TabPanel value={activeTab} index={0}>\n                    {mode !== 'view' && (\n                      <Box mb={2}>\n                        <Button\n                          variant=\"outlined\"\n                          onClick={addMaterial}\n                          startIcon={<Add />}\n                        >\n                          Add Material\n                        </Button>\n                      </Box>\n                    )}\n\n                    <TableContainer component={Paper}>\n                      <Table size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Product</TableCell>\n                            <TableCell>Quantity</TableCell>\n                            <TableCell>Unit</TableCell>\n                            <TableCell>Rate</TableCell>\n                            <TableCell>Value</TableCell>\n                            <TableCell>Batch</TableCell>\n                            <TableCell>Supply Date</TableCell>\n                            {mode !== 'view' && <TableCell>Actions</TableCell>}\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {materialFields.map((field, index) => (\n                            <TableRow key={field.id}>\n                              <TableCell>\n                                <Autocomplete\n                                  options={productOptions}\n                                  getOptionLabel={(option) => option.name || ''}\n                                  value={productOptions.find((p: any) => p.id === watch(`supplied_materials.${index}.product_id`)) || null}\n                                  onChange={(_, newValue) => {\n                                    setValue(`supplied_materials.${index}.product_id`, newValue?.id || 0);\n                                    setValue(`supplied_materials.${index}.unit`, newValue?.unit || '');\n                                    setValue(`supplied_materials.${index}.unit_rate`, newValue?.price || 0);\n                                  }}\n                                  renderInput={(params) => (\n                                    <TextField {...params} size=\"small\" />\n                                  )}\n                                  disabled={mode === 'view'}\n                                  sx={{ minWidth: 150 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"number\"\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.quantity_supplied`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.quantity_supplied`, parseFloat(e.target.value) || 0)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 80 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.unit`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.unit`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 70 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"number\"\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.unit_rate`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.unit_rate`, parseFloat(e.target.value) || 0)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 80 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <Typography variant=\"body2\">\n                                  ₹{((watch(`supplied_materials.${index}.quantity_supplied`) || 0) * (watch(`supplied_materials.${index}.unit_rate`) || 0)).toFixed(2)}\n                                </Typography>\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.batch_number`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.batch_number`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 100 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"date\"\n                                  size=\"small\"\n                                  value={watch(`supplied_materials.${index}.supply_date`)}\n                                  onChange={(e) => setValue(`supplied_materials.${index}.supply_date`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 120 }}\n                                />\n                              </TableCell>\n                              {mode !== 'view' && (\n                                <TableCell>\n                                  <IconButton\n                                    onClick={() => removeMaterial(index)}\n                                    size=\"small\"\n                                    color=\"error\"\n                                  >\n                                    <Remove />\n                                  </IconButton>\n                                </TableCell>\n                              )}\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </TabPanel>\n\n                  {/* Received Outputs Tab  */}\n                  <TabPanel value={activeTab} index={1}>\n                    {mode !== 'view' && (\n                      <Box mb={2}>\n                        <Button\n                          variant=\"outlined\"\n                          onClick={addOutput}\n                          startIcon={<Add />}\n                        >\n                          Add Output\n                        </Button>\n                      </Box>\n                    )}\n\n                    <TableContainer component={Paper}>\n                      <Table size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Product</TableCell>\n                            <TableCell>Quantity</TableCell>\n                            <TableCell>Unit</TableCell>\n                            <TableCell>Rate</TableCell>\n                            <TableCell>Value</TableCell>\n                            <TableCell>Quality</TableCell>\n                            <TableCell>Receipt Date</TableCell>\n                            {mode !== 'view' && <TableCell>Actions</TableCell>}\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {outputFields.map((field, index) => (\n                            <TableRow key={field.id}>\n                              <TableCell>\n                                <Autocomplete\n                                  options={productOptions}\n                                  getOptionLabel={(option) => option.name || ''}\n                                  value={productOptions.find((p: any) => p.id === watch(`received_outputs.${index}.product_id`)) || null}\n                                  onChange={(_, newValue) => {\n                                    setValue(`received_outputs.${index}.product_id`, newValue?.id || 0);\n                                    setValue(`received_outputs.${index}.unit`, newValue?.unit || '');\n                                    setValue(`received_outputs.${index}.unit_rate`, newValue?.price || 0);\n                                  }}\n                                  renderInput={(params) => (\n                                    <TextField {...params} size=\"small\" />\n                                  )}\n                                  disabled={mode === 'view'}\n                                  sx={{ minWidth: 150 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"number\"\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.quantity_received`)}\n                                  onChange={(e) => setValue(`received_outputs.${index}.quantity_received`, parseFloat(e.target.value) || 0)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 80 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.unit`)}\n                                  onChange={(e) => setValue(`received_outputs.${index}.unit`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 70 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"number\"\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.unit_rate`)}\n                                  onChange={(e) => setValue(`received_outputs.${index}.unit_rate`, parseFloat(e.target.value) || 0)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 80 }}\n                                />\n                              </TableCell>\n                              <TableCell>\n                                <Typography variant=\"body2\">\n                                  ₹{((watch(`received_outputs.${index}.quantity_received`) || 0) * (watch(`received_outputs.${index}.unit_rate`) || 0)).toFixed(2)}\n                                </Typography>\n                              </TableCell>\n                              <TableCell>\n                                <Select\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.quality_status`) || ''}\n                                  onChange={(e) => setValue(`received_outputs.${index}.quality_status`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 100 }}\n                                >\n                                  {qualityStatusOptions.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                      {option.label}\n                                    </MenuItem>\n                                  ))}\n                                </Select>\n                              </TableCell>\n                              <TableCell>\n                                <TextField\n                                  type=\"date\"\n                                  size=\"small\"\n                                  value={watch(`received_outputs.${index}.receipt_date`)}\n                                  onChange={(e) => setValue(`received_outputs.${index}.receipt_date`, e.target.value)}\n                                  disabled={mode === 'view'}\n                                  sx={{ width: 120 }}\n                                />\n                              </TableCell>\n                              {mode !== 'view' && (\n                                <TableCell>\n                                  <IconButton\n                                    onClick={() => removeOutput(index)}\n                                    size=\"small\"\n                                    color=\"error\"\n                                  >\n                                    <Remove />\n                                  </IconButton>\n                                </TableCell>\n                              )}\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </TabPanel>\n                </Box>\n\n                {/* Notes  */}\n                <Grid container spacing={2} mt={2}>\n                  <Grid size={12}>\n                    <TextField\n                      label=\"Notes\"\n                      {...control.register('notes')}\n                      fullWidth\n                      multiline\n                      rows={3}\n                      disabled={mode === 'view'}\n                    />\n                  </Grid>\n                </Grid>\n\n                {/* Total Amount  */}\n                <Box display=\"flex\" justifyContent=\"flex-end\" mt={2}>\n                  <Typography variant=\"h6\">\n                    Net Job Work Value: ₹{(watch('total_amount') || 0).toFixed(2)}\n                  </Typography>\n                </Box>\n\n                {/* Action Buttons  */}\n                {mode !== 'view' && (\n                  <Box mt={3} display=\"flex\" gap={2}>\n                    <Button\n                      type=\"submit\"\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={createMutation.isPending || updateMutation.isPending}\n                      startIcon={<Save />}\n                    >\n                      {mode === 'edit' ? 'Update' : 'Create'} Voucher\n                    </Button>\n                    <Button\n                      variant=\"outlined\"\n                      onClick={handleCancel}\n                      startIcon={<Cancel />}\n                    >\n                      Cancel\n                    </Button>\n                  </Box>\n                )}\n              </form>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/manufacturing-journal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[166,177],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[177,191],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[215,230],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[230,240],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Table"},"fix":{"range":[275,285],"text":""},"desc":"Remove unused variable 'Table'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableBody"},"fix":{"range":[285,299],"text":""},"desc":"Remove unused variable 'TableBody'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableCell"},"fix":{"range":[299,313],"text":""},"desc":"Remove unused variable 'TableCell'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableContainer"},"fix":{"range":[313,332],"text":""},"desc":"Remove unused variable 'TableContainer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableHead"},"fix":{"range":[332,346],"text":""},"desc":"Remove unused variable 'TableHead'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableRow"},"fix":{"range":[346,359],"text":""},"desc":"Remove unused variable 'TableRow'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[359,369],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Autocomplete' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Autocomplete"},"fix":{"range":[369,386],"text":""},"desc":"Remove unused variable 'Autocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[386,402],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[402,416],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[416,426],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[426,438],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[438,446],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tabs"},"fix":{"range":[469,477],"text":""},"desc":"Remove unused variable 'Tabs'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tab' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tab"},"fix":{"range":[477,484],"text":""},"desc":"Remove unused variable 'Tab'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Accordion' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Accordion"},"fix":{"range":[484,497],"text":""},"desc":"Remove unused variable 'Accordion'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionSummary' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionSummary"},"fix":{"range":[497,517],"text":""},"desc":"Remove unused variable 'AccordionSummary'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionDetails' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionDetails"},"fix":{"range":[517,537],"text":""},"desc":"Remove unused variable 'AccordionDetails'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[574,578],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Remove' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Remove"},"fix":{"range":[577,588],"text":""},"desc":"Remove unused variable 'Remove'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[588,602],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[602,611],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[611,622],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Save' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Save"},"fix":{"range":[622,631],"text":""},"desc":"Remove unused variable 'Save'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Cancel' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Cancel"},"fix":{"range":[631,641],"text":""},"desc":"Remove unused variable 'Cancel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ExpandMore' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"ExpandMore"},"fix":{"range":[641,655],"text":""},"desc":"Remove unused variable 'ExpandMore'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherContextMenu' is defined but never used.","line":48,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherContextMenu"},"fix":{"range":[871,895],"text":""},"desc":"Remove unused variable 'VoucherContextMenu'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherHeaderActions' is defined but never used.","line":49,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherHeaderActions"},"fix":{"range":[944,970],"text":""},"desc":"Remove unused variable 'VoucherHeaderActions'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":124,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":124,"endColumn":52},{"ruleId":"no-redeclare","severity":2,"message":"'ManufacturingJournalVoucher' is already defined.","line":124,"column":25,"nodeType":"Identifier","messageId":"redeclared","endLine":124,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":125,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[2791,2818],"text":""},"desc":"Remove unused variable 'router'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'activeTab' is assigned a value but never used.","line":128,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"activeTab"},"fix":{"range":[2971,2980],"text":""},"desc":"Remove unused variable 'activeTab'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setActiveTab' is assigned a value but never used.","line":128,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"setActiveTab"},"fix":{"range":[2980,2994],"text":""},"desc":"Remove unused variable 'setActiveTab'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSubmit' is assigned a value but never used.","line":131,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSubmit"},"fix":{"range":[3069,3083],"text":""},"desc":"Remove unused variable 'handleSubmit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'errors' is assigned a value but never used.","line":131,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"errors"},"fix":{"range":[3107,3130],"text":""},"desc":"Remove unused variable 'errors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'finishedProductFields' is assigned a value but never used.","line":136,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"finishedProductFields"},"fix":{"range":[3213,3243],"text":""},"desc":"Remove unused variable 'finishedProductFields'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'appendFinishedProduct' is assigned a value but never used.","line":137,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"appendFinishedProduct"},"fix":{"range":[3242,3277],"text":""},"desc":"Remove unused variable 'appendFinishedProduct'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'removeFinishedProduct' is assigned a value but never used.","line":138,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"removeFinishedProduct"},"fix":{"range":[3277,3312],"text":""},"desc":"Remove unused variable 'removeFinishedProduct'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'materialFields' is assigned a value but never used.","line":145,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"materialFields"},"fix":{"range":[3399,3422],"text":""},"desc":"Remove unused variable 'materialFields'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'appendMaterial' is assigned a value but never used.","line":146,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"appendMaterial"},"fix":{"range":[3421,3449],"text":""},"desc":"Remove unused variable 'appendMaterial'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'removeMaterial' is assigned a value but never used.","line":147,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"removeMaterial"},"fix":{"range":[3449,3477],"text":""},"desc":"Remove unused variable 'removeMaterial'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'byproductFields' is assigned a value but never used.","line":154,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"byproductFields"},"fix":{"range":[3565,3589],"text":""},"desc":"Remove unused variable 'byproductFields'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'appendByproduct' is assigned a value but never used.","line":155,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"appendByproduct"},"fix":{"range":[3588,3617],"text":""},"desc":"Remove unused variable 'appendByproduct'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'removeByproduct' is assigned a value but never used.","line":156,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":156,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"removeByproduct"},"fix":{"range":[3617,3646],"text":""},"desc":"Remove unused variable 'removeByproduct'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isFetching' is assigned a value but never used.","line":187,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"isFetching"},"fix":{"range":[4461,4473],"text":""},"desc":"Remove unused variable 'isFetching'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'latestVouchers' is assigned a value but never used.","line":204,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":204,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"latestVouchers"},"fix":{"range":[5133,5184],"text":""},"desc":"Remove unused variable 'latestVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'productOptions' is assigned a value but never used.","line":205,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"productOptions"},"fix":{"range":[5187,5228],"text":""},"desc":"Remove unused variable 'productOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'manufacturingOrderOptions' is assigned a value but never used.","line":206,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":206,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"manufacturingOrderOptions"},"fix":{"range":[5231,5291],"text":""},"desc":"Remove unused variable 'manufacturingOrderOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'bomOptions' is assigned a value but never used.","line":207,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"bomOptions"},"fix":{"range":[5294,5327],"text":""},"desc":"Remove unused variable 'bomOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalCost' is assigned a value but never used.","line":224,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":224,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalCost"},"fix":{"range":[5844,5902],"text":""},"desc":"Remove unused variable 'totalCost'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onSubmit' is assigned a value but never used.","line":270,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":270,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"onSubmit"},"fix":{"range":[7543,7755],"text":""},"desc":"Remove unused variable 'onSubmit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleEdit' is assigned a value but never used.","line":278,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":278,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleEdit"},"fix":{"range":[7759,7879],"text":""},"desc":"Remove unused variable 'handleEdit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleView' is assigned a value but never used.","line":283,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":283,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleView"},"fix":{"range":[7883,8003],"text":""},"desc":"Remove unused variable 'handleView'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDelete' is assigned a value but never used.","line":288,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":288,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDelete"},"fix":{"range":[8007,8178],"text":""},"desc":"Remove unused variable 'handleDelete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCancel' is assigned a value but never used.","line":294,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCancel"},"fix":{"range":[8182,8289],"text":""},"desc":"Remove unused variable 'handleCancel'."}]},{"ruleId":"no-undef","severity":2,"message":"'ManufacturingJournal' is not defined.","line":655,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":655,"endColumn":36}],"suppressedMessages":[],"errorCount":60,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Box, \n  Button, \n  TextField, \n  Typography, \n  Grid, \n  IconButton, \n  Alert, \n  CircularProgress, \n  Container, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper, \n  Autocomplete, \n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Card,\n  CardContent,\n  Tabs,\n  Tab,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport { \n  Add, \n  Remove,\n  Visibility, \n  Edit, \n  Delete, \n  Save,\n  Cancel,\n  ExpandMore\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../../../lib/api';\nimport { getProducts } from '../../../services/masterService';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\n\ninterface ManufacturingJournalFinishedProduct {\n  product_id: number;\n  quantity: number;\n  unit: string;\n  unit_cost: number;\n  quality_grade?: string;\n  batch_number?: string;\n  lot_number?: string;\n}\n\ninterface ManufacturingJournalMaterial {\n  product_id: number;\n  quantity_consumed: number;\n  unit: string;\n  unit_cost: number;\n  batch_number?: string;\n  lot_number?: string;\n}\n\ninterface ManufacturingJournalByproduct {\n  product_id: number;\n  quantity: number;\n  unit: string;\n  unit_value: number;\n  batch_number?: string;\n  condition?: string;\n}\n\ninterface ManufacturingJournalVoucher {\n  id?: number;\n  voucher_number: string;\n  date: string;\n  manufacturing_order_id: number;\n  bom_id: number;\n  date_of_manufacture: string;\n  shift?: string;\n  operator?: string;\n  supervisor?: string;\n  machine_used?: string;\n  finished_quantity: number;\n  scrap_quantity: number;\n  rework_quantity: number;\n  byproduct_quantity: number;\n  material_cost: number;\n  labor_cost: number;\n  overhead_cost: number;\n  quality_grade?: string;\n  quality_remarks?: string;\n  narration?: string;\n  notes?: string;\n  status: string;\n  finished_products: ManufacturingJournalFinishedProduct[];\n  consumed_materials: ManufacturingJournalMaterial[];\n  byproducts: ManufacturingJournalByproduct[];\n}\n\nconst defaultValues: Partial<ManufacturingJournalVoucher> = {\n  voucher_number: '',\n  date: new Date().toISOString().split('T')[0],\n  date_of_manufacture: new Date().toISOString().split('T')[0],\n  finished_quantity: 0,\n  scrap_quantity: 0,\n  rework_quantity: 0,\n  byproduct_quantity: 0,\n  material_cost: 0,\n  labor_cost: 0,\n  overhead_cost: 0,\n  status: 'draft',\n  finished_products: [],\n  consumed_materials: [],\n  byproducts: []\n};\n\nexport default function ManufacturingJournalVoucher() {\n  const router = useRouter();\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>('create');\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const queryClient = useQueryClient();\n\n  const { control, handleSubmit, watch, setValue, reset, formState: { errors } } = useForm<ManufacturingJournalVoucher>({\n    defaultValues\n  });\n\n  const {\n    fields: finishedProductFields,\n    append: appendFinishedProduct,\n    remove: removeFinishedProduct\n  } = useFieldArray({\n    control,\n    name: 'finished_products'\n  });\n\n  const {\n    fields: materialFields,\n    append: appendMaterial,\n    remove: removeMaterial\n  } = useFieldArray({\n    control,\n    name: 'consumed_materials'\n  });\n\n  const {\n    fields: byproductFields,\n    append: appendByproduct,\n    remove: removeByproduct\n  } = useFieldArray({\n    control,\n    name: 'byproducts'\n  });\n\n  // Fetch vouchers list\n  const { data: voucherList, isLoading } = useQuery({\n    queryKey: ['manufacturing-journal-vouchers'],\n    queryFn: () => api.get('/manufacturing-journal-vouchers').then(res => res.data),\n  });\n\n  // Fetch manufacturing orders\n  const { data: manufacturingOrders } = useQuery({\n    queryKey: ['manufacturing-orders'],\n    queryFn: () => api.get('/manufacturing-orders').then(res => res.data),\n  });\n\n  // Fetch BOMs\n  const { data: bomList } = useQuery({\n    queryKey: ['boms'],\n    queryFn: () => api.get('/boms').then(res => res.data),\n  });\n\n  // Fetch products\n  const { data: productList } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts\n  });\n\n  // Fetch specific voucher\n  const { data: voucherData, isFetching } = useQuery({\n    queryKey: ['manufacturing-journal-voucher', selectedId],\n    queryFn: () => api.get(`/manufacturing-journal-vouchers/${selectedId}`).then(res => res.data),\n    enabled: !!selectedId\n  });\n\n  // Fetch next voucher number\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: ['nextManufacturingJournalNumber'],\n    queryFn: () => api.get('/manufacturing-journal-vouchers/next-number').then(res => res.data),\n    enabled: mode === 'create',\n  });\n\n  const sortedVouchers = voucherList ? [...voucherList].sort((a, b) => \n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n  ) : [];\n\n  const latestVouchers = sortedVouchers.slice(0, 10);\n  const productOptions = productList || [];\n  const manufacturingOrderOptions = manufacturingOrders || [];\n  const bomOptions = bomList || [];\n\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (voucherData) {\n      reset(voucherData);\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [voucherData, mode, reset, nextVoucherNumber, setValue]);\n\n  // Calculate totals\n  useEffect(() => {\n    const materialCost = watch('material_cost') || 0;\n    const laborCost = watch('labor_cost') || 0;\n    const overheadCost = watch('overhead_cost') || 0;\n    const totalCost = materialCost + laborCost + overheadCost;\n    // setValue('total_amount', totalCost); // Commented out due to type mismatch\n  }, [watch('material_cost'), watch('labor_cost'), watch('overhead_cost'), setValue]);\n\n  // Mutations\n  const createMutation = useMutation({\n    mutationFn: (data: ManufacturingJournalVoucher) => api.post('/manufacturing-journal-vouchers', data),\n    onSuccess: async () => {\n      queryClient.invalidateQueries({ queryKey: ['manufacturing-journal-vouchers'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('Error creating manufacturing journal voucher:', error);\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: ManufacturingJournalVoucher }) => \n      api.put(`/manufacturing-journal-vouchers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['manufacturing-journal-vouchers'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n    },\n    onError: (error: any) => {\n      console.error('Error updating manufacturing journal voucher:', error);\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/manufacturing-journal-vouchers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['manufacturing-journal-vouchers'] });\n      if (selectedId) {\n        setSelectedId(null);\n        setMode('create');\n        reset(defaultValues);\n      }\n    }\n  });\n\n  const onSubmit = (data: ManufacturingJournalVoucher) => {\n    if (mode === 'edit' && selectedId) {\n      updateMutation.mutate({ id: selectedId, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (voucher: ManufacturingJournalVoucher) => {\n    setSelectedId(voucher.id!);\n    setMode('edit');\n  };\n\n  const handleView = (voucher: ManufacturingJournalVoucher) => {\n    setSelectedId(voucher.id!);\n    setMode('view');\n  };\n\n  const handleDelete = (voucherId: number) => {\n    if (window.confirm('Are you sure you want to delete this voucher?')) {\n      deleteMutation.mutate(voucherId);\n    }\n  };\n\n  const handleCancel = () => {\n    setMode('create');\n    setSelectedId(null);\n    reset(defaultValues);\n  };\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Manufacturing Journal Vouchers\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* Voucher List - Left Side */}\n        <Grid size={{ xs: 12, md: 5 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">Recent Vouchers</Typography>\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default ManufacturingJournal;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/material-receipt.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[166,177],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[177,191],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[215,230],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[230,240],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Table"},"fix":{"range":[275,285],"text":""},"desc":"Remove unused variable 'Table'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableBody"},"fix":{"range":[285,299],"text":""},"desc":"Remove unused variable 'TableBody'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableCell"},"fix":{"range":[299,313],"text":""},"desc":"Remove unused variable 'TableCell'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableContainer"},"fix":{"range":[313,332],"text":""},"desc":"Remove unused variable 'TableContainer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableHead"},"fix":{"range":[332,346],"text":""},"desc":"Remove unused variable 'TableHead'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableRow"},"fix":{"range":[346,359],"text":""},"desc":"Remove unused variable 'TableRow'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[359,369],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Autocomplete' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Autocomplete"},"fix":{"range":[369,386],"text":""},"desc":"Remove unused variable 'Autocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[386,402],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[402,416],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[416,426],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[426,438],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[438,446],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Checkbox"},"fix":{"range":[469,481],"text":""},"desc":"Remove unused variable 'Checkbox'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[481,501],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[538,542],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Remove' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Remove"},"fix":{"range":[541,552],"text":""},"desc":"Remove unused variable 'Remove'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[552,566],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[566,575],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[575,586],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Save' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Save"},"fix":{"range":[586,595],"text":""},"desc":"Remove unused variable 'Save'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Cancel' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Cancel"},"fix":{"range":[595,605],"text":""},"desc":"Remove unused variable 'Cancel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PictureAsPdf' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"PictureAsPdf"},"fix":{"range":[605,621],"text":""},"desc":"Remove unused variable 'PictureAsPdf'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherContextMenu' is defined but never used.","line":45,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherContextMenu"},"fix":{"range":[837,861],"text":""},"desc":"Remove unused variable 'VoucherContextMenu'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherHeaderActions' is defined but never used.","line":46,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherHeaderActions"},"fix":{"range":[910,936],"text":""},"desc":"Remove unused variable 'VoucherHeaderActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'sourceTypeOptions' is assigned a value but never used.","line":102,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"sourceTypeOptions"},"fix":{"range":[2331,2513],"text":""},"desc":"Remove unused variable 'sourceTypeOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'inspectionStatusOptions' is assigned a value but never used.","line":108,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"inspectionStatusOptions"},"fix":{"range":[2515,2714],"text":""},"desc":"Remove unused variable 'inspectionStatusOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'qualityStatusOptions' is assigned a value but never used.","line":115,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"qualityStatusOptions"},"fix":{"range":[2716,2872],"text":""},"desc":"Remove unused variable 'qualityStatusOptions'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":121,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":121,"endColumn":47},{"ruleId":"no-redeclare","severity":2,"message":"'MaterialReceiptVoucher' is already defined.","line":121,"column":25,"nodeType":"Identifier","messageId":"redeclared","endLine":121,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":122,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[2927,2954],"text":""},"desc":"Remove unused variable 'router'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSubmit' is assigned a value but never used.","line":127,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSubmit"},"fix":{"range":[3156,3170],"text":""},"desc":"Remove unused variable 'handleSubmit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'errors' is assigned a value but never used.","line":127,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"errors"},"fix":{"range":[3194,3217],"text":""},"desc":"Remove unused variable 'errors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'itemFields' is assigned a value but never used.","line":132,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"itemFields"},"fix":{"range":[3295,3314],"text":""},"desc":"Remove unused variable 'itemFields'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'removeItem' is assigned a value but never used.","line":134,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"removeItem"},"fix":{"range":[3337,3361],"text":""},"desc":"Remove unused variable 'removeItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isFetching' is assigned a value but never used.","line":159,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"isFetching"},"fix":{"range":[4016,4028],"text":""},"desc":"Remove unused variable 'isFetching'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'latestVouchers' is assigned a value but never used.","line":176,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"latestVouchers"},"fix":{"range":[4668,4719],"text":""},"desc":"Remove unused variable 'latestVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'productOptions' is assigned a value but never used.","line":177,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"productOptions"},"fix":{"range":[4722,4763],"text":""},"desc":"Remove unused variable 'productOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'manufacturingOrderOptions' is assigned a value but never used.","line":178,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":178,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"manufacturingOrderOptions"},"fix":{"range":[4766,4826],"text":""},"desc":"Remove unused variable 'manufacturingOrderOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onSubmit' is assigned a value but never used.","line":239,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":239,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"onSubmit"},"fix":{"range":[6797,7004],"text":""},"desc":"Remove unused variable 'onSubmit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleEdit' is assigned a value but never used.","line":247,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":247,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleEdit"},"fix":{"range":[7008,7123],"text":""},"desc":"Remove unused variable 'handleEdit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleView' is assigned a value but never used.","line":252,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":252,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleView"},"fix":{"range":[7127,7242],"text":""},"desc":"Remove unused variable 'handleView'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDelete' is assigned a value but never used.","line":257,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":257,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDelete"},"fix":{"range":[7246,7417],"text":""},"desc":"Remove unused variable 'handleDelete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCancel' is assigned a value but never used.","line":263,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":263,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCancel"},"fix":{"range":[7421,7528],"text":""},"desc":"Remove unused variable 'handleCancel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addItem' is assigned a value but never used.","line":269,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":269,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"addItem"},"fix":{"range":[7532,7768],"text":""},"desc":"Remove unused variable 'addItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updateItemTotal' is assigned a value but never used.","line":282,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":282,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"updateItemTotal"},"fix":{"range":[7772,8015],"text":""},"desc":"Remove unused variable 'updateItemTotal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleGeneratePDF' is assigned a value but never used.","line":292,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":292,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleGeneratePDF"},"fix":{"range":[8048,8333],"text":""},"desc":"Remove unused variable 'handleGeneratePDF'."}]},{"ruleId":"no-shadow","severity":2,"message":"'voucherData' is already declared in the upper scope on line 159 column 17.","line":292,"column":36,"nodeType":"Identifier","messageId":"noShadow","endLine":292,"endColumn":72},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'voucherData' is already declared in the upper scope on line 159 column 17.","line":292,"column":36,"nodeType":"Identifier","messageId":"noShadow","endLine":292,"endColumn":72},{"ruleId":"no-undef","severity":2,"message":"'MaterialReceipt' is not defined.","line":805,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":805,"endColumn":31}],"suppressedMessages":[],"errorCount":54,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Box, \n  Button, \n  TextField, \n  Typography, \n  Grid, \n  IconButton, \n  Alert, \n  CircularProgress, \n  Container, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper, \n  Autocomplete, \n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Card,\n  CardContent,\n  Checkbox,\n  FormControlLabel\n} from '@mui/material';\nimport { \n  Add, \n  Remove,\n  Visibility, \n  Edit, \n  Delete, \n  Save,\n  Cancel,\n  PictureAsPdf\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../../../lib/api';\nimport { getProducts } from '../../../services/masterService';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport { generateStandalonePDF } from '../../../utils/pdfUtils';\n\ninterface MaterialReceiptItem {\n  product_id: number;\n  quantity: number;\n  unit: string;\n  unit_price: number;\n  received_quantity?: number;\n  accepted_quantity?: number;\n  rejected_quantity?: number;\n  batch_number?: string;\n  lot_number?: string;\n  expiry_date?: string;\n  warehouse_location?: string;\n  bin_location?: string;\n  quality_status?: string;\n  inspection_remarks?: string;\n  notes?: string;\n  total_amount: number;\n}\n\ninterface MaterialReceiptVoucher {\n  id?: number;\n  voucher_number: string;\n  date: string;\n  manufacturing_order_id?: number;\n  source_type: string;\n  source_reference?: string;\n  received_from_department?: string;\n  received_from_employee?: string;\n  received_by_employee?: string;\n  receipt_time?: string;\n  inspection_required: boolean;\n  inspection_status: string;\n  inspector_name?: string;\n  inspection_date?: string;\n  inspection_remarks?: string;\n  condition_on_receipt?: string;\n  notes?: string;\n  status: string;\n  total_amount: number;\n  items: MaterialReceiptItem[];\n}\n\nconst defaultValues: Partial<MaterialReceiptVoucher> = {\n  voucher_number: '',\n  date: new Date().toISOString().split('T')[0],\n  source_type: 'return',\n  inspection_required: false,\n  inspection_status: 'pending',\n  status: 'draft',\n  total_amount: 0,\n  items: []\n};\n\nconst sourceTypeOptions = [\n  { value: 'return', label: 'Material Return' },\n  { value: 'purchase', label: 'Purchase Receipt' },\n  { value: 'transfer', label: 'Transfer Receipt' }\n];\n\nconst inspectionStatusOptions = [\n  { value: 'pending', label: 'Pending' },\n  { value: 'passed', label: 'Passed' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'partial', label: 'Partial' }\n];\n\nconst qualityStatusOptions = [\n  { value: 'accepted', label: 'Accepted' },\n  { value: 'rejected', label: 'Rejected' },\n  { value: 'hold', label: 'Hold' }\n];\n\nexport default function MaterialReceiptVoucher() {\n  const router = useRouter();\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>('create');\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n  const queryClient = useQueryClient();\n\n  const { control, handleSubmit, watch, setValue, reset, formState: { errors } } = useForm<MaterialReceiptVoucher>({\n    defaultValues\n  });\n\n  const {\n    fields: itemFields,\n    append: appendItem,\n    remove: removeItem\n  } = useFieldArray({\n    control,\n    name: 'items'\n  });\n\n  // Fetch vouchers list\n  const { data: voucherList, isLoading } = useQuery({\n    queryKey: ['material-receipt-vouchers'],\n    queryFn: () => api.get('/material-receipt-vouchers').then(res => res.data),\n  });\n\n  // Fetch manufacturing orders\n  const { data: manufacturingOrders } = useQuery({\n    queryKey: ['manufacturing-orders'],\n    queryFn: () => api.get('/manufacturing-orders').then(res => res.data),\n  });\n\n  // Fetch products\n  const { data: productList } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts\n  });\n\n  // Fetch specific voucher\n  const { data: voucherData, isFetching } = useQuery({\n    queryKey: ['material-receipt-voucher', selectedId],\n    queryFn: () => api.get(`/material-receipt-vouchers/${selectedId}`).then(res => res.data),\n    enabled: !!selectedId\n  });\n\n  // Fetch next voucher number\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: ['nextMaterialReceiptNumber'],\n    queryFn: () => api.get('/material-receipt-vouchers/next-number').then(res => res.data),\n    enabled: mode === 'create',\n  });\n\n  const sortedVouchers = voucherList ? [...voucherList].sort((a, b) => \n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n  ) : [];\n\n  const latestVouchers = sortedVouchers.slice(0, 10);\n  const productOptions = productList || [];\n  const manufacturingOrderOptions = manufacturingOrders || [];\n\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (voucherData) {\n      reset(voucherData);\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [voucherData, mode, reset, nextVoucherNumber, setValue]);\n\n  // Calculate totals\n  useEffect(() => {\n    const items = watch('items') || [];\n    const total = items.reduce((sum, item) => sum + (item.total_amount || 0), 0);\n    setValue('total_amount', total);\n  }, [watch('items'), setValue]);\n\n  // Mutations\n  const createMutation = useMutation({\n    mutationFn: (data: MaterialReceiptVoucher) => api.post('/material-receipt-vouchers', data),\n    onSuccess: async () => {\n      queryClient.invalidateQueries({ queryKey: ['material-receipt-vouchers'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('Error creating material receipt voucher:', error);\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: MaterialReceiptVoucher }) => \n      api.put(`/material-receipt-vouchers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['material-receipt-vouchers'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n    },\n    onError: (error: any) => {\n      console.error('Error updating material receipt voucher:', error);\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/material-receipt-vouchers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['material-receipt-vouchers'] });\n      if (selectedId) {\n        setSelectedId(null);\n        setMode('create');\n        reset(defaultValues);\n      }\n    }\n  });\n\n  const onSubmit = (data: MaterialReceiptVoucher) => {\n    if (mode === 'edit' && selectedId) {\n      updateMutation.mutate({ id: selectedId, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (voucher: MaterialReceiptVoucher) => {\n    setSelectedId(voucher.id!);\n    setMode('edit');\n  };\n\n  const handleView = (voucher: MaterialReceiptVoucher) => {\n    setSelectedId(voucher.id!);\n    setMode('view');\n  };\n\n  const handleDelete = (voucherId: number) => {\n    if (window.confirm('Are you sure you want to delete this voucher?')) {\n      deleteMutation.mutate(voucherId);\n    }\n  };\n\n  const handleCancel = () => {\n    setMode('create');\n    setSelectedId(null);\n    reset(defaultValues);\n  };\n\n  const addItem = () => {\n    appendItem({\n      product_id: 0,\n      quantity: 0,\n      unit: '',\n      unit_price: 0,\n      received_quantity: 0,\n      accepted_quantity: 0,\n      rejected_quantity: 0,\n      total_amount: 0\n    });\n  };\n\n  const updateItemTotal = (index: number) => {\n    const items = watch('items');\n    const item = items[index];\n    if (item) {\n      const total = item.quantity * item.unit_price;\n      setValue(`items.${index}.total_amount`, total);\n    }\n  };\n\n  // PDF Generation Function\n  const handleGeneratePDF = async (voucherData?: MaterialReceiptVoucher) => {\n    try {\n      const dataToUse = voucherData || watch();\n      await generateStandalonePDF(dataToUse, 'material-receipt');\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Material Receipt Vouchers\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* Voucher List - Left Side */}\n        <Grid size={{ xs: 12, md: 5 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">Recent Vouchers</Typography>\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default MaterialReceipt;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/material-requisition.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[230,240],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[386,402],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[402,416],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[416,426],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[426,438],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[438,446],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Card"},"fix":{"range":[446,454],"text":""},"desc":"Remove unused variable 'Card'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[454,469],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[520,534],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[534,543],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[543,554],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Save' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Save"},"fix":{"range":[554,563],"text":""},"desc":"Remove unused variable 'Save'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Cancel' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Cancel"},"fix":{"range":[563,573],"text":""},"desc":"Remove unused variable 'Cancel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":88,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2080,2090],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":88,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2090,2105],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":89,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2132,2148],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFilteredVouchers' is assigned a value but never used.","line":89,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFilteredVouchers"},"fix":{"range":[2148,2169],"text":""},"desc":"Remove unused variable 'setFilteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isFetching' is assigned a value but never used.","line":120,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"isFetching"},"fix":{"range":[3053,3076],"text":""},"desc":"Remove unused variable 'isFetching'."}]},{"ruleId":"no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 84 column 11.","line":174,"column":20,"nodeType":"Identifier","messageId":"noShadow","endLine":174,"endColumn":22},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 84 column 11.","line":174,"column":20,"nodeType":"Identifier","messageId":"noShadow","endLine":174,"endColumn":22},{"ruleId":"no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 84 column 11.","line":188,"column":18,"nodeType":"Identifier","messageId":"noShadow","endLine":188,"endColumn":28},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 84 column 11.","line":188,"column":18,"nodeType":"Identifier","messageId":"noShadow","endLine":188,"endColumn":28},{"ruleId":"no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 84 column 11.","line":219,"column":36,"nodeType":"Identifier","messageId":"noShadow","endLine":219,"endColumn":46},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 84 column 11.","line":219,"column":36,"nodeType":"Identifier","messageId":"noShadow","endLine":219,"endColumn":46},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":260,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":260,"endColumn":36}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Box, \n  Button, \n  TextField, \n  Typography, \n  Grid, \n  IconButton, \n  Alert, \n  CircularProgress, \n  Container, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper, \n  Autocomplete, \n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Card,\n  CardContent\n} from '@mui/material';\nimport { \n  Add, \n  Remove,\n  Visibility, \n  Edit, \n  Delete, \n  Save,\n  Cancel\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../../../lib/api';\nimport { getProducts } from '../../../services/masterService';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\n\ninterface MaterialIssueItem {\n  product_id: number;\n  quantity: number;\n  unit: string;\n  unit_price: number;\n  total_amount: number;\n  notes?: string;\n}\n\ninterface MaterialIssue {\n  id?: number;\n  voucher_number?: string;\n  date: string;\n  manufacturing_order_id?: number;\n  issued_to_department?: string;\n  issued_to_employee?: string;\n  purpose: string;\n  total_amount: number;\n  notes?: string;\n  items: MaterialIssueItem[];\n}\n\nconst defaultValues: MaterialIssue = {\n  date: new Date().toISOString().slice(0, 10),\n  purpose: 'production',\n  total_amount: 0,\n  items: [\n    {\n      product_id: 0,\n      quantity: 1,\n      unit: 'PCS',\n      unit_price: 0,\n      total_amount: 0\n    }\n  ]\n};\n\nconst MaterialRequisition: React.FC = () => {\n  const router = useRouter();\n  const { id, mode: queryMode } = router.query;\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>((queryMode as 'create' | 'edit' | 'view') || 'create');\n  const [selectedId, setSelectedId] = useState<number | null>(id ? Number(id) : null);\n  const [contextMenu, setContextMenu] = useState<{ mouseX: number; mouseY: number; voucher: any } | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredVouchers, setFilteredVouchers] = useState<any[]>([]);\n  const queryClient = useQueryClient();\n\n  const { control, handleSubmit, reset, setValue, watch, formState: { errors } } = useForm<MaterialIssue>({\n    defaultValues\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'items'\n  });\n\n  // Fetch material issues\n  const { data: issueList, isLoading: isLoadingList } = useQuery({\n    queryKey: ['material-issues'],\n    queryFn: () => api.get('/material-issues').then(res => res.data),\n  });\n\n  // Fetch products\n  const { data: productList } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts\n  });\n\n  // Fetch manufacturing orders\n  const { data: manufacturingOrders } = useQuery({\n    queryKey: ['manufacturing-orders'],\n    queryFn: () => api.get('/manufacturing-orders').then(res => res.data),\n  });\n\n  // Fetch specific material issue\n  const { data: issueData, isLoading: isFetching } = useQuery({\n    queryKey: ['material-issue', selectedId],\n    queryFn: () => api.get(`/material-issues/${selectedId}`).then(res => res.data),\n    enabled: !!selectedId\n  });\n\n  // Fetch next voucher number\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: ['nextMaterialIssueNumber'],\n    queryFn: () => api.get('/material-issues/next-number').then(res => res.data),\n    enabled: mode === 'create',\n  });\n\n  const sortedIssues = issueList ? [...issueList].sort((a, b) => \n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n  ) : [];\n\n  const latestIssues = sortedIssues.slice(0, 10);\n  const productOptions = productList || [];\n\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (issueData) {\n      reset(issueData);\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [issueData, mode, reset, nextVoucherNumber, setValue]);\n\n  // Calculate totals\n  useEffect(() => {\n    const items = watch('items') || [];\n    const total = items.reduce((sum, item) => sum + (item.total_amount || 0), 0);\n    setValue('total_amount', total);\n  }, [watch('items'), setValue]);\n\n  // Mutations\n  const createMutation = useMutation({\n    mutationFn: (data: MaterialIssue) => api.post('/material-issues', data),\n    onSuccess: async () => {\n      queryClient.invalidateQueries({ queryKey: ['material-issues'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('Error creating material issue:', error);\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: MaterialIssue }) => \n      api.put(`/material-issues/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['material-issues'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n    },\n    onError: (error: any) => {\n      console.error('Error updating material issue:', error);\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/material-issues/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['material-issues'] });\n    },\n    onError: (error: any) => {\n      console.error('Error deleting material issue:', error);\n    }\n  });\n\n  const onSubmit = (data: MaterialIssue) => {\n    if (mode === 'create') {\n      createMutation.mutate(data);\n    } else if (mode === 'edit' && selectedId) {\n      updateMutation.mutate({ id: selectedId, data });\n    }\n  };\n\n  const handleEdit = (issue: any) => {\n    setSelectedId(issue.id);\n    setMode('edit');\n  };\n\n  const handleView = (issue: any) => {\n    setSelectedId(issue.id);\n    setMode('view');\n  };\n\n  const handleContextMenuClose = () => {\n    setContextMenu(null);\n  };\n\n  const handleDeleteIssue = async (id: number) => {\n    if (window.confirm('Are you sure you want to delete this material issue?')) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const addItem = () => {\n    append({\n      product_id: 0,\n      quantity: 1,\n      unit: 'PCS',\n      unit_price: 0,\n      total_amount: 0\n    });\n  };\n\n  const removeItem = (index: number) => {\n    if (fields.length > 1) {\n      remove(index);\n    }\n  };\n\n  const updateItemTotal = (index: number) => {\n    const quantity = watch(`items.${index}.quantity`) || 0;\n    const unitPrice = watch(`items.${index}.unit_price`) || 0;\n    const total = quantity * unitPrice;\n    setValue(`items.${index}.total_amount`, total);\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Grid container spacing={3}>\n        {/* Left Panel - Issue List */}\n        <Grid size={5}>\n          <Box>\n            <VoucherHeaderActions\n              mode={mode}\n              voucherType=\"Material Requisition\"\n              voucherRoute=\"/vouchers/Manufacturing-Vouchers/material-requisition\"\n              currentId={selectedId || undefined}\n              onModeChange={setMode}\n              onModalOpen={() => {}}\n              voucherList={sortedIssues}\n              onEdit={handleEdit}\n              onView={handleView}\n              isLoading={isLoadingList}\n            />\n            \n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>Recent Requisitions</Typography>\n              <TableContainer component={Paper} sx={{ maxHeight: 600 }}>\n                <Table size=\"small\" stickyHeader>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Issue #</TableCell>\n                      <TableCell>Purpose</TableCell>\n                      <TableCell>Department</TableCell>\n                      <TableCell>Amount</TableCell>\n                      <TableCell>Date</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {latestIssues.map((issue) => (\n                      <TableRow \n                        key={issue.id}\n                        hover\n                        onClick={() => handleEdit(issue)}\n                        sx={{ cursor: 'pointer' }}\n                        onContextMenu={(e) => {\n                          e.preventDefault();\n                          setContextMenu({\n                            mouseX: e.clientX - 2,\n                            mouseY: e.clientY - 4,\n                            voucher: issue,\n                          });\n                        }}\n                      >\n                        <TableCell>{issue.voucher_number}</TableCell>\n                        <TableCell>{issue.purpose}</TableCell>\n                        <TableCell>{issue.issued_to_department || 'N/A'}</TableCell>\n                        <TableCell>{issue.total_amount?.toFixed(2) || '0.00'}</TableCell>\n                        <TableCell>{new Date(issue.date).toLocaleDateString()}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          </Box>\n        </Grid>\n\n        {/* Right Panel - Form */}\n        <Grid size={7}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                {mode === 'create' ? 'Create Material Requisition' : \n                 mode === 'edit' ? 'Edit Material Requisition' : 'View Material Requisition'}\n              </Typography>\n\n              <Grid container spacing={2}>\n                {/* Header Information */}\n                <Grid size={4}>\n                  <TextField\n                    {...control.register('voucher_number')}\n                    label=\"Requisition Number\"\n                    fullWidth\n                    disabled\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={4}>\n                  <TextField\n                    {...control.register('date', { required: true })}\n                    label=\"Date\"\n                    type=\"date\"\n                    fullWidth\n                    error={!!errors.date}\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    InputLabelProps={{ shrink: true }}\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={4}>\n                  <TextField\n                    {...control.register('purpose')}\n                    label=\"Purpose\"\n                    fullWidth\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={6}>\n                  <Autocomplete\n                    options={manufacturingOrders || []}\n                    getOptionLabel={(option) => `${option.voucher_number} - ${option.bom?.bom_name || 'Unknown'}`}\n                    value={manufacturingOrders?.find((mo: any) => mo.id === watch('manufacturing_order_id')) || null}\n                    onChange={(_, newValue) => setValue('manufacturing_order_id', newValue?.id || 0)}\n                    disabled={mode === 'view'}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Manufacturing Order (Optional)\"\n                        size=\"small\"\n                        sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                      />\n                    )}\n                  />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('issued_to_department')}\n                    label=\"Department\"\n                    fullWidth\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                 />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('issued_to_employee')}\n                    label=\"Issued To (Employee)\"\n                    fullWidth\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                 />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    label=\"Total Amount\"\n                    value={watch('total_amount')?.toFixed(2) || '0.00'}\n                    fullWidth\n                    disabled\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                 />\n                </Grid>\n\n                {/* Items Section */}\n                <Grid size={12}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 2, mb: 1 }}>\n                    <Typography variant=\"h6\">Items</Typography>\n                    {mode !== 'view' && (\n                      <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        startIcon={<Add />}\n                        onClick={addItem}\n                      >\n                        Add Item\n                      </Button>\n                    )}\n                  </Box>\n                </Grid>\n\n                {fields.map((field, index) => (\n                  <Grid size={12} key={field.id}>\n                    <Paper variant=\"outlined\" sx={{ p: 2, mb: 1 }}>\n                      <Grid container spacing={2} alignItems=\"center\">\n                        <Grid size={4}>\n                          <Autocomplete\n                            options={productOptions}\n                            getOptionLabel={(option) => option.product_name || ''}\n                            value={productOptions.find((p: any) => p.id === watch(`items.${index}.product_id`)) || null}\n                            onChange={(_, newValue) => {\n                              setValue(`items.${index}.product_id`, newValue?.id || 0);\n                              if (newValue) {\n                                setValue(`items.${index}.unit`, newValue.unit || 'PCS');\n                                setValue(`items.${index}.unit_price`, newValue.unit_price || 0);\n                                updateItemTotal(index);\n                              }\n                            }}\n                            disabled={mode === 'view'}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                label=\"Product\"\n                                size=\"small\"\n                             />\n                            )}\n                         />\n                        </Grid>\n\n                        <Grid size={2}>\n                          <TextField\n                            {...control.register(`items.${index}.quantity` as const, { \n                              required: true, \n                              min: 0.01,\n                              onChange: () => updateItemTotal(index)\n                            })}\n                            label=\"Quantity\"\n                            type=\"number\"\n                            fullWidth\n                            size=\"small\"\n                            disabled={mode === 'view'}\n                            InputProps={{ inputProps: { step: 0.01 } }}\n                         />\n                        </Grid>\n\n                        <Grid size={1}>\n                          <TextField\n                            {...control.register(`items.${index}.unit` as const)}\n                            label=\"Unit\"\n                            fullWidth\n                            size=\"small\"\n                            disabled={mode === 'view'}\n                         />\n                        </Grid>\n\n                        <Grid size={2}>\n                          <TextField\n                            {...control.register(`items.${index}.unit_price` as const, { \n                              min: 0,\n                              onChange: () => updateItemTotal(index)\n                            })}\n                            label=\"Unit Price\"\n                            type=\"number\"\n                            fullWidth\n                            size=\"small\"\n                            disabled={mode === 'view'}\n                            InputProps={{ inputProps: { step: 0.01 } }}\n                         />\n                        </Grid>\n\n                        <Grid size={2}>\n                          <TextField\n                            label=\"Total\"\n                            value={watch(`items.${index}.total_amount`)?.toFixed(2) || '0.00'}\n                            fullWidth\n                            size=\"small\"\n                            disabled\n                         />\n                        </Grid>\n\n                        <Grid size={1}>\n                          {mode !== 'view' && (\n                            <IconButton\n                              onClick={() => removeItem(index)}\n                              color=\"error\"\n                              size=\"small\"\n                              disabled={fields.length === 1}\n                            >\n                              <Remove />\n                            </IconButton>\n                          )}\n                        </Grid>\n\n                        <Grid size={12}>\n                          <TextField\n                            {...control.register(`items.${index}.notes` as const)}\n                            label=\"Item Notes\"\n                            fullWidth\n                            size=\"small\"\n                            disabled={mode === 'view'}\n                         />\n                        </Grid>\n                      </Grid>\n                    </Paper>\n                  </Grid>\n                ))}\n\n                <Grid size={12}>\n                  <TextField\n                    {...control.register('notes')}\n                    label=\"General Notes\"\n                    fullWidth\n                    multiline\n                    rows={2}\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                 />\n                </Grid>\n\n                {/* Action Buttons */}\n                {mode !== 'view' && (\n                  <Grid size={12}>\n                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end', mt: 2 }}>\n                      <Button\n                        variant=\"outlined\"\n                        onClick={() => {\n                          setMode('create');\n                          setSelectedId(null);\n                          reset(defaultValues);\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        disabled={createMutation.isPending || updateMutation.isPending}\n                      >\n                        {createMutation.isPending || updateMutation.isPending ? (\n                          <CircularProgress size={20} />\n                        ) : (\n                          mode === 'create' ? 'Create Requisition' : 'Update Requisition'\n                        )}\n                      </Button>\n                    </Box>\n                  </Grid>\n                )}\n              </Grid>\n            </Paper>\n          </form>\n        </Grid>\n      </Grid>\n\n      {/* Context Menu */}\n      <VoucherContextMenu\n        voucherType=\"Material Requisition\"\n        contextMenu={contextMenu}\n        onClose={handleContextMenuClose}\n        onEdit={() => {\n          if (contextMenu?.voucher) {\n            handleEdit(contextMenu.voucher);\n          }\n          setContextMenu(null);\n        }}\n        onView={() => {\n          if (contextMenu?.voucher) {\n            handleView(contextMenu.voucher);\n          }\n          setContextMenu(null);\n        }}\n        onDelete={() => {\n          if (contextMenu?.voucher) {\n            handleDeleteIssue(contextMenu.voucher.id);\n          }\n          setContextMenu(null);\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default MaterialRequisition;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/production-order.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useFieldArray' is defined but never used.","line":5,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"useFieldArray"},"fix":{"range":[185,200],"text":""},"desc":"Remove unused variable 'useFieldArray'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[291,306],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[306,316],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[462,473],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[473,488],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[488,505],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogActions"},"fix":{"range":[505,522],"text":""},"desc":"Remove unused variable 'DialogActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[604,615],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[652,656],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[655,670],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[670,679],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[679,690],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Save' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Save"},"fix":{"range":[690,699],"text":""},"desc":"Remove unused variable 'Save'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Cancel' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Cancel"},"fix":{"range":[699,709],"text":""},"desc":"Remove unused variable 'Cancel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PlayArrow' is defined but never used.","line":44,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"PlayArrow"},"fix":{"range":[709,722],"text":""},"desc":"Remove unused variable 'PlayArrow'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Stop' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Stop"},"fix":{"range":[722,730],"text":""},"desc":"Remove unused variable 'Stop'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[730,745],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Schedule' is defined but never used.","line":47,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Schedule"},"fix":{"range":[745,757],"text":""},"desc":"Remove unused variable 'Schedule'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":92,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2356,2369],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":93,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2417,2427],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":93,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2427,2442],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":94,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2469,2477],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":94,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2477,2490],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":95,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2517,2523],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":95,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2523,2534],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":96,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2561,2577],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFilteredVouchers' is assigned a value but never used.","line":96,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFilteredVouchers"},"fix":{"range":[2577,2598],"text":""},"desc":"Remove unused variable 'setFilteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isFetching' is assigned a value but never used.","line":128,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"isFetching"},"fix":{"range":[3689,3712],"text":""},"desc":"Remove unused variable 'isFetching'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'newOrder' is defined but never used.","line":181,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":181,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"newOrder"},"fix":{"range":[5571,5579],"text":""},"desc":"Remove unused variable 'newOrder'."}]},{"ruleId":"no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 88 column 11.","line":195,"column":20,"nodeType":"Identifier","messageId":"noShadow","endLine":195,"endColumn":22},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 88 column 11.","line":195,"column":20,"nodeType":"Identifier","messageId":"noShadow","endLine":195,"endColumn":22},{"ruleId":"no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 88 column 11.","line":209,"column":18,"nodeType":"Identifier","messageId":"noShadow","endLine":209,"endColumn":28},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 88 column 11.","line":209,"column":18,"nodeType":"Identifier","messageId":"noShadow","endLine":209,"endColumn":28},{"ruleId":"no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 88 column 11.","line":240,"column":36,"nodeType":"Identifier","messageId":"noShadow","endLine":240,"endColumn":46},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'id' is already declared in the upper scope on line 88 column 11.","line":240,"column":36,"nodeType":"Identifier","messageId":"noShadow","endLine":240,"endColumn":46}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Manufacturing-Vouchers/production-order.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Box, \n  Button, \n  TextField, \n  Typography, \n  Grid, \n  IconButton, \n  Alert, \n  CircularProgress, \n  Container, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper, \n  Autocomplete, \n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Card,\n  CardContent,\n  Divider\n} from '@mui/material';\nimport { \n  Add, \n  Visibility, \n  Edit, \n  Delete, \n  Save,\n  Cancel,\n  PlayArrow,\n  Stop,\n  CheckCircle,\n  Schedule\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../../../lib/api';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport AddBOMModal from '../../../components/AddBOMModal';\n\ninterface ManufacturingOrder {\n  id?: number;\n  voucher_number?: string;\n  date: string;\n  bom_id: number;\n  planned_quantity: number;\n  produced_quantity?: number;\n  scrap_quantity?: number;\n  planned_start_date?: string;\n  planned_end_date?: string;\n  actual_start_date?: string;\n  actual_end_date?: string;\n  production_status: 'planned' | 'in_progress' | 'completed' | 'cancelled';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  production_department?: string;\n  production_location?: string;\n  notes?: string;\n  total_amount: number;\n}\n\nconst defaultValues: ManufacturingOrder = {\n  date: new Date().toISOString().slice(0, 10),\n  bom_id: 0,\n  planned_quantity: 1,\n  produced_quantity: 0,\n  scrap_quantity: 0,\n  production_status: 'planned',\n  priority: 'medium',\n  total_amount: 0\n};\n\nconst ProductionOrder: React.FC = () => {\n  const router = useRouter();\n  const { id, mode: queryMode } = router.query;\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>((queryMode as 'create' | 'edit' | 'view') || 'create');\n  const [selectedId, setSelectedId] = useState<number | null>(id ? Number(id) : null);\n  const [contextMenu, setContextMenu] = useState<{ mouseX: number; mouseY: number; voucher: any } | null>(null);\n  const [showFullModal, setShowFullModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n  const [filteredVouchers, setFilteredVouchers] = useState<any[]>([]);\n  const [selectedBOM, setSelectedBOM] = useState<any>(null);\n  const [bomCostBreakdown, setBomCostBreakdown] = useState<any>(null);\n  const [showAddBOMModal, setShowAddBOMModal] = useState(false);\n  const queryClient = useQueryClient();\n\n  const { control, handleSubmit, reset, setValue, watch, formState: { errors } } = useForm<ManufacturingOrder>({\n    defaultValues\n  });\n\n  const watchedBomId = watch('bom_id');\n  const watchedQuantity = watch('planned_quantity');\n\n  // Fetch manufacturing orders\n  const { data: orderList, isLoading: isLoadingList } = useQuery({\n    queryKey: ['manufacturing-orders'],\n    queryFn: () => api.get('/manufacturing-orders').then(res => res.data),\n  });\n\n  // Fetch BOMs\n  const { data: bomList } = useQuery({\n    queryKey: ['boms'],\n    queryFn: () => api.get('/bom').then(res => res.data),\n  });\n\n  // Enhanced BOM options with \"Create New\"\n  const enhancedBOMOptions = [\n    ...(bomList || []),\n    { id: null, bom_name: 'Create New BOM...', version: '' }\n  ];\n\n  // Fetch specific manufacturing order\n  const { data: orderData, isLoading: isFetching } = useQuery({\n    queryKey: ['manufacturing-order', selectedId],\n    queryFn: () => api.get(`/manufacturing-orders/${selectedId}`).then(res => res.data),\n    enabled: !!selectedId\n  });\n\n  // Fetch next voucher number\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: ['nextManufacturingOrderNumber'],\n    queryFn: () => api.get('/manufacturing-orders/next-number').then(res => res.data),\n    enabled: mode === 'create',\n  });\n\n  // Fetch BOM cost breakdown\n  const { data: costBreakdown } = useQuery({\n    queryKey: ['bom-cost-breakdown', watchedBomId, watchedQuantity],\n    queryFn: () => api.get(`/bom/${watchedBomId}/cost-breakdown?production_quantity=${watchedQuantity}`).then(res => res.data),\n    enabled: !!watchedBomId && watchedQuantity > 0,\n  });\n\n  const sortedOrders = orderList ? [...orderList].sort((a, b) => \n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n  ) : [];\n\n  const latestOrders = sortedOrders.slice(0, 10);\n\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (orderData) {\n      reset(orderData);\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [orderData, mode, reset, nextVoucherNumber, setValue]);\n\n  useEffect(() => {\n    if (watchedBomId && bomList) {\n      const bom = bomList.find((b: any) => b.id === watchedBomId);\n      setSelectedBOM(bom);\n    }\n  }, [watchedBomId, bomList]);\n\n  useEffect(() => {\n    if (costBreakdown) {\n      setBomCostBreakdown(costBreakdown);\n      setValue('total_amount', costBreakdown.cost_breakdown.total_cost);\n    }\n  }, [costBreakdown, setValue]);\n\n  // Mutations\n  const createMutation = useMutation({\n    mutationFn: (data: ManufacturingOrder) => api.post('/manufacturing-orders', data),\n    onSuccess: async (newOrder) => {\n      queryClient.invalidateQueries({ queryKey: ['manufacturing-orders'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('Error creating manufacturing order:', error);\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: ManufacturingOrder }) => \n      api.put(`/manufacturing-orders/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['manufacturing-orders'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n    },\n    onError: (error: any) => {\n      console.error('Error updating manufacturing order:', error);\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/manufacturing-orders/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['manufacturing-orders'] });\n    },\n    onError: (error: any) => {\n      console.error('Error deleting manufacturing order:', error);\n    }\n  });\n\n  const onSubmit = (data: ManufacturingOrder) => {\n    if (mode === 'create') {\n      createMutation.mutate(data);\n    } else if (mode === 'edit' && selectedId) {\n      updateMutation.mutate({ id: selectedId, data });\n    }\n  };\n\n  const handleEdit = (order: any) => {\n    setSelectedId(order.id);\n    setMode('edit');\n  };\n\n  const handleView = (order: any) => {\n    setSelectedId(order.id);\n    setMode('view');\n  };\n\n  const handleContextMenuClose = () => {\n    setContextMenu(null);\n  };\n\n  const handleDeleteOrder = async (id: number) => {\n    if (window.confirm('Are you sure you want to delete this manufacturing order?')) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'planned': return 'default';\n      case 'in_progress': return 'warning';\n      case 'completed': return 'success';\n      case 'cancelled': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'low': return 'success';\n      case 'medium': return 'default';\n      case 'high': return 'warning';\n      case 'urgent': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const handleAddBOM = (newBOM: any) => {\n    setValue('bom_id', newBOM.id);\n    setShowAddBOMModal(false);\n  };\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Grid container spacing={3}>\n        {/* Left Panel - Order List */}\n        <Grid size={5}>\n          <Box>\n            <VoucherHeaderActions\n              mode={mode}\n              voucherType=\"Production Order\"\n              voucherRoute=\"/vouchers/Manufacturing-Vouchers/production-order\"\n              currentId={selectedId || undefined}\n              onModeChange={setMode}\n              onModalOpen={() => setShowFullModal(true)}\n              voucherList={sortedOrders}\n              onEdit={handleEdit}\n              onView={handleView}\n              isLoading={isLoadingList}\n            />\n            \n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>Recent Orders</Typography>\n              <TableContainer component={Paper} sx={{ maxHeight: 600 }}>\n                <Table size=\"small\" stickyHeader>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Order #</TableCell>\n                      <TableCell>BOM</TableCell>\n                      <TableCell>Qty</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Priority</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {latestOrders.map((order) => (\n                      <TableRow \n                        key={order.id}\n                        hover\n                        onClick={() => handleEdit(order)}\n                        sx={{ cursor: 'pointer' }}\n                        onContextMenu={(e) => {\n                          e.preventDefault();\n                          setContextMenu({\n                            mouseX: e.clientX - 2,\n                            mouseY: e.clientY - 4,\n                            voucher: order,\n                          });\n                        }}\n                      >\n                        <TableCell>{order.voucher_number}</TableCell>\n                        <TableCell>{order.bom?.bom_name || 'N/A'}</TableCell>\n                        <TableCell>{order.planned_quantity}</TableCell>\n                        <TableCell>\n                          <Chip \n                            label={order.production_status} \n                            color={getStatusColor(order.production_status)}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Chip \n                            label={order.priority} \n                            color={getPriorityColor(order.priority)}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          </Box>\n        </Grid>\n\n        {/* Right Panel - Form */}\n        <Grid size={7}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                {mode === 'create' ? 'Create Production Order' : \n                 mode === 'edit' ? 'Edit Production Order' : 'View Production Order'}\n              </Typography>\n\n              <Grid container spacing={2}>\n                {/* Basic Information */}\n                <Grid size={4}>\n                  <TextField\n                    {...control.register('voucher_number')}\n                    label=\"Order Number\"\n                    fullWidth\n                    disabled\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={4}>\n                  <TextField\n                    {...control.register('date', { required: true })}\n                    label=\"Date\"\n                    type=\"date\"\n                    fullWidth\n                    error={!!errors.date}\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    InputLabelProps={{ shrink: true }}\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={4}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel>Priority</InputLabel>\n                    <Select\n                      {...control.register('priority')}\n                      value={watch('priority')}\n                      onChange={(e) => setValue('priority', e.target.value as 'low' | 'medium' | 'high' | 'urgent')}\n                      disabled={mode === 'view'}\n                      sx={{ height: 27 }}\n                    >\n                      <MenuItem value=\"low\">Low</MenuItem>\n                      <MenuItem value=\"medium\">Medium</MenuItem>\n                      <MenuItem value=\"high\">High</MenuItem>\n                      <MenuItem value=\"urgent\">Urgent</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n\n                {/* BOM Selection */}\n                <Grid size={6}>\n                  <Autocomplete\n                    options={enhancedBOMOptions}\n                    getOptionLabel={(option: any) => option.id === null ? option.bom_name : `${option.bom_name} v${option.version}`}\n                    value={enhancedBOMOptions.find((b: any) => b.id === watch('bom_id')) || null}\n                    onChange={(_, newValue) => {\n                      if (newValue?.id === null) {\n                        setShowAddBOMModal(true);\n                      } else {\n                        setValue('bom_id', newValue?.id || 0);\n                      }\n                    }}\n                    disabled={mode === 'view'}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Bill of Materials\"\n                        error={!!errors.bom_id}\n                        size=\"small\"\n                        sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                      />\n                    )}\n                  />\n                </Grid>\n\n                <Grid size={3}>\n                  <TextField\n                    {...control.register('planned_quantity', { required: true, min: 0.01 })}\n                    label=\"Planned Quantity\"\n                    type=\"number\"\n                    fullWidth\n                    error={!!errors.planned_quantity}\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    InputProps={{ inputProps: { step: 0.01 } }}\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={3}>\n                  <FormControl fullWidth size=\"small\">\n                    <InputLabel>Status</InputLabel>\n                    <Select\n                      {...control.register('production_status')}\n                      value={watch('production_status')}\n                      onChange={(e) => setValue('production_status', e.target.value as 'planned' | 'in_progress' | 'completed' | 'cancelled')}\n                      disabled={mode === 'view'}\n                      sx={{ height: 27 }}\n                    >\n                      <MenuItem value=\"planned\">Planned</MenuItem>\n                      <MenuItem value=\"in_progress\">In Progress</MenuItem>\n                      <MenuItem value=\"completed\">Completed</MenuItem>\n                      <MenuItem value=\"cancelled\">Cancelled</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n\n                {/* Planning Dates */}\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('planned_start_date')}\n                    label=\"Planned Start Date\"\n                    type=\"date\"\n                    fullWidth\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    InputLabelProps={{ shrink: true }}\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('planned_end_date')}\n                    label=\"Planned End Date\"\n                    type=\"date\"\n                    fullWidth\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    InputLabelProps={{ shrink: true }}\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                {/* Location Information */}\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('production_department')}\n                    label=\"Department\"\n                    fullWidth\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={6}>\n                  <TextField\n                    {...control.register('production_location')}\n                    label=\"Location\"\n                    fullWidth\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                </Grid>\n\n                <Grid size={12}>\n                  <TextField\n                    {...control.register('notes')}\n                    label=\"Notes\"\n                    fullWidth\n                    multiline\n                    rows={2}\n                    disabled={mode === 'view'}\n                    size=\"small\"\n                  />\n                </Grid>\n\n                {/* BOM Details */}\n                {selectedBOM && (\n                  <Grid size={12}>\n                    <Card variant=\"outlined\" sx={{ mt: 2 }}>\n                      <CardContent>\n                        <Typography variant=\"subtitle1\" gutterBottom>\n                          BOM Details: {selectedBOM.bom_name} v{selectedBOM.version}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Output Item: {selectedBOM.output_item?.product_name || 'Unknown'}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Components: {selectedBOM.components?.length || 0}\n                        </Typography>\n                        {bomCostBreakdown && (\n                          <Box sx={{ mt: 1 }}>\n                            <Typography variant=\"body2\">\n                              Estimated Cost: {bomCostBreakdown.cost_breakdown.total_cost.toFixed(2)}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              Material: {bomCostBreakdown.cost_breakdown.material_cost.toFixed(2)} | \n                              Labor: {bomCostBreakdown.cost_breakdown.labor_cost.toFixed(2)} | \n                              Overhead: {bomCostBreakdown.cost_breakdown.overhead_cost.toFixed(2)}\n                            </Typography>\n                          </Box>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                )}\n\n                {/* Action Buttons */}\n                {mode !== 'view' && (\n                  <Grid size={12}>\n                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end', mt: 2 }}>\n                      <Button\n                        variant=\"outlined\"\n                        onClick={() => {\n                          setMode('create');\n                          setSelectedId(null);\n                          reset(defaultValues);\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        disabled={createMutation.isPending || updateMutation.isPending}\n                      >\n                        {createMutation.isPending || updateMutation.isPending ? (\n                          <CircularProgress size={20} />\n                        ) : (\n                          mode === 'create' ? 'Create Order' : 'Update Order'\n                        )}\n                      </Button>\n                    </Box>\n                  </Grid>\n                )}\n              </Grid>\n            </Paper>\n          </form>\n        </Grid>\n      </Grid>\n\n      {/* Context Menu */}\n      <VoucherContextMenu\n        voucherType=\"Production Order\"\n        contextMenu={contextMenu}\n        onClose={handleContextMenuClose}\n        onEdit={() => {\n          if (contextMenu?.voucher) {\n            handleEdit(contextMenu.voucher);\n          }\n          setContextMenu(null);\n        }}\n        onView={() => {\n          if (contextMenu?.voucher) {\n            handleView(contextMenu.voucher);\n          }\n          setContextMenu(null);\n        }}\n        onDelete={() => {\n          if (contextMenu?.voucher) {\n            handleDeleteOrder(contextMenu.voucher.id);\n          }\n          setContextMenu(null);\n        }}\n      />\n\n      {/* Add BOM Modal */}\n      <AddBOMModal\n        open={showAddBOMModal}\n        onClose={() => setShowAddBOMModal(false)}\n        onAdd={handleAddBOM}\n        mode=\"create\"\n      />\n    </Container>\n  );\n};\n\nexport default ProductionOrder;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/stock-journal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[166,177],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[177,191],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[215,230],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[230,240],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Table' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Table"},"fix":{"range":[275,285],"text":""},"desc":"Remove unused variable 'Table'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableBody' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableBody"},"fix":{"range":[285,299],"text":""},"desc":"Remove unused variable 'TableBody'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableCell' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableCell"},"fix":{"range":[299,313],"text":""},"desc":"Remove unused variable 'TableCell'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableContainer' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableContainer"},"fix":{"range":[313,332],"text":""},"desc":"Remove unused variable 'TableContainer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableHead' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableHead"},"fix":{"range":[332,346],"text":""},"desc":"Remove unused variable 'TableHead'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TableRow' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"TableRow"},"fix":{"range":[346,359],"text":""},"desc":"Remove unused variable 'TableRow'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[359,369],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Autocomplete' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Autocomplete"},"fix":{"range":[369,386],"text":""},"desc":"Remove unused variable 'Autocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[386,402],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[402,416],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[416,426],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[426,438],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[438,446],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Checkbox"},"fix":{"range":[469,481],"text":""},"desc":"Remove unused variable 'Checkbox'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[481,501],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[538,542],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Remove' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Remove"},"fix":{"range":[541,552],"text":""},"desc":"Remove unused variable 'Remove'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[552,566],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[566,575],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[575,586],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Save' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Save"},"fix":{"range":[586,595],"text":""},"desc":"Remove unused variable 'Save'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Cancel' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Cancel"},"fix":{"range":[595,605],"text":""},"desc":"Remove unused variable 'Cancel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherContextMenu' is defined but never used.","line":44,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherContextMenu"},"fix":{"range":[821,845],"text":""},"desc":"Remove unused variable 'VoucherContextMenu'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherHeaderActions' is defined but never used.","line":45,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherHeaderActions"},"fix":{"range":[894,920],"text":""},"desc":"Remove unused variable 'VoucherHeaderActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'journalTypeOptions' is assigned a value but never used.","line":100,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"journalTypeOptions"},"fix":{"range":[2181,2463],"text":""},"desc":"Remove unused variable 'journalTypeOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'transformationTypeOptions' is assigned a value but never used.","line":108,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"transformationTypeOptions"},"fix":{"range":[2465,2670],"text":""},"desc":"Remove unused variable 'transformationTypeOptions'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":115,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":115,"endColumn":37},{"ruleId":"no-redeclare","severity":2,"message":"'StockJournal' is already defined.","line":115,"column":25,"nodeType":"Identifier","messageId":"redeclared","endLine":115,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":116,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"router"},"fix":{"range":[2715,2742],"text":""},"desc":"Remove unused variable 'router'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSubmit' is assigned a value but never used.","line":121,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSubmit"},"fix":{"range":[2944,2958],"text":""},"desc":"Remove unused variable 'handleSubmit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'errors' is assigned a value but never used.","line":121,"column":71,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":77,"suggestions":[{"messageId":"removeVar","data":{"varName":"errors"},"fix":{"range":[2982,3005],"text":""},"desc":"Remove unused variable 'errors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'entryFields' is assigned a value but never used.","line":126,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"entryFields"},"fix":{"range":[3073,3093],"text":""},"desc":"Remove unused variable 'entryFields'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'removeEntry' is assigned a value but never used.","line":128,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"removeEntry"},"fix":{"range":[3117,3142],"text":""},"desc":"Remove unused variable 'removeEntry'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isFetching' is assigned a value but never used.","line":159,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"isFetching"},"fix":{"range":[3928,3940],"text":""},"desc":"Remove unused variable 'isFetching'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'latestJournals' is assigned a value but never used.","line":176,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"latestJournals"},"fix":{"range":[4544,4595],"text":""},"desc":"Remove unused variable 'latestJournals'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'productOptions' is assigned a value but never used.","line":177,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"productOptions"},"fix":{"range":[4598,4639],"text":""},"desc":"Remove unused variable 'productOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'manufacturingOrderOptions' is assigned a value but never used.","line":178,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":178,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"manufacturingOrderOptions"},"fix":{"range":[4642,4702],"text":""},"desc":"Remove unused variable 'manufacturingOrderOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'bomOptions' is assigned a value but never used.","line":179,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"bomOptions"},"fix":{"range":[4705,4738],"text":""},"desc":"Remove unused variable 'bomOptions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onSubmit' is assigned a value but never used.","line":241,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":241,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"onSubmit"},"fix":{"range":[6645,6842],"text":""},"desc":"Remove unused variable 'onSubmit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleEdit' is assigned a value but never used.","line":249,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":249,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleEdit"},"fix":{"range":[6846,6951],"text":""},"desc":"Remove unused variable 'handleEdit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleView' is assigned a value but never used.","line":254,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":254,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleView"},"fix":{"range":[6955,7060],"text":""},"desc":"Remove unused variable 'handleView'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDelete' is assigned a value but never used.","line":259,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":259,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleDelete"},"fix":{"range":[7064,7235],"text":""},"desc":"Remove unused variable 'handleDelete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCancel' is assigned a value but never used.","line":265,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":265,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCancel"},"fix":{"range":[7239,7346],"text":""},"desc":"Remove unused variable 'handleCancel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addEntry' is assigned a value but never used.","line":271,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":271,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"addEntry"},"fix":{"range":[7350,7557],"text":""},"desc":"Remove unused variable 'addEntry'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updateEntryValues' is assigned a value but never used.","line":283,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":283,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"updateEntryValues"},"fix":{"range":[7561,7961],"text":""},"desc":"Remove unused variable 'updateEntryValues'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getJournalTypeIcon' is assigned a value but never used.","line":294,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"getJournalTypeIcon"},"fix":{"range":[7965,8225],"text":""},"desc":"Remove unused variable 'getJournalTypeIcon'."}]}],"suppressedMessages":[],"errorCount":50,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Box, \n  Button, \n  TextField, \n  Typography, \n  Grid, \n  IconButton, \n  Alert, \n  CircularProgress, \n  Container, \n  Table, \n  TableBody, \n  TableCell, \n  TableContainer, \n  TableHead, \n  TableRow, \n  Paper, \n  Autocomplete, \n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Card,\n  CardContent,\n  Checkbox,\n  FormControlLabel\n} from '@mui/material';\nimport { \n  Add, \n  Remove,\n  Visibility, \n  Edit, \n  Delete, \n  Save,\n  Cancel\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../../../lib/api';\nimport { getProducts } from '../../../services/masterService';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\n\ninterface StockJournalEntry {\n  product_id: number;\n  debit_quantity: number;\n  credit_quantity: number;\n  unit: string;\n  unit_rate: number;\n  debit_value: number;\n  credit_value: number;\n  from_location?: string;\n  to_location?: string;\n  from_warehouse?: string;\n  to_warehouse?: string;\n  from_bin?: string;\n  to_bin?: string;\n  batch_number?: string;\n  lot_number?: string;\n  expiry_date?: string;\n  transformation_type?: string;\n}\n\ninterface StockJournal {\n  id?: number;\n  voucher_number: string;\n  date: string;\n  journal_type: string;\n  from_location?: string;\n  to_location?: string;\n  from_warehouse?: string;\n  to_warehouse?: string;\n  manufacturing_order_id?: number;\n  bom_id?: number;\n  transfer_reason?: string;\n  assembly_product_id?: number;\n  assembly_quantity?: number;\n  physical_verification_done: boolean;\n  verified_by?: string;\n  verification_date?: string;\n  notes?: string;\n  status: string;\n  total_amount: number;\n  entries: StockJournalEntry[];\n}\n\nconst defaultValues: Partial<StockJournal> = {\n  voucher_number: '',\n  date: new Date().toISOString().split('T')[0],\n  journal_type: 'transfer',\n  physical_verification_done: false,\n  status: 'draft',\n  total_amount: 0,\n  entries: []\n};\n\nconst journalTypeOptions = [\n  { value: 'transfer', label: 'Stock Transfer' },\n  { value: 'assembly', label: 'Assembly' },\n  { value: 'disassembly', label: 'Disassembly' },\n  { value: 'adjustment', label: 'Stock Adjustment' },\n  { value: 'manufacturing', label: 'Manufacturing' }\n];\n\nconst transformationTypeOptions = [\n  { value: 'consume', label: 'Consume' },\n  { value: 'produce', label: 'Produce' },\n  { value: 'byproduct', label: 'Byproduct' },\n  { value: 'scrap', label: 'Scrap' }\n];\n\nexport default function StockJournal() {\n  const router = useRouter();\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>('create');\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n  const queryClient = useQueryClient();\n\n  const { control, handleSubmit, watch, setValue, reset, formState: { errors } } = useForm<StockJournal>({\n    defaultValues\n  });\n\n  const {\n    fields: entryFields,\n    append: appendEntry,\n    remove: removeEntry\n  } = useFieldArray({\n    control,\n    name: 'entries'\n  });\n\n  // Fetch stock journals list\n  const { data: journalList, isLoading } = useQuery({\n    queryKey: ['stock-journals'],\n    queryFn: () => api.get('/stock-journals').then(res => res.data),\n  });\n\n  // Fetch manufacturing orders\n  const { data: manufacturingOrders } = useQuery({\n    queryKey: ['manufacturing-orders'],\n    queryFn: () => api.get('/manufacturing-orders').then(res => res.data),\n  });\n\n  // Fetch BOMs\n  const { data: bomList } = useQuery({\n    queryKey: ['boms'],\n    queryFn: () => api.get('/boms').then(res => res.data),\n  });\n\n  // Fetch products\n  const { data: productList } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts\n  });\n\n  // Fetch specific journal\n  const { data: journalData, isFetching } = useQuery({\n    queryKey: ['stock-journal', selectedId],\n    queryFn: () => api.get(`/stock-journals/${selectedId}`).then(res => res.data),\n    enabled: !!selectedId\n  });\n\n  // Fetch next voucher number\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: ['nextStockJournalNumber'],\n    queryFn: () => api.get('/stock-journals/next-number').then(res => res.data),\n    enabled: mode === 'create',\n  });\n\n  const sortedJournals = journalList ? [...journalList].sort((a, b) => \n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n  ) : [];\n\n  const latestJournals = sortedJournals.slice(0, 10);\n  const productOptions = productList || [];\n  const manufacturingOrderOptions = manufacturingOrders || [];\n  const bomOptions = bomList || [];\n\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (journalData) {\n      reset(journalData);\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [journalData, mode, reset, nextVoucherNumber, setValue]);\n\n  // Calculate totals\n  useEffect(() => {\n    const entries = watch('entries') || [];\n    const total = entries.reduce((sum, entry) => \n      sum + (entry.debit_value || 0) - (entry.credit_value || 0), 0);\n    setValue('total_amount', total);\n  }, [watch('entries'), setValue]);\n\n  // Mutations\n  const createMutation = useMutation({\n    mutationFn: (data: StockJournal) => api.post('/stock-journals', data),\n    onSuccess: async () => {\n      queryClient.invalidateQueries({ queryKey: ['stock-journals'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('Error creating stock journal:', error);\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: StockJournal }) => \n      api.put(`/stock-journals/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['stock-journals'] });\n      setMode('create');\n      setSelectedId(null);\n      reset(defaultValues);\n    },\n    onError: (error: any) => {\n      console.error('Error updating stock journal:', error);\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/stock-journals/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['stock-journals'] });\n      if (selectedId) {\n        setSelectedId(null);\n        setMode('create');\n        reset(defaultValues);\n      }\n    }\n  });\n\n  const onSubmit = (data: StockJournal) => {\n    if (mode === 'edit' && selectedId) {\n      updateMutation.mutate({ id: selectedId, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (journal: StockJournal) => {\n    setSelectedId(journal.id!);\n    setMode('edit');\n  };\n\n  const handleView = (journal: StockJournal) => {\n    setSelectedId(journal.id!);\n    setMode('view');\n  };\n\n  const handleDelete = (journalId: number) => {\n    if (window.confirm('Are you sure you want to delete this journal?')) {\n      deleteMutation.mutate(journalId);\n    }\n  };\n\n  const handleCancel = () => {\n    setMode('create');\n    setSelectedId(null);\n    reset(defaultValues);\n  };\n\n  const addEntry = () => {\n    appendEntry({\n      product_id: 0,\n      debit_quantity: 0,\n      credit_quantity: 0,\n      unit: '',\n      unit_rate: 0,\n      debit_value: 0,\n      credit_value: 0\n    });\n  };\n\n  const updateEntryValues = (index: number) => {\n    const entries = watch('entries');\n    const entry = entries[index];\n    if (entry) {\n      const debitValue = entry.debit_quantity * entry.unit_rate;\n      const creditValue = entry.credit_quantity * entry.unit_rate;\n      setValue(`entries.${index}.debit_value`, debitValue);\n      setValue(`entries.${index}.credit_value`, creditValue);\n    }\n  };\n\n  const getJournalTypeIcon = (type: string) => {\n    const colors = {\n      transfer: 'primary',\n      assembly: 'success',\n      disassembly: 'warning',\n      adjustment: 'info',\n      manufacturing: 'secondary'\n    };\n    return colors[type] || 'default';\n  };\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Stock Journals\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* Journal List - Left Side */}\n        <Grid size={{ xs: 12, md: 5 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\">Recent Journals</Typography>\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}\n                {/* VoucherHeaderActions commented out */}              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default StockJournal;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Manufacturing-Vouchers/work-order.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Others/dispatch-details.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[116,127],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[203,217],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[502,513],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[587,595],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"FilterList"},"fix":{"range":[605,619],"text":""},"desc":"Remove unused variable 'FilterList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Assignment' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Assignment"},"fix":{"range":[628,642],"text":""},"desc":"Remove unused variable 'Assignment'."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Others/dispatch-details.tsx\n// Dispatch Details Voucher Page\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  TextField,\n  Typography,\n  Grid,\n  IconButton,\n  CircularProgress,\n  Container,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Chip,\n  Card,\n  CardContent,\n  CardActions,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  Tooltip,\n  Divider\n} from '@mui/material';\nimport {\n  LocalShipping,\n  Visibility,\n  Edit,\n  Search,\n  FilterList,\n  Track,\n  Assignment,\n  Person,\n  Phone,\n  LocationOn\n} from '@mui/icons-material';\nimport { useQuery } from '@tanstack/react-query';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport { dispatchService } from '../../../services/dispatchService';\n\nconst DispatchDetailsPage: React.FC = () => {\n  const [selectedDispatch, setSelectedDispatch] = useState<any>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n\n  // Fetch dispatch orders\n  const { data: dispatches = [], isLoading, error } = useQuery({\n    queryKey: ['dispatch-orders', searchTerm, statusFilter],\n    queryFn: () => dispatchService.getDispatchOrders({\n      search: searchTerm || undefined,\n      filter: statusFilter ? { status: statusFilter } : undefined\n    })\n  });\n\n  const handleView = (dispatch: any) => {\n    setSelectedDispatch(dispatch);\n    setIsDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setSelectedDispatch(null);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'pending': return 'warning';\n      case 'in_transit': return 'info';\n      case 'delivered': return 'success';\n      case 'cancelled': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) {return '-';}\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatDateTime = (dateString: string) => {\n    if (!dateString) {return '-';}\n    return new Date(dateString).toLocaleString();\n  };\n\n  return (\n    <VoucherLayout\n      title=\"Dispatch Details\"\n      description=\"View and track dispatch order details and delivery status\"\n    >\n      <Container maxWidth=\"xl\">\n        {/* Header Actions */}\n        <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\n            <TextField\n              size=\"small\"\n              placeholder=\"Search dispatch orders...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\n              }}\n            />\n            <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n              <InputLabel>Status</InputLabel>\n              <Select\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n                label=\"Status\"\n              >\n                <MenuItem value=\"\">All</MenuItem>\n                <MenuItem value=\"pending\">Pending</MenuItem>\n                <MenuItem value=\"in_transit\">In Transit</MenuItem>\n                <MenuItem value=\"delivered\">Delivered</MenuItem>\n                <MenuItem value=\"cancelled\">Cancelled</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n        </Box>\n\n        {/* Error Alert */}\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            Failed to load dispatch orders\n          </Alert>\n        )}\n\n        {/* Loading */}\n        {isLoading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {/* Dispatch Cards */}\n        <Grid container spacing={3}>\n          {dispatches.map((dispatch: any) => (\n            <Grid item xs={12} md={6} lg={4} key={dispatch.id}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\n                    <Typography variant=\"h6\" component=\"div\" noWrap>\n                      {dispatch.order_number}\n                    </Typography>\n                    <Chip\n                      label={dispatch.status?.replace('_', ' ')}\n                      color={getStatusColor(dispatch.status) as any}\n                      size=\"small\"\n                    />\n                  </Box>\n                  \n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                    <Person fontSize=\"small\" color=\"action\" />\n                    <Typography variant=\"body2\">\n                      Customer ID: {dispatch.customer_id}\n                    </Typography>\n                  </Box>\n                  \n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                    <LocationOn fontSize=\"small\" color=\"action\" />\n                    <Typography variant=\"body2\" noWrap>\n                      {dispatch.delivery_address}\n                    </Typography>\n                  </Box>\n                  \n                  {dispatch.delivery_contact_person && (\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                      <Phone fontSize=\"small\" color=\"action\" />\n                      <Typography variant=\"body2\">\n                        {dispatch.delivery_contact_person}\n                      </Typography>\n                    </Box>\n                  )}\n                  \n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    <strong>Created:</strong> {formatDate(dispatch.created_at)}\n                  </Typography>\n                  \n                  {dispatch.expected_delivery_date && (\n                    <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                      <strong>Expected:</strong> {formatDate(dispatch.expected_delivery_date)}\n                    </Typography>\n                  )}\n                  \n                  <Typography variant=\"body2\">\n                    <strong>Items:</strong> {dispatch.items?.length || 0}\n                  </Typography>\n                  \n                  {dispatch.tracking_number && (\n                    <Box sx={{ mt: 2, p: 1, bgcolor: 'grey.100', borderRadius: 1 }}>\n                      <Typography variant=\"body2\" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Track fontSize=\"small\" />\n                        <strong>Tracking:</strong> {dispatch.tracking_number}\n                      </Typography>\n                      {dispatch.courier_name && (\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          Courier: {dispatch.courier_name}\n                        </Typography>\n                      )}\n                    </Box>\n                  )}\n                </CardContent>\n                \n                <CardActions>\n                  <Button\n                    size=\"small\"\n                    startIcon={<Visibility />}\n                    onClick={() => handleView(dispatch)}\n                  >\n                    View Details\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n\n        {/* Empty State */}\n        {!isLoading && dispatches.length === 0 && (\n          <Box sx={{ textAlign: 'center', py: 8 }}>\n            <LocalShipping sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n              No dispatch orders found\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {searchTerm || statusFilter\n                ? 'Try adjusting your search criteria'\n                : 'Dispatch orders will appear here once created'\n              }\n            </Typography>\n          </Box>\n        )}\n\n        {/* Dispatch Details Dialog */}\n        <Dialog open={isDialogOpen} onClose={handleDialogClose} maxWidth=\"lg\" fullWidth>\n          <DialogTitle>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              <LocalShipping />\n              Dispatch Order Details\n              {selectedDispatch && (\n                <Chip\n                  label={selectedDispatch.status?.replace('_', ' ')}\n                  color={getStatusColor(selectedDispatch.status) as any}\n                  size=\"small\"\n                />\n              )}\n            </Box>\n          </DialogTitle>\n          \n          <DialogContent dividers>\n            {selectedDispatch && (\n              <Grid container spacing={3}>\n                {/* Basic Information */}\n                <Grid item xs={12}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Basic Information\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12} md={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Order Number\"\n                    value={selectedDispatch.order_number || ''}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n                \n                <Grid item xs={12} md={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Customer ID\"\n                    value={selectedDispatch.customer_id || ''}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n                \n                <Grid item xs={12} md={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Ticket ID\"\n                    value={selectedDispatch.ticket_id || 'N/A'}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n                \n                <Grid item xs={12} md={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Status\"\n                    value={selectedDispatch.status?.replace('_', ' ') || ''}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n\n                {/* Delivery Information */}\n                <Grid item xs={12}>\n                  <Divider sx={{ my: 2 }} />\n                  <Typography variant=\"h6\" gutterBottom>\n                    Delivery Information\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Delivery Address\"\n                    multiline\n                    rows={3}\n                    value={selectedDispatch.delivery_address || ''}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n                \n                <Grid item xs={12} md={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Contact Person\"\n                    value={selectedDispatch.delivery_contact_person || 'N/A'}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n                \n                <Grid item xs={12} md={6}>\n                  <TextField\n                    fullWidth\n                    label=\"Contact Number\"\n                    value={selectedDispatch.delivery_contact_number || 'N/A'}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n\n                {/* Dates */}\n                <Grid item xs={12}>\n                  <Divider sx={{ my: 2 }} />\n                  <Typography variant=\"h6\" gutterBottom>\n                    Important Dates\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={12} md={4}>\n                  <TextField\n                    fullWidth\n                    label=\"Created At\"\n                    value={formatDateTime(selectedDispatch.created_at)}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n                \n                <Grid item xs={12} md={4}>\n                  <TextField\n                    fullWidth\n                    label=\"Expected Delivery\"\n                    value={formatDateTime(selectedDispatch.expected_delivery_date)}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n                \n                <Grid item xs={12} md={4}>\n                  <TextField\n                    fullWidth\n                    label=\"Actual Delivery\"\n                    value={formatDateTime(selectedDispatch.actual_delivery_date)}\n                    InputProps={{ readOnly: true }}\n                  />\n                </Grid>\n\n                {/* Tracking Information */}\n                {(selectedDispatch.tracking_number || selectedDispatch.courier_name) && (\n                  <>\n                    <Grid item xs={12}>\n                      <Divider sx={{ my: 2 }} />\n                      <Typography variant=\"h6\" gutterBottom>\n                        Tracking Information\n                      </Typography>\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <TextField\n                        fullWidth\n                        label=\"Tracking Number\"\n                        value={selectedDispatch.tracking_number || 'N/A'}\n                        InputProps={{ readOnly: true }}\n                      />\n                    </Grid>\n                    \n                    <Grid item xs={12} md={6}>\n                      <TextField\n                        fullWidth\n                        label=\"Courier Name\"\n                        value={selectedDispatch.courier_name || 'N/A'}\n                        InputProps={{ readOnly: true }}\n                      />\n                    </Grid>\n                  </>\n                )}\n\n                {/* Notes */}\n                {selectedDispatch.notes && (\n                  <>\n                    <Grid item xs={12}>\n                      <Divider sx={{ my: 2 }} />\n                      <Typography variant=\"h6\" gutterBottom>\n                        Notes\n                      </Typography>\n                    </Grid>\n                    \n                    <Grid item xs={12}>\n                      <TextField\n                        fullWidth\n                        label=\"Notes\"\n                        multiline\n                        rows={3}\n                        value={selectedDispatch.notes}\n                        InputProps={{ readOnly: true }}\n                      />\n                    </Grid>\n                  </>\n                )}\n\n                {/* Items */}\n                <Grid item xs={12}>\n                  <Divider sx={{ my: 2 }} />\n                  <Typography variant=\"h6\" gutterBottom>\n                    Dispatch Items\n                  </Typography>\n                  \n                  <TableContainer component={Paper} variant=\"outlined\">\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>Product ID</TableCell>\n                          <TableCell>Quantity</TableCell>\n                          <TableCell>Unit</TableCell>\n                          <TableCell>Description</TableCell>\n                          <TableCell>Status</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {selectedDispatch.items?.map((item: any, index: number) => (\n                          <TableRow key={index}>\n                            <TableCell>{item.product_id}</TableCell>\n                            <TableCell>{item.quantity}</TableCell>\n                            <TableCell>{item.unit}</TableCell>\n                            <TableCell>{item.description || '-'}</TableCell>\n                            <TableCell>\n                              <Chip\n                                label={item.status}\n                                color={getStatusColor(item.status) as any}\n                                size=\"small\"\n                              />\n                            </TableCell>\n                          </TableRow>\n                        )) || (\n                          <TableRow>\n                            <TableCell colSpan={5} align=\"center\">\n                              No items found\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </Grid>\n              </Grid>\n            )}\n          </DialogContent>\n          \n          <DialogActions>\n            <Button onClick={handleDialogClose}>\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Container>\n    </VoucherLayout>\n  );\n};\n\nexport default DispatchDetailsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Others/rfq.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[106,117],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Autocomplete' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"Autocomplete"},"fix":{"range":[327,343],"text":""},"desc":"Remove unused variable 'Autocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Fab' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Fab"},"fix":{"range":[508,515],"text":""},"desc":"Remove unused variable 'Fab'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[515,526],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[597,607],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Send' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Send"},"fix":{"range":[607,615],"text":""},"desc":"Remove unused variable 'Send'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FilterList' is defined but never used.","line":46,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"FilterList"},"fix":{"range":[639,653],"text":""},"desc":"Remove unused variable 'FilterList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":47,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Download"},"fix":{"range":[653,665],"text":""},"desc":"Remove unused variable 'Download'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":48,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Upload"},"fix":{"range":[665,675],"text":""},"desc":"Remove unused variable 'Upload'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'handleDialogClose' was used before it was defined.","line":118,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":118,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 104 column 39.","line":120,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":120,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 104 column 39.","line":120,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":120,"endColumn":25},{"ruleId":"no-use-before-define","severity":2,"message":"'handleDialogClose' was used before it was defined.","line":132,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":132,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 104 column 39.","line":134,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":134,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 104 column 39.","line":134,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":134,"endColumn":25}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Others/rfq.tsx\n// Request for Quotation (RFQ) Page\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  TextField,\n  Typography,\n  Grid,\n  IconButton,\n  CircularProgress,\n  Container,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Autocomplete,\n  Chip,\n  Card,\n  CardContent,\n  CardActions,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  Fab,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add,\n  Remove,\n  Visibility,\n  Edit,\n  Delete,\n  Send,\n  Assignment,\n  Search,\n  FilterList,\n  Download,\n  Upload\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport { procurementService } from '../../../services/procurementService';\n\ninterface RFQItem {\n  item_code: string;\n  item_name: string;\n  item_description: string;\n  quantity: number;\n  unit: string;\n  specifications: any;\n  expected_price: number;\n}\n\ninterface RFQFormData {\n  rfq_title: string;\n  rfq_description: string;\n  issue_date: string;\n  submission_deadline: string;\n  validity_period: number;\n  terms_and_conditions: string;\n  delivery_requirements: string;\n  payment_terms: string;\n  is_public: boolean;\n  requires_samples: boolean;\n  allow_partial_quotes: boolean;\n  rfq_items: RFQItem[];\n}\n\nconst RFQPage: React.FC = () => {\n  const [mode, setMode] = useState<'create' | 'view' | 'edit'>('view');\n  const [selectedRFQ, setSelectedRFQ] = useState<any>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [formData, setFormData] = useState<RFQFormData>({\n    rfq_title: '',\n    rfq_description: '',\n    issue_date: new Date().toISOString().split('T')[0],\n    submission_deadline: '',\n    validity_period: 30,\n    terms_and_conditions: '',\n    delivery_requirements: '',\n    payment_terms: '',\n    is_public: false,\n    requires_samples: false,\n    allow_partial_quotes: true,\n    rfq_items: []\n  });\n\n  const queryClient = useQueryClient();\n\n  // Fetch RFQs\n  const { data: rfqs = [], isLoading, error } = useQuery({\n    queryKey: ['rfqs', searchTerm, statusFilter],\n    queryFn: () => procurementService.getRFQs({\n      search: searchTerm || undefined,\n      status: statusFilter || undefined\n    })\n  });\n\n  // Create RFQ mutation\n  const createRFQMutation = useMutation({\n    mutationFn: procurementService.createRFQ,\n    onSuccess: () => {\n      toast.success('RFQ created successfully');\n      queryClient.invalidateQueries({ queryKey: ['rfqs'] });\n      handleDialogClose();\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to create RFQ');\n    }\n  });\n\n  // Update RFQ mutation\n  const updateRFQMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: any }) =>\n      procurementService.updateRFQ(id, data),\n    onSuccess: () => {\n      toast.success('RFQ updated successfully');\n      queryClient.invalidateQueries({ queryKey: ['rfqs'] });\n      handleDialogClose();\n    },\n    onError: (error: any) => {\n      toast.error(error.message || 'Failed to update RFQ');\n    }\n  });\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setSelectedRFQ(null);\n    setMode('view');\n    setFormData({\n      rfq_title: '',\n      rfq_description: '',\n      issue_date: new Date().toISOString().split('T')[0],\n      submission_deadline: '',\n      validity_period: 30,\n      terms_and_conditions: '',\n      delivery_requirements: '',\n      payment_terms: '',\n      is_public: false,\n      requires_samples: false,\n      allow_partial_quotes: true,\n      rfq_items: []\n    });\n  };\n\n  const handleCreateNew = () => {\n    setMode('create');\n    setSelectedRFQ(null);\n    setIsDialogOpen(true);\n  };\n\n  const handleEdit = (rfq: any) => {\n    setMode('edit');\n    setSelectedRFQ(rfq);\n    setFormData({\n      rfq_title: rfq.rfq_title || '',\n      rfq_description: rfq.rfq_description || '',\n      issue_date: rfq.issue_date || '',\n      submission_deadline: rfq.submission_deadline || '',\n      validity_period: rfq.validity_period || 30,\n      terms_and_conditions: rfq.terms_and_conditions || '',\n      delivery_requirements: rfq.delivery_requirements || '',\n      payment_terms: rfq.payment_terms || '',\n      is_public: rfq.is_public || false,\n      requires_samples: rfq.requires_samples || false,\n      allow_partial_quotes: rfq.allow_partial_quotes || true,\n      rfq_items: rfq.rfq_items || []\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleView = (rfq: any) => {\n    setMode('view');\n    setSelectedRFQ(rfq);\n    setFormData({\n      rfq_title: rfq.rfq_title || '',\n      rfq_description: rfq.rfq_description || '',\n      issue_date: rfq.issue_date || '',\n      submission_deadline: rfq.submission_deadline || '',\n      validity_period: rfq.validity_period || 30,\n      terms_and_conditions: rfq.terms_and_conditions || '',\n      delivery_requirements: rfq.delivery_requirements || '',\n      payment_terms: rfq.payment_terms || '',\n      is_public: rfq.is_public || false,\n      requires_samples: rfq.requires_samples || false,\n      allow_partial_quotes: rfq.allow_partial_quotes || true,\n      rfq_items: rfq.rfq_items || []\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = () => {\n    if (mode === 'create') {\n      createRFQMutation.mutate(formData);\n    } else if (mode === 'edit' && selectedRFQ) {\n      updateRFQMutation.mutate({ id: selectedRFQ.id, data: formData });\n    }\n  };\n\n  const addRFQItem = () => {\n    setFormData(prev => ({\n      ...prev,\n      rfq_items: [...prev.rfq_items, {\n        item_code: '',\n        item_name: '',\n        item_description: '',\n        quantity: 1,\n        unit: 'PCS',\n        specifications: {},\n        expected_price: 0\n      }]\n    }));\n  };\n\n  const removeRFQItem = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      rfq_items: prev.rfq_items.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateRFQItem = (index: number, field: keyof RFQItem, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      rfq_items: prev.rfq_items.map((item, i) =>\n        i === index ? { ...item, [field]: value } : item\n      )\n    }));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'draft': return 'default';\n      case 'sent': return 'primary';\n      case 'responded': return 'info';\n      case 'evaluated': return 'warning';\n      case 'awarded': return 'success';\n      case 'cancelled': return 'error';\n      default: return 'default';\n    }\n  };\n\n  return (\n    <VoucherLayout\n      title=\"Request for Quotation (RFQ)\"\n      description=\"Manage procurement requests and vendor quotations\"\n    >\n      <Container maxWidth=\"xl\">\n        {/* Header Actions */}\n        <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\n            <TextField\n              size=\"small\"\n              placeholder=\"Search RFQs...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: <Search sx={{ mr: 1, color: 'action.active' }} />\n              }}\n            />\n            <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n              <InputLabel>Status</InputLabel>\n              <Select\n                value={statusFilter}\n                onChange={(e) => setStatusFilter(e.target.value)}\n                label=\"Status\"\n              >\n                <MenuItem value=\"\">All</MenuItem>\n                <MenuItem value=\"draft\">Draft</MenuItem>\n                <MenuItem value=\"sent\">Sent</MenuItem>\n                <MenuItem value=\"responded\">Responded</MenuItem>\n                <MenuItem value=\"evaluated\">Evaluated</MenuItem>\n                <MenuItem value=\"awarded\">Awarded</MenuItem>\n                <MenuItem value=\"cancelled\">Cancelled</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={handleCreateNew}\n          >\n            Create RFQ\n          </Button>\n        </Box>\n\n        {/* Error Alert */}\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            Failed to load RFQs\n          </Alert>\n        )}\n\n        {/* Loading */}\n        {isLoading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {/* RFQ Cards */}\n        <Grid container spacing={3}>\n          {rfqs.map((rfq: any) => (\n            <Grid item xs={12} md={6} lg={4} key={rfq.id}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\n                    <Typography variant=\"h6\" component=\"div\" noWrap>\n                      {rfq.rfq_number}\n                    </Typography>\n                    <Chip\n                      label={rfq.status}\n                      color={getStatusColor(rfq.status) as any}\n                      size=\"small\"\n                    />\n                  </Box>\n                  \n                  <Typography variant=\"body1\" sx={{ fontWeight: 500, mb: 1 }}>\n                    {rfq.rfq_title}\n                  </Typography>\n                  \n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                    {rfq.rfq_description}\n                  </Typography>\n                  \n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    <strong>Issue Date:</strong> {rfq.issue_date}\n                  </Typography>\n                  \n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    <strong>Deadline:</strong> {rfq.submission_deadline}\n                  </Typography>\n                  \n                  <Typography variant=\"body2\">\n                    <strong>Items:</strong> {rfq.rfq_items?.length || 0}\n                  </Typography>\n                </CardContent>\n                \n                <CardActions>\n                  <Button\n                    size=\"small\"\n                    startIcon={<Visibility />}\n                    onClick={() => handleView(rfq)}\n                  >\n                    View\n                  </Button>\n                  <Button\n                    size=\"small\"\n                    startIcon={<Edit />}\n                    onClick={() => handleEdit(rfq)}\n                  >\n                    Edit\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n\n        {/* RFQ Dialog */}\n        <Dialog open={isDialogOpen} onClose={handleDialogClose} maxWidth=\"lg\" fullWidth>\n          <DialogTitle>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              <Assignment />\n              {mode === 'create' && 'Create New RFQ'}\n              {mode === 'edit' && 'Edit RFQ'}\n              {mode === 'view' && 'View RFQ'}\n            </Box>\n          </DialogTitle>\n          \n          <DialogContent dividers>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"RFQ Title\"\n                  value={formData.rfq_title}\n                  onChange={(e) => setFormData(prev => ({ ...prev, rfq_title: e.target.value }))}\n                  disabled={mode === 'view'}\n                  required\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Validity Period (Days)\"\n                  type=\"number\"\n                  value={formData.validity_period}\n                  onChange={(e) => setFormData(prev => ({ ...prev, validity_period: parseInt(e.target.value) || 0 }))}\n                  disabled={mode === 'view'}\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Issue Date\"\n                  type=\"date\"\n                  value={formData.issue_date}\n                  onChange={(e) => setFormData(prev => ({ ...prev, issue_date: e.target.value }))}\n                  disabled={mode === 'view'}\n                  InputLabelProps={{ shrink: true }}\n                  required\n                />\n              </Grid>\n              \n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Submission Deadline\"\n                  type=\"date\"\n                  value={formData.submission_deadline}\n                  onChange={(e) => setFormData(prev => ({ ...prev, submission_deadline: e.target.value }))}\n                  disabled={mode === 'view'}\n                  InputLabelProps={{ shrink: true }}\n                  required\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"RFQ Description\"\n                  multiline\n                  rows={3}\n                  value={formData.rfq_description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, rfq_description: e.target.value }))}\n                  disabled={mode === 'view'}\n                />\n              </Grid>\n              \n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Terms and Conditions\"\n                  multiline\n                  rows={3}\n                  value={formData.terms_and_conditions}\n                  onChange={(e) => setFormData(prev => ({ ...prev, terms_and_conditions: e.target.value }))}\n                  disabled={mode === 'view'}\n                />\n              </Grid>\n            </Grid>\n\n            {/* RFQ Items */}\n            <Box sx={{ mt: 4 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\">RFQ Items</Typography>\n                {mode !== 'view' && (\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Add />}\n                    onClick={addRFQItem}\n                    size=\"small\"\n                  >\n                    Add Item\n                  </Button>\n                )}\n              </Box>\n\n              <TableContainer component={Paper} variant=\"outlined\">\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Item Code</TableCell>\n                      <TableCell>Item Name</TableCell>\n                      <TableCell>Quantity</TableCell>\n                      <TableCell>Unit</TableCell>\n                      <TableCell>Expected Price</TableCell>\n                      {mode !== 'view' && <TableCell>Actions</TableCell>}\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {formData.rfq_items.map((item, index) => (\n                      <TableRow key={index}>\n                        <TableCell>\n                          <TextField\n                            size=\"small\"\n                            value={item.item_code}\n                            onChange={(e) => updateRFQItem(index, 'item_code', e.target.value)}\n                            disabled={mode === 'view'}\n                            placeholder=\"Item code\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <TextField\n                            size=\"small\"\n                            value={item.item_name}\n                            onChange={(e) => updateRFQItem(index, 'item_name', e.target.value)}\n                            disabled={mode === 'view'}\n                            placeholder=\"Item name\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <TextField\n                            size=\"small\"\n                            type=\"number\"\n                            value={item.quantity}\n                            onChange={(e) => updateRFQItem(index, 'quantity', parseFloat(e.target.value) || 0)}\n                            disabled={mode === 'view'}\n                            inputProps={{ min: 0, step: 0.1 }}\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <TextField\n                            size=\"small\"\n                            value={item.unit}\n                            onChange={(e) => updateRFQItem(index, 'unit', e.target.value)}\n                            disabled={mode === 'view'}\n                            placeholder=\"Unit\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <TextField\n                            size=\"small\"\n                            type=\"number\"\n                            value={item.expected_price}\n                            onChange={(e) => updateRFQItem(index, 'expected_price', parseFloat(e.target.value) || 0)}\n                            disabled={mode === 'view'}\n                            inputProps={{ min: 0, step: 0.01 }}\n                          />\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell>\n                            <IconButton\n                              size=\"small\"\n                              color=\"error\"\n                              onClick={() => removeRFQItem(index)}\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          </DialogContent>\n          \n          <DialogActions>\n            <Button onClick={handleDialogClose}>\n              {mode === 'view' ? 'Close' : 'Cancel'}\n            </Button>\n            {mode !== 'view' && (\n              <Button\n                variant=\"contained\"\n                onClick={handleSubmit}\n                disabled={createRFQMutation.isPending || updateRFQMutation.isPending}\n              >\n                {mode === 'create' ? 'Create RFQ' : 'Update RFQ'}\n              </Button>\n            )}\n          </DialogActions>\n        </Dialog>\n      </Container>\n    </VoucherLayout>\n  );\n};\n\nexport default RFQPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Pre-Sales-Voucher/proforma-invoice.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":4,"column":180,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":194,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[369,385],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[385,394],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[394,401],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[401,408],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[408,414],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[464,476],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[476,482],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[482,495],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[495,508],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[508,521],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherReferenceDropdown' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherReferenceDropdown"},"fix":{"range":[1060,1090],"text":""},"desc":"Remove unused variable 'VoucherReferenceDropdown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1145,1165],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1428,1443],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2219,2240],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2240,2264],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2264,2283],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2300,2326],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":48,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2326,2355],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2355,2371],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2371,2390],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2390,2404],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2404,2421],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2421,2433],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2433,2448],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2448,2470],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2470,2515],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2515,2529],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2529,2549],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2549,2571],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2571,2630],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":65,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2630,2659],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":79,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[2787,2817],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":97,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[3059,3100],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":100,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3132,3173],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":103,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3252,3270],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":104,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3270,3291],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":105,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3291,3313],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":112,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3399,3433],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":307,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":307,"endColumn":40}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Pre-Sales-Voucher/proforma-invoice.tsx\n// Proforma Invoice Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherReferenceDropdown from '../../../components/VoucherReferenceDropdown';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\n\nconst ProformaInvoicePage: React.FC = () => {\n  const config = getVoucherConfig('proforma-invoice');\n  const voucherStyles = getVoucherStyles();\n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    customerList,\n    productList,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Proforma Invoice specific state\n  const selectedCustomerId = watch('customer_id');\n  const selectedCustomer = customerList?.find((c: any) => c.id === selectedCustomerId);\n\n  // Enhanced customer options with \"Add New\"\n  const enhancedCustomerOptions = [\n    ...(customerList || []),\n    { id: null, name: 'Add New Customer...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Proforma Invoice specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving proforma invoice:', error);\n      alert('Failed to save proforma invoice. Please try again.');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  const handleVoucherClick = async (voucher: any) => {\n    try {\n      // Fetch complete voucher data including items\n      const response = await api.get(`/proforma-invoices/${voucher.id}`);\n      const fullVoucherData = response.data;\n      \n      // Load the complete voucher data into the form\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      // Fallback to available data\n      setMode('view');\n      reset(voucher);\n    }\n  };\n  \n  // Enhanced handleEdit to fetch complete data\n  const handleEditWithData = async (voucher: any) => {\n    try {\n      const response = await api.get(`/proforma-invoices/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('edit');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleEdit(voucher);\n    }\n  };\n  \n  // Enhanced handleView to fetch complete data\n  const handleViewWithData = async (voucher: any) => {\n    try {\n      const response = await api.get(`/proforma-invoices/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleView(voucher);\n    }\n  };\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Customer</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No proforma invoices available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{customerList?.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Proforma Invoice\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold' }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Pre-Sales-Voucher/proforma-invoice\"\n          currentId={selectedCustomerId}\n        />\n      </Box>\n\n      <form onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Customer, Reference, Payment Terms in one row */}\n          <Grid size={4}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedCustomerOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedCustomer || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddCustomerModal(true);\n                } else {\n                  setValue('customer_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Customer\"\n                  error={!!errors.customer_id}\n                  helperText={errors.customer_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Reference\"\n              {...control.register('reference')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: '30%' }}>Product</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: 80, textAlign: 'center' }}>Stock</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Qty</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Rate</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Disc%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>GST%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1 }}>\n                          <ProductAutocomplete\n                            value={selectedProducts[index]}\n                            onChange={(product) => {\n                              setValue(`items.${index}.product_id`, product?.id || null);\n                              setValue(`items.${index}.product_name`, product?.product_name || '');\n                              setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                              setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                              setValue(`items.${index}.unit`, product?.unit || '');\n                              setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                              // Stock fetch handled in useEffect\n                            }}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          {watch(`items.${index}.product_id`) ? (\n                            <StockDisplay \n                              productId={watch(`items.${index}.product_id`)}\n                              disabled={false}\n                              showLabel={false}\n                            />\n                          ) : (\n                            <Typography variant=\"caption\" sx={{ color: 'text.disabled', fontSize: '0.7rem' }}>\n                              -\n                            </Typography>\n                          )}\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <TextField\n                              type=\"number\"\n                              {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                              disabled={mode === 'view'}\n                              size=\"small\"\n                              sx={{ width: 60 }}\n                            />\n                            <Typography sx={{ ml: 1, fontSize: 12 }}>{watch(`items.${index}.unit`)}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.unit_price`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 80 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 60 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <Autocomplete\n                            size=\"small\"\n                            options={GST_SLABS}\n                            value={watch(`items.${index}.gst_rate`) || 18}\n                            onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                            renderInput={(params) => (\n                              <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                            )}\n                            disabled={mode === 'view'}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, fontSize: 14 }}>\n                          ₹{computedItems[index]?.amount?.toLocaleString() || '0'}\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell sx={{ p: 1 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => remove(index)}\n                              color=\"error\"\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                      {/* Stock display below the row - only qty and unit */}\n                      <TableRow>\n                        <TableCell colSpan={mode !== 'view' ? 7 : 6} sx={{ py: 0.5, pl: 2, bgcolor: 'action.hover' }}>\n                          {stockLoading[index] ? (\n                            <CircularProgress size={12} />\n                          ) : watch(`items.${index}.product_id`) ? (\n                            <Typography variant=\"caption\" color={getStockColor(watch(`items.${index}.current_stock`), watch(`items.${index}.reorder_level`))}>\n                              {watch(`items.${index}.current_stock`)} {watch(`items.${index}.unit`)}\n                            </Typography>\n                          ) : null}\n                        </TableCell>\n                      </TableRow>\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      GST:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalGst.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      ₹{totalAmount.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n              {mode !== 'view' && (\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"success\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined)\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Proforma Invoices\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddCustomerModal \n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={refreshMasterData}\n        loading={addCustomerLoading}\n        setLoading={setAddCustomerLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onProductAdded={refreshMasterData}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n      />\n    </>\n  );\n};\n\nexport default ProformaInvoicePage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Pre-Sales-Voucher/quotation.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":4,"column":180,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":194,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[355,371],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[371,380],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[380,387],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[387,394],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[394,400],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[450,462],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[462,468],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[468,481],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[481,494],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[494,507],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1046,1066],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":17,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1329,1344],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":42,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2107,2128],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2128,2152],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2152,2171],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":46,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2188,2214],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2214,2243],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":48,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2243,2259],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2259,2278],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2278,2292],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2292,2309],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2309,2321],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2321,2336],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2336,2358],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":57,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2358,2403],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2403,2417],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2417,2437],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2437,2459],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":63,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2459,2518],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2518,2547],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":78,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[2675,2705],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":96,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[2947,2988],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":99,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3020,3061],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":102,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3140,3158],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":103,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3158,3179],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":104,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3179,3201],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":111,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3287,3321],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":306,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":306,"endColumn":40}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Pre-Sales-Voucher/quotation.tsx\n// Quotation Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\n\nconst QuotationPage: React.FC = () => {\n  const config = getVoucherConfig('quotation');\n  const voucherStyles = getVoucherStyles();\n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    customerList,\n    productList,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Quotation specific state\n  const selectedCustomerId = watch('customer_id');\n  const selectedCustomer = customerList?.find((c: any) => c.id === selectedCustomerId);\n\n  // Enhanced customer options with \"Add New\"\n  const enhancedCustomerOptions = [\n    ...(customerList || []),\n    { id: null, name: 'Add New Customer...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Quotation specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving quotation:', error);\n      alert('Failed to save quotation. Please try again.');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  const handleVoucherClick = async (voucher: any) => {\n    try {\n      // Fetch complete voucher data including items\n      const response = await api.get(`/quotations/${voucher.id}`);\n      const fullVoucherData = response.data;\n      \n      // Load the complete voucher data into the form\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      // Fallback to available data\n      setMode('view');\n      reset(voucher);\n    }\n  };\n  \n  // Enhanced handleEdit to fetch complete data\n  const handleEditWithData = async (voucher: any) => {\n    try {\n      const response = await api.get(`/quotations/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('edit');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleEdit(voucher);\n    }\n  };\n  \n  // Enhanced handleView to fetch complete data\n  const handleViewWithData = async (voucher: any) => {\n    try {\n      const response = await api.get(`/quotations/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleView(voucher);\n    }\n  };\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Customer</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No quotations available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{customerList?.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Quotation\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold' }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Pre-Sales-Voucher/quotation\"\n          currentId={selectedCustomerId}\n        />\n      </Box>\n\n      <form onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Customer, Reference, Payment Terms in one row */}\n          <Grid size={4}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedCustomerOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedCustomer || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddCustomerModal(true);\n                } else {\n                  setValue('customer_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Customer\"\n                  error={!!errors.customer_id}\n                  helperText={errors.customer_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Reference\"\n              {...control.register('reference')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: '30%' }}>Product</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: 80, textAlign: 'center' }}>Stock</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Qty</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Rate</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Disc%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>GST%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1 }}>\n                          <ProductAutocomplete\n                            value={selectedProducts[index]}\n                            onChange={(product) => {\n                              setValue(`items.${index}.product_id`, product?.id || null);\n                              setValue(`items.${index}.product_name`, product?.product_name || '');\n                              setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                              setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                              setValue(`items.${index}.unit`, product?.unit || '');\n                              setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                              // Stock fetch handled in useEffect\n                            }}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          {watch(`items.${index}.product_id`) ? (\n                            <StockDisplay \n                              productId={watch(`items.${index}.product_id`)}\n                              disabled={false}\n                              showLabel={false}\n                            />\n                          ) : (\n                            <Typography variant=\"caption\" sx={{ color: 'text.disabled', fontSize: '0.7rem' }}>\n                              -\n                            </Typography>\n                          )}\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <TextField\n                              type=\"number\"\n                              {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                              disabled={mode === 'view'}\n                              size=\"small\"\n                              sx={{ width: 60 }}\n                            />\n                            <Typography sx={{ ml: 1, fontSize: 12 }}>{watch(`items.${index}.unit`)}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.unit_price`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 80 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 60 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <Autocomplete\n                            size=\"small\"\n                            options={GST_SLABS}\n                            value={watch(`items.${index}.gst_rate`) || 18}\n                            onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                            renderInput={(params) => (\n                              <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                            )}\n                            disabled={mode === 'view'}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, fontSize: 14 }}>\n                          ₹{computedItems[index]?.amount?.toLocaleString() || '0'}\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell sx={{ p: 1 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => remove(index)}\n                              color=\"error\"\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                      {/* Stock display below the row - only qty and unit */}\n                      <TableRow>\n                        <TableCell colSpan={mode !== 'view' ? 7 : 6} sx={{ py: 0.5, pl: 2, bgcolor: 'action.hover' }}>\n                          {stockLoading[index] ? (\n                            <CircularProgress size={12} />\n                          ) : watch(`items.${index}.product_id`) ? (\n                            <Typography variant=\"caption\" color={getStockColor(watch(`items.${index}.current_stock`), watch(`items.${index}.reorder_level`))}>\n                              {watch(`items.${index}.current_stock`)} {watch(`items.${index}.unit`)}\n                            </Typography>\n                          ) : null}\n                        </TableCell>\n                      </TableRow>\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      GST:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalGst.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      ₹{totalAmount.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n              {mode !== 'view' && (\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"success\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined}\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Quotations\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddCustomerModal \n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={refreshMasterData}\n        loading={addCustomerLoading}\n        setLoading={setAddCustomerLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onProductAdded={refreshMasterData}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n      />\n    </>\n  );\n};\n\nexport default QuotationPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Pre-Sales-Voucher/sales-order.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":4,"column":180,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":194,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[359,375],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[375,384],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[384,391],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[391,398],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[398,404],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[454,466],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[466,472],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[472,485],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[485,498],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[498,511],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherReferenceDropdown' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherReferenceDropdown"},"fix":{"range":[1050,1080],"text":""},"desc":"Remove unused variable 'VoucherReferenceDropdown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1135,1155],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1418,1433],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2199,2220],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2220,2244],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2244,2263],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2280,2306],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":48,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2306,2335],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2335,2351],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2351,2370],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2370,2384],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2384,2401],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2401,2413],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2413,2428],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2428,2450],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2450,2495],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2495,2509],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2509,2529],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2529,2551],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2551,2610],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":65,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2610,2639],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":79,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[2767,2797],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":97,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[3039,3080],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":100,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3112,3153],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":103,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3232,3250],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":104,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3250,3271],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":105,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3271,3293],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":112,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3379,3413],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":307,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":307,"endColumn":40}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Pre-Sales-Voucher/sales-order.tsx\n// Sales Order Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherReferenceDropdown from '../../../components/VoucherReferenceDropdown';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\n\nconst SalesOrderPage: React.FC = () => {\n  const config = getVoucherConfig('sales-order');\n  const voucherStyles = getVoucherStyles();\n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    customerList,\n    productList,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Sales Order specific state\n  const selectedCustomerId = watch('customer_id');\n  const selectedCustomer = customerList?.find((c: any) => c.id === selectedCustomerId);\n\n  // Enhanced customer options with \"Add New\"\n  const enhancedCustomerOptions = [\n    ...(customerList || []),\n    { id: null, name: 'Add New Customer...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Sales Order specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving sales order:', error);\n      alert('Failed to save sales order. Please try again.');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  const handleVoucherClick = async (voucher: any) => {\n    try {\n      // Fetch complete voucher data including items\n      const response = await api.get(`/sales-orders/${voucher.id}`);\n      const fullVoucherData = response.data;\n      \n      // Load the complete voucher data into the form\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      // Fallback to available data\n      setMode('view');\n      reset(voucher);\n    }\n  };\n  \n  // Enhanced handleEdit to fetch complete data\n  const handleEditWithData = async (voucher: any) => {\n    try {\n      const response = await api.get(`/sales-orders/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('edit');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleEdit(voucher);\n    }\n  };\n  \n  // Enhanced handleView to fetch complete data\n  const handleViewWithData = async (voucher: any) => {\n    try {\n      const response = await api.get(`/sales-orders/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleView(voucher);\n    }\n  };\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Customer</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No sales orders available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{customerList?.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Sales Order\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold' }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Pre-Sales-Voucher/sales-order\"\n          currentId={selectedCustomerId}\n        />\n      </Box>\n\n      <form onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Customer, Reference, Payment Terms in one row */}\n          <Grid size={4}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedCustomerOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedCustomer || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddCustomerModal(true);\n                } else {\n                  setValue('customer_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Customer\"\n                  error={!!errors.customer_id}\n                  helperText={errors.customer_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Reference\"\n              {...control.register('reference')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: '30%' }}>Product</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: 80, textAlign: 'center' }}>Stock</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Qty</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Rate</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Disc%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>GST%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1 }}>\n                          <ProductAutocomplete\n                            value={selectedProducts[index]}\n                            onChange={(product) => {\n                              setValue(`items.${index}.product_id`, product?.id || null);\n                              setValue(`items.${index}.product_name`, product?.product_name || '');\n                              setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                              setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                              setValue(`items.${index}.unit`, product?.unit || '');\n                              setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                              // Stock fetch handled in useEffect\n                            }}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          {watch(`items.${index}.product_id`) ? (\n                            <StockDisplay \n                              productId={watch(`items.${index}.product_id`)}\n                              disabled={false}\n                              showLabel={false}\n                            />\n                          ) : (\n                            <Typography variant=\"caption\" sx={{ color: 'text.disabled', fontSize: '0.7rem' }}>\n                              -\n                            </Typography>\n                          )}\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <TextField\n                              type=\"number\"\n                              {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                              disabled={mode === 'view'}\n                              size=\"small\"\n                              sx={{ width: 60 }}\n                            />\n                            <Typography sx={{ ml: 1, fontSize: 12 }}>{watch(`items.${index}.unit`)}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.unit_price`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 80 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 60 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <Autocomplete\n                            size=\"small\"\n                            options={GST_SLABS}\n                            value={watch(`items.${index}.gst_rate`) || 18}\n                            onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                            renderInput={(params) => (\n                              <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                            )}\n                            disabled={mode === 'view'}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, fontSize: 14 }}>\n                          ₹{computedItems[index]?.amount?.toLocaleString() || '0'}\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell sx={{ p: 1 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => remove(index)}\n                              color=\"error\"\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                      {/* Stock display below the row - only qty and unit */}\n                      <TableRow>\n                        <TableCell colSpan={mode !== 'view' ? 7 : 6} sx={{ py: 0.5, pl: 2, bgcolor: 'action.hover' }}>\n                          {stockLoading[index] ? (\n                            <CircularProgress size={12} />\n                          ) : watch(`items.${index}.product_id`) ? (\n                            <Typography variant=\"caption\" color={getStockColor(watch(`items.${index}.current_stock`), watch(`items.${index}.reorder_level`))}>\n                              {watch(`items.${index}.current_stock`)} {watch(`items.${index}.unit`)}\n                            </Typography>\n                          ) : null}\n                        </TableCell>\n                      </TableRow>\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      GST:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalGst.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      ₹{totalAmount.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n              {mode !== 'view' && (\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"success\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined)\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Sales Orders\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddCustomerModal \n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={refreshMasterData}\n        loading={addCustomerLoading}\n        setLoading={setAddCustomerLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onProductAdded={refreshMasterData}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n      />\n    </>\n  );\n};\n\nexport default SalesOrderPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Purchase-Vouchers/grn.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[193,201],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":4,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":62,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[230,242],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":4,"column":180,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":194,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[358,374],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[374,383],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[383,390],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[390,397],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[397,403],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Fab' is defined but never used.","line":4,"column":225,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":228,"suggestions":[{"messageId":"removeVar","data":{"varName":"Fab"},"fix":{"range":[403,408],"text":""},"desc":"Remove unused variable 'Fab'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Add' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Add"},"fix":{"range":[442,446],"text":""},"desc":"Remove unused variable 'Add'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Remove' is defined but never used.","line":5,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"Remove"},"fix":{"range":[445,453],"text":""},"desc":"Remove unused variable 'Remove'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[453,465],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[465,471],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[471,484],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[484,497],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[497,510],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'PdfIcon' is defined but never used.","line":5,"column":96,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":103,"suggestions":[{"messageId":"removeVar","data":{"varName":"PdfIcon"},"fix":{"range":[510,535],"text":""},"desc":"Remove unused variable 'PdfIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1070,1090],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ProductAutocomplete' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"ProductAutocomplete"},"fix":{"range":[1135,1160],"text":""},"desc":"Remove unused variable 'ProductAutocomplete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":16,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1292,1307],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'GST_SLABS' is defined but never used.","line":16,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"GST_SLABS"},"fix":{"range":[1307,1318],"text":""},"desc":"Remove unused variable 'GST_SLABS'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'parseRateField' is defined but never used.","line":16,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":68,"suggestions":[{"messageId":"removeVar","data":{"varName":"parseRateField"},"fix":{"range":[1318,1334],"text":""},"desc":"Remove unused variable 'parseRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":16,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":85,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[1334,1351],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2185,2206],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2206,2230],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2230,2249],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2266,2292],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":48,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2292,2321],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2321,2337],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2337,2356],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2356,2370],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2370,2387],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2387,2399],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2399,2414],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2414,2436],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2436,2481],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2481,2495],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2495,2515],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2515,2537],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2537,2596],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":65,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2596,2625],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":79,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[2753,2783],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'productList' is assigned a value but never used.","line":81,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"productList"},"fix":{"range":[2799,2816],"text":""},"desc":"Remove unused variable 'productList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'computedItems' is assigned a value but never used.","line":88,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"computedItems"},"fix":{"range":[2896,2932],"text":""},"desc":"Remove unused variable 'computedItems'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalAmount' is assigned a value but never used.","line":89,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalAmount"},"fix":{"range":[2932,2949],"text":""},"desc":"Remove unused variable 'totalAmount'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalSubtotal' is assigned a value but never used.","line":90,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalSubtotal"},"fix":{"range":[2949,2968],"text":""},"desc":"Remove unused variable 'totalSubtotal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalGst' is assigned a value but never used.","line":91,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalGst"},"fix":{"range":[2968,2982],"text":""},"desc":"Remove unused variable 'totalGst'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":104,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3233,3251],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":105,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3251,3272],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":106,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3272,3294],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getAmountInWords' is assigned a value but never used.","line":110,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"getAmountInWords"},"fix":{"range":[3358,3380],"text":""},"desc":"Remove unused variable 'getAmountInWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":113,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3380,3414],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refetchPurchaseOrders' is assigned a value but never used.","line":137,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"refetchPurchaseOrders"},"fix":{"range":[4277,4309],"text":""},"desc":"Remove unused variable 'refetchPurchaseOrders'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refetchPurchaseVouchers' is assigned a value but never used.","line":144,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"refetchPurchaseVouchers"},"fix":{"range":[4534,4568],"text":""},"desc":"Remove unused variable 'refetchPurchaseVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleAddItem' is assigned a value but never used.","line":209,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":209,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleAddItem"},"fix":{"range":[7128,7217],"text":""},"desc":"Remove unused variable 'handleAddItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleFormSubmit' is assigned a value but never used.","line":277,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":277,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleFormSubmit"},"fix":{"range":[9519,9634],"text":""},"desc":"Remove unused variable 'handleFormSubmit'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":379,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":379,"endColumn":40}],"suppressedMessages":[],"errorCount":56,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Purchase-Vouchers/grn.tsx\n// Goods Receipt Note Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description, PictureAsPdf as PdfIcon } from '@mui/icons-material';\nimport AddVendorModal from '../../../components/AddVendorModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, parseRateField, formatRateField, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\nimport { useAuth } from '../../../context/AuthContext';\nimport { useQuery } from '@tanstack/react-query';\n\nconst GoodsReceiptNotePage: React.FC = () => {\n  const { isOrgContextReady } = useAuth();\n  const config = getVoucherConfig('grn');\n  const voucherStyles = getVoucherStyles();\n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddVendorModal,\n    setShowAddVendorModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addVendorLoading,\n    setAddVendorLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    vendorList,\n    productList,\n    voucherData,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Goods Receipt Note specific state\n  const selectedVendorId = watch('vendor_id');\n  const selectedVendor = vendorList?.find((v: any) => v.id === selectedVendorId);\n  const vendorValue = useMemo(() => {\n    return selectedVendor || null;\n  }, [selectedVendor]);\n\n  // Enhanced vendor options with \"Add New\"\n  const enhancedVendorOptions = [\n    ...(vendorList || []),\n    { id: null, name: 'Add New Vendor...' }\n  ];\n\n  // GRN specific states\n  const [selectedVoucherType, setSelectedVoucherType] = useState<'purchase-voucher' | 'purchase-order' | null>(null);\n  const [selectedVoucherId, setSelectedVoucherId] = useState<number | null>(null);\n\n  // Fetch purchase orders\n  const { data: purchaseOrdersData, refetch: refetchPurchaseOrders } = useQuery({\n    queryKey: ['purchase-orders'],\n    queryFn: () => api.get('/purchase-orders').then(res => res.data),\n    enabled: isOrgContextReady,\n  });\n\n  // Fetch purchase vouchers\n  const { data: purchaseVouchersData, refetch: refetchPurchaseVouchers } = useQuery({\n    queryKey: ['purchase-vouchers'],\n    queryFn: () => api.get('/purchase-vouchers').then(res => res.data),\n    enabled: isOrgContextReady,\n  });\n\n  // Fetch all GRNs to get used PO/PV IDs\n  const { data: grns } = useQuery({\n    queryKey: ['goods-receipt-notes'],\n    queryFn: () => api.get('/goods-receipt-notes').then(res => res.data),\n    enabled: isOrgContextReady,\n  });\n\n  // Compute used voucher IDs, excluding current GRN in edit mode\n  const currentGrnId = mode === 'edit' ? voucherData?.id : null;\n  const usedVoucherIds = useMemo(() => {\n    if (!grns) {return new Set();}\n    return new Set(grns.filter(grn => grn.id !== currentGrnId).map(grn => grn.purchase_order_id));\n  }, [grns, currentGrnId]);\n\n  // Filter voucher options to exclude used ones\n  const voucherOptions = useMemo(() => {\n    let options = [];\n    if (selectedVoucherType === 'purchase-order') {\n      options = purchaseOrdersData || [];\n    } else if (selectedVoucherType === 'purchase-voucher') {\n      options = purchaseVouchersData || [];\n    }\n    return options.filter(option => !usedVoucherIds.has(option.id));\n  }, [selectedVoucherType, purchaseOrdersData, purchaseVouchersData, usedVoucherIds]);\n\n  // Fetch selected voucher details\n  const { data: selectedVoucherData } = useQuery({\n    queryKey: [selectedVoucherType, selectedVoucherId],\n    queryFn: () => {\n      if (!selectedVoucherType || !selectedVoucherId) {return null;}\n      const endpoint = selectedVoucherType === 'purchase-order' ? '/purchase-orders' : '/purchase-vouchers';\n      return api.get(`${endpoint}/${selectedVoucherId}`).then(res => res.data);\n    },\n    enabled: !!selectedVoucherType && !!selectedVoucherId,\n  });\n\n  // Populate form with selected voucher data\n  useEffect(() => {\n    if (selectedVoucherData) {\n      setValue('vendor_id', selectedVoucherData.vendor_id);\n      // Clear existing items\n      remove();\n      // Append items from selected voucher\n      selectedVoucherData.items.forEach((item: any) => {\n        append({\n          product_id: item.product_id,\n          product_name: item.product?.product_name || item.product_name || '', \n          ordered_quantity: item.quantity,\n          received_quantity: item.pending_quantity || item.quantity,\n          accepted_quantity: item.pending_quantity || item.quantity,\n          rejected_quantity: 0,\n          unit_price: item.unit_price, // Keep hidden\n          unit: item.unit,\n        });\n      });\n    }\n  }, [selectedVoucherData, setValue, append, remove]);\n\n  // Goods Receipt Note specific handlers\n  const handleAddItem = () => {\n    // No add item for GRN, as items come from voucher\n  };\n\n  const handleCancel = () => {\n    setMode('view');\n    // Optionally refresh or reset form to original voucherData\n    if (voucherData) {\n      reset(voucherData);\n    }\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        // Calculate totals if needed, but since no price shown, perhaps adjust\n        data.total_amount = fields.reduce((sum: number, field: any) => sum + (field.accepted_quantity * field.unit_price), 0);\n        data.items = fields.map((field: any) => ({\n          product_id: field.product_id,\n          ordered_quantity: field.ordered_quantity,\n          received_quantity: field.received_quantity,\n          accepted_quantity: field.accepted_quantity,\n          rejected_quantity: field.rejected_quantity,\n          unit: field.unit,\n          unit_price: field.unit_price,\n          total_cost: field.accepted_quantity * field.unit_price,\n        }));\n      }\n\n      data.purchase_order_id = selectedVoucherId;\n      data.grn_date = data.date + 'T00:00:00Z';\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving goods receipt note:', error);\n      alert('Failed to save goods receipt note. Please try again.');\n    }\n  };\n\n  // Validation for quantities\n  const validateQuantities = () => {\n    let valid = true;\n    fields.forEach((field, index) => {\n      const received = watch(`items.${index}.received_quantity`) || 0;\n      const accepted = watch(`items.${index}.accepted_quantity`) || 0;\n      const rejected = watch(`items.${index}.rejected_quantity`) || 0;\n      if (accepted + rejected > received) {\n        alert(`For item ${index + 1}, accepted + rejected cannot exceed received quantity.`);\n        valid = false;\n      }\n    });\n    return valid;\n  };\n\n  // Wrap submit to include validation\n  const handleFormSubmit = (data: any) => {\n    if (validateQuantities()) {\n      _handleSubmitForm(data);\n    }\n  };\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  // Handle voucher click for modal\n  const handleVoucherClick = async (voucher: any) => {\n    handleView(voucher.id);\n  };\n\n  // Use hook's handleEdit and handleView, mapping handled in effect below\n  useEffect(() => {\n    if (voucherData && (mode === 'view' || mode === 'edit')) {\n      const mappedData = {\n        ...voucherData,\n        date: voucherData.grn_date ? voucherData.grn_date.split('T')[0] : '',\n        items: voucherData.items.map(item => ({\n          ...item,\n          ordered_quantity: item.ordered_quantity,\n          received_quantity: item.received_quantity,\n          accepted_quantity: item.accepted_quantity,\n          rejected_quantity: item.rejected_quantity,\n          product_name: item.product?.product_name,\n        })),\n        reference_voucher_type: 'purchase-order',\n        reference_voucher_number: voucherData.purchase_order?.voucher_number || voucherData.purchase_order_id\n      };\n      \n      reset(mappedData);\n      setSelectedVoucherType('purchase-order');\n      setSelectedVoucherId(voucherData.purchase_order_id);\n      \n      if (mode === 'edit') {\n        remove();\n        mappedData.items.forEach((item) => {\n          append({\n            product_id: item.product_id,\n            product_name: item.product_name,\n            ordered_quantity: item.ordered_quantity,\n            received_quantity: item.received_quantity,\n            accepted_quantity: item.accepted_quantity,\n            rejected_quantity: item.rejected_quantity,\n            unit_price: item.unit_price,\n            unit: item.unit,\n          });\n        });\n      }\n    }\n  }, [voucherData, mode, reset, setValue, append, remove]);\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Vendor</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={4} align=\"center\">No goods receipt notes available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleView(voucher.id)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{vendorList?.find((v: any) => v.id === voucher.vendor_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Goods Receipt Note\"\n                      onView={() => handleView(voucher.id)}\n                      onEdit={() => handleEdit(voucher.id)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold', textAlign: 'left', flex: 1, pl: 1 }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Purchase-Vouchers/grn\"\n          currentId={mode === 'create' ? null : voucherData?.id}\n          onEdit={() => handleEdit(voucherData?.id)}\n          onCreate={handleCreate}\n          onCancel={handleCancel}\n        />\n      </Box>\n\n      <form id=\"voucherForm\" onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={0.5}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Voucher Type */}\n          <Grid size={3}>\n            {mode === 'view' ? (\n              <TextField\n                fullWidth\n                label=\"Voucher Type\"\n                value={selectedVoucherType === 'purchase-order' ? 'Purchase Order' : 'Purchase Voucher'}\n                disabled\n                InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                inputProps={{ style: { fontSize: 14 } }}\n                size=\"small\"\n                sx={{ '& .MuiInputBase-root': { height: 27 } }}\n              />\n            ) : (\n              <Autocomplete\n                size=\"small\"\n                options={[{value: 'purchase-order', label: 'Purchase Order'}, {value: 'purchase-voucher', label: 'Purchase Voucher'}]}\n                getOptionLabel={(option: any) => option.label}\n                value={selectedVoucherType ? {value: selectedVoucherType, label: selectedVoucherType === 'purchase-order' ? 'Purchase Order' : 'Purchase Voucher'} : null}\n                onChange={(_, newValue) => {\n                  setSelectedVoucherType(newValue?.value || null);\n                  setSelectedVoucherId(null);\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Voucher Type\"\n                    InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                    inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                )}\n                disabled={mode === 'view'}\n              />\n            )}\n          </Grid>\n\n          {/* Voucher Number */}\n          <Grid size={3}>\n            {mode === 'view' ? (\n              <TextField\n                fullWidth\n                label=\"Reference Voucher Number\"\n                value={watch('reference_voucher_number') || ''}\n                disabled\n                InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                inputProps={{ style: { fontSize: 14 } }}\n                size=\"small\"\n                sx={{ '& .MuiInputBase-root': { height: 27 } }}\n              />\n            ) : (\n              <Autocomplete\n                size=\"small\"\n                options={voucherOptions}\n                getOptionLabel={(option: any) => option.voucher_number}\n                value={voucherOptions.find((v: any) => v.id === selectedVoucherId) || null}\n                onChange={(_, newValue) => {\n                  setSelectedVoucherId(newValue?.id || null);\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Reference Voucher Number\"\n                    InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                    inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                )}\n                disabled={mode === 'view' || !selectedVoucherType}\n              />\n            )}\n          </Grid>\n\n          {/* Vendor - Switch to TextField when voucher selected for auto-populate */}\n          <Grid size={6}>\n            {!!selectedVoucherId ? (\n              <TextField\n                fullWidth\n                label=\"Vendor\"\n                value={selectedVoucherData?.vendor?.name || selectedVendor?.name || ''}\n                disabled\n                InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                inputProps={{ style: { fontSize: 14 } }}\n                size=\"small\"\n                sx={{ '& .MuiInputBase-root': { height: 27 } }}\n              />\n            ) : (\n              <Autocomplete\n                size=\"small\"\n                options={enhancedVendorOptions}\n                getOptionLabel={(option: any) => option?.name || ''}\n                value={vendorValue}\n                onChange={(_, newValue) => {\n                  if (newValue?.id === null) {\n                    setShowAddVendorModal(true);\n                  } else {\n                    setValue('vendor_id', newValue?.id || null);\n                  }\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Vendor\"\n                    error={!!errors.vendor_id}\n                    helperText={errors.vendor_id ? 'Required' : ''}\n                    InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                    inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                    size=\"small\"\n                    sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  />\n                )}\n                disabled={mode === 'view'}\n              />\n            )}\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold', textAlign: 'center' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable, ...voucherStyles.optimizedTableContainer }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={voucherStyles.grnTableColumns.productName}>Product</TableCell>\n                    <TableCell sx={voucherStyles.grnTableColumns.orderQty}>Order Qty</TableCell>\n                    <TableCell sx={voucherStyles.grnTableColumns.receivedQty}>Received Qty</TableCell>\n                    <TableCell sx={voucherStyles.grnTableColumns.acceptedQty}>Accepted Qty</TableCell>\n                    <TableCell sx={voucherStyles.grnTableColumns.rejectedQty}>Rejected Qty</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          <TextField\n                            fullWidth\n                            value={watch(`items.${index}.product_name`) || ''}\n                            disabled\n                            size=\"small\"\n                            inputProps={{ style: { textAlign: 'center' } }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          <TextField\n                            type=\"number\"\n                            value={watch(`items.${index}.ordered_quantity`)}\n                            disabled\n                            size=\"small\"\n                            sx={{ width: 100 }}\n                            inputProps={{ style: { textAlign: 'center' } }}\n                            InputProps={{\n                              endAdornment: watch(`items.${index}.unit`) && (\n                                <span style={{ fontSize: '12px', color: '#666' }}>\n                                  {watch(`items.${index}.unit`)}\n                                </span>\n                              )\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.received_quantity`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 100 }}\n                            inputProps={{ style: { textAlign: 'center' } }}\n                            InputProps={{\n                              endAdornment: watch(`items.${index}.unit`) && (\n                                <span style={{ fontSize: '12px', color: '#666' }}>\n                                  {watch(`items.${index}.unit`)}\n                                </span>\n                              )\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.accepted_quantity`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 100 }}\n                            inputProps={{ style: { textAlign: 'center' } }}\n                            InputProps={{\n                              endAdornment: watch(`items.${index}.unit`) && (\n                                <span style={{ fontSize: '12px', color: '#666' }}>\n                                  {watch(`items.${index}.unit`)}\n                                </span>\n                              )\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.rejected_quantity`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 100 }}\n                            inputProps={{ style: { textAlign: 'center' } }}\n                            InputProps={{\n                              endAdornment: watch(`items.${index}.unit`) && (\n                                <span style={{ fontSize: '12px', color: '#666' }}>\n                                  {watch(`items.${index}.unit`)}\n                                </span>\n                              )\n                            }}\n                          />\n                        </TableCell>\n                      </TableRow>\n                      {/* Hide stock display below the row for GRN */}\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n\n          {/* GRN does not have totals section - removed as per requirements */}\n\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined)\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Goods Receipt Notes\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEdit}\n            onView={handleView}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={vendorList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddVendorModal \n        open={showAddVendorModal}\n        onClose={() => setShowAddVendorModal(false)}\n        onVendorAdded={refreshMasterData}\n        loading={addVendorLoading}\n        setLoading={setAddVendorLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onProductAdded={refreshMasterData}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        onClose={handleCloseContextMenu}\n        onEdit={handleEdit}\n        onView={handleView}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n      />\n    </>\n  );\n};\n\nexport default GoodsReceiptNotePage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Purchase-Vouchers/purchase-order.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[200,208],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[381,390],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[390,397],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[397,404],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[404,410],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[460,472],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[472,478],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[478,491],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[491,504],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[504,517],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1052,1072],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'StockDisplay' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"StockDisplay"},"fix":{"range":[1117,1135],"text":""},"desc":"Remove unused variable 'StockDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":17,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1335,1350],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2546,2570],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2570,2589],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2606,2632],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2632,2661],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2661,2677],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2677,2696],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":56,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2696,2710],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":57,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2710,2727],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2727,2739],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2739,2754],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2754,2776],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":63,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2776,2821],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2821,2835],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":65,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2835,2855],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":66,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2855,2877],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":69,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2877,2936],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":70,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2936,2965],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":106,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3453,3494],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":109,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3573,3591],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":110,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3591,3612],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":111,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3612,3634],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":118,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3720,3754],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'original_unit_price' is defined but never used.","line":187,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"original_unit_price"},"fix":{"range":[5851,5871],"text":""},"desc":"Remove unused variable 'original_unit_price'."}]},{"ruleId":"no-shadow","severity":2,"message":"'productId' is already declared in the upper scope on line 29 column 11.","line":241,"column":13,"nodeType":"Identifier","messageId":"noShadow","endLine":241,"endColumn":22},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'productId' is already declared in the upper scope on line 29 column 11.","line":241,"column":13,"nodeType":"Identifier","messageId":"noShadow","endLine":241,"endColumn":22},{"ruleId":"no-shadow","severity":2,"message":"'productId' is already declared in the upper scope on line 29 column 11.","line":249,"column":13,"nodeType":"Identifier","messageId":"noShadow","endLine":249,"endColumn":22},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'productId' is already declared in the upper scope on line 29 column 11.","line":249,"column":13,"nodeType":"Identifier","messageId":"noShadow","endLine":249,"endColumn":22},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":428,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":428,"endColumn":40}],"suppressedMessages":[],"errorCount":41,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Purchase-Vouchers/purchase-order.tsx\n// Purchase Order Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddVendorModal from '../../../components/AddVendorModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\nimport { useAuth } from '../../../context/AuthContext';  // Assume companyState is available here\nimport { useRouter } from 'next/router';\nimport { toast } from 'react-toastify';\n\nconst PurchaseOrderPage: React.FC = () => {\n  const { company } = useAuth();  // Fetch company from context (includes state)\n  const companyState = company?.state_code;  // Use company.state_code for comparison\n  const router = useRouter();\n  const { productId, vendorId } = router.query;\n  const config = getVoucherConfig('purchase-order');\n  const voucherStyles = getVoucherStyles();\n  const {\n    mode,\n    setMode,\n    isLoading,\n    showAddVendorModal,\n    setShowAddVendorModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addVendorLoading,\n    setAddVendorLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    vendorList,\n    productList,\n    voucherData,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Purchase Order specific state\n  const selectedVendorId = watch('vendor_id');\n  const selectedVendor = vendorList?.find((v: any) => v.id === selectedVendorId);\n\n  // Enhanced vendor options with \"Add New\"\n  const enhancedVendorOptions = [\n    ...(vendorList || []),\n    { id: null, name: 'Add New Vendor...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Purchase Order specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      original_unit_price: 0,  // Added for master price comparison\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  const handleCancel = () => {\n    setMode('view');\n    // Reset form to original voucherData\n    if (voucherData) {\n      reset(voucherData);\n    }\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      // Check for price updates and prompt\n      const itemsToUpdate = data.items.filter(\n        (item: any) => item.unit_price !== item.original_unit_price && item.product_id\n      );\n      if (itemsToUpdate.length > 0) {\n        if (confirm(`Some items have updated prices. Update master product prices for ${itemsToUpdate.length} items?`)) {\n          await Promise.all(\n            itemsToUpdate.map((item: any) =>\n              api.put(`/products/${item.product_id}`, { unit_price: item.unit_price })\n            )\n          );\n          // Optional: refresh product list if needed\n          refreshMasterData();\n        }\n      }\n\n      // Remove original_unit_price from items before saving\n      data.items = data.items.map(({ original_unit_price, ...item }: any) => item);\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving purchase order:', error);\n      alert('Failed to save purchase order. Please try again.');\n    }\n  };\n\n  // Handle duplicate purchase order\n  const handleDuplicate = async (id: number) => {\n    try {\n      const voucher = voucherList?.find(v => v.id === id);\n      if (!voucher) {return;}\n\n      // Reset form with duplicated data\n      reset({\n        ...voucher,\n        voucher_number: '', // Clear voucher number to generate new one\n        date: new Date().toISOString().split('T')[0],\n        created_at: undefined,\n        updated_at: undefined,\n        id: undefined\n      });\n      setMode('create');\n      toast.success('Purchase order duplicated successfully');\n    } catch (error) {\n      console.error('Error duplicating purchase order:', error);\n      toast.error('Failed to duplicate purchase order');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  // Prefill vendor and product from query params\n  useEffect(() => {\n    if (mode === 'create' && productId && productList) {\n      const product = productList.find(p => p.id === Number(productId));\n      if (product) {\n        append({\n          product_id: product.id,\n          product_name: product.product_name || product.name,\n          quantity: 1,\n          unit_price: product.unit_price || 0,\n          original_unit_price: product.unit_price || 0,  // Set original from master\n          discount_percentage: 0,\n          gst_rate: product.gst_rate || 18,\n          amount: 0,\n          unit: product.unit,\n          current_stock: 0,\n          reorder_level: product.reorder_level || 0\n        });\n      }\n    }\n  }, [mode, productId, productList, append]);\n\n  useEffect(() => {\n    if (mode === 'create' && vendorId && vendorList) {\n      const vendor = vendorList.find(v => v.id === Number(vendorId));\n      if (vendor) {\n        setValue('vendor_id', vendor.id);\n      }\n    }\n  }, [mode, vendorId, vendorList, setValue]);\n\n  const handleVoucherClick = async (voucher: any) => {\n    try {\n      // Fetch complete voucher data including items\n      const response = await api.get(`/purchase-orders/${voucher.id}`);\n      const fullVoucherData = response.data;\n      \n      // Load the complete voucher data into the form\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      // Fallback to available data\n      setMode('view');\n      reset(voucher);\n    }\n  };\n  \n  // Enhanced handleEdit to fetch complete data\n  const handleEditWithData = async (voucher: any) => {\n    if (!voucher || !voucher.id) {return;}\n    try {\n      const response = await api.get(`/purchase-orders/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('edit');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleEdit(voucher);\n    }\n  };\n  \n  // Enhanced handleView to fetch complete data\n  const handleViewWithData = async (voucher: any) => {\n    if (!voucher || !voucher.id) {return;}\n    try {\n      const response = await api.get(`/purchase-orders/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleView(voucher);\n    }\n  };\n\n  // Handle data population for view and edit modes\n  useEffect(() => {\n    if (voucherData && (mode === 'view' || mode === 'edit')) {\n      const formattedData = {\n        ...voucherData,\n        date: voucherData.date ? voucherData.date.split('T')[0] : '',\n      };\n      reset(formattedData);\n      if (mode === 'edit') {\n        remove();\n        voucherData.items.forEach((item: any) => {\n          append({\n            ...item,\n            product_id: item.product_id,\n            product_name: item.product?.product_name || item.product_name || '',\n            quantity: item.quantity,\n            unit_price: item.unit_price,\n            original_unit_price: item.product?.unit_price || item.unit_price || 0,  // Set original from master product\n            discount_percentage: item.discount_percentage || 0,\n            gst_rate: item.gst_rate || 18,\n            amount: item.total_amount,\n            unit: item.unit,\n            current_stock: item.current_stock || 0,\n            reorder_level: item.reorder_level || 0\n          });\n        });\n      }\n    }\n  }, [voucherData, mode, reset, append, remove]);\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Vendor</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No purchase orders available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{vendorList?.find((v: any) => v.id === voucher.vendor_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Purchase Order\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      onDuplicate={() => handleDuplicate(voucher.id)}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold' }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Purchase-Vouchers/purchase-order\"\n          currentId={mode !== 'create' ? voucherData?.id : null}\n          onEdit={() => voucherData && voucherData.id && handleEditWithData(voucherData)}\n          onCreate={handleCreate}\n          onCancel={handleCancel}\n        />\n      </Box>\n\n      <form id=\"voucherForm\" onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Vendor, Reference, Payment Terms in one row */}\n          <Grid size={4}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedVendorOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedVendor || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddVendorModal(true);\n                } else {\n                  setValue('vendor_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Vendor\"\n                  error={!!errors.vendor_id}\n                  helperText={errors.vendor_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Reference\"\n              {...control.register('reference')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: '30%' }}>Product</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: '100px' }}></TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Qty</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Rate</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Disc%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>GST%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <TableRow key={field.id}>\n                      <TableCell sx={{ p: 1 }}>\n                        <ProductAutocomplete\n                          value={selectedProducts[index]}\n                          onChange={(product) => {\n                            setValue(`items.${index}.product_id`, product?.id || null);\n                            setValue(`items.${index}.product_name`, product?.product_name || '');\n                            setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                            setValue(`items.${index}.original_unit_price`, product?.unit_price || 0);  // Set original from master\n                            setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                            setValue(`items.${index}.unit`, product?.unit || '');\n                            setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                            // Stock fetch handled in useEffect\n                          }}\n                          disabled={mode === 'view'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                        {stockLoading[index] ? (\n                          <CircularProgress size={12} />\n                        ) : watch(`items.${index}.product_id`) ? (\n                          <Typography variant=\"caption\" color={getStockColor(watch(`items.${index}.current_stock`), watch(`items.${index}.reorder_level`))}>\n                            {watch(`items.${index}.current_stock`)} {watch(`items.${index}.unit`)}\n                          </Typography>\n                        ) : null}\n                      </TableCell>\n                      <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                        <TextField\n                          type=\"number\"\n                          {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                          disabled={mode === 'view'}\n                          size=\"small\"\n                          sx={{ width: 120 }}  // Increased width for qty field to fit unit\n                          InputProps={{\n                            endAdornment: <InputAdornment position=\"end\">{watch(`items.${index}.unit`)}</InputAdornment>,\n                            inputProps: { min: 0, step: 1 },  // Prevent negative qty, integer steps\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                        <TextField\n                          type=\"number\"\n                          {...control.register(`items.${index}.unit_price`, { valueAsNumber: true })}\n                          disabled={mode === 'view'}\n                          size=\"small\"\n                          sx={{ width: 80 }}\n                          InputProps={{\n                            inputProps: { min: 0, step: 0.01 },  // Allow decimals up to 2 digits\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell sx={{ p: 1 }}>\n                        <TextField\n                          type=\"number\"\n                          {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                          disabled={mode === 'view'}\n                          size=\"small\"\n                          sx={{ width: 60 }}\n                          InputProps={{\n                            inputProps: { min: 0, step: 0.01 },  // Allow decimals for discount\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell sx={{ p: 1 }}>\n                        <Autocomplete\n                          size=\"small\"\n                          options={GST_SLABS}\n                          value={watch(`items.${index}.gst_rate`) || 18}\n                          onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                          renderInput={(params) => (\n                            <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                          )}\n                          disabled={mode === 'view'}\n                        />\n                      </TableCell>\n                      <TableCell sx={{ p: 1, fontSize: 14 }}>\n                        ₹{computedItems[index]?.amount?.toLocaleString() || '0'}\n                      </TableCell>\n                      {mode !== 'view' && (\n                        <TableCell sx={{ p: 1 }}>\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => remove(index)}\n                            color=\"error\"\n                          >\n                            <Remove />\n                          </IconButton>\n                        </TableCell>\n                      )}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  {selectedVendor?.state_code === companyState ? (\n                    <>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                          CGST:\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                          ₹{(totalGst / 2).toLocaleString()}\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                          SGST:\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                          ₹{(totalGst / 2).toLocaleString()}\n                        </Typography>\n                      </Grid>\n                    </>\n                  ) : (\n                    <>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                          IGST:\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                          ₹{totalGst.toLocaleString()}\n                        </Typography>\n                      </Grid>\n                    </>\n                  )}\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      ₹{totalAmount.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined)\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Purchase Orders\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            vendorList={vendorList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddVendorModal \n        open={showAddVendorModal}\n        onClose={() => setShowAddVendorModal(false)}\n        onAdd={(newVendor) => {\n          setValue('vendor_id', newVendor.id);\n          refreshMasterData();\n        }}\n        loading={addVendorLoading}\n        setLoading={setAddVendorLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onAdd={(newProduct) => {\n          setValue(`items.${addingItemIndex}.product_id`, newProduct.id);\n          setValue(`items.${addingItemIndex}.product_name`, newProduct.product_name);\n          setValue(`items.${addingItemIndex}.unit_price`, newProduct.unit_price || 0);\n          setValue(`items.${addingItemIndex}.original_unit_price`, newProduct.unit_price || 0);\n          setValue(`items.${addingItemIndex}.gst_rate`, newProduct.gst_rate || 18);\n          setValue(`items.${addingItemIndex}.unit`, newProduct.unit || '');\n          setValue(`items.${addingItemIndex}.reorder_level`, newProduct.reorder_level || 0);\n          refreshMasterData();\n        }}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        voucherType=\"Purchase Order\"\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n        onDuplicate={(id: number) => handleDuplicate(id)}\n      />\n    </>\n  );\n};\n\nexport default PurchaseOrderPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Purchase-Vouchers/purchase-return.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":4,"column":180,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":194,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[367,383],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[383,392],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[392,399],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[399,406],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[406,412],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[462,474],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[474,480],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[480,493],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[493,506],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[506,519],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherReferenceDropdown' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherReferenceDropdown"},"fix":{"range":[1054,1084],"text":""},"desc":"Remove unused variable 'VoucherReferenceDropdown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1139,1159],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'StockDisplay' is defined but never used.","line":15,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"StockDisplay"},"fix":{"range":[1204,1222],"text":""},"desc":"Remove unused variable 'StockDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1422,1437],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2203,2224],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2224,2248],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2248,2267],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2284,2310],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":48,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2310,2339],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2339,2355],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2355,2374],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2374,2388],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2388,2405],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2405,2417],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2417,2432],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2432,2454],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2454,2499],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2499,2513],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2513,2533],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2533,2555],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2555,2614],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":65,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2614,2643],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":79,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[2771,2801],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":97,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[3041,3082],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":100,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3114,3155],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":103,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3234,3252],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":104,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3252,3273],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":105,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3273,3295],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":112,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3381,3415],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":307,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":307,"endColumn":40}],"suppressedMessages":[],"errorCount":40,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Purchase-Vouchers/purchase-return.tsx\n// Purchase Return Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddVendorModal from '../../../components/AddVendorModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherReferenceDropdown from '../../../components/VoucherReferenceDropdown';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\n\nconst PurchaseReturnPage: React.FC = () => {\n  const config = getVoucherConfig('purchase-return');\n  const voucherStyles = getVoucherStyles();\n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddVendorModal,\n    setShowAddVendorModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addVendorLoading,\n    setAddVendorLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    vendorList,\n    productList,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Purchase Return specific state\n  const selectedVendorId = watch('vendor_id');\n  const selectedVendor = vendorList?.find((v: any) => v.id === selectedVendorId);\n\n  // Enhanced vendor options with \"Add New\"\n  const enhancedVendorOptions = [\n    ...(vendorList || []),\n    { id: null, name: 'Add New Vendor...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Purchase Return specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving purchase return:', error);\n      alert('Failed to save purchase return. Please try again.');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  const handleVoucherClick = async (voucher: any) => {\n    try {\n      // Fetch complete voucher data including items\n      const response = await api.get(`/purchase-returns/${voucher.id}`);\n      const fullVoucherData = response.data;\n      \n      // Load the complete voucher data into the form\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      // Fallback to available data\n      setMode('view');\n      reset(voucher);\n    }\n  };\n  \n  // Enhanced handleEdit to fetch complete data\n  const handleEditWithData = async (voucher: any) => {\n    try {\n      const response = await api.get(`/purchase-returns/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('edit');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleEdit(voucher);\n    }\n  };\n  \n  // Enhanced handleView to fetch complete data\n  const handleViewWithData = async (voucher: any) => {\n    try {\n      const response = await api.get(`/purchase-returns/${voucher.id}`);\n      const fullVoucherData = response.data;\n      setMode('view');\n      reset(fullVoucherData);\n    } catch (error) {\n      console.error('Error fetching voucher details:', error);\n      handleView(voucher);\n    }\n  };\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Vendor</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No purchase returns available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{vendorList?.find((v: any) => v.id === voucher.vendor_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Purchase Return\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold' }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Purchase-Vouchers/purchase-return\"\n          currentId={selectedVendorId}\n        />\n      </Box>\n\n      <form onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Vendor, Reference, Payment Terms in one row */}\n          <Grid size={4}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedVendorOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedVendor || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddVendorModal(true);\n                } else {\n                  setValue('vendor_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Vendor\"\n                  error={!!errors.vendor_id}\n                  helperText={errors.vendor_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Reference\"\n              {...control.register('reference')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: '30%' }}>Product</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Qty</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Rate</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Disc%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>GST%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1 }}>\n                          <ProductAutocomplete\n                            value={selectedProducts[index]}\n                            onChange={(product) => {\n                              setValue(`items.${index}.product_id`, product?.id || null);\n                              setValue(`items.${index}.product_name`, product?.product_name || '');\n                              setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                              setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                              setValue(`items.${index}.unit`, product?.unit || '');\n                              setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                              // Stock fetch handled in useEffect\n                            }}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <TextField\n                              type=\"number\"\n                              {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                              disabled={mode === 'view'}\n                              size=\"small\"\n                              sx={{ width: 60 }}\n                            />\n                            <Typography sx={{ ml: 1, fontSize: 12 }}>{watch(`items.${index}.unit`)}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.unit_price`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 80 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 60 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <Autocomplete\n                            size=\"small\"\n                            options={GST_SLABS}\n                            value={watch(`items.${index}.gst_rate`) || 18}\n                            onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                            renderInput={(params) => (\n                              <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                            )}\n                            disabled={mode === 'view'}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, fontSize: 14 }}>\n                          ₹{computedItems[index]?.amount?.toLocaleString() || '0'}\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell sx={{ p: 1 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => remove(index)}\n                              color=\"error\"\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                      {/* Stock display below the row - only qty and unit */}\n                      <TableRow>\n                        <TableCell colSpan={mode !== 'view' ? 7 : 6} sx={{ py: 0.5, pl: 2, bgcolor: 'action.hover' }}>\n                          {stockLoading[index] ? (\n                            <CircularProgress size={12} />\n                          ) : watch(`items.${index}.product_id`) ? (\n                            <Typography variant=\"caption\" color={getStockColor(watch(`items.${index}.current_stock`), watch(`items.${index}.reorder_level`))}>\n                              {watch(`items.${index}.current_stock`)} {watch(`items.${index}.unit`)}\n                            </Typography>\n                          ) : null}\n                        </TableCell>\n                      </TableRow>\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      GST:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalGst.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      ₹{totalAmount.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n              {mode !== 'view' && (\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"success\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined)\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Purchase Returns\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            vendorList={vendorList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddVendorModal \n        open={showAddVendorModal}\n        onClose={() => setShowAddVendorModal(false)}\n        onVendorAdded={refreshMasterData}\n        loading={addVendorLoading}\n        setLoading={setAddVendorLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onProductAdded={refreshMasterData}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n      />\n    </>\n  );\n};\n\nexport default PurchaseReturnPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Purchase-Vouchers/purchase-voucher.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[204,212],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[385,394],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[394,401],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[401,408],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[408,414],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[464,476],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[476,482],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[482,495],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[495,508],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[508,521],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1141,1161],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1424,1439],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":18,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":85,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[1466,1483],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isIntrastateTransaction' is defined but never used.","line":18,"column":105,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":128,"suggestions":[{"messageId":"removeVar","data":{"varName":"isIntrastateTransaction"},"fix":{"range":[1501,1526],"text":""},"desc":"Remove unused variable 'isIntrastateTransaction'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'calculateItemTotals' is defined but never used.","line":18,"column":130,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":149,"suggestions":[{"messageId":"removeVar","data":{"varName":"calculateItemTotals"},"fix":{"range":[1526,1547],"text":""},"desc":"Remove unused variable 'calculateItemTotals'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setMode' is assigned a value but never used.","line":31,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"setMode"},"fix":{"range":[2011,2024],"text":""},"desc":"Remove unused variable 'setMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2339,2360],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":46,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2360,2384],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2384,2403],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2420,2446],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2446,2475],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2475,2491],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2491,2510],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2510,2524],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2524,2541],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2541,2553],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":56,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2553,2568],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2568,2612],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2612,2626],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2626,2646],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2646,2668],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2668,2727],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":79,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[2884,2914],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalGst' is assigned a value but never used.","line":91,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalGst"},"fix":{"range":[3099,3113],"text":""},"desc":"Remove unused variable 'totalGst'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":102,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[3234,3275],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":105,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3307,3348],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":108,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3427,3445],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":109,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3445,3466],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":110,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3466,3488],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":117,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3574,3617],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'stockLoading' is assigned a value but never used.","line":135,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":135,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"stockLoading"},"fix":{"range":[4157,4169],"text":""},"desc":"Remove unused variable 'stockLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'companyStateCode' is assigned a value but never used.","line":143,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"companyStateCode"},"fix":{"range":[4405,4450],"text":""},"desc":"Remove unused variable 'companyStateCode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getStockColor' is assigned a value but never used.","line":189,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":189,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"getStockColor"},"fix":{"range":[5658,5844],"text":""},"desc":"Remove unused variable 'getStockColor'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":321,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":321,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'newProduct' is defined but never used.","line":743,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":743,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"newProduct"},"fix":{"range":[29333,29343],"text":""},"desc":"Remove unused variable 'newProduct'."}]}],"suppressedMessages":[],"errorCount":45,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Purchase-Vouchers/purchase-voucher.tsx\n// Purchase Voucher Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddVendorModal from '../../../components/AddVendorModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherReferenceDropdown from '../../../components/VoucherReferenceDropdown';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, parseRateField, formatRateField, getVoucherStyles, isIntrastateTransaction, calculateItemTotals } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\nimport { useQuery } from '@tanstack/react-query';\n\nconst PurchaseVoucherPage: React.FC = () => {\n  const config = getVoucherConfig('purchase-voucher');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddVendorModal,\n    setShowAddVendorModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addVendorLoading,\n    setAddVendorLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    vendorList,\n    productList,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n    voucherData,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n    totalCgst,\n    totalSgst,\n    totalIgst,\n    isIntrastate,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Enhanced utilities\n    isViewMode,\n    enhancedRateUtils,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Purchase Voucher specific state\n  const selectedVendorId = watch('vendor_id');\n  const selectedVendor = vendorList?.find((v: any) => v.id === selectedVendorId);\n\n  // Enhanced vendor options with \"Add New\"\n  const enhancedVendorOptions = [\n    ...(vendorList || []),\n    { id: null, name: 'Add New Vendor...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Fetch company details\n  const { data: company } = useQuery({\n    queryKey: ['company'],\n    queryFn: () => api.get('/companies/current').then(res => res.data),\n  });\n\n  const companyStateCode = company?.state_code;\n\n  // Purchase Voucher specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving purchase voucher:', error);\n      alert('Failed to save purchase voucher. Please try again.');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  const handleVoucherClick = (voucher: any) => {\n    handleView(voucher.id);\n  };\n  \n  // Enhanced handleEdit to use hook\n  const handleEditWithData = (voucher: any) => {\n    handleEdit(voucher.id);\n  };\n  \n  // Enhanced handleView to use hook\n  const handleViewWithData = (voucher: any) => {\n    handleView(voucher.id);\n  };\n\n  // Handle data population for view and edit modes\n  useEffect(() => {\n    if (voucherData && (mode === 'view' || mode === 'edit')) {\n      const formattedData = {\n        ...voucherData,\n        date: voucherData.date ? voucherData.date.split('T')[0] : '',\n      };\n      reset(formattedData);\n      if (voucherData.items && voucherData.items.length > 0) {\n        remove();\n        voucherData.items.forEach((item: any) => {\n          append({\n            ...item,\n            product_id: item.product_id,\n            product_name: item.product?.product_name || item.product_name || '',\n            quantity: item.quantity,\n            unit_price: item.unit_price,\n            discount_percentage: item.discount_percentage || 0,\n            gst_rate: item.gst_rate || 18,\n            amount: item.total_amount,\n            unit: item.unit,\n            current_stock: item.current_stock || 0,\n            reorder_level: item.reorder_level || 0\n          });\n        });\n      }\n    }\n  }, [voucherData, mode, reset, append, remove]);\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Vendor</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No purchase vouchers available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{vendorList?.find((v: any) => v.id === voucher.vendor_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Purchase Voucher\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF(voucher)}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold', textAlign: 'center', flex: 1 }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Purchase-Vouchers/purchase-voucher\"\n          currentId={selectedVendorId}\n        />\n      </Box>\n\n      <form id=\"voucherForm\" onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1} sx={voucherStyles.centerText}>\n          {/* First Row: Voucher Number, Date, Vendor */}\n          <Grid size={3}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={3}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ \n                '& .MuiInputBase-root': { height: 27 },\n                ...voucherStyles.dateField\n              }}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedVendorOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedVendor || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddVendorModal(true);\n                } else {\n                  setValue('vendor_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Vendor\"\n                  error={!!errors.vendor_id}\n                  helperText={errors.vendor_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n\n          {/* Second Row: Reference and Payment Terms */}\n          <Grid size={6}>\n            <VoucherReferenceDropdown\n              voucherType=\"purchase-voucher\"\n              value={{\n                referenceType: watch('reference_type'),\n                referenceId: watch('reference_id'),\n                referenceNumber: watch('reference_number')\n              }}\n              onChange={(reference) => {\n                setValue('reference_type', reference.referenceType || '');\n                setValue('reference_id', reference.referenceId || null);\n                setValue('reference_number', reference.referenceNumber || '');\n              }}\n              disabled={mode === 'view'}\n              onReferenceSelected={handleReferenceSelected}\n            />\n          </Grid>\n\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold', textAlign: 'center' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable, ...voucherStyles.optimizedTableContainer }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={voucherStyles.productTableColumns.productName}>Product</TableCell>\n                    <TableCell sx={{ width: 80, textAlign: 'center', fontSize: '0.8rem' }}></TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.quantity}>Qty</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.rate}>Rate</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.discount}>Disc%</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.gst}>GST%</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.amount}>Line Total</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={voucherStyles.productTableColumns.action}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1 }}>\n                          <ProductAutocomplete\n                            value={selectedProducts[index]}\n                            onChange={(product) => {\n                              setValue(`items.${index}.product_id`, product?.id || null);\n                              setValue(`items.${index}.product_name`, product?.product_name || '');\n                              setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                              setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                              setValue(`items.${index}.unit`, product?.unit || '');\n                              setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                              // Stock fetch handled in useEffect\n                            }}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          {watch(`items.${index}.product_id`) ? (\n                            <StockDisplay \n                              productId={watch(`items.${index}.product_id`)}\n                              disabled={false}\n                              showLabel={false}\n                            />\n                          ) : (\n                            <Typography variant=\"caption\" sx={{ color: 'text.disabled', fontSize: '0.7rem' }}>\n                              -\n                            </Typography>\n                          )}\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 100 }}\n                            InputProps={{\n                              endAdornment: (\n                                <InputAdornment position=\"end\">\n                                  <Typography sx={{ fontSize: 12 }}>{watch(`items.${index}.unit`)}</Typography>\n                                </InputAdornment>\n                              )\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.unit_price`, { \n                              valueAsNumber: true,\n                              setValueAs: (value) => enhancedRateUtils.parseRate(value)\n                            })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{\n                              width: 80,\n                              ...voucherStyles.rateField\n                            }}\n                            inputProps={{ \n                              min: 0, \n                              step: 0.01,\n                              style: { textAlign: 'center' }\n                            }}\n                            onChange={(e) => {\n                              const value = parseRateField(e.target.value);\n                              setValue(`items.${index}.unit_price`, value);\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 60 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <Autocomplete\n                            size=\"small\"\n                            options={GST_SLABS}\n                            value={watch(`items.${index}.gst_rate`) || 18}\n                            onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                            renderInput={(params) => (\n                              <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                            )}\n                            disabled={mode === 'view'}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, fontSize: 14, textAlign: 'center' }}>\n                          ₹{computedItems[index]?.total_amount?.toLocaleString() || '0'}\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell sx={{ p: 1 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => remove(index)}\n                              color=\"error\"\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  {isIntrastate ? (\n                    <>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                          CGST:\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                          ₹{totalCgst.toLocaleString()}\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                          SGST:\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                          ₹{totalSgst.toLocaleString()}\n                        </Typography>\n                      </Grid>\n                    </>\n                  ) : (\n                    <>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                          IGST:\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                          ₹{totalIgst.toLocaleString()}\n                        </Typography>\n                      </Grid>\n                    </>\n                  )}\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      ₹{totalAmount.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Notes below Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={1}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined}\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Purchase Vouchers\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={(voucher) => handleGeneratePDF(voucher)}\n            vendorList={vendorList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddVendorModal \n        open={showAddVendorModal}\n        onClose={() => setShowAddVendorModal(false)}\n        onAdd={(newVendor) => {\n          refreshMasterData();\n          setValue('vendor_id', newVendor.id);\n        }}\n        loading={addVendorLoading}\n        setLoading={setAddVendorLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onAdd={(newProduct) => {\n          refreshMasterData();\n          // Since product modal is global, auto-selection for specific item not implemented here.\n          // If opened from ProductAutocomplete, that component should handle selection.\n        }}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n      />\n    </>\n  );\n};\n\nexport default PurchaseVoucherPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Sales-Vouchers/delivery-challan.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":4,"column":180,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":194,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[366,382],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[382,391],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[391,398],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[398,405],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[405,411],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[461,473],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[473,479],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[479,492],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[492,505],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[505,518],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherReferenceDropdown' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherReferenceDropdown"},"fix":{"range":[1057,1087],"text":""},"desc":"Remove unused variable 'VoucherReferenceDropdown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1142,1162],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'StockDisplay' is defined but never used.","line":15,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"StockDisplay"},"fix":{"range":[1207,1225],"text":""},"desc":"Remove unused variable 'StockDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1425,1440],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":22,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"api"},"fix":{"range":[1712,1721],"text":""},"desc":"Remove unused variable 'api'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2325,2346],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":46,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2346,2370],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2370,2389],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2406,2432],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2432,2461],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2461,2477],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2477,2496],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2496,2510],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2510,2527],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2527,2539],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":56,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2539,2554],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":57,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2554,2576],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2576,2621],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2621,2635],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":62,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2635,2655],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":63,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2655,2677],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":66,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2677,2736],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":67,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2736,2765],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":99,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[3165,3206],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":102,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3238,3279],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":105,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3358,3376],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":106,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3376,3397],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":107,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3397,3419],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":114,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3505,3539],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":348,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":348,"endColumn":40}],"suppressedMessages":[],"errorCount":40,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Sales-Vouchers/delivery-challan.tsx\n// Delivery Challan Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherReferenceDropdown from '../../../components/VoucherReferenceDropdown';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport { dispatchService } from '../../../services/dispatchService';\nimport api from '../../../lib/api';  // Import api for direct call\nimport { toast } from 'react-toastify';\n\nconst DeliveryChallanPage: React.FC = () => {\n  const config = getVoucherConfig('delivery-challan');\n  const voucherStyles = getVoucherStyles();\n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    customerList,\n    productList,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Delivery Challan specific state\n  const selectedCustomerId = watch('customer_id');\n  const selectedCustomer = customerList?.find((c: any) => c.id === selectedCustomerId);\n\n  // Enhanced customer options with \"Add New\"\n  const enhancedCustomerOptions = [\n    ...(customerList || []),\n    { id: null, name: 'Add New Customer...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Delivery Challan specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving delivery challan:', error);\n      alert('Failed to save delivery challan. Please try again.');\n    }\n  };\n\n  // Handle duplicate delivery challan\n  const handleDuplicate = async (id: number) => {\n    try {\n      const voucher = voucherList?.find(v => v.id === id);\n      if (!voucher) {return;}\n\n      // Reset form with duplicated data\n      reset({\n        ...voucher,\n        voucher_number: '', // Clear voucher number to generate new one\n        date: new Date().toISOString().split('T')[0],\n        created_at: undefined,\n        updated_at: undefined,\n        id: undefined\n      });\n      setMode('create');\n      toast.success('Delivery challan duplicated successfully');\n    } catch (error) {\n      console.error('Error duplicating delivery challan:', error);\n      toast.error('Failed to duplicate delivery challan');\n    }\n  };\n\n  // Handle create dispatch order from delivery challan\n  const handleCreateDispatch = async (id: number) => {\n    try {\n      const voucher = voucherList?.find(v => v.id === id);\n      if (!voucher) {return;}\n\n      // Check if delivery challan is delivered\n      if (voucher.status !== 'delivered') {\n        if (!confirm('This delivery challan is not marked as delivered. Create dispatch order anyway?')) {\n          return;\n        }\n      }\n\n      // Create dispatch order with delivery challan data\n      const dispatchData = {\n        customer_id: voucher.customer_id,\n        delivery_address: voucher.shipping_address || voucher.customer?.address || '',\n        delivery_contact_person: voucher.customer?.contact_person || '',\n        delivery_contact_number: voucher.customer?.phone || '',\n        expected_delivery_date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow\n        notes: `Created from Delivery Challan ${voucher.voucher_number}`,\n        items: voucher.items?.map((item: any) => ({\n          product_id: item.product_id,\n          quantity: item.quantity,\n          unit: item.unit || 'PCS',\n          description: item.description || item.product?.name || '',\n          status: 'pending'\n        })) || []\n      };\n\n      const response = await dispatchService.createDispatchOrder(dispatchData);\n      toast.success(`Dispatch order ${response.order_number} created successfully`);\n      \n      // Ask if user wants to open dispatch management\n      if (confirm('Dispatch order created. Open Dispatch Management?')) {\n        window.open('/service/dispatch', '_blank');\n      }\n    } catch (error) {\n      console.error('Error creating dispatch order:', error);\n      toast.error('Failed to create dispatch order');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  const handleVoucherClick = (voucher: any) => {\n    handleView(voucher.id);\n  };\n  \n  // Enhanced handleEdit to use hook\n  const handleEditWithData = (voucher: any) => {\n    handleEdit(voucher.id);\n  };\n  \n  // Enhanced handleView to use hook\n  const handleViewWithData = (voucher: any) => {\n    handleView(voucher.id);\n  };\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Customer</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No delivery challans available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{customerList?.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Delivery Challan\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      onDuplicate={() => handleDuplicate(voucher.id)}\n                      onCreateDispatch={() => handleCreateDispatch(voucher.id)}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold', textAlign: 'center', flex: 1 }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Sales-Vouchers/delivery-challan\"\n          currentId={selectedCustomerId}\n        />\n      </Box>\n\n      <form onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Customer, Reference, Payment Terms in one row */}\n          <Grid size={4}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedCustomerOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedCustomer || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddCustomerModal(true);\n                } else {\n                  setValue('customer_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Customer\"\n                  error={!!errors.customer_id}\n                  helperText={errors.customer_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Reference\"\n              {...control.register('reference')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold', textAlign: 'center' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: '30%', textAlign: 'center' }}>Product</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'center' }}>Qty</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'center' }}>Rate</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'center' }}>Disc%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'center' }}>GST%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'center' }}>Amount</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'center' }}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1 }}>\n                          <ProductAutocomplete\n                            value={selectedProducts[index]}\n                            onChange={(product) => {\n                              setValue(`items.${index}.product_id`, product?.id || null);\n                              setValue(`items.${index}.product_name`, product?.product_name || '');\n                              setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                              setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                              setValue(`items.${index}.unit`, product?.unit || '');\n                              setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                              // Stock fetch handled in useEffect\n                            }}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <TextField\n                              type=\"number\"\n                              {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                              disabled={mode === 'view'}\n                              size=\"small\"\n                              sx={{ width: 60 }}\n                            />\n                            <Typography sx={{ ml: 1, fontSize: 12 }}>{watch(`items.${index}.unit`)}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.unit_price`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 80 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 60 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <Autocomplete\n                            size=\"small\"\n                            options={GST_SLABS}\n                            value={watch(`items.${index}.gst_rate`) || 18}\n                            onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                            renderInput={(params) => (\n                              <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                            )}\n                            disabled={mode === 'view'}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, fontSize: 14 }}>\n                          ₹{computedItems[index]?.amount?.toLocaleString() || '0'}\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell sx={{ p: 1 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => remove(index)}\n                              color=\"error\"\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                      {/* Stock display below the row - only qty and unit */}\n                      <TableRow>\n                        <TableCell colSpan={mode !== 'view' ? 7 : 6} sx={{ py: 0.5, pl: 2, bgcolor: 'action.hover' }}>\n                          {stockLoading[index] ? (\n                            <CircularProgress size={12} />\n                          ) : watch(`items.${index}.product_id`) ? (\n                            <Typography variant=\"caption\" color={getStockColor(watch(`items.${index}.current_stock`), watch(`items.${index}.reorder_level`))}>\n                              {watch(`items.${index}.current_stock`)} {watch(`items.${index}.unit`)}\n                            </Typography>\n                          ) : null}\n                        </TableCell>\n                      </TableRow>\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      GST:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalGst.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      {/* Total removed for GRN/Delivery Challan */}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n              {mode !== 'view' && (\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"success\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined)\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Delivery Challans\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddCustomerModal \n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={refreshMasterData}\n        loading={addCustomerLoading}\n        setLoading={setAddCustomerLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onProductAdded={refreshMasterData}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        voucherType=\"Delivery Challan\"\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n        onDuplicate={(id: number) => handleDuplicate(id)}\n        onCreateDispatch={(id: number) => handleCreateDispatch(id)}\n      />\n    </>\n  );\n};\n\nexport default DeliveryChallanPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Sales-Vouchers/sales-return.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":4,"column":180,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":194,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[358,374],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[374,383],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[383,390],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[390,397],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[397,403],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[453,465],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[465,471],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[471,484],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[484,497],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[497,510],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherReferenceDropdown' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherReferenceDropdown"},"fix":{"range":[1049,1079],"text":""},"desc":"Remove unused variable 'VoucherReferenceDropdown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1134,1154],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'StockDisplay' is defined but never used.","line":15,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"StockDisplay"},"fix":{"range":[1199,1217],"text":""},"desc":"Remove unused variable 'StockDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1417,1432],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":21,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"api"},"fix":{"range":[1635,1644],"text":""},"desc":"Remove unused variable 'api'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setMode' is assigned a value but never used.","line":29,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"setMode"},"fix":{"range":[1864,1877],"text":""},"desc":"Remove unused variable 'setMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":43,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2200,2221],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2221,2245],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2245,2264],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2281,2307],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":48,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2307,2336],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2336,2352],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2352,2371],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2371,2385],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2385,2402],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2402,2414],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2414,2429],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2429,2451],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":58,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2451,2496],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2496,2510],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2510,2530],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2530,2552],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":64,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2552,2611],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":65,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2611,2640],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'reset' is assigned a value but never used.","line":76,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"reset"},"fix":{"range":[2757,2768],"text":""},"desc":"Remove unused variable 'reset'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":79,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[2768,2798],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":97,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[3040,3081],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":100,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3113,3154],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":103,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3233,3251],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":104,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3251,3272],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":105,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3272,3294],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":112,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3380,3414],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":278,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":278,"endColumn":40}],"suppressedMessages":[],"errorCount":43,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Sales-Vouchers/sales-return.tsx\n// Sales Return Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherReferenceDropdown from '../../../components/VoucherReferenceDropdown';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\n\nconst SalesReturnPage: React.FC = () => {\n  const config = getVoucherConfig('sales-return');\n  const voucherStyles = getVoucherStyles();\n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    customerList,\n    productList,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Sales Return specific state\n  const selectedCustomerId = watch('customer_id');\n  const selectedCustomer = customerList?.find((c: any) => c.id === selectedCustomerId);\n\n  // Enhanced customer options with \"Add New\"\n  const enhancedCustomerOptions = [\n    ...(customerList || []),\n    { id: null, name: 'Add New Customer...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Sales Return specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving sales return:', error);\n      alert('Failed to save sales return. Please try again.');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  const handleVoucherClick = (voucher: any) => {\n    handleView(voucher.id);\n  };\n  \n  // Enhanced handleEdit to use hook\n  const handleEditWithData = (voucher: any) => {\n    handleEdit(voucher.id);\n  };\n  \n  // Enhanced handleView to use hook\n  const handleViewWithData = (voucher: any) => {\n    handleView(voucher.id);\n  };\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Customer</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No sales returns available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{customerList?.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Sales Return\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold' }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Sales-Vouchers/sales-return\"\n          currentId={selectedCustomerId}\n        />\n      </Box>\n\n      <form onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Customer, Reference, Payment Terms in one row */}\n          <Grid size={4}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedCustomerOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedCustomer || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddCustomerModal(true);\n                } else {\n                  setValue('customer_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Customer\"\n                  error={!!errors.customer_id}\n                  helperText={errors.customer_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Reference\"\n              {...control.register('reference')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={4}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, width: '30%' }}>Product</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Qty</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1, textAlign: 'right' }}>Rate</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Disc%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>GST%</TableCell>\n                    <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={{ fontSize: 12, fontWeight: 'bold', p: 1 }}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1 }}>\n                          <ProductAutocomplete\n                            value={selectedProducts[index]}\n                            onChange={(product) => {\n                              setValue(`items.${index}.product_id`, product?.id || null);\n                              setValue(`items.${index}.product_name`, product?.product_name || '');\n                              setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                              setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                              setValue(`items.${index}.unit`, product?.unit || '');\n                              setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                              // Stock fetch handled in useEffect\n                            }}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <TextField\n                              type=\"number\"\n                              {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                              disabled={mode === 'view'}\n                              size=\"small\"\n                              sx={{ width: 60 }}\n                            />\n                            <Typography sx={{ ml: 1, fontSize: 12 }}>{watch(`items.${index}.unit`)}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.unit_price`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 80 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 60 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <Autocomplete\n                            size=\"small\"\n                            options={GST_SLABS}\n                            value={watch(`items.${index}.gst_rate`) || 18}\n                            onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                            renderInput={(params) => (\n                              <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                            )}\n                            disabled={mode === 'view'}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, fontSize: 14 }}>\n                          ₹{computedItems[index]?.amount?.toLocaleString() || '0'}\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell sx={{ p: 1 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => remove(index)}\n                              color=\"error\"\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                      {/* Stock display below the row - only qty and unit */}\n                      <TableRow>\n                        <TableCell colSpan={mode !== 'view' ? 7 : 6} sx={{ py: 0.5, pl: 2, bgcolor: 'action.hover' }}>\n                          {stockLoading[index] ? (\n                            <CircularProgress size={12} />\n                          ) : watch(`items.${index}.product_id`) ? (\n                            <Typography variant=\"caption\" color={getStockColor(watch(`items.${index}.current_stock`), watch(`items.${index}.reorder_level`))}>\n                              {watch(`items.${index}.current_stock`)} {watch(`items.${index}.unit`)}\n                            </Typography>\n                          ) : null}\n                        </TableCell>\n                      </TableRow>\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      GST:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalGst.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      ₹{totalAmount.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n              {mode !== 'view' && (\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"success\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined)\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Sales Returns\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddCustomerModal \n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={refreshMasterData}\n        loading={addCustomerLoading}\n        setLoading={setAddCustomerLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onProductAdded={refreshMasterData}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n      />\n    </>\n  );\n};\n\nexport default SalesReturnPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/Sales-Vouchers/sales-voucher.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":4,"column":180,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":194,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[360,376],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":4,"column":196,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":203,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[376,385],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":4,"column":205,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":210,"suggestions":[{"messageId":"removeVar","data":{"varName":"Modal"},"fix":{"range":[385,392],"text":""},"desc":"Remove unused variable 'Modal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":4,"column":212,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":217,"suggestions":[{"messageId":"removeVar","data":{"varName":"Alert"},"fix":{"range":[392,399],"text":""},"desc":"Remove unused variable 'Alert'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":4,"column":219,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":223,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[399,405],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Visibility' is defined but never used.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"Visibility"},"fix":{"range":[455,467],"text":""},"desc":"Remove unused variable 'Visibility'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"Edit"},"fix":{"range":[467,473],"text":""},"desc":"Remove unused variable 'Edit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CloudUpload' is defined but never used.","line":5,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"CloudUpload"},"fix":{"range":[473,486],"text":""},"desc":"Remove unused variable 'CloudUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":5,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"CheckCircle"},"fix":{"range":[486,499],"text":""},"desc":"Remove unused variable 'CheckCircle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Description' is defined but never used.","line":5,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"Description"},"fix":{"range":[499,512],"text":""},"desc":"Remove unused variable 'Description'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VoucherReferenceDropdown' is defined but never used.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"VoucherReferenceDropdown"},"fix":{"range":[1051,1081],"text":""},"desc":"Remove unused variable 'VoucherReferenceDropdown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BalanceDisplay' is defined but never used.","line":14,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"BalanceDisplay"},"fix":{"range":[1136,1156],"text":""},"desc":"Remove unused variable 'BalanceDisplay'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'numberToWords' is defined but never used.","line":18,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"numberToWords"},"fix":{"range":[1419,1434],"text":""},"desc":"Remove unused variable 'numberToWords'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'parseRateField' is defined but never used.","line":18,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":68,"suggestions":[{"messageId":"removeVar","data":{"varName":"parseRateField"},"fix":{"range":[1445,1461],"text":""},"desc":"Remove unused variable 'parseRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'formatRateField' is defined but never used.","line":18,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":85,"suggestions":[{"messageId":"removeVar","data":{"varName":"formatRateField"},"fix":{"range":[1461,1478],"text":""},"desc":"Remove unused variable 'formatRateField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":21,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"api"},"fix":{"range":[1670,1679],"text":""},"desc":"Remove unused variable 'api'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setMode' is assigned a value but never used.","line":30,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"setMode"},"fix":{"range":[1904,1917],"text":""},"desc":"Remove unused variable 'setMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'addingItemIndex' is assigned a value but never used.","line":44,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"addingItemIndex"},"fix":{"range":[2240,2261],"text":""},"desc":"Remove unused variable 'addingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setAddingItemIndex' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"setAddingItemIndex"},"fix":{"range":[2261,2285],"text":""},"desc":"Remove unused variable 'setAddingItemIndex'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showFullModal' is assigned a value but never used.","line":46,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"showFullModal"},"fix":{"range":[2285,2304],"text":""},"desc":"Remove unused variable 'showFullModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useDifferentShipping' is assigned a value but never used.","line":48,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"useDifferentShipping"},"fix":{"range":[2321,2347],"text":""},"desc":"Remove unused variable 'useDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setUseDifferentShipping' is assigned a value but never used.","line":49,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"setUseDifferentShipping"},"fix":{"range":[2347,2376],"text":""},"desc":"Remove unused variable 'setUseDifferentShipping'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTerm' is assigned a value but never used.","line":50,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"searchTerm"},"fix":{"range":[2376,2392],"text":""},"desc":"Remove unused variable 'searchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setSearchTerm' is assigned a value but never used.","line":51,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSearchTerm"},"fix":{"range":[2392,2411],"text":""},"desc":"Remove unused variable 'setSearchTerm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'fromDate' is assigned a value but never used.","line":52,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"fromDate"},"fix":{"range":[2411,2425],"text":""},"desc":"Remove unused variable 'fromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setFromDate' is assigned a value but never used.","line":53,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"setFromDate"},"fix":{"range":[2425,2442],"text":""},"desc":"Remove unused variable 'setFromDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'toDate' is assigned a value but never used.","line":54,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"toDate"},"fix":{"range":[2442,2454],"text":""},"desc":"Remove unused variable 'toDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'setToDate' is assigned a value but never used.","line":55,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"setToDate"},"fix":{"range":[2454,2469],"text":""},"desc":"Remove unused variable 'setToDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filteredVouchers' is assigned a value but never used.","line":56,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"filteredVouchers"},"fix":{"range":[2469,2491],"text":""},"desc":"Remove unused variable 'filteredVouchers'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'currentPage' is assigned a value but never used.","line":59,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"currentPage"},"fix":{"range":[2491,2536],"text":""},"desc":"Remove unused variable 'currentPage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":60,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"pageSize"},"fix":{"range":[2536,2550],"text":""},"desc":"Remove unused variable 'pageSize'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'paginationData' is assigned a value but never used.","line":61,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"paginationData"},"fix":{"range":[2550,2570],"text":""},"desc":"Remove unused variable 'paginationData'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handlePageChange' is assigned a value but never used.","line":62,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handlePageChange"},"fix":{"range":[2570,2592],"text":""},"desc":"Remove unused variable 'handlePageChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'referenceDocument' is assigned a value but never used.","line":65,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"referenceDocument"},"fix":{"range":[2592,2651],"text":""},"desc":"Remove unused variable 'referenceDocument'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleReferenceSelected' is assigned a value but never used.","line":66,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleReferenceSelected"},"fix":{"range":[2651,2680],"text":""},"desc":"Remove unused variable 'handleReferenceSelected'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'reset' is assigned a value but never used.","line":77,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"reset"},"fix":{"range":[2797,2808],"text":""},"desc":"Remove unused variable 'reset'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is assigned a value but never used.","line":80,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[2808,2838],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalGst' is assigned a value but never used.","line":91,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"totalGst"},"fix":{"range":[3008,3022],"text":""},"desc":"Remove unused variable 'totalGst'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreate' is assigned a value but never used.","line":101,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreate"},"fix":{"range":[3125,3166],"text":""},"desc":"Remove unused variable 'handleCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_handleSubmitForm' is assigned a value but never used.","line":104,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"_handleSubmitForm"},"fix":{"range":[3198,3239],"text":""},"desc":"Remove unused variable '_handleSubmitForm'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleSearch' is assigned a value but never used.","line":107,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleSearch"},"fix":{"range":[3318,3336],"text":""},"desc":"Remove unused variable 'handleSearch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalOpen' is assigned a value but never used.","line":108,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalOpen"},"fix":{"range":[3336,3357],"text":""},"desc":"Remove unused variable 'handleModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'handleModalClose' is assigned a value but never used.","line":109,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleModalClose"},"fix":{"range":[3357,3379],"text":""},"desc":"Remove unused variable 'handleModalClose'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isViewMode' is assigned a value but never used.","line":116,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"isViewMode"},"fix":{"range":[3465,3499],"text":""},"desc":"Remove unused variable 'isViewMode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'stockLoading' is assigned a value but never used.","line":133,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"stockLoading"},"fix":{"range":[4031,4043],"text":""},"desc":"Remove unused variable 'stockLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getStockColor' is assigned a value but never used.","line":179,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"getStockColor"},"fix":{"range":[5302,5488],"text":""},"desc":"Remove unused variable 'getStockColor'."}]},{"ruleId":"no-redeclare","severity":2,"message":"'handleEditWithData' is already defined.","line":239,"column":9,"nodeType":"Identifier","messageId":"redeclared","endLine":239,"endColumn":27},{"ruleId":"no-redeclare","severity":2,"message":"'handleViewWithData' is already defined.","line":244,"column":9,"nodeType":"Identifier","messageId":"redeclared","endLine":244,"endColumn":27},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":292,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":292,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'enhancedRateUtils' is not defined.","line":496,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":496,"endColumn":71},{"ruleId":"no-undef","severity":2,"message":"'enhancedRateUtils' is not defined.","line":510,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":510,"endColumn":62}],"suppressedMessages":[],"errorCount":51,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/vouchers/Sales-Vouchers/sales-voucher.tsx\n// Sales Voucher Page - Refactored using shared DRY logic\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { Box, Button, TextField, Typography, Grid, IconButton, CircularProgress, Container, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Autocomplete, InputAdornment, Tooltip, Modal, Alert, Chip, Fab } from '@mui/material';\nimport { Add, Remove, Visibility, Edit, CloudUpload, CheckCircle, Description } from '@mui/icons-material';\nimport AddCustomerModal from '../../../components/AddCustomerModal';\nimport AddProductModal from '../../../components/AddProductModal';\nimport AddShippingAddressModal from '../../../components/AddShippingAddressModal';\nimport VoucherContextMenu from '../../../components/VoucherContextMenu';\nimport VoucherLayout from '../../../components/VoucherLayout';\nimport VoucherHeaderActions from '../../../components/VoucherHeaderActions';\nimport VoucherListModal from '../../../components/VoucherListModal';\nimport VoucherReferenceDropdown from '../../../components/VoucherReferenceDropdown';\nimport BalanceDisplay from '../../../components/BalanceDisplay';\nimport StockDisplay from '../../../components/StockDisplay';\nimport ProductAutocomplete from '../../../components/ProductAutocomplete';\nimport { useVoucherPage } from '../../../hooks/useVoucherPage';\nimport { getVoucherConfig, numberToWords, GST_SLABS, parseRateField, formatRateField, getVoucherStyles } from '../../../utils/voucherUtils';\nimport { getStock } from '../../../services/masterService';\nimport { voucherService } from '../../../services/vouchersService';\nimport api from '../../../lib/api';  // Import api for direct call\n\nconst SalesVoucherPage: React.FC = () => {\n  const config = getVoucherConfig('sales-voucher');\n  const voucherStyles = getVoucherStyles();\n  \n  const {\n    // State\n    mode,\n    setMode,\n    isLoading,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    showFullModal,\n    contextMenu,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n\n    // Form\n    control,\n    handleSubmit,\n    watch,\n    setValue,\n    errors,\n    fields,\n    append,\n    remove,\n    reset,\n\n    // Data\n    voucherList,\n    customerList,\n    productList,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n    totalCgst,\n    totalSgst,\n    totalIgst,\n\n    // Mutations\n    createMutation,\n    updateMutation,\n\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm: _handleSubmitForm, // Rename to avoid conflict\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    refreshMasterData,\n    getAmountInWords,\n\n    // Utilities\n    isViewMode,\n  } = useVoucherPage(config);\n\n  // Additional state for voucher list modal\n  const [showVoucherListModal, setShowVoucherListModal] = useState(false);\n\n  // Sales Voucher specific state\n  const selectedCustomerId = watch('customer_id');\n  const selectedCustomer = customerList?.find((c: any) => c.id === selectedCustomerId);\n\n  // Enhanced customer options with \"Add New\"\n  const enhancedCustomerOptions = [\n    ...(customerList || []),\n    { id: null, name: 'Add New Customer...' }\n  ];\n\n  // Stock data state for items\n  const [stockLoading, setStockLoading] = useState<{[key: number]: boolean}>({});\n\n  // Sales Voucher specific handlers\n  const handleAddItem = () => {\n    append({\n      product_id: null,\n      product_name: '',\n      quantity: 1,\n      unit_price: 0,\n      discount_percentage: 0,\n      gst_rate: 18,\n      amount: 0,\n      unit: '',\n      current_stock: 0,\n      reorder_level: 0\n    });\n  };\n\n  // Custom submit handler to prompt for PDF after save\n  const onSubmit = async (data: any) => {\n    try {\n      if (config.hasItems !== false) {\n        data.items = computedItems;\n        data.total_amount = totalAmount;\n      }\n\n      let response;\n      if (mode === 'create') {\n        response = await createMutation.mutateAsync(data);\n        if (confirm('Voucher created successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      } else if (mode === 'edit') {\n        response = await updateMutation.mutateAsync(data);\n        if (confirm('Voucher updated successfully. Generate PDF?')) {\n          handleGeneratePDF(response);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error saving sales voucher:', error);\n      alert('Failed to save sales voucher. Please try again.');\n    }\n  };\n\n  // Function to get stock color\n  const getStockColor = (stock: number, reorder: number) => {\n    if (stock === 0) {return 'error.main';}\n    if (stock <= reorder) {return 'warning.main';}\n    return 'success.main';\n  };\n\n  // Memoize all selected products\n  const selectedProducts = useMemo(() => {\n    return fields.map((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      return productList?.find((p: any) => p.id === productId) || null;\n    });\n  }, [fields.length, productList, ...fields.map((_, index) => watch(`items.${index}.product_id`))]);\n\n  // Effect to fetch stock when product changes\n  useEffect(() => {\n    fields.forEach((_, index) => {\n      const productId = watch(`items.${index}.product_id`);\n      if (productId) {\n        setStockLoading(prev => ({ ...prev, [index]: true }));\n        getStock({ queryKey: ['', { product_id: productId }] }).then(res => {\n          console.log('Stock Response for product ' + productId + ':', res);\n          const stockData = res[0] || { quantity: 0 };\n          setValue(`items.${index}.current_stock`, stockData.quantity);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        }).catch(err => {\n          console.error('Failed to fetch stock:', err);\n          setStockLoading(prev => ({ ...prev, [index]: false }));\n        });\n      } else {\n        setValue(`items.${index}.current_stock`, 0);\n        setStockLoading(prev => ({ ...prev, [index]: false }));\n      }\n    });\n  }, [fields.map(f => watch(`items.${fields.indexOf(f)}.product_id`)).join(','), setValue, fields.length]);\n\n  // Manual fetch for voucher number if not loaded\n  useEffect(() => {\n    if (mode === 'create' && !nextVoucherNumber && !isLoading) {\n      voucherService.getNextVoucherNumber(config.nextNumberEndpoint)\n        .then(number => setValue('voucher_number', number))\n        .catch(err => console.error('Failed to fetch voucher number:', err));\n    }\n  }, [mode, nextVoucherNumber, isLoading, setValue, config.nextNumberEndpoint]);\n\n  const handleVoucherClick = (voucher: any) => {\n    handleView(voucher.id);\n  };\n  \n  // Enhanced handleEdit to use hook\n  const handleEditWithData = (voucher: any) => {\n    handleEdit(voucher.id);\n  };\n  \n  // Enhanced handleView to use hook\n  const handleViewWithData = (voucher: any) => {\n    handleView(voucher.id);\n  };\n  \n  // Enhanced handleEdit to use hook\n  const handleEditWithData = (voucher: any) => {\n    handleEdit(voucher.id);\n  };\n  \n  // Enhanced handleView to use hook\n  const handleViewWithData = (voucher: any) => {\n    handleView(voucher.id);\n  };\n\n  const indexContent = (\n    <>\n      {/* Voucher list table */}\n      <TableContainer sx={{ maxHeight: 400 }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Voucher No.</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Date</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Customer</TableCell>\n              <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold', p: 1 }}>Amount</TableCell>\n              <TableCell align=\"right\" sx={{ fontSize: 15, fontWeight: 'bold', p: 0, width: 40 }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {latestVouchers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} align=\"center\">No sales vouchers available</TableCell>\n              </TableRow>\n            ) : (\n              latestVouchers.slice(0, 7).map((voucher: any) => (\n                <TableRow \n                  key={voucher.id} \n                  hover \n                  onContextMenu={(e) => { e.preventDefault(); handleContextMenu(e, voucher); }}\n                  sx={{ cursor: 'pointer' }}\n                >\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }} onClick={() => handleViewWithData(voucher)}>\n                    {voucher.voucher_number}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>\n                    {voucher.date ? new Date(voucher.date).toLocaleDateString() : 'N/A'}\n                  </TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>{customerList?.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A'}</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 12, p: 1 }}>₹{voucher.total_amount?.toLocaleString() || '0'}</TableCell>\n                  <TableCell align=\"right\" sx={{ fontSize: 12, p: 0 }}>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType=\"Sales Voucher\"\n                      onView={() => handleViewWithData(voucher)}\n                      onEdit={() => handleEditWithData(voucher)}\n                      onDelete={() => handleDelete(voucher)}\n                      onPrint={() => handleGeneratePDF()}\n                      showKebab={true}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  const formContent = (\n    <Box>\n      {/* Header Actions */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\" sx={{ fontSize: 20, fontWeight: 'bold', textAlign: 'center', flex: 1 }}>\n          {config.voucherTitle} - {mode === 'create' ? 'Create' : mode === 'edit' ? 'Edit' : 'View'}\n        </Typography>\n        <VoucherHeaderActions\n          mode={mode}\n          voucherType={config.voucherTitle}\n          voucherRoute=\"/vouchers/Sales-Vouchers/sales-voucher\"\n          currentId={selectedCustomerId}\n        />\n      </Box>\n\n      <form onSubmit={handleSubmit(onSubmit)} style={voucherStyles.formContainer}>\n        <Grid container spacing={1}>\n          {/* Voucher Number */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Voucher Number\"\n              {...control.register('voucher_number')}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center', fontWeight: 'bold' } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          {/* Date */}\n          <Grid size={6}>\n            <TextField\n              fullWidth\n              label=\"Date\"\n              type=\"date\"\n              {...control.register('date')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12, display: 'block', visibility: 'visible' } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n              sx={{ \n                '& .MuiInputBase-root': { height: 27 },\n                ...voucherStyles.dateField\n              }}\n            />\n          </Grid>\n\n          {/* Customer, Reference, Payment Terms in one row */}\n          <Grid size={6}>\n            <Autocomplete\n              size=\"small\"\n              options={enhancedCustomerOptions}\n              getOptionLabel={(option: any) => option?.name || ''}\n              value={selectedCustomer || null}\n              onChange={(_, newValue) => {\n                if (newValue?.id === null) {\n                  setShowAddCustomerModal(true);\n                } else {\n                  setValue('customer_id', newValue?.id || null);\n                }\n              }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Customer\"\n                  error={!!errors.customer_id}\n                  helperText={errors.customer_id ? 'Required' : ''}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ ...params.inputProps, style: { fontSize: 14 } }}\n                  size=\"small\"\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                />\n              )}\n              disabled={mode === 'view'}\n            />\n          </Grid>\n\n          <Grid size={3}>\n            <TextField\n              fullWidth\n              label=\"Reference\"\n              {...control.register('reference')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={3}>\n            <TextField\n              fullWidth\n              label=\"Payment Terms\"\n              {...control.register('payment_terms')}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n              sx={{ '& .MuiInputBase-root': { height: 27 } }}\n            />\n          </Grid>\n\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Notes\"\n              {...control.register('notes')}\n              multiline\n              rows={2}\n              disabled={mode === 'view'}\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14 } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Items section */}\n          <Grid size={12} sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: 27 }}>\n            <Typography variant=\"h6\" sx={{ fontSize: 16, fontWeight: 'bold', textAlign: 'center' }}>Items</Typography>\n          </Grid>\n\n          {/* Items Table */}\n          <Grid size={12}>\n            <TableContainer component={Paper} sx={{ maxHeight: 300, ...voucherStyles.centeredTable, ...voucherStyles.optimizedTableContainer }}>\n              <Table stickyHeader size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={voucherStyles.productTableColumns.productName}>Product</TableCell>\n                    <TableCell sx={{ width: 80, textAlign: 'center', fontSize: '0.8rem' }}>Stock</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.quantity}>Qty</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.rate}>Rate</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.discount}>Disc%</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.gst}>GST%</TableCell>\n                    <TableCell sx={voucherStyles.productTableColumns.amount}>Amount</TableCell>\n                    {mode !== 'view' && (\n                      <TableCell sx={voucherStyles.productTableColumns.action}>Action</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {fields.map((field: any, index: number) => (\n                    <React.Fragment key={field.id}>\n                      <TableRow>\n                        <TableCell sx={{ p: 1 }}>\n                          <ProductAutocomplete\n                            value={selectedProducts[index]}\n                            onChange={(product) => {\n                              setValue(`items.${index}.product_id`, product?.id || null);\n                              setValue(`items.${index}.product_name`, product?.product_name || '');\n                              setValue(`items.${index}.unit_price`, product?.unit_price || 0);\n                              setValue(`items.${index}.gst_rate`, product?.gst_rate || 18);\n                              setValue(`items.${index}.unit`, product?.unit || '');\n                              setValue(`items.${index}.reorder_level`, product?.reorder_level || 0);\n                              // Stock fetch handled in useEffect\n                            }}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          {watch(`items.${index}.product_id`) ? (\n                            <StockDisplay \n                              productId={watch(`items.${index}.product_id`)}\n                              disabled={false}\n                              showLabel={false}\n                            />\n                          ) : (\n                            <Typography variant=\"caption\" sx={{ color: 'text.disabled', fontSize: '0.7rem' }}>\n                              -\n                            </Typography>\n                          )}\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'right' }}>\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <TextField\n                              type=\"number\"\n                              {...control.register(`items.${index}.quantity`, { valueAsNumber: true })}\n                              disabled={mode === 'view'}\n                              size=\"small\"\n                              sx={{ width: 60 }}\n                            />\n                            <Typography sx={{ ml: 1, fontSize: 12 }}>{watch(`items.${index}.unit`)}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell sx={{ p: 1, textAlign: 'center' }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.unit_price`, { \n                              valueAsNumber: true,\n                              setValueAs: (value) => enhancedRateUtils.parseRate(value)\n                            })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{\n                              width: 80,\n                              ...voucherStyles.rateField\n                            }}\n                            inputProps={{ \n                              min: 0, \n                              step: 0.01,\n                              style: { textAlign: 'center' }\n                            }}\n                            onChange={(e) => {\n                              const value = enhancedRateUtils.parseRate(e.target.value);\n                              setValue(`items.${index}.unit_price`, value);\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <TextField\n                            type=\"number\"\n                            {...control.register(`items.${index}.discount_percentage`, { valueAsNumber: true })}\n                            disabled={mode === 'view'}\n                            size=\"small\"\n                            sx={{ width: 60 }}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1 }}>\n                          <Autocomplete\n                            size=\"small\"\n                            options={GST_SLABS}\n                            value={watch(`items.${index}.gst_rate`) || 18}\n                            onChange={(_, value) => setValue(`items.${index}.gst_rate`, value || 18)}\n                            renderInput={(params) => (\n                              <TextField {...params} size=\"small\" sx={{ width: 60 }} />\n                            )}\n                            disabled={mode === 'view'}\n                          />\n                        </TableCell>\n                        <TableCell sx={{ p: 1, fontSize: 14 }}>\n                          ₹{computedItems[index]?.amount?.toLocaleString() || '0'}\n                        </TableCell>\n                        {mode !== 'view' && (\n                          <TableCell sx={{ p: 1 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => remove(index)}\n                              color=\"error\"\n                            >\n                              <Remove />\n                            </IconButton>\n                          </TableCell>\n                        )}\n                      </TableRow>\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n            {mode !== 'view' && (\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 1 }}>\n                <Fab color=\"primary\" size=\"small\" onClick={handleAddItem}>\n                  <Add />\n                </Fab>\n              </Box>\n            )}\n          </Grid>\n\n          {/* Totals */}\n          <Grid size={12}>\n            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n              <Box sx={{ minWidth: 300 }}>\n                <Grid container spacing={1}>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      Subtotal:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalSubtotal.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                      {totalIgst > 0 ? 'IGST:' : 'CGST:'}\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                      ₹{totalIgst > 0 ? totalIgst.toLocaleString() : totalCgst.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  {totalIgst === 0 && (\n                    <>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14 }}>\n                          SGST:\n                        </Typography>\n                      </Grid>\n                      <Grid size={6}>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', fontSize: 14, fontWeight: 'bold' }}>\n                          ₹{totalSgst.toLocaleString()}\n                        </Typography>\n                      </Grid>\n                    </>\n                  )}\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      Total:\n                    </Typography>\n                  </Grid>\n                  <Grid size={6}>\n                    <Typography variant=\"h6\" sx={{ textAlign: 'right', fontSize: 16, fontWeight: 'bold' }}>\n                      ₹{totalAmount.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </Box>\n          </Grid>\n\n          {/* Amount in Words */}\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Amount in Words\"\n              value={getAmountInWords(totalAmount)}\n              disabled\n              InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n              inputProps={{ style: { fontSize: 14, textAlign: 'center' } }}\n              size=\"small\"\n            />\n          </Grid>\n\n          {/* Action buttons - removed Generate PDF */}\n          <Grid size={12}>\n            <Box sx={{ mt: 2, display: 'flex', gap: 1 }}>\n              {mode !== 'view' && (\n                <Button \n                  type=\"submit\" \n                  variant=\"contained\" \n                  color=\"success\" \n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  sx={{ fontSize: 12 }}\n                >\n                  Save\n                </Button>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n\n  if (isLoading) {\n    return (\n      <Container>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <>\n      <VoucherLayout\n        voucherType={config.voucherTitle}\n        voucherTitle={config.voucherTitle}\n        indexContent={indexContent}\n        formContent={formContent}\n        onShowAll={() => setShowVoucherListModal(true)}\n        // pagination={paginationData ? {\n        //   currentPage: currentPage,\n        //   totalPages: paginationData.totalPages,\n        //   onPageChange: handlePageChange,\n        //   totalItems: paginationData.totalItems\n        // } : undefined)\n        centerAligned={true}\n        modalContent={\n          <VoucherListModal\n            open={showVoucherListModal}\n            onClose={() => setShowVoucherListModal(false)}\n            voucherType=\"Sales Vouchers\"\n            vouchers={sortedVouchers || []}\n            onVoucherClick={handleVoucherClick}\n            onEdit={handleEditWithData}\n            onView={handleViewWithData}\n            onDelete={handleDelete}\n            onGeneratePDF={handleGeneratePDF}\n            customerList={customerList}\n          />\n        }\n      />\n\n      {/* Modals */}\n      <AddCustomerModal \n        open={showAddCustomerModal}\n        onClose={() => setShowAddCustomerModal(false)}\n        onAdd={refreshMasterData}\n        loading={addCustomerLoading}\n        setLoading={setAddCustomerLoading}\n      />\n\n      <AddProductModal \n        open={showAddProductModal}\n        onClose={() => setShowAddProductModal(false)}\n        onProductAdded={refreshMasterData}\n        loading={addProductLoading}\n        setLoading={setAddProductLoading}\n      />\n\n      <AddShippingAddressModal \n        open={showShippingModal}\n        onClose={() => setShowShippingModal(false)}\n        loading={addShippingLoading}\n        setLoading={setAddShippingLoading}\n      />\n\n      <VoucherContextMenu\n        contextMenu={contextMenu}\n        onClose={handleCloseContextMenu}\n        onEdit={handleEditWithData}\n        onView={handleViewWithData}\n        onDelete={handleDelete}\n        onPrint={handleGeneratePDF}\n      />\n    </>\n  );\n};\n\nexport default SalesVoucherPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/vouchers/index.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'handleCreateVoucher' is assigned a value but never used.","line":109,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"handleCreateVoucher"},"fix":{"range":[2954,3131],"text":""},"desc":"Remove unused variable 'handleCreateVoucher'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'refetchPurchaseVouchers' was used before it was defined.","line":165,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":165,"endColumn":34},{"ruleId":"no-use-before-define","severity":2,"message":"'refetchSalesVouchers' was used before it was defined.","line":167,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":167,"endColumn":31},{"ruleId":"no-use-before-define","severity":2,"message":"'refetchFinancialVouchers' was used before it was defined.","line":169,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":169,"endColumn":35},{"ruleId":"no-use-before-define","severity":2,"message":"'refetchInternalVouchers' was used before it was defined.","line":171,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":171,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'financialLoading' is assigned a value but never used.","line":213,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":213,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"financialLoading"},"fix":{"range":[6798,6827],"text":""},"desc":"Remove unused variable 'financialLoading'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'internalLoading' is assigned a value but never used.","line":228,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":228,"endColumn":61,"suggestions":[{"messageId":"removeVar","data":{"varName":"internalLoading"},"fix":{"range":[7487,7515],"text":""},"desc":"Remove unused variable 'internalLoading'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":343,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":343,"endColumn":40}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// revised fastapi_migration/frontend/src/pages/vouchers/index.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport {\n  Box,\n  Container,\n  Typography,\n  Tab,\n  Tabs,\n  Paper,\n  Card,\n  CardContent,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip\n} from '@mui/material';\nimport { useQuery } from '@tanstack/react-query';\nimport { voucherService, reportsService } from '../../services/authService';\nimport { voucherService as voucherApi } from '../../services/vouchersService';\nimport { generateVoucherPDF, getVoucherPdfConfig } from '../../utils/pdfUtils';\nimport MegaMenu from '../../components/MegaMenu';\nimport VoucherContextMenu from '../../components/VoucherContextMenu';\nimport VoucherListModal from '../../components/VoucherListModal';\nimport Grid from '@mui/material/Grid';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`voucher-tabpanel-${index}`}\n      aria-labelledby={`voucher-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst VoucherManagement: React.FC = () => {\n  const router = useRouter();\n  const [user] = useState({ email: 'demo@example.com', role: 'admin' });\n  const [contextMenu, setContextMenu] = useState<{ mouseX: number; mouseY: number; voucher: any; type: string } | null>(null);\n  const [showAllModal, setShowAllModal] = useState(false);\n  const [modalVoucherType, setModalVoucherType] = useState('');\n  const [modalVouchers, setModalVouchers] = useState<any[]>([]);\n\n  // Get tab from URL parameter\n  const getInitialTab = () => {\n    const { tab } = router.query;\n    switch (tab) {\n      case 'purchase': return 0;\n      case 'sales': return 1;\n      case 'financial': return 2;\n      case 'internal': return 3;\n      default: return 0;\n    }\n  };\n\n  const [tabValue, setTabValue] = useState(getInitialTab());\n\n  // Update tab when URL changes\n  useEffect(() => {\n    setTabValue(getInitialTab());\n   \n  }, [router.query.tab]);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n    // Update URL without full navigation\n    const tabNames = ['purchase', 'sales', 'financial', 'internal'];\n    router.replace(`/vouchers?tab=${tabNames[newValue]}`, undefined, { shallow: true });\n  };\n\n  const handleShowAll = (type: string, vouchers: any[]) => {\n    setModalVoucherType(type);\n    setModalVouchers(vouchers);\n    setShowAllModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowAllModal(false);\n    setModalVoucherType('');\n    setModalVouchers([]);\n  };\n\n  const handleLogout = () => {\n    // Handle logout\n  };\n\n  const handleCreateVoucher = (tabIndex: number) => {\n    const tabNames = ['purchase', 'sales', 'financial', 'internal'];\n    router.push(`/vouchers/${tabNames[tabIndex]}`);\n  };\n\n  const handleViewVoucher = (type: string, id: number) => {\n    router.push(`/vouchers/${type.toLowerCase()}/view/${id}`);\n  };\n\n  const handleEditVoucher = (type: string, id: number) => {\n    router.push(`/vouchers/${type.toLowerCase()}/edit/${id}`);\n  };\n\n  const handlePrintVoucher = async (type: string, id: number) => {\n    try {\n      // Map display type to API type\n      const voucherType = type === 'Purchase' ? 'purchase-vouchers' : \n                         type === 'Sales' ? 'sales-vouchers' : \n                         type.toLowerCase().replace(' ', '-');\n      \n      // Fetch voucher data\n      const voucherData = await voucherApi.getVoucherById(voucherType, id);\n      \n      // Generate PDF using the existing PDF utility\n      const pdfConfig = getVoucherPdfConfig(voucherType);\n      await generateVoucherPDF(voucherData, pdfConfig);\n    } catch (error: any) {\n      console.error('Error generating PDF:', error);\n      alert(`Error generating PDF: ${error.message || 'Unknown error'}`);\n    }\n  };\n\n  const handleEmailVoucher = async (type: string, id: number) => {\n    const voucherType = type === 'Purchase' ? 'purchase-vouchers' : (type === 'Sales' ? 'sales-vouchers' : '');\n    if (!voucherType) {return alert('Email not supported for this type');}\n\n    try {\n      await voucherService.sendVoucherEmail(voucherType, id);\n      alert('Email sent successfully');\n    } catch (error: any) {\n      alert(`Error sending email: ${error.message || 'Unknown error'}`);\n    }\n  };\n\n  const handleDeleteVoucher = async (type: string, id: number) => {\n    if (window.confirm(`Are you sure you want to delete this ${type} voucher?`)) {\n      try {\n        // Map display type to API type\n        const voucherType = type === 'Purchase' ? 'purchase-vouchers' : \n                           type === 'Sales' ? 'sales-vouchers' : \n                           type.toLowerCase().replace(' ', '-');\n        \n        await voucherApi.deleteVoucher(voucherType, id);\n        \n        // Refresh the appropriate voucher data\n        if (type === 'Purchase') {\n          refetchPurchaseVouchers();\n        } else if (type === 'Sales') {\n          refetchSalesVouchers();\n        } else if (type === 'Financial') {\n          refetchFinancialVouchers();\n        } else if (type === 'Internal') {\n          refetchInternalVouchers();\n        }\n        \n        alert('Voucher deleted successfully');\n      } catch (error: any) {\n        console.error('Error deleting voucher:', error);\n        alert(`Error deleting voucher: ${error.response?.data?.detail || error.message || 'Unknown error'}`);\n      }\n    }\n  };\n\n  const handleContextMenu = (event: React.MouseEvent, voucher: any, voucherType: string) => {\n    event.preventDefault();\n    setContextMenu({\n      mouseX: event.clientX + 2,\n      mouseY: event.clientY - 6,\n      voucher,\n      type: voucherType\n    });\n  };\n\n  const handleCloseContextMenu = () => {\n    setContextMenu(null);\n  };\n\n  // Fetch real data from APIs\n  const { data: dashboardStats } = useQuery({\n    queryKey: ['dashboardStats'],\n    queryFn: reportsService.getDashboardStats\n  });\n  const { data: purchaseVouchers, isLoading: purchaseLoading, refetch: refetchPurchaseVouchers } = useQuery({\n    queryKey: ['purchaseVouchers'],\n    queryFn: () => voucherService.getVouchers('purchase-vouchers'),\n    enabled: tabValue === 0\n  });\n  const { data: salesVouchers, isLoading: salesLoading, refetch: refetchSalesVouchers } = useQuery({\n    queryKey: ['salesVouchers'],\n    queryFn: () => voucherService.getVouchers('sales-vouchers'),\n    enabled: tabValue === 1\n  });\n  \n  // Financial vouchers queries\n  const { data: financialVouchers, isLoading: financialLoading, refetch: refetchFinancialVouchers } = useQuery({\n    queryKey: ['financialVouchers'],\n    queryFn: async () => {\n      const [payments, receipts, journals, contras] = await Promise.all([\n        voucherService.getVouchers('payment-vouchers').catch(() => []),\n        voucherService.getVouchers('receipt-vouchers').catch(() => []),\n        voucherService.getVouchers('journal-vouchers').catch(() => []),\n        voucherService.getVouchers('contra-vouchers').catch(() => [])\n      ]);\n      return [...payments, ...receipts, ...journals, ...contras];\n    },\n    enabled: tabValue === 2\n  });\n  \n  // Internal vouchers queries  \n  const { data: internalVouchers, isLoading: internalLoading, refetch: refetchInternalVouchers } = useQuery({\n    queryKey: ['internalVouchers'],\n    queryFn: async () => {\n      const [manufacturing, stock] = await Promise.all([\n        voucherService.getVouchers('manufacturing-journals').catch(() => []),\n        voucherService.getVouchers('stock-journals').catch(() => [])\n      ]);\n      return [...manufacturing, ...stock];\n    },\n    enabled: tabValue === 3\n  });\n\n  // Voucher types with real data\n  const voucherTypes = [\n    {\n      title: 'Purchase Vouchers',\n      description: 'Manage purchase transactions, orders, and returns',\n      count: dashboardStats?.vouchers?.purchase_vouchers || 0,\n      color: '#1976D2',\n      vouchers: purchaseVouchers || []\n    },\n    {\n      title: 'Sales Vouchers',\n      description: 'Manage sales transactions, orders, and returns',\n      count: dashboardStats?.vouchers?.sales_vouchers || 0,\n      color: '#2E7D32',\n      vouchers: salesVouchers || []\n    },\n    {\n      title: 'Financial Vouchers',\n      description: 'Manage payments, receipts, and journal entries',\n      count: (financialVouchers || []).length,\n      color: '#7B1FA2',\n      vouchers: financialVouchers || []\n    },\n    {\n      title: 'Internal Vouchers',\n      description: 'Manage internal transfers and adjustments',\n      count: (internalVouchers || []).length,\n      color: '#F57C00',\n      vouchers: internalVouchers || []\n    }\n  ];\n\n  const renderVoucherTable = (vouchers: any[], type: string, isLoading: boolean = false) => {\n    if (isLoading) {\n      return <Typography>Loading {type} vouchers...</Typography>;\n    }\n    \n    if (!vouchers || vouchers.length === 0) {\n      return <Typography>No {type} vouchers found.</Typography>;\n    }\n\n    // Show only latest 5 vouchers in the table\n    const latestVouchers = vouchers.slice(0, 5);\n\n    return (\n      <Box>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Index</TableCell>\n                <TableCell>Voucher #</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>{type === 'Purchase' ? 'Vendor' : type === 'Sales' ? 'Customer' : 'Type'}</TableCell>\n                <TableCell>Amount</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {latestVouchers.map((voucher, index) => (\n                <TableRow \n                  key={voucher.id}\n                  onContextMenu={(e) => handleContextMenu(e, voucher, type)}\n                  sx={{ \n                    '&:hover': {\n                      backgroundColor: 'rgba(0, 0, 0, 0.04)',\n                    }\n                  }}\n                >\n                  <TableCell>{index + 1}</TableCell>\n                  <TableCell>{voucher.voucher_number}</TableCell>\n                  <TableCell>{new Date(voucher.date).toLocaleDateString()}</TableCell>\n                  <TableCell>\n                    {voucher.vendor?.name || voucher.customer?.name || voucher.type || 'N/A'}\n                  </TableCell>\n                  <TableCell>\n                    {voucher.total_amount > 0 ? `₹${voucher.total_amount.toLocaleString()}` : '-'}\n                  </TableCell>\n                  <TableCell>\n                    <Chip\n                      label={voucher.status}\n                      color={\n                        voucher.status === 'approved' || voucher.status === 'confirmed' || voucher.status === 'processed'\n                          ? 'success'\n                          : voucher.status === 'pending'\n                          ? 'warning'\n                          : 'default'\n                      }\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <VoucherContextMenu\n                      voucher={voucher}\n                      voucherType={type}\n                      onView={(id) => handleViewVoucher(type, id)}\n                      onEdit={(id) => handleEditVoucher(type, id)}\n                      onDelete={(id) => handleDeleteVoucher(type, id)}\n                      onPrint={(id) => handlePrintVoucher(type, id)}\n                      onEmail={(id) => handleEmailVoucher(type, id)}\n                      showKebab={true}\n                      open={false}\n                      onClose={() => {}}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        \n        {vouchers.length > 5 && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\n            <Button\n              variant=\"outlined\"\n              onClick={() => handleShowAll(type, vouchers)}\n              sx={{ textTransform: 'none' }}\n            >\n              Show All ({vouchers.length} total)\n            </Button>\n          </Box>\n        )}\n      </Box>\n    );\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <MegaMenu user={user} onLogout={handleLogout} />\n\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Voucher Management System\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 4 }}>\n          Comprehensive management of all voucher types in your ERP system\n        </Typography>\n\n        {/* Summary Cards */}\n        <Grid container spacing={3} sx={{ mb: 4 }}>\n          {voucherTypes.map((voucherType, index) => (\n            <Grid size={{ xs: 12, sm: 6, md: 3 }} key={index}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                    <Box>\n                      <Typography color=\"textSecondary\" gutterBottom>\n                        {voucherType.title}\n                      </Typography>\n                      <Typography variant=\"h4\" component=\"h2\">\n                        {voucherType.count}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {voucherType.description}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n\n        {/* Voucher Tabs */}\n        <Paper sx={{ mb: 4 }}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"voucher tabs\">\n              <Tab label=\"Purchase Vouchers\" />\n              <Tab label=\"Sales Vouchers\" />\n              <Tab label=\"Financial Vouchers\" />\n              <Tab label=\"Internal Vouchers\" />\n            </Tabs>\n          </Box>\n\n          <TabPanel value={tabValue} index={0}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Purchase Vouchers</Typography>\n            </Box>\n            {renderVoucherTable(voucherTypes[0].vouchers, 'Purchase', purchaseLoading)}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={1}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Sales Vouchers</Typography>\n            </Box>\n            {renderVoucherTable(voucherTypes[1].vouchers, 'Sales', salesLoading)}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={2}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Financial Vouchers</Typography>\n            </Box>\n            {renderVoucherTable(voucherTypes[2].vouchers, 'Financial', false)}\n          </TabPanel>\n\n          <TabPanel value={tabValue} index={3}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n              <Typography variant=\"h6\">Internal Vouchers</Typography>\n            </Box>\n            {renderVoucherTable(voucherTypes[3].vouchers, 'Internal', false)}\n          </TabPanel>\n        </Paper>\n\n        {/* Summary */}\n        <Paper sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Voucher System Features\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <Typography variant=\"body1\" paragraph>\n                ✅ <strong>4 Voucher Categories:</strong> Purchase, Sales, Financial, and Internal vouchers\n              </Typography>\n              <Typography variant=\"body1\" paragraph>\n                ✅ <strong>Complete CRUD Operations:</strong> Create, Read, Update, Delete vouchers\n              </Typography>\n              <Typography variant=\"body1\" paragraph>\n                ✅ <strong>Status Management:</strong> Draft, Pending, Approved, Confirmed workflows\n              </Typography>\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <Typography variant=\"body1\" paragraph>\n                ✅ <strong>Email Integration:</strong> Send vouchers to vendors/customers\n              </Typography>\n              <Typography variant=\"body1\" paragraph>\n                ✅ <strong>Print Support:</strong> Generate PDF vouchers for printing\n              </Typography>\n              <Typography variant=\"body1\" paragraph>\n                ✅ <strong>Audit Trail:</strong> Track all voucher changes and approvals\n              </Typography>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Container>\n\n      {/* Global Context Menu for Right-Click */}\n      {contextMenu && (\n        <VoucherContextMenu\n          voucher={contextMenu.voucher}\n          voucherType={contextMenu.type}\n          onView={(id) => handleViewVoucher(contextMenu.type, id)}\n          onEdit={(id) => handleEditVoucher(contextMenu.type, id)}\n          onDelete={(id) => handleDeleteVoucher(contextMenu.type, id)}\n          onPrint={(id) => handlePrintVoucher(contextMenu.type, id)}\n          onEmail={(id) => handleEmailVoucher(contextMenu.type, id)}\n          showKebab={false}\n          anchorPosition={{ left: contextMenu.mouseX, top: contextMenu.mouseY }}\n          open={!!contextMenu}\n          onClose={handleCloseContextMenu}\n        />\n      )}\n\n      {/* Show All Modal */}\n      {showAllModal && (\n        <VoucherListModal\n          open={showAllModal}\n          onClose={handleCloseModal}\n          vouchers={modalVouchers}\n          voucherType={modalVoucherType}\n          onVoucherClick={(voucher) => handleViewVoucher(modalVoucherType, voucher.id)}\n          onView={(id) => handleViewVoucher(modalVoucherType, id)}\n          onEdit={(id) => handleEditVoucher(modalVoucherType, id)}\n          onDelete={(id) => handleDeleteVoucher(modalVoucherType, id)}\n          onGeneratePDF={(voucher) => handlePrintVoucher(modalVoucherType, voucher.id)}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default VoucherManagement;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/__tests__/stockService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/adminService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":54,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'licenseData' should be typed with a non-any type.","line":54,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":54,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":64,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":64,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":74,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":74,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// New: v1/frontend/src/services/adminService.ts\n\nimport api from '../lib/api';  // Changed import to use the correct api instance with /api/v1 baseURL\n\ninterface AppStatistics {\n  total_licenses_issued: number;\n  active_organizations: number;\n  trial_organizations: number;\n  total_active_users: number;\n  super_admins_count: number;\n  new_licenses_this_month: number;\n  plan_breakdown: { [key: string]: number };\n  system_health: {\n    status: string;\n    uptime: string;\n  };\n  generated_at: string;\n}\n\ninterface OrgStatistics {\n  total_products: number;\n  total_customers: number;\n  total_vendors: number;\n  active_users: number;\n  monthly_sales: number;\n  inventory_value: number;\n  plan_type: string;\n  storage_used_gb: number;\n  generated_at: string;\n}\n\nconst adminService = {\n  getAppStatistics: async (): Promise<AppStatistics> => {\n    try {\n      const response = await api.get<AppStatistics>('/organizations/app-statistics');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch app statistics:', error);\n      throw error;\n    }\n  },\n\n  getOrgStatistics: async (): Promise<OrgStatistics> => {\n    try {\n      const response = await api.get<OrgStatistics>('/organizations/org-statistics');  // Assuming this endpoint exists in backend\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch organization statistics:', error);\n      throw error;\n    }\n  },\n\n  // Add more admin-related API calls as needed, e.g., manage licenses, organizations, etc.\n  createLicense: async (licenseData: any) => {\n    try {\n      const response = await api.post('/organizations/license/create', licenseData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create license:', error);\n      throw error;\n    }\n  },\n\n  resetOrganizationData: async () => {\n    try {\n      const response = await api.post('/organizations/reset-data');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to reset organization data:', error);\n      throw error;\n    }\n  },\n\n  resetUserPassword: async (email: string) => {\n    try {\n      const response = await api.post('/password/admin-reset', { user_email: email });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to reset user password:', error);\n      throw error;\n    }\n  }\n};\n\nexport default adminService;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/analyticsService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":112,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":112,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/analyticsService.ts\n\nimport api from '../lib/api';\n\nexport interface CustomerAnalyticsData {\n  customer_id: number;\n  customer_name: string;\n  total_interactions: number;\n  last_interaction_date?: string;\n  interaction_types: Record<string, number>;\n  interaction_status: Record<string, number>;\n  segments: Array<{\n    segment_name: string;\n    segment_value?: number;\n    assigned_date: string;\n    description?: string;\n  }>;\n  recent_interactions: Array<{\n    interaction_type: string;\n    subject: string;\n    status: string;\n    interaction_date: string;\n  }>;\n  calculated_at: string;\n}\n\nexport interface SegmentAnalyticsData {\n  segment_name: string;\n  total_customers: number;\n  total_interactions: number;\n  avg_interactions_per_customer: number;\n  interaction_distribution: Record<string, number>;\n  activity_timeline: Array<{\n    date: string;\n    interaction_count: number;\n  }>;\n  calculated_at: string;\n}\n\nexport interface DashboardMetrics {\n  total_customers: number;\n  total_interactions_today: number;\n  total_interactions_week: number;\n  total_interactions_month: number;\n  top_segments: Array<{\n    segment_name: string;\n    customer_count: number;\n  }>;\n  recent_activity: Array<{\n    customer_name: string;\n    interaction_type: string;\n    interaction_date: string;\n  }>;\n  calculated_at: string;\n}\n\nexport const analyticsService = {\n  getCustomerAnalytics: async (\n    customerId: number, \n    includeRecentInteractions: boolean = true,\n    recentInteractionsLimit: number = 5\n  ): Promise<CustomerAnalyticsData> => {\n    try {\n      const response = await api.get(`/analytics/customers/${customerId}/analytics`, {\n        params: {\n          include_recent_interactions: includeRecentInteractions,\n          recent_interactions_limit: recentInteractionsLimit,\n        },\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get customer analytics');\n    }\n  },\n\n  getSegmentAnalytics: async (\n    segmentName: string,\n    includeTimeline: boolean = true,\n    timelineDays: number = 30\n  ): Promise<SegmentAnalyticsData> => {\n    try {\n      const response = await api.get(`/analytics/segments/${segmentName}/analytics`, {\n        params: {\n          include_timeline: includeTimeline,\n          timeline_days: timelineDays,\n        },\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get segment analytics');\n    }\n  },\n\n  getDashboardMetrics: async (): Promise<DashboardMetrics> => {\n    try {\n      const response = await api.get('/analytics/dashboard/metrics');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get dashboard metrics');\n    }\n  },\n\n  getAvailableSegments: async (): Promise<string[]> => {\n    try {\n      const response = await api.get('/analytics/segments');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get available segments');\n    }\n  },\n\n  getOrganizationSummary: async () => {\n    try {\n      const response = await api.get('/analytics/organization/summary');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization analytics summary');\n    }\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/assetService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/authService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":9,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":54,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":99,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":99,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":132,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":132,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":139,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":139,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":157,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":157,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":165,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":165,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":201,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":201,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":217,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":217,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":229,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":229,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":229,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":229,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":237,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":237,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":237,"column":39,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":237,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":245,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":245,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":253,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":253,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":253,"column":51,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":253,"endColumn":60},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":261,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":261,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":269,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":269,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":281,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":281,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":281,"column":28,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":281,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":285,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":285,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":285,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":285,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":288,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":288,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":291,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":291,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":291,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":291,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":294,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":294,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":294,"column":43,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":294,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":298,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":298,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":298,"column":19,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":298,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":301,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":301,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":304,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":304,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":304,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":304,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":307,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":307,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":307,"column":33,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":307,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":311,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":311,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":311,"column":22,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":311,"endColumn":34},{"ruleId":"no-use-before-define","severity":2,"message":"'masterDataService' was used before it was defined.","line":312,"column":12,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":312,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":314,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":314,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":314,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":314,"endColumn":35},{"ruleId":"no-use-before-define","severity":2,"message":"'masterDataService' was used before it was defined.","line":315,"column":12,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":315,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":317,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":317,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":317,"column":24,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":317,"endColumn":36},{"ruleId":"no-use-before-define","severity":2,"message":"'masterDataService' was used before it was defined.","line":318,"column":12,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":318,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":323,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":323,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":332,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":332,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":332,"column":24,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":332,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":340,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":340,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":340,"column":36,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":340,"endColumn":45},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":348,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":348,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":356,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":356,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":365,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":365,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":365,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":365,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":373,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":373,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":373,"column":38,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":373,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":381,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":381,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":389,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":389,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":398,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":398,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":398,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":398,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":406,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":406,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":406,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":406,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":414,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":414,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":422,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":422,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":431,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":431,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":440,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":440,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":440,"column":42,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":440,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":448,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":448,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":458,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":458,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":486,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":486,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":506,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":506,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":506,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":506,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":534,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":534,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":557,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":557,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":561,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":561,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":566,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":566,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":566,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":566,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":574,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":574,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":574,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":574,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":582,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":582,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":596,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":596,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":604,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":604,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":609,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":609,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":618,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":618,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":627,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":627,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":636,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":636,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":645,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":645,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'updates' should be typed with a non-any type.","line":645,"column":74,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":645,"endColumn":86},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":654,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":654,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":665,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":665,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":673,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":673,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":673,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":673,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":681,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":681,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":681,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":681,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":689,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":689,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":699,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":699,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":709,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":709,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":709,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":709,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":717,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":717,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":717,"column":32,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":717,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":727,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":727,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":727,"column":34,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":727,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":739,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":739,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":739,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":739,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":751,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":751,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":751,"column":38,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":751,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":763,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":763,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":763,"column":36,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":763,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":775,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":775,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":775,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":775,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":787,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":787,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":787,"column":40,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":787,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":801,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":801,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":801,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":801,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":809,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":809,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":817,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":817,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":817,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":817,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":826,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":826,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":834,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":834,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":842,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":842,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":842,"column":46,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":842,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":853,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":853,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":880,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":880,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":888,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":888,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":911,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":911,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":911,"column":32,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":911,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":919,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":919,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":919,"column":22,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":919,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":927,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":927,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":927,"column":34,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":927,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":935,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":935,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":943,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":943,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":951,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":951,"endColumn":27}],"suppressedMessages":[],"errorCount":131,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/authService.ts\n\n// Revised: frontend/src/services/authService.ts\n\n// frontend/src/services/authService.ts (Revised for detailed error handling in companyService)\nimport api from '../lib/api';  // Use the api client\n\nexport const authService = {\n  login: async (username: string, password: string) => {\n    try {\n      console.log('[AuthService] Starting login process for:', username);\n      \n      const formData = new FormData();\n      formData.append('username', username);\n      formData.append('password', password);\n      const response = await api.post('/auth/login', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      \n      console.log('[AuthService] Login API response received:', {\n        hasToken: !!response.data.access_token,\n        organizationId: response.data.organization_id,\n        userRole: response.data.user_role,\n        mustChangePassword: response.data.must_change_password\n      });\n      \n      // Store token FIRST\n      localStorage.setItem('token', response.data.access_token);\n      \n      // Store refresh token if provided\n      if (response.data.refresh_token) {\n        localStorage.setItem('refresh_token', response.data.refresh_token);\n        console.log('[AuthService] Stored refresh token');\n      }\n      \n      // Store authentication context data (NOT organization_id - that stays in memory)\n      if (response.data.user_role) {\n        localStorage.setItem('user_role', response.data.user_role);\n        console.log('[AuthService] Stored user_role:', response.data.user_role);\n      }\n      localStorage.setItem('is_super_admin', response.data.user?.is_super_admin ? 'true' : 'false');\n      console.log('[AuthService] Stored is_super_admin:', response.data.user?.is_super_admin);\n      console.log('[AuthService] Organization context managed by backend session only');\n      \n      console.log('[AuthService] Login complete - auth context established');\n      return response.data;\n    } catch (error: any) {\n      console.error('[AuthService] Login failed:', error);\n      throw new Error(error.userMessage || 'Login failed');\n    }\n  },\n  loginWithEmail: async (email: string, password: string) => {\n    try {\n      console.log('[AuthService] Starting email login process for:', email);\n      \n      const formData = new FormData();\n      formData.append('username', email);\n      formData.append('password', password);\n      \n      const response = await api.post('/auth/login', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      \n      console.log('[AuthService] Email login API response received:', {\n        hasToken: !!response.data.access_token,\n        organizationId: response.data.organization_id,\n        userRole: response.data.user_role,\n        mustChangePassword: response.data.must_change_password\n      });\n      \n      // Store token FIRST\n      localStorage.setItem('token', response.data.access_token);\n      \n      // Store ALL authentication context data immediately after token\n      // Store authentication context data (NOT organization_id - that stays in memory)\n      if (response.data.user_role) {\n        localStorage.setItem('user_role', response.data.user_role);\n        console.log('[AuthService] Stored user_role:', response.data.user_role);\n      }\n      localStorage.setItem('is_super_admin', response.data.user?.is_super_admin ? 'true' : 'false');\n      console.log('[AuthService] Stored is_super_admin:', response.data.user?.is_super_admin);\n      console.log('[AuthService] Organization context managed by backend session only');\n      \n      console.log('[AuthService] Email login complete - all context established');\n      return response.data;\n    } catch (error: any) {\n      console.error('[AuthService] Email login failed:', error);\n      throw new Error(error.userMessage || 'Email login failed');\n    }\n  },\n  // NOTE: This method should only be called by AuthProvider for:\n  // 1. Initial user fetch on app mount \n  // 2. Manual user refresh operations\n  // DO NOT call this directly from components - use useAuth() hook instead\n  getCurrentUser: async () => {\n    try {\n      console.log('[AuthService] Fetching current user data');\n      \n      const response = await api.get('/users/me');\n      console.log('[AuthService] User data received from /users/me:', {\n        id: response.data.id,\n        email: response.data.email,\n        role: response.data.role,\n        is_super_admin: response.data.is_super_admin,\n        organization_id: response.data.organization_id,\n        must_change_password: response.data.must_change_password\n      });\n      \n      // Organization context is managed by backend session only\n      console.log('[AuthService] Organization context from backend session:', response.data.organization_id);\n      \n      // Store role information\n      if (response.data.role) {\n        localStorage.setItem('user_role', response.data.role);\n        console.log('[AuthService] Updated user_role in localStorage:', response.data.role);\n      }\n      \n      localStorage.setItem('is_super_admin', response.data.is_super_admin ? 'true' : 'false');\n      console.log('[AuthService] Updated is_super_admin in localStorage:', response.data.is_super_admin);\n      \n      console.log('[AuthService] getCurrentUser complete - all localStorage updated');\n      return response.data;\n    } catch (error: any) {\n      console.error('[AuthService] Failed to fetch current user:', error);\n      throw new Error(error.userMessage || 'Failed to fetch user information');\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user_role');\n    localStorage.removeItem('is_super_admin');\n    window.location.href = '/';\n  },\n  requestOTP: async (email: string, phone: string, deliveryMethod: string = 'auto', purpose: string = 'login') => {\n    try {\n      const requestData: any = { email, purpose };\n      \n      if (phone) {\n        requestData.phone_number = phone;\n      }\n      \n      if (deliveryMethod) {\n        requestData.delivery_method = deliveryMethod;\n      }\n      \n      const response = await api.post('/auth/otp/request', requestData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to send OTP');\n    }\n  },\n  verifyOTP: async (email: string, otp: string, purpose: string = 'login') => {\n    try {\n      const response = await api.post('/auth/otp/verify', { email, otp, purpose });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'OTP verification failed');\n    }\n  },\n  refreshToken: async () => {\n    try {\n      console.log('[AuthService] Attempting to refresh token');\n      const refreshToken = localStorage.getItem('refresh_token');\n      \n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      \n      const response = await api.post('/auth/refresh-token', {\n        refresh_token: refreshToken\n      });\n      \n      console.log('[AuthService] Token refresh successful');\n      \n      // Update stored tokens\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n      }\n      if (response.data.refresh_token) {\n        localStorage.setItem('refresh_token', response.data.refresh_token);\n      }\n      \n      return response.data;\n    } catch (error: any) {\n      console.error('[AuthService] Token refresh failed:', error);\n      \n      // Clear invalid tokens\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user_role');\n      localStorage.removeItem('is_super_admin');\n      \n      throw new Error(error.userMessage || 'Token refresh failed');\n    }\n  },\n  isTokenValid: () => {\n    const token = localStorage.getItem('token');\n    if (!token) {return false;}\n    \n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const expiry = payload.exp * 1000; // Convert to milliseconds\n      const now = Date.now();\n      \n      // Check if token expires in next 5 minutes\n      return expiry > now + (5 * 60 * 1000);\n    } catch (error) {\n      console.error('[AuthService] Failed to parse token:', error);\n      return false;\n    }\n  },\n  setupAdminAccount: async () => {\n    try {\n      const response = await api.post('/auth/admin/setup');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Admin setup failed');\n    }\n  },\n};\n\nexport const voucherService = {\n  // Generic function for CRUD\n  getVouchers: async (type: string, params?: any) => {\n    try {\n      const response = await api.get(`/${type}/`, { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to fetch ${type}`);\n    }\n  },\n  createVoucher: async (type: string, data: any, sendEmail = false) => {\n    try {\n      const response = await api.post(`/${type}/`, data, { params: { send_email: sendEmail } });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to create ${type}`);\n    }\n  },\n  getVoucherById: async (type: string, id: number) => {\n    try {\n      const response = await api.get(`/${type}/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to fetch ${type}`);\n    }\n  },\n  updateVoucher: async (type: string, id: number, data: any) => {\n    try {\n      const response = await api.put(`/${type}/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to update ${type}`);\n    }\n  },\n  deleteVoucher: async (type: string, id: number) => {\n    try {\n      const response = await api.delete(`/${type}/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to delete ${type}`);\n    }\n  },\n  sendVoucherEmail: async (voucherType: string, voucherId: number, customEmail?: string) => {\n    let params = '';\n    if (customEmail) {\n      params = `?custom_email=${customEmail}`;\n    }\n    try {\n      const response = await api.post(`/${voucherType}/${voucherId}/send-email${params}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to send email');\n    }\n  },\n  getSalesVouchers: async (params?: any) => {\n    return voucherService.getVouchers('sales-vouchers', params);\n  },\n  // Purchase Order specific methods\n  getPurchaseOrders: async (params?: any) => {\n    return voucherService.getVouchers('purchase-orders', params);\n  },\n  getPurchaseOrderById: async (id: number) => {\n    return voucherService.getVoucherById('purchase-orders', id);\n  },\n  createPurchaseOrder: async (data: any, sendEmail = false) => {\n    return voucherService.createVoucher('purchase-orders', data, sendEmail);\n  },\n  updatePurchaseOrder: async (id: number, data: any) => {\n    return voucherService.updateVoucher('purchase-orders', id, data);\n  },\n  // GRN specific methods\n  getGrns: async (params?: any) => {\n    return voucherService.getVouchers('goods-receipt-notes', params);\n  },\n  getGrnById: async (id: number) => {\n    return voucherService.getVoucherById('goods-receipt-notes', id);\n  },\n  createGrn: async (data: any, sendEmail = false) => {\n    return voucherService.createVoucher('goods-receipt-notes', data, sendEmail);\n  },\n  updateGrn: async (id: number, data: any) => {\n    return voucherService.updateVoucher('goods-receipt-notes', id, data);\n  },\n  // Access to master data for vouchers\n  getVendors: async (params?: any) => {\n    return masterDataService.getVendors(params);\n  },\n  getProducts: async (params?: any) => {\n    return masterDataService.getProducts(params);\n  },\n  getCustomers: async (params?: any) => {\n    return masterDataService.getCustomers(params);\n  },\n};\n\nexport const masterDataService = {\n  getVendors: async ({ signal, params = {} } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/vendors', { params, signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch vendors');\n    }\n  },\n  createVendor: async (data: any) => {\n    try {\n      const response = await api.post('/vendors', data);  // No trailing /\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create vendor');\n    }\n  },\n  updateVendor: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/vendors/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update vendor');\n    }\n  },\n  deleteVendor: async (id: number) => {\n    try {\n      const response = await api.delete(`/vendors/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete vendor');\n    }\n  },\n  getCustomers: async ({ signal, params = {} } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/customers', { params, signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch customers');\n    }\n  },\n  createCustomer: async (data: any) => {\n    try {\n      const response = await api.post('/customers', data);  // No trailing /\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create customer');\n    }\n  },\n  updateCustomer: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/customers/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update customer');\n    }\n  },\n  deleteCustomer: async (id: number) => {\n    try {\n      const response = await api.delete(`/customers/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete customer');\n    }\n  },\n  getProducts: async ({ signal } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/products', { signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch products');\n    }\n  },\n  createProduct: async (data: any) => {\n    try {\n      const response = await api.post('/products', data);  // No trailing /\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create product');\n    }\n  },\n  updateProduct: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/products/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update product');\n    }\n  },\n  deleteProduct: async (id: number) => {\n    try {\n      const response = await api.delete(`/products/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete product');\n    }\n  },\n  getStock: async ({ signal, params = {} } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/stock', { params, signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch stock data');\n    }\n  },\n  getLowStock: async ({ signal } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/stock/low-stock', { signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch low stock data');\n    }\n  },\n  updateStock: async (productId: number, data: any) => {\n    try {\n      const response = await api.put(`/stock/product/${productId}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update stock');\n    }\n  },\n  adjustStock: async (productId: number, quantityChange: number, reason: string) => {\n    try {\n      const response = await api.post(`/stock/adjust/${productId}`, null, {\n        params: { quantity_change: quantityChange, reason }\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to adjust stock');\n    }\n  },\n  bulkImportStock: async (file: File, mode: string = 'replace') => {\n    try {\n      // Ensure user is authenticated before attempting import\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required. Please log in before importing inventory.');\n      }\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      /**\n       * @deprecated Use React user context instead - organization context is derived from backend session\n       * Organization context is automatically managed by the backend via JWT token\n       */\n      const params = { mode };\n      console.log('Bulk import params:', params);\n      const response = await api.post('/stock/bulk', formData, {\n        params,\n        headers: {\n          'Content-Type': undefined,\n        },\n        transformRequest: (data) => data,\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to bulk import stock');\n    }\n  },\n  downloadStockTemplate: async () => {\n    try {\n      const response = await api.get('/stock/template/excel', {\n        responseType: 'blob',\n      });\n      const blob = new Blob([response.data], { \n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'stock_template.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to download stock template');\n    }\n  },\n  exportStock: async (params?: any) => {\n    try {\n      /**\n       * @deprecated Use React user context instead - organization context is derived from backend session\n       * Organization context is automatically managed by the backend via JWT token\n       */\n      const response = await api.get('/stock/export/excel', {\n        params,\n        responseType: 'blob',\n      });\n      const blob = new Blob([response.data], { \n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'stock_export.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export stock');\n    }\n  },\n};\n\nexport const companyService = {\n  getCurrentCompany: async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log('[CompanyService] Skipping company fetch - no token available');\n      return null;\n    }\n    try {\n      /**\n       * @deprecated Use React user context instead - organization context is derived from backend session\n       * Organization context is automatically managed by the backend via JWT token\n       */\n      const response = await api.get('/companies/current');\n      console.log('[CompanyService] Company data received:', response.data);\n      return response.data;\n    } catch (error: any) {\n      if (error.status === 404 || error.isCompanySetupRequired) {\n        console.log('[CompanyService] Company setup required (404 or company missing)');\n        return null;\n      }\n      console.error('[CompanyService] Error fetching company:', error);\n      return null;  // Return null on error to avoid throwing\n    }\n  },\n  isCompanySetupRequired: async () => {\n    try {\n      const company = await companyService.getCurrentCompany();\n      return company === null;\n    } catch (error: any) {\n      // If we get an error other than 404, assume company setup is required\n      return true;\n    }\n  },\n  createCompany: async (data: any) => {\n    try {\n      const response = await api.post('/companies/', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create company');\n    }\n  },\n  updateCompany: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/companies/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update company');\n    }\n  },\n  uploadLogo: async (companyId: number, file: File) => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await api.post(`/companies/${companyId}/logo`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to upload logo');\n    }\n  },\n  deleteLogo: async (companyId: number) => {\n    try {\n      const response = await api.delete(`/companies/${companyId}/logo`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete logo');\n    }\n  },\n  getLogoUrl: (companyId: number) => {\n    return `/api/v1/companies/${companyId}/logo`;\n  },\n  \n  // Multi-company management methods\n  getCompanies: async () => {\n    try {\n      const response = await api.get('/companies/');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch companies');\n    }\n  },\n  \n  getOrganizationInfo: async () => {\n    try {\n      const response = await api.get('/organizations/current');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch organization info');\n    }\n  },\n  \n  getCompanyUsers: async (companyId: number) => {\n    try {\n      const response = await api.get(`/companies/${companyId}/users`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch company users');\n    }\n  },\n  \n  assignUserToCompany: async (companyId: number, data: { user_id: number; company_id: number; is_company_admin: boolean }) => {\n    try {\n      const response = await api.post(`/companies/${companyId}/users`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to assign user to company');\n    }\n  },\n  \n  updateUserCompanyAssignment: async (companyId: number, userId: number, updates: any) => {\n    try {\n      const response = await api.put(`/companies/${companyId}/users/${userId}`, updates);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update user assignment');\n    }\n  },\n  \n  removeUserFromCompany: async (companyId: number, userId: number) => {\n    try {\n      const response = await api.delete(`/companies/${companyId}/users/${userId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to remove user from company');\n    }\n  },\n};\n\nexport const reportsService = {\n  getDashboardStats: async () => {\n    try {\n      const response = await api.get('/reports/dashboard-stats');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get dashboard stats');\n    }\n  },\n  getSalesReport: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/sales-report', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get sales report');\n    }\n  },\n  getPurchaseReport: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/purchase-report', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get purchase report');\n    }\n  },\n  getInventoryReport: async (lowStockOnly = false) => {\n    try {\n      const response = await api.get('/reports/inventory-report', {\n        params: { low_stock_only: lowStockOnly }\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get inventory report');\n    }\n  },\n  getPendingOrders: async (orderType = 'all') => {\n    try {\n      const response = await api.get('/reports/pending-orders', {\n        params: { order_type: orderType }\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get pending orders');\n    }\n  },\n  getCompleteLedger: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/complete-ledger', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get complete ledger');\n    }\n  },\n  getOutstandingLedger: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/outstanding-ledger', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get outstanding ledger');\n    }\n  },\n  \n  // Export functions\n  exportSalesReportExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/sales-report/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export sales report');\n    }\n  },\n  \n  exportPurchaseReportExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/purchase-report/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export purchase report');\n    }\n  },\n  \n  exportInventoryReportExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/inventory-report/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export inventory report');\n    }\n  },\n  \n  exportPendingOrdersExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/pending-orders/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export pending orders report');\n    }\n  },\n  \n  exportCompleteLedgerExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/complete-ledger/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export complete ledger');\n    }\n  },\n  \n  exportOutstandingLedgerExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/outstanding-ledger/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export outstanding ledger');\n    }\n  },\n};\n\nexport const organizationService = {\n  createLicense: async (data: any) => {\n    try {\n      const response = await api.post('/organizations/license/create', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create organization license');\n    }\n  },\n  getCurrentOrganization: async () => {\n    try {\n      const response = await api.get('/organizations/current');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get current organization');\n    }\n  },\n  updateOrganization: async (data: any) => {\n    try {\n      const response = await api.put('/organizations/current', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update organization');\n    }\n  },\n  // Admin-only endpoints\n  getAllOrganizations: async () => {\n    try {\n      const response = await api.get('/organizations/');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organizations');\n    }\n  },\n  getOrganization: async (id: number) => {\n    try {\n      const response = await api.get(`/organizations/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization');\n    }\n  },\n  updateOrganizationById: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/organizations/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update organization');\n    }\n  },\n};\n\nexport const passwordService = {\n  changePassword: async (currentPassword: string | null, newPassword: string, confirmPassword?: string) => {\n    try {\n      const payload: { new_password: string; current_password?: string; confirm_password?: string } = {\n        new_password: newPassword\n      };\n      \n      if (currentPassword) {\n        payload.current_password = currentPassword;\n      }\n      \n      if (confirmPassword) {\n        payload.confirm_password = confirmPassword;\n      }\n      \n      const response = await api.post('/password/change', payload);\n      \n      // Handle new token if provided in response (password change returns new JWT)\n      if (response.data.access_token) {\n        console.log('[PasswordService] New token received after password change, updating storage');\n        localStorage.setItem('token', response.data.access_token);\n      }\n      \n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to change password');\n    }\n  },\n  forgotPassword: async (email: string) => {\n    try {\n      const response = await api.post('/password/forgot', { email });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to send password reset email');\n    }\n  },\n  resetPassword: async (email: string, otp: string, newPassword: string) => {\n    try {\n      const response = await api.post('/password/reset', {\n        email,\n        otp,\n        new_password: newPassword\n      });\n      \n      // Handle new token if provided in response (password reset returns new JWT)\n      if (response.data.access_token) {\n        console.log('[PasswordService] New token received after password reset, updating storage');\n        localStorage.setItem('token', response.data.access_token);\n      }\n      \n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to reset password');\n    }\n  },\n};\n\nexport const userService = {\n  // Organization user management (for org admins)\n  getOrganizationUsers: async (params?: any) => {\n    try {\n      const response = await api.get('/users/', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization users');\n    }\n  },\n  createUser: async (data: any) => {\n    try {\n      const response = await api.post('/users/', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create user');\n    }\n  },\n  updateUser: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/users/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update user');\n    }\n  },\n  deleteUser: async (id: number) => {\n    try {\n      const response = await api.delete(`/users/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete user');\n    }\n  },\n  resetUserPassword: async (userId: number) => {\n    try {\n      const response = await api.post(`/auth/reset/${userId}/password`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to reset user password');\n    }\n  },\n  toggleUserStatus: async (userId: number, isActive: boolean) => {\n    try {\n      const response = await api.put(`/users/${userId}`, { is_active: isActive });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update user status');\n    }\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/crmService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/dispatchService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/entityService.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Customer' is defined but never used.","line":5,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":68,"suggestions":[{"messageId":"removeVar","data":{"varName":"Customer"},"fix":{"range":[208,218],"text":""},"desc":"Remove unused variable 'Customer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Vendor' is defined but never used.","line":5,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":76,"suggestions":[{"messageId":"removeVar","data":{"varName":"Vendor"},"fix":{"range":[218,226],"text":""},"desc":"Remove unused variable 'Vendor'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Employee' is defined but never used.","line":5,"column":78,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":86,"suggestions":[{"messageId":"removeVar","data":{"varName":"Employee"},"fix":{"range":[226,236],"text":""},"desc":"Remove unused variable 'Employee'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ExpenseAccount' is defined but never used.","line":5,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":102,"suggestions":[{"messageId":"removeVar","data":{"varName":"ExpenseAccount"},"fix":{"range":[236,252],"text":""},"desc":"Remove unused variable 'ExpenseAccount'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":15,"column":108,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":110},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":162,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":162,"endColumn":5},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":182,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":182,"endColumn":83},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":185,"column":83,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":185,"endColumn":85}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/entityService.ts\n// Unified Entity service for Customer + Vendor + Employee + ExpenseAccount management\n\nimport api from '../lib/api';\nimport { Entity, EntityType, EntityOption, ENTITY_CONFIGS, Customer, Vendor, Employee, ExpenseAccount } from '../types/entity.types';\n\ninterface QueryFunctionContext {\n  queryKey: any[];\n  signal?: AbortSignal;\n}\n\n/**\n * Get all entities of a specific type\n */\nexport const getEntitiesByType = async (entityType: EntityType, { signal }: { signal?: AbortSignal } = {}) => {\n  const config = ENTITY_CONFIGS[entityType];\n  const response = await api.get(config.endpoint, { signal });\n  return response.data.map((entity: any) => ({\n    ...entity,\n    type: entityType\n  }));\n};\n\n/**\n * Get all entities across all types (unified)\n */\nexport const getAllEntities = async ({ signal }: { signal?: AbortSignal } = {}): Promise<Entity[]> => {\n  try {\n    const [customers, vendors] = await Promise.all([\n      getEntitiesByType('Customer', { signal }).catch(() => []),\n      getEntitiesByType('Vendor', { signal }).catch(() => [])\n      // Future: Add Employee and ExpenseAccount when endpoints are available\n      // getEntitiesByType('Employee', { signal }).catch(() => []),\n      // getEntitiesByType('ExpenseAccount', { signal }).catch(() => [])\n    ]);\n\n    return [...customers, ...vendors];\n  } catch (error) {\n    console.error('Error fetching entities:', error);\n    return [];\n  }\n};\n\n/**\n * Convert entities to form-compatible options\n */\nexport const entitiesToOptions = (entities: Entity[]): EntityOption[] => {\n  return entities.map(entity => ({\n    id: entity.id,\n    name: entity.name,\n    type: entity.type,\n    label: `${entity.name} (${entity.type})`,\n    value: entity.id,\n    originalData: entity\n  }));\n};\n\n/**\n * Search entities across all types\n */\nexport const searchEntities = async (\n  searchTerm: string, \n  entityTypes: EntityType[] = ['Customer', 'Vendor'],\n  { signal }: { signal?: AbortSignal } = {}\n): Promise<EntityOption[]> => {\n  try {\n    const searchPromises = entityTypes.map(async (type) => {\n      const config = ENTITY_CONFIGS[type];\n      const response = await api.get(config.endpoint, {\n        params: {\n          search: searchTerm,\n          limit: 10,\n          active_only: true\n        },\n        signal\n      });\n      return response.data.map((entity: any) => ({\n        ...entity,\n        type\n      }));\n    });\n\n    const results = await Promise.all(searchPromises);\n    const allEntities = results.flat();\n    return entitiesToOptions(allEntities);\n  } catch (error) {\n    console.error('Error searching entities:', error);\n    return [];\n  }\n};\n\n/**\n * Get entity by ID and type\n */\nexport const getEntityById = async (\n  id: number, \n  entityType: EntityType,\n  { signal }: { signal?: AbortSignal } = {}\n): Promise<Entity | null> => {\n  try {\n    const config = ENTITY_CONFIGS[entityType];\n    const response = await api.get(`${config.endpoint}/${id}`, { signal });\n    return {\n      ...response.data,\n      type: entityType\n    };\n  } catch (error) {\n    console.error(`Error fetching ${entityType} with ID ${id}:`, error);\n    return null;\n  }\n};\n\n/**\n * Create new entity\n */\nexport const createEntity = async (\n  entityType: EntityType,\n  data: Partial<Entity>\n): Promise<Entity> => {\n  const config = ENTITY_CONFIGS[entityType];\n  const response = await api.post(config.endpoint, data);\n  return {\n    ...response.data,\n    type: entityType\n  };\n};\n\n/**\n * Update existing entity\n */\nexport const updateEntity = async (\n  id: number,\n  entityType: EntityType,\n  data: Partial<Entity>\n): Promise<Entity> => {\n  const config = ENTITY_CONFIGS[entityType];\n  const response = await api.put(`${config.endpoint}/${id}`, data);\n  return {\n    ...response.data,\n    type: entityType\n  };\n};\n\n/**\n * Delete entity\n */\nexport const deleteEntity = async (\n  id: number,\n  entityType: EntityType\n): Promise<void> => {\n  const config = ENTITY_CONFIGS[entityType];\n  await api.delete(`${config.endpoint}/${id}`);\n};\n\n/**\n * Get entity balance/outstanding amount\n */\nexport const getEntityBalance = async (\n  id: number,\n  entityType: EntityType,\n  { signal }: { signal?: AbortSignal } = {}\n) => {\n  try {\n    const params = entityType === 'Customer' ? { customer_id: id } : { vendor_id: id };\n    const response = await api.get('/reports/outstanding-ledger', {\n      params,\n      signal\n    });\n    \n    const balances = response.data?.outstanding_balances || [];\n    return balances.find((balance: any) => \n      (entityType === 'Customer' && balance.customer_id === id) ||\n      (entityType === 'Vendor' && balance.vendor_id === id)\n    );\n  } catch (error) {\n    console.error(`Error fetching balance for ${entityType} ${id}:`, error);\n    return null;\n  }\n};\n\n// Legacy compatibility functions (to maintain existing code)\nexport const getVendors = ({ signal }: QueryFunctionContext = { queryKey: [] }) => \n  getEntitiesByType('Vendor', { signal });\n\nexport const getCustomers = ({ signal }: QueryFunctionContext = { queryKey: [] }) => \n  getEntitiesByType('Customer', { signal });","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/feedbackService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/hrService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/marketingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/masterService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":16,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":16,"endColumn":70},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":22,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":72},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":28,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":71},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":34,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":72},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":40,"column":83,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":40,"endColumn":85},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":54,"column":82,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":84},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":80,"column":4,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":80,"endColumn":6},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":98,"column":4,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":98,"endColumn":6},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":115,"column":4,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":115,"endColumn":6},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":133,"column":4,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":133,"endColumn":6},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":138,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":138,"endColumn":56},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":143,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":143,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":148,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":148,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":153,"column":52,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":153,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":159,"column":76,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":159,"endColumn":78}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/masterService.ts\n// masterService.ts - Service to fetch master data like vendors, customers, products\n\nimport api from '../lib/api';  // Import the axios instance for consistency with authService and automatic token handling\n\n// Note: Functions are defined to accept React Query's QueryFunctionContext for proper integration.\n// This allows using signal for cancellation and prevents accidental passing of context as query params.\n// Each function ignores unnecessary context parts and uses only what is needed (e.g., signal).\n\ninterface QueryFunctionContext {\n  queryKey: any[];\n  signal?: AbortSignal;\n}\n\n// Fetch all vendors\nexport const getVendors = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/vendors', { signal });\n  return response.data;\n};\n\n// Fetch all customers\nexport const getCustomers = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/customers', { signal });\n  return response.data;\n};\n\n// Fetch all products\nexport const getProducts = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/products', { signal });\n  return response.data;\n};\n\n// Fetch all employees\nexport const getEmployees = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/employees', { signal });\n  return response.data;\n};\n\n// Search customers for autocomplete/dropdown\nexport const searchCustomers = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, searchTerm, limit] = queryKey;  // Expect queryKey = ['searchCustomers', searchTerm, limit]\n  const response = await api.get('/customers', {\n    params: {\n      search: searchTerm,\n      limit: limit || 10,\n      active_only: true,\n    },\n    signal,\n  });\n  return response.data;\n};\n\n// Search products for autocomplete/dropdown\nexport const searchProducts = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, searchTerm, limit] = queryKey;  // Expect queryKey = ['searchProducts', searchTerm, limit]\n  const response = await api.get('/products', {\n    params: {\n      search: searchTerm,\n      limit: limit || 10,\n      active_only: true,\n    },\n    signal,\n  });\n  return response.data;\n};\n\n// Create new customer\nexport const createCustomer = async (customerData: {\n  name: string;\n  contact_number: string;\n  email?: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  gst_number?: string;\n  pan_number?: string;\n}) => {\n  const response = await api.post('/customers', customerData);\n  return response.data;\n};\n\n// Create new vendor\nexport const createVendor = async (vendorData: {\n  name: string;\n  contact_number: string;\n  email?: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  gst_number?: string;\n  pan_number?: string;\n}) => {\n  const response = await api.post('/vendors', vendorData);\n  return response.data;\n};\n\n// Create new product\nexport const createProduct = async (productData: {\n  name: string;\n  hsn_code?: string;\n  part_number?: string;\n  unit: string;\n  unit_price: number;\n  gst_rate?: number;\n  is_gst_inclusive?: boolean;\n  reorder_level?: number;\n  description?: string;\n  is_manufactured?: boolean;\n}) => {\n  const response = await api.post('/products', productData);\n  return response.data;\n};\n\n// Create new employee\nexport const createEmployee = async (employeeData: {\n  name: string;\n  employee_id?: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  pincode?: string;\n  department?: string;\n  designation?: string;\n  salary?: number;\n}) => {\n  const response = await api.post('/employees', employeeData);\n  return response.data;\n};\n\nexport const bulkImportVendors = async (data: any[]) => {\n  const response = await api.post('/vendors/bulk', data);\n  return response.data;\n};\n\nexport const bulkImportCustomers = async (data: any[]) => {\n  const response = await api.post('/customers/bulk', data);\n  return response.data;\n};\n\nexport const bulkImportProducts = async (data: any[]) => {\n  const response = await api.post('/products/bulk', data);\n  return response.data;\n};\n\nexport const bulkImportStock = async (data: any[]) => {\n  const response = await api.post('/stock/bulk', data);\n  return response.data;\n};\n\n// Fetch stock with parameter cleaning to avoid 422 errors\nexport const getStock = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, rawParams = {}] = queryKey;  // Expect queryKey = ['stock', { skip: 0, limit: 100, product_id: ..., low_stock_only: ..., search: ..., show_zero: ... }]\n\n  // Clean parameters to exclude invalid or empty values that cause validation errors\n  const params: any = {\n    skip: rawParams.skip || 0,\n    limit: rawParams.limit || 100,\n    low_stock_only: rawParams.low_stock_only || false,\n    search: rawParams.search || '',\n    show_zero: rawParams.show_zero || false,\n  };\n\n  // Include product_id only if it's a valid number (not empty string or NaN)\n  const productId = rawParams.product_id;\n  if (productId && !isNaN(Number(productId)) && productId !== '') {\n    params.product_id = Number(productId);\n  }\n\n  const response = await api.get('/stock', { params, signal });\n  return response.data;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/notificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/notificationWorkflow.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":260,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":260,"endColumn":45},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":276,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":276,"endColumn":72}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/notificationWorkflow.ts\n// Workflow integration utilities for triggering notifications from other modules\n\nimport api from '../lib/api';\n\nexport interface WorkflowNotificationTrigger {\n  trigger_event: string;\n  context_data: Record<string, any>;\n}\n\nexport interface JobNotificationContext {\n  job_id: number;\n  job_title?: string;\n  customer_id?: number;\n  customer_name?: string;\n  technician_id?: number;\n  technician_name?: string;\n  due_date?: string;\n  priority?: string;\n  service_type?: string;\n}\n\nexport interface SLANotificationContext {\n  sla_id: number;\n  job_id: number;\n  customer_id: number;\n  breach_type: 'warning' | 'critical' | 'overdue';\n  time_remaining?: number;\n  expected_completion?: string;\n}\n\nexport interface FeedbackNotificationContext {\n  feedback_id: number;\n  job_id: number;\n  customer_id: number;\n  customer_name?: string;\n  technician_id?: number;\n  rating?: number;\n  requires_attention?: boolean;\n}\n\n// Notification workflow triggers for different modules\n\nexport class NotificationWorkflow {\n  \n  // Job Management Notifications\n  static async triggerJobAssignment(context: JobNotificationContext): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'job_assignment',\n        context_data: {\n          ...context,\n          notification_type: 'job_assignment',\n          subject: `New Job Assignment: ${context.job_title || `Job #${context.job_id}`}`,\n          message: `You have been assigned to ${context.job_title || `job #${context.job_id}`} for ${context.customer_name || 'a customer'}.`\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger job assignment notification:', error);\n    }\n  }\n\n  static async triggerJobUpdate(context: JobNotificationContext & { update_type: string; details?: string }): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'job_update',\n        context_data: {\n          ...context,\n          notification_type: 'job_update',\n          subject: `Job Update: ${context.job_title || `Job #${context.job_id}`}`,\n          message: `Job ${context.job_id} has been updated: ${context.update_type}. ${context.details || ''}`\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger job update notification:', error);\n    }\n  }\n\n  static async triggerJobCompletion(context: JobNotificationContext): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'job_completion',\n        context_data: {\n          ...context,\n          notification_type: 'service_completion',\n          subject: `Job Completed: ${context.job_title || `Job #${context.job_id}`}`,\n          message: `Job ${context.job_id} for ${context.customer_name || 'customer'} has been completed successfully.`\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger job completion notification:', error);\n    }\n  }\n\n  // SLA Management Notifications\n  static async triggerSLABreach(context: SLANotificationContext): Promise<void> {\n    try {\n      const urgencyMap = {\n        warning: 'SLA Warning',\n        critical: 'SLA Critical',\n        overdue: 'SLA Breach'\n      };\n\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'sla_breach',\n        context_data: {\n          ...context,\n          notification_type: 'sla_breach',\n          subject: `${urgencyMap[context.breach_type]}: Job #${context.job_id}`,\n          message: `Job ${context.job_id} is ${context.breach_type === 'overdue' ? 'overdue' : `approaching SLA deadline (${context.time_remaining || 'soon'})`}.`\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger SLA breach notification:', error);\n    }\n  }\n\n  // Feedback Management Notifications\n  static async triggerFeedbackRequest(context: FeedbackNotificationContext): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'feedback_request',\n        context_data: {\n          ...context,\n          notification_type: 'feedback_request',\n          subject: `Feedback Request: Job #${context.job_id}`,\n          message: `Please provide feedback for the completed service job #${context.job_id}.`\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger feedback request notification:', error);\n    }\n  }\n\n  static async triggerFeedbackReceived(context: FeedbackNotificationContext): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'feedback_received',\n        context_data: {\n          ...context,\n          notification_type: 'follow_up',\n          subject: `Feedback Received: Job #${context.job_id}`,\n          message: `New feedback received for job #${context.job_id} from ${context.customer_name || 'customer'}${context.rating ? ` (Rating: ${context.rating}/5)` : ''}.`\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger feedback received notification:', error);\n    }\n  }\n\n  // Appointment Management Notifications\n  static async triggerAppointmentReminder(context: {\n    appointment_id: number;\n    customer_id: number;\n    customer_name?: string;\n    technician_id?: number;\n    appointment_date: string;\n    service_type?: string;\n    location?: string;\n  }): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'appointment_reminder',\n        context_data: {\n          ...context,\n          notification_type: 'appointment_reminder',\n          subject: `Appointment Reminder: ${context.service_type || 'Service'} on ${new Date(context.appointment_date).toLocaleDateString()}`,\n          message: `Reminder: You have an appointment scheduled for ${context.service_type || 'service'} on ${new Date(context.appointment_date).toLocaleString()}.`\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger appointment reminder notification:', error);\n    }\n  }\n\n  // Dispatch Management Notifications\n  static async triggerDispatchUpdate(context: {\n    dispatch_id: number;\n    technician_id: number;\n    job_id: number;\n    status: string;\n    eta?: string;\n    location?: string;\n  }): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'dispatch_update',\n        context_data: {\n          ...context,\n          notification_type: 'job_update',\n          subject: `Dispatch Update: Job #${context.job_id}`,\n          message: `Dispatch status updated for job #${context.job_id}: ${context.status}${context.eta ? ` (ETA: ${context.eta})` : ''}.`\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger dispatch update notification:', error);\n    }\n  }\n\n  // System Notifications\n  static async triggerSystemAlert(context: {\n    alert_type: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    message: string;\n    affected_users?: number[];\n    organization_id?: number;\n  }): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: 'system_alert',\n        context_data: {\n          ...context,\n          notification_type: 'system',\n          subject: `System Alert: ${context.alert_type}`,\n          message: context.message\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger system alert notification:', error);\n    }\n  }\n\n  // Batch notification utilities\n  static async triggerBatchNotifications(triggers: WorkflowNotificationTrigger[]): Promise<void> {\n    try {\n      await Promise.all(\n        triggers.map(trigger => \n          api.post('/api/v1/notifications/trigger', trigger)\n        )\n      );\n    } catch (error) {\n      console.error('Failed to trigger batch notifications:', error);\n    }\n  }\n\n  // Utility method to trigger custom notifications\n  static async triggerCustomNotification(\n    eventType: string,\n    subject: string,\n    message: string,\n    context: Record<string, any> = {}\n  ): Promise<void> {\n    try {\n      await api.post('/api/v1/notifications/trigger', {\n        trigger_event: eventType,\n        context_data: {\n          ...context,\n          subject,\n          message,\n          custom_trigger: true\n        }\n      });\n    } catch (error) {\n      console.error('Failed to trigger custom notification:', error);\n    }\n  }\n}\n\n// React hooks for workflow integration\nexport const useNotificationWorkflow = () => {\n  return {\n    triggerJobAssignment: NotificationWorkflow.triggerJobAssignment,\n    triggerJobUpdate: NotificationWorkflow.triggerJobUpdate,\n    triggerJobCompletion: NotificationWorkflow.triggerJobCompletion,\n    triggerSLABreach: NotificationWorkflow.triggerSLABreach,\n    triggerFeedbackRequest: NotificationWorkflow.triggerFeedbackRequest,\n    triggerFeedbackReceived: NotificationWorkflow.triggerFeedbackReceived,\n    triggerAppointmentReminder: NotificationWorkflow.triggerAppointmentReminder,\n    triggerDispatchUpdate: NotificationWorkflow.triggerDispatchUpdate,\n    triggerSystemAlert: NotificationWorkflow.triggerSystemAlert,\n    triggerCustomNotification: NotificationWorkflow.triggerCustomNotification,\n  };\n};\n\n// Integration helper for existing modules\nexport const integrateNotificationsWithModule = (moduleName: string) => {\n  console.log(`Notification integration available for ${moduleName} module`);\n  \n  return {\n    // Generic trigger method for module-specific events\n    trigger: (eventType: string, context: Record<string, any>) => {\n      return NotificationWorkflow.triggerCustomNotification(\n        `${moduleName}_${eventType}`,\n        context.subject || `${moduleName} Event`,\n        context.message || `Event triggered in ${moduleName}`,\n        { ...context, module: moduleName }\n      );\n    },\n    \n    // Batch trigger for multiple events\n    triggerBatch: (events: Array<{ eventType: string; context: Record<string, any> }>) => {\n      const triggers = events.map(event => ({\n        trigger_event: `${moduleName}_${event.eventType}`,\n        context_data: { ...event.context, module: moduleName }\n      }));\n      return NotificationWorkflow.triggerBatchNotifications(triggers);\n    }\n  };\n};\n\nexport default NotificationWorkflow;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/organizationService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":6,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":6,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":15,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":24,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":24,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":24,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":33,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":33,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":41,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":41,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":49,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":49,"column":46,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":49,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":58,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":58,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":58,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":58,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":66,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":66,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":75,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":75,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":83,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":83,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'userData' should be typed with a non-any type.","line":83,"column":60,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":83,"endColumn":73},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":92,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":92,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":100,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":100,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":109,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":109,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":119,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":119,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":119,"column":56,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":119,"endColumn":68},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":128,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":128,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'userData' should be typed with a non-any type.","line":128,"column":60,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":128,"endColumn":73},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":137,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":137,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'userData' should be typed with a non-any type.","line":137,"column":76,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":137,"endColumn":89},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":146,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":146,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":156,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":156,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":156,"column":62,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":156,"endColumn":74},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":165,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":165,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":174,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":174,"endColumn":27}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/organizationService.ts\n\nimport api from '../lib/api';\n\nexport const organizationService = {\n  createLicense: async (data: any) => {\n    try {\n      const response = await api.post('/organizations/license/create', data);\n      // Organization context is managed by backend session only\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create organization license');\n    }\n  },\n  getCurrentOrganization: async () => {\n    try {\n      const response = await api.get('/organizations/current');\n      // Organization context is managed by backend session only\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get current organization');\n    }\n  },\n  updateOrganization: async (data: any) => {\n    try {\n      const response = await api.put('/organizations/current', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update organization');\n    }\n  },\n  // Admin-only endpoints\n  getAllOrganizations: async () => {\n    try {\n      const response = await api.get('/organizations/');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organizations');\n    }\n  },\n  getOrganization: async (id: number) => {\n    try {\n      const response = await api.get(`/organizations/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization');\n    }\n  },\n  updateOrganizationById: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/organizations/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update organization');\n    }\n  },\n  // New organization management endpoints\n  createOrganization: async (data: any) => {\n    try {\n      const response = await api.post('/organizations/', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create organization');\n    }\n  },\n  joinOrganization: async (organizationId: number) => {\n    try {\n      const response = await api.post(`/organizations/${organizationId}/join`);\n      // Organization context is managed by backend session only\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to join organization');\n    }\n  },\n  getOrganizationMembers: async (organizationId: number) => {\n    try {\n      const response = await api.get(`/organizations/${organizationId}/members`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization members');\n    }\n  },\n  inviteUserToOrganization: async (organizationId: number, userData: any) => {\n    try {\n      const response = await api.post(`/organizations/${organizationId}/invite`, userData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to invite user to organization');\n    }\n  },\n  // User organization management\n  getUserOrganizations: async () => {\n    try {\n      const response = await api.get('/users/me/organizations');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get user organizations');\n    }\n  },\n  switchOrganization: async (organizationId: number) => {\n    try {\n      const response = await api.put('/users/me/organization', { organization_id: organizationId });\n      // Organization context is managed by backend session only\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to switch organization');\n    }\n  },\n  deleteOrganization: async (organizationId: number) => {\n    try {\n      const response = await api.delete(`/organizations/${organizationId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete organization');\n    }\n  },\n\n  // Organization-scoped user management\n  getOrganizationUsers: async (organizationId: number, params?: any) => {\n    try {\n      const response = await api.get(`/organizations/${organizationId}/users`, { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization users');\n    }\n  },\n\n  createUserInOrganization: async (organizationId: number, userData: any) => {\n    try {\n      const response = await api.post(`/organizations/${organizationId}/users`, userData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create user in organization');\n    }\n  },\n\n  updateUserInOrganization: async (organizationId: number, userId: number, userData: any) => {\n    try {\n      const response = await api.put(`/organizations/${organizationId}/users/${userId}`, userData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update user in organization');\n    }\n  },\n\n  deleteUserFromOrganization: async (organizationId: number, userId: number) => {\n    try {\n      const response = await api.delete(`/organizations/${organizationId}/users/${userId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete user from organization');\n    }\n  },\n\n  // Invitation management\n  getOrganizationInvitations: async (organizationId: number, params?: any) => {\n    try {\n      const response = await api.get(`/organizations/${organizationId}/invitations`, { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization invitations');\n    }\n  },\n\n  resendInvitation: async (organizationId: number, invitationId: number) => {\n    try {\n      const response = await api.post(`/organizations/${organizationId}/invitations/${invitationId}/resend`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to resend invitation');\n    }\n  },\n\n  cancelInvitation: async (organizationId: number, invitationId: number) => {\n    try {\n      const response = await api.delete(`/organizations/${organizationId}/invitations/${invitationId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to cancel invitation');\n    }\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/pdfService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/procurementService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/rbacService.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ServicePermissionCreate' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"ServicePermissionCreate"},"fix":{"range":[290,317],"text":""},"desc":"Remove unused variable 'ServicePermissionCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'UserServiceRole' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserServiceRole"},"fix":{"range":[404,423],"text":""},"desc":"Remove unused variable 'UserServiceRole'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/rbacService.ts\n\n/**\n * Service CRM RBAC Service\n * \n * Client-side service for managing Service CRM role-based access control.\n * Provides methods for managing roles, permissions, and user assignments.\n */\n\nimport api from '../lib/api';\nimport {\n  ServicePermission,\n  ServicePermissionCreate,\n  ServiceRole,\n  ServiceRoleWithPermissions,\n  ServiceRoleCreate,\n  ServiceRoleUpdate,\n  UserServiceRole,\n  UserWithServiceRoles,\n  RoleAssignmentRequest,\n  RoleAssignmentResponse,\n  BulkRoleAssignmentRequest,\n  BulkRoleAssignmentResponse,\n  PermissionCheckRequest,\n  PermissionCheckResponse,\n  UserPermissions,\n  ServiceModule,\n  ServiceAction\n} from '../types/rbac.types';\n\nexport const rbacService = {\n  // Permission Management\n  getPermissions: async (params?: { \n    module?: ServiceModule; \n    action?: ServiceAction; \n  }): Promise<ServicePermission[]> => {\n    try {\n      const response = await api.get('/rbac/permissions', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch service permissions');\n    }\n  },\n\n  initializeDefaultPermissions: async (): Promise<{ message: string; permissions: ServicePermission[] }> => {\n    try {\n      const response = await api.post('/rbac/permissions/initialize');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to initialize default permissions');\n    }\n  },\n\n  // Role Management\n  getOrganizationRoles: async (\n    organizationId: number, \n    isActive?: boolean\n  ): Promise<ServiceRole[]> => {\n    try {\n      const params = isActive !== undefined ? { is_active: isActive } : {};\n      const response = await api.get(`/rbac/organizations/${organizationId}/roles`, { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch organization roles');\n    }\n  },\n\n  createRole: async (\n    organizationId: number, \n    roleData: ServiceRoleCreate\n  ): Promise<ServiceRole> => {\n    try {\n      const response = await api.post(`/rbac/organizations/${organizationId}/roles`, {\n        ...roleData,\n        organization_id: organizationId\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create service role');\n    }\n  },\n\n  getRole: async (roleId: number): Promise<ServiceRoleWithPermissions> => {\n    try {\n      const response = await api.get(`/rbac/roles/${roleId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch service role');\n    }\n  },\n\n  updateRole: async (roleId: number, updates: ServiceRoleUpdate): Promise<ServiceRole> => {\n    try {\n      const response = await api.put(`/rbac/roles/${roleId}`, updates);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update service role');\n    }\n  },\n\n  deleteRole: async (roleId: number): Promise<{ message: string }> => {\n    try {\n      const response = await api.delete(`/rbac/roles/${roleId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete service role');\n    }\n  },\n\n  initializeDefaultRoles: async (organizationId: number): Promise<{ message: string; roles: ServiceRole[] }> => {\n    try {\n      const response = await api.post(`/rbac/organizations/${organizationId}/roles/initialize`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to initialize default roles');\n    }\n  },\n\n  // User Role Assignment\n  assignRolesToUser: async (\n    userId: number, \n    assignment: RoleAssignmentRequest\n  ): Promise<RoleAssignmentResponse> => {\n    try {\n      const response = await api.post(`/rbac/users/${userId}/roles`, {\n        ...assignment,\n        user_id: userId\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to assign roles to user');\n    }\n  },\n\n  removeRoleFromUser: async (userId: number, roleId: number): Promise<{ message: string }> => {\n    try {\n      const response = await api.delete(`/rbac/users/${userId}/roles/${roleId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to remove role from user');\n    }\n  },\n\n  removeAllRolesFromUser: async (userId: number): Promise<{ message: string }> => {\n    try {\n      const response = await api.delete(`/rbac/users/${userId}/roles`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to remove all roles from user');\n    }\n  },\n\n  getUserServiceRoles: async (userId: number): Promise<ServiceRole[]> => {\n    try {\n      const response = await api.get(`/rbac/users/${userId}/roles`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch user service roles');\n    }\n  },\n\n  getUsersWithRole: async (roleId: number): Promise<UserWithServiceRoles[]> => {\n    try {\n      const response = await api.get(`/rbac/roles/${roleId}/users`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch users with role');\n    }\n  },\n\n  // Permission Checking\n  checkUserPermission: async (\n    request: PermissionCheckRequest\n  ): Promise<PermissionCheckResponse> => {\n    try {\n      const response = await api.post('/rbac/permissions/check', request);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to check user permission');\n    }\n  },\n\n  getUserPermissions: async (userId: number): Promise<UserPermissions> => {\n    try {\n      const response = await api.get(`/rbac/users/${userId}/permissions`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch user permissions');\n    }\n  },\n\n  // Bulk Operations\n  bulkAssignRoles: async (\n    request: BulkRoleAssignmentRequest\n  ): Promise<BulkRoleAssignmentResponse> => {\n    try {\n      const response = await api.post('/rbac/roles/assign/bulk', request);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to bulk assign roles');\n    }\n  },\n\n  // Utility Functions\n  getCurrentUserPermissions: async (): Promise<string[]> => {\n    try {\n      // Get current user first to get user ID\n      const userResponse = await api.get('/users/me');\n      const userId = userResponse.data.id;\n      \n      // Get user's service permissions\n      const permissions = await rbacService.getUserPermissions(userId);\n      return permissions.permissions;\n    } catch (error: any) {\n      console.warn('Failed to fetch current user permissions:', error);\n      return [];\n    }\n  },\n\n  getCurrentUserServiceRoles: async (): Promise<ServiceRole[]> => {\n    try {\n      // Get current user first to get user ID\n      const userResponse = await api.get('/users/me');\n      const userId = userResponse.data.id;\n      \n      // Get user's service roles\n      return await rbacService.getUserServiceRoles(userId);\n    } catch (error: any) {\n      console.warn('Failed to fetch current user service roles:', error);\n      return [];\n    }\n  },\n\n  // Check if current user has specific service permission\n  hasCurrentUserPermission: async (permission: string): Promise<boolean> => {\n    try {\n      const permissions = await rbacService.getCurrentUserPermissions();\n      return permissions.includes(permission);\n    } catch (error: any) {\n      console.warn('Failed to check current user permission:', error);\n      return false;\n    }\n  },\n\n  // Get roles available for assignment in organization\n  getAvailableRoles: async (organizationId: number): Promise<ServiceRole[]> => {\n    try {\n      return await rbacService.getOrganizationRoles(organizationId, true); // Only active roles\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch available roles');\n    }\n  },\n\n  // Get comprehensive role data with permissions\n  getRolesWithPermissions: async (organizationId: number): Promise<ServiceRoleWithPermissions[]> => {\n    try {\n      const roles = await rbacService.getOrganizationRoles(organizationId);\n      \n      // Fetch permissions for each role\n      const rolesWithPermissions = await Promise.all(\n        roles.map(async (role) => {\n          try {\n            return await rbacService.getRole(role.id);\n          } catch (error) {\n            console.warn(`Failed to fetch permissions for role ${role.id}:`, error);\n            return { ...role, permissions: [] } as ServiceRoleWithPermissions;\n          }\n        })\n      );\n      \n      return rolesWithPermissions;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch roles with permissions');\n    }\n  },\n\n  // Get permissions grouped by module\n  getPermissionsByModule: async (): Promise<Record<string, ServicePermission[]>> => {\n    try {\n      const permissions = await rbacService.getPermissions();\n      const grouped: Record<string, ServicePermission[]> = {};\n      \n      permissions.forEach(permission => {\n        if (!grouped[permission.module]) {\n          grouped[permission.module] = [];\n        }\n        grouped[permission.module].push(permission);\n      });\n      \n      return grouped;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch permissions by module');\n    }\n  },\n\n  // Validate role assignment (client-side checks)\n  validateRoleAssignment: (\n    userOrgId: number, \n    roleOrgId: number, \n    currentUserRole: string,\n    isCurrentUserSuperAdmin: boolean\n  ): { valid: boolean; error?: string } => {\n    // Super admins can assign any role\n    if (isCurrentUserSuperAdmin) {\n      return { valid: true };\n    }\n\n    // Regular users can only assign roles within their organization\n    if (userOrgId !== roleOrgId) {\n      return { \n        valid: false, \n        error: 'Cannot assign roles across different organizations' \n      };\n    }\n\n    // Check if current user has permission to manage roles\n    const canManageRoles = ['org_admin', 'admin'].includes(currentUserRole);\n    if (!canManageRoles) {\n      return { \n        valid: false, \n        error: 'Insufficient permissions to assign roles' \n      };\n    }\n\n    return { valid: true };\n  }\n};\n\n// Export permission constants for easy import\nexport * from '../types/rbac.types';\nexport { SERVICE_PERMISSIONS } from '../types/rbac.types';\n\nexport default rbacService;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/resetService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/serviceAnalyticsService.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TODAY' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"TODAY"},"fix":{"range":[143,148],"text":""},"desc":"Remove unused variable 'TODAY'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'WEEK' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"WEEK"},"fix":{"range":[158,166],"text":""},"desc":"Remove unused variable 'WEEK'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MONTH' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"MONTH"},"fix":{"range":[175,184],"text":""},"desc":"Remove unused variable 'MONTH'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'QUARTER' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"QUARTER"},"fix":{"range":[194,205],"text":""},"desc":"Remove unused variable 'QUARTER'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'YEAR' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"YEAR"},"fix":{"range":[217,225],"text":""},"desc":"Remove unused variable 'YEAR'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CUSTOM' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"CUSTOM"},"fix":{"range":[234,244],"text":""},"desc":"Remove unused variable 'CUSTOM'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'JOB_COMPLETION' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"JOB_COMPLETION"},"fix":{"range":[286,300],"text":""},"desc":"Remove unused variable 'JOB_COMPLETION'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TECHNICIAN_PERFORMANCE' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"TECHNICIAN_PERFORMANCE"},"fix":{"range":[319,345],"text":""},"desc":"Remove unused variable 'TECHNICIAN_PERFORMANCE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CUSTOMER_SATISFACTION' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"CUSTOMER_SATISFACTION"},"fix":{"range":[372,397],"text":""},"desc":"Remove unused variable 'CUSTOMER_SATISFACTION'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'JOB_VOLUME' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"JOB_VOLUME"},"fix":{"range":[423,437],"text":""},"desc":"Remove unused variable 'JOB_VOLUME'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SLA_COMPLIANCE' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"SLA_COMPLIANCE"},"fix":{"range":[452,470],"text":""},"desc":"Remove unused variable 'SLA_COMPLIANCE'."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/serviceAnalyticsService.ts\n\nimport api from '../lib/api';\n\n// Enums matching the backend\nexport enum ReportPeriod {\n  TODAY = 'today',\n  WEEK = 'week',\n  MONTH = 'month',\n  QUARTER = 'quarter',\n  YEAR = 'year',\n  CUSTOM = 'custom'\n}\n\nexport enum MetricType {\n  JOB_COMPLETION = 'job_completion',\n  TECHNICIAN_PERFORMANCE = 'technician_performance',\n  CUSTOMER_SATISFACTION = 'customer_satisfaction',\n  JOB_VOLUME = 'job_volume',\n  SLA_COMPLIANCE = 'sla_compliance'\n}\n\n// Interfaces matching the backend schemas\nexport interface TimeSeriesDataPoint {\n  date: string;\n  value: number;\n  label?: string;\n}\n\nexport interface JobCompletionMetrics {\n  total_jobs: number;\n  completed_jobs: number;\n  pending_jobs: number;\n  cancelled_jobs: number;\n  completion_rate: number;\n  average_completion_time_hours?: number;\n  on_time_completion_rate: number;\n  jobs_by_status: Record<string, number>;\n  completion_trend: TimeSeriesDataPoint[];\n}\n\nexport interface TechnicianPerformanceMetrics {\n  technician_id: number;\n  technician_name: string;\n  total_jobs_assigned: number;\n  jobs_completed: number;\n  jobs_in_progress: number;\n  average_completion_time_hours?: number;\n  customer_rating_average?: number;\n  utilization_rate: number;\n  efficiency_score: number;\n}\n\nexport interface CustomerSatisfactionMetrics {\n  total_feedback_received: number;\n  average_overall_rating: number;\n  average_service_quality?: number;\n  average_technician_rating?: number;\n  average_timeliness_rating?: number;\n  average_communication_rating?: number;\n  satisfaction_distribution: Record<string, number>;\n  nps_score?: number;\n  recommendation_rate?: number;\n  satisfaction_trend: TimeSeriesDataPoint[];\n}\n\nexport interface JobVolumeMetrics {\n  total_jobs: number;\n  jobs_per_day_average: number;\n  peak_day?: string;\n  peak_day_count: number;\n  volume_trend: TimeSeriesDataPoint[];\n  jobs_by_priority: Record<string, number>;\n  jobs_by_customer: Array<{\n    customer_id: number;\n    customer_name: string;\n    job_count: number;\n  }>;\n}\n\nexport interface SLAComplianceMetrics {\n  total_jobs_with_sla: number;\n  sla_met_count: number;\n  sla_breached_count: number;\n  overall_compliance_rate: number;\n  average_resolution_time_hours?: number;\n  compliance_by_priority: Record<string, number>;\n  compliance_trend: TimeSeriesDataPoint[];\n  breach_reasons: Record<string, number>;\n}\n\nexport interface AnalyticsDashboard {\n  organization_id: number;\n  report_period: ReportPeriod;\n  start_date: string;\n  end_date: string;\n  job_completion: JobCompletionMetrics;\n  technician_performance: TechnicianPerformanceMetrics[];\n  customer_satisfaction: CustomerSatisfactionMetrics;\n  job_volume: JobVolumeMetrics;\n  sla_compliance: SLAComplianceMetrics;\n  generated_at: string;\n}\n\nexport interface AnalyticsRequest {\n  start_date?: string;\n  end_date?: string;\n  period?: ReportPeriod;\n  technician_id?: number;\n  customer_id?: number;\n}\n\nexport interface ReportConfiguration {\n  id: number;\n  organization_id: number;\n  name: string;\n  description?: string;\n  metric_types: MetricType[];\n  filters: Record<string, any>;\n  schedule_enabled: boolean;\n  schedule_frequency?: string;\n  email_recipients: string[];\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\n\nexport interface TechnicianOption {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport interface CustomerOption {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport const serviceAnalyticsService = {\n  /**\n   * Get complete analytics dashboard\n   */\n  getAnalyticsDashboard: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<AnalyticsDashboard> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/dashboard`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get analytics dashboard');\n    }\n  },\n\n  /**\n   * Get job completion metrics\n   */\n  getJobCompletionMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<JobCompletionMetrics> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/job-completion`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get job completion metrics');\n    }\n  },\n\n  /**\n   * Get technician performance metrics (requires manager permissions)\n   */\n  getTechnicianPerformanceMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<TechnicianPerformanceMetrics[]> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/technician-performance`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get technician performance metrics');\n    }\n  },\n\n  /**\n   * Get customer satisfaction metrics\n   */\n  getCustomerSatisfactionMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<CustomerSatisfactionMetrics> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/customer-satisfaction`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get customer satisfaction metrics');\n    }\n  },\n\n  /**\n   * Get job volume metrics\n   */\n  getJobVolumeMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<JobVolumeMetrics> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/job-volume`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get job volume metrics');\n    }\n  },\n\n  /**\n   * Get SLA compliance metrics (requires manager permissions)\n   */\n  getSLAComplianceMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<SLAComplianceMetrics> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/sla-compliance`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get SLA compliance metrics');\n    }\n  },\n\n  /**\n   * Get available technicians for filtering\n   */\n  getAvailableTechnicians: async (organizationId: number): Promise<TechnicianOption[]> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/technicians`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get available technicians');\n    }\n  },\n\n  /**\n   * Get available customers for filtering\n   */\n  getAvailableCustomers: async (organizationId: number): Promise<CustomerOption[]> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/customers`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get available customers');\n    }\n  },\n\n  /**\n   * Get report configurations\n   */\n  getReportConfigurations: async (\n    organizationId: number,\n    activeOnly: boolean = true\n  ): Promise<ReportConfiguration[]> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/report-configurations`, {\n        params: { active_only: activeOnly }\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get report configurations');\n    }\n  },\n\n  /**\n   * Create a new report configuration (requires manager permissions)\n   */\n  createReportConfiguration: async (\n    organizationId: number,\n    config: Omit<ReportConfiguration, 'id' | 'organization_id' | 'created_at' | 'updated_at'>\n  ): Promise<ReportConfiguration> => {\n    try {\n      const response = await api.post(`/service-analytics/organizations/${organizationId}/analytics/report-configurations`, config);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create report configuration');\n    }\n  },\n\n  /**\n   * Export analytics data\n   */\n  exportAnalyticsData: async (\n    organizationId: number,\n    exportRequest: {\n      format: string;\n      metric_types: MetricType[];\n      filters: AnalyticsRequest;\n      include_raw_data?: boolean;\n    }\n  ): Promise<Blob> => {\n    try {\n      const response = await api.post(\n        `/service-analytics/organizations/${organizationId}/analytics/export`,\n        exportRequest,\n        {\n          responseType: 'blob'\n        }\n      );\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export analytics data');\n    }\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/serviceDeskService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/slaService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'update' should be typed with a non-any type.","line":165,"column":73,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":165,"endColumn":84}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/slaService.ts\n\n/**\n * SLA Management Service\n * Handles API calls for SLA policies and tracking\n */\n\nimport api from '../lib/api';\n\n// Types for SLA Management\nexport interface SLAPolicy {\n  id: number;\n  organization_id: number;\n  name: string;\n  description?: string;\n  priority?: string;\n  ticket_type?: string;\n  customer_tier?: string;\n  response_time_hours: number;\n  resolution_time_hours: number;\n  escalation_enabled: boolean;\n  escalation_threshold_percent: number;\n  is_active: boolean;\n  is_default: boolean;\n  created_at: string;\n  updated_at?: string;\n  created_by_id?: number;\n}\n\nexport interface SLATracking {\n  id: number;\n  organization_id: number;\n  ticket_id: number;\n  policy_id: number;\n  response_deadline: string;\n  resolution_deadline: string;\n  first_response_at?: string;\n  resolved_at?: string;\n  response_status: 'pending' | 'met' | 'breached';\n  resolution_status: 'pending' | 'met' | 'breached';\n  escalation_triggered: boolean;\n  escalation_triggered_at?: string;\n  escalation_level: number;\n  response_breach_hours?: number;\n  resolution_breach_hours?: number;\n  created_at: string;\n  updated_at?: string;\n}\n\nexport interface SLATrackingWithPolicy extends SLATracking {\n  policy: SLAPolicy;\n}\n\nexport interface SLAMetrics {\n  total_tickets: number;\n  response_sla_met: number;\n  resolution_sla_met: number;\n  response_sla_breached: number;\n  resolution_sla_breached: number;\n  escalated_tickets: number;\n  avg_response_time_hours?: number;\n  avg_resolution_time_hours?: number;\n  response_sla_percentage: number;\n  resolution_sla_percentage: number;\n}\n\nexport interface SLAPolicyCreate {\n  name: string;\n  description?: string;\n  priority?: string;\n  ticket_type?: string;\n  customer_tier?: string;\n  response_time_hours: number;\n  resolution_time_hours: number;\n  escalation_enabled?: boolean;\n  escalation_threshold_percent?: number;\n  is_active?: boolean;\n  is_default?: boolean;\n}\n\nexport type SLAPolicyUpdate = Partial<SLAPolicyCreate>;\n\nexport const slaService = {\n  // SLA Policy Management\n  getPolicies: async (organizationId: number, isActive?: boolean): Promise<SLAPolicy[]> => {\n    try {\n      const params = new URLSearchParams();\n      if (isActive !== undefined) {\n        params.append('is_active', isActive.toString());\n      }\n      \n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/policies?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching SLA policies:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch SLA policies');\n    }\n  },\n\n  getPolicy: async (organizationId: number, policyId: number): Promise<SLAPolicy> => {\n    try {\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/policies/${policyId}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching SLA policy:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch SLA policy');\n    }\n  },\n\n  createPolicy: async (organizationId: number, policy: SLAPolicyCreate): Promise<SLAPolicy> => {\n    try {\n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/policies`, policy);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error creating SLA policy:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to create SLA policy');\n    }\n  },\n\n  updatePolicy: async (organizationId: number, policyId: number, policy: SLAPolicyUpdate): Promise<SLAPolicy> => {\n    try {\n      const response = await api.put(`/api/v1/sla/organizations/${organizationId}/policies/${policyId}`, policy);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error updating SLA policy:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to update SLA policy');\n    }\n  },\n\n  deletePolicy: async (organizationId: number, policyId: number): Promise<void> => {\n    try {\n      await api.delete(`/api/v1/sla/organizations/${organizationId}/policies/${policyId}`);\n    } catch (error: any) {\n      console.error('Error deleting SLA policy:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to delete SLA policy');\n    }\n  },\n\n  // SLA Tracking\n  assignSLAToTicket: async (organizationId: number, ticketId: number, forceRecreate?: boolean): Promise<any> => {\n    try {\n      const params = new URLSearchParams();\n      if (forceRecreate) {\n        params.append('force_recreate', 'true');\n      }\n      \n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/tickets/${ticketId}/sla?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error assigning SLA to ticket:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to assign SLA to ticket');\n    }\n  },\n\n  getTicketSLA: async (organizationId: number, ticketId: number): Promise<SLATrackingWithPolicy> => {\n    try {\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/tickets/${ticketId}/sla`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching ticket SLA:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch ticket SLA');\n    }\n  },\n\n  updateSLATracking: async (organizationId: number, trackingId: number, update: any): Promise<SLATracking> => {\n    try {\n      const response = await api.put(`/api/v1/sla/organizations/${organizationId}/tracking/${trackingId}`, update);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error updating SLA tracking:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to update SLA tracking');\n    }\n  },\n\n  // SLA Monitoring\n  getBreachedSLAs: async (organizationId: number, limit?: number): Promise<SLATracking[]> => {\n    try {\n      const params = new URLSearchParams();\n      if (limit) {\n        params.append('limit', limit.toString());\n      }\n      \n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/sla/breached?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching breached SLAs:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch breached SLAs');\n    }\n  },\n\n  getEscalationCandidates: async (organizationId: number): Promise<SLATracking[]> => {\n    try {\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/sla/escalation-candidates`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching escalation candidates:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch escalation candidates');\n    }\n  },\n\n  triggerEscalation: async (organizationId: number, trackingId: number): Promise<any> => {\n    try {\n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/tracking/${trackingId}/escalate`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error triggering escalation:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to trigger escalation');\n    }\n  },\n\n  // SLA Analytics\n  getSLAMetrics: async (\n    organizationId: number, \n    startDate?: string, \n    endDate?: string, \n    days?: number\n  ): Promise<SLAMetrics> => {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) {params.append('start_date', startDate);}\n      if (endDate) {params.append('end_date', endDate);}\n      if (days) {params.append('days', days.toString());}\n      \n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/sla/metrics?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching SLA metrics:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch SLA metrics');\n    }\n  },\n\n  // Ticket Processing\n  processTicketResponse: async (organizationId: number, ticketId: number, responseTime?: string): Promise<any> => {\n    try {\n      const params = new URLSearchParams();\n      if (responseTime) {\n        params.append('response_time', responseTime);\n      }\n      \n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/tickets/${ticketId}/response?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error processing ticket response:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to process ticket response');\n    }\n  },\n\n  processTicketResolution: async (organizationId: number, ticketId: number, resolutionTime?: string): Promise<any> => {\n    try {\n      const params = new URLSearchParams();\n      if (resolutionTime) {\n        params.append('resolution_time', resolutionTime);\n      }\n      \n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/tickets/${ticketId}/resolution?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error processing ticket resolution:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to process ticket resolution');\n    }\n  }\n};\n\nexport default slaService;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/stickyNotesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/stockService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":14,"column":83,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":85},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":34,"column":85,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":87},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":67,"column":85,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":87},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":78,"column":75,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":78,"endColumn":77},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":84,"column":62,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":84,"endColumn":64},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":92,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":92,"endColumn":68},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":96,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":17}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/stockService.ts\n\n// services/stockService.ts\n// Service for fetching stock and balance information for voucher forms\n\nimport api from '../lib/api';\n\ninterface QueryFunctionContext {\n  queryKey: any[];\n  signal?: AbortSignal;\n}\n\n// Fetch stock quantity for a specific product\nexport const getProductStock = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, productId] = queryKey; // Expect queryKey = ['productStock', productId]\n  \n  if (!productId) {\n    return null;\n  }\n  \n  try {\n    const response = await api.get(`/stock/product/${productId}`, { signal });\n    return response.data;\n  } catch (error: any) {\n    // Return null if no stock data found or access denied (instead of throwing)\n    if (error.response?.status === 404 || error.response?.status === 403) {\n      return null;\n    }\n    throw error;\n  }\n};\n\n// Fetch outstanding balance for a specific customer or vendor\nexport const getAccountBalance = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, accountType, accountId] = queryKey; // Expect queryKey = ['accountBalance', accountType, accountId]\n  \n  if (!accountType || !accountId) {\n    return null;\n  }\n  \n  try {\n    const response = await api.get('/reports/outstanding-ledger', {\n      params: {\n        account_type: accountType,\n        account_id: accountId\n      },\n      signal\n    });\n    \n    // Find the specific account in the response\n    const balances = response.data?.outstanding_balances || [];\n    const accountBalance = balances.find((balance: any) => \n      balance.account_type === accountType && balance.account_id === accountId\n    );\n    \n    return accountBalance;\n  } catch (error: any) {\n    // Return null if no balance data found or access denied (instead of throwing)\n    if (error.response?.status === 404 || error.response?.status === 403) {\n      return null;\n    }\n    throw error;\n  }\n};\n\n// Fetch stock movements\nexport const getStockMovements = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, params] = queryKey; // Expect queryKey = ['stockMovements', { search, recent }]\n  \n  const response = await api.get('/stock/movements', {\n    params,\n    signal\n  });\n  return response.data;\n};\n\n// Fetch low stock report\nexport const getLowStockReport = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/stock/low-stock', { signal });\n  return response.data;\n};\n\n// Fetch movements for specific product\nexport const getProductMovements = async (productId: number) => {\n  const response = await api.get('/stock/movements', {\n    params: { product_id: productId }\n  });\n  return response.data;\n};\n\n// Fetch last vendor for product\nexport const getLastVendorForProduct = async (productId: number) => {\n  try {\n    const response = await api.get(`/stock/product/${productId}/last-vendor`);\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/transportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/vouchersService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":8,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":8,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":8,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":15,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":21,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":21,"column":39,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":21,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":27,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":27,"column":51,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":27,"endColumn":60},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":33,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":33,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":40,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":40,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":44,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":44,"column":33,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":44,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":48,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":48,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":48,"column":45,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":48,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":54,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":58,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":58,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":58,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":58,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":62,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":62,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":62,"column":43,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":62,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":68,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":68,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":72,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":72,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":72,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":76,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":76,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":76,"column":33,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":76,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":82,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":82,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":86,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":86,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":86,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":86,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":90,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":90,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":90,"column":41,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":90,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":96,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":96,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'voucher' should be typed with a non-any type.","line":96,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":96,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":115,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":115,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":125,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":125,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":135,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":135,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'voucher' should be typed with a non-any type.","line":135,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":135,"endColumn":35}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/vouchersService.ts\n// frontend/src/services/vouchersService.ts\n\nimport api from '../lib/api';\n\nexport const voucherService = {\n  // Generic Voucher Methods\n  getVouchers: async (type: string, params?: any) => {\n    const endpoint = `/${type}`;  // Use type directly since it's already plural\n    console.log(`[voucherService] Fetching vouchers from endpoint: ${endpoint}`);\n    const response = await api.get(endpoint, { params });\n    console.log(`[voucherService] Received data for ${type}:`, response.data);\n    return response.data;\n  },\n  getVoucherById: async (type: string, id: number) => {\n    const endpoint = `/${type}/${id}`;\n    console.log(`[voucherService] Fetching voucher by ID from: ${endpoint}`);\n    const response = await api.get(endpoint);\n    return response.data;\n  },\n  createVoucher: async (type: string, data: any, sendEmail: boolean = false) => {\n    const endpoint = `/${type}`;\n    console.log(`[voucherService] Creating voucher at: ${endpoint}`);\n    const response = await api.post(endpoint, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updateVoucher: async (type: string, id: number, data: any) => {\n    const endpoint = `/${type}/${id}`;\n    console.log(`[voucherService] Updating voucher at: ${endpoint}`);\n    const response = await api.put(endpoint, data);\n    return response.data;\n  },\n  getNextVoucherNumber: async (endpoint: string) => {\n    console.log(`[voucherService] Fetching next number from: ${endpoint}`);\n    const response = await api.get(endpoint);\n    return response.data;\n  },\n\n  // Purchase Vouchers\n  getPurchaseVoucherById: async (id: number) => {\n    const response = await api.get(`/purchase-vouchers/${id}`);\n    return response.data;\n  },\n  createPurchaseVoucher: async (data: any, sendEmail: boolean) => {\n    const response = await api.post(`/purchase-vouchers`, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updatePurchaseVoucher: async (id: number, data: any) => {\n    const response = await api.put(`/purchase-vouchers/${id}`, data);\n    return response.data;\n  },\n\n  // Purchase Orders\n  getPurchaseOrderById: async (id: number) => {\n    const response = await api.get(`/purchase-orders/${id}`);\n    return response.data;\n  },\n  createPurchaseOrder: async (data: any, sendEmail: boolean) => {\n    const response = await api.post(`/purchase-orders`, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updatePurchaseOrder: async (id: number, data: any) => {\n    const response = await api.put(`/purchase-orders/${id}`, data);\n    return response.data;\n  },\n\n  // GRN\n  getGrnById: async (id: number) => {\n    const response = await api.get(`/goods-receipt-notes/${id}`);\n    return response.data;\n  },\n  createGrn: async (data: any, sendEmail: boolean) => {\n    const response = await api.post(`/goods-receipt-notes`, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updateGrn: async (id: number, data: any) => {\n    const response = await api.put(`/goods-receipt-notes/${id}`, data);\n    return response.data;\n  },\n\n  // Rejection In\n  getRejectionInById: async (id: number) => {\n    const response = await api.get(`/purchase-returns/${id}`);\n    return response.data;\n  },\n  createRejectionIn: async (data: any, sendEmail: boolean) => {\n    const response = await api.post(`/purchase-returns`, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updateRejectionIn: async (id: number, data: any) => {\n    const response = await api.put(`/purchase-returns/${id}`, data);\n    return response.data;\n  },\n\n  // Enhanced service methods for voucher actions\n  getEmailRecipient: (voucher: any, voucherType: string) => {\n    const type = voucherType.toLowerCase();\n    if (type === 'purchase' && voucher.vendor) {\n      return {\n        name: voucher.vendor.name,\n        email: voucher.vendor.email,\n        type: 'vendor',\n      };\n    }\n    if (type === 'sales' && voucher.customer) {\n      return {\n        name: voucher.customer.name,\n        email: voucher.customer.email,\n        type: 'customer',\n      };\n    }\n    return null;\n  },\n\n  sendVoucherEmail: async (voucherType: string, id: number) => {\n    try {\n      const response = await api.post(`/${voucherType}/${id}/send-email`);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending voucher email:', error);\n      throw error;\n    }\n  },\n\n  deleteVoucher: async (voucherType: string, id: number) => {\n    try {\n      const response = await api.delete(`/${voucherType}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting voucher:', error);\n      throw error;\n    }\n  },\n\n  getVoucherActions: (voucher: any, voucherType: string) => {\n    const recipient = voucherService.getEmailRecipient(voucher, voucherType);\n    \n    return {\n      canView: true,\n      canEdit: true,\n      canDelete: voucher.status !== 'approved' && voucher.status !== 'confirmed',\n      canPrint: true,\n      canEmail: Boolean(recipient?.email),\n      emailRecipient: recipient,\n    };\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/dispatch.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/entity.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/rbac.types.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ADMIN' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"ADMIN"},"fix":{"range":[225,230],"text":""},"desc":"Remove unused variable 'ADMIN'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MANAGER' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"MANAGER"},"fix":{"range":[240,251],"text":""},"desc":"Remove unused variable 'MANAGER'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SUPPORT' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"SUPPORT"},"fix":{"range":[263,274],"text":""},"desc":"Remove unused variable 'SUPPORT'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VIEWER' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"VIEWER"},"fix":{"range":[286,296],"text":""},"desc":"Remove unused variable 'VIEWER'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SERVICE' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"SERVICE"},"fix":{"range":[341,348],"text":""},"desc":"Remove unused variable 'SERVICE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TECHNICIAN' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TECHNICIAN"},"fix":{"range":[360,374],"text":""},"desc":"Remove unused variable 'TECHNICIAN'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'APPOINTMENT' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"APPOINTMENT"},"fix":{"range":[389,404],"text":""},"desc":"Remove unused variable 'APPOINTMENT'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CUSTOMER_SERVICE' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"CUSTOMER_SERVICE"},"fix":{"range":[420,440],"text":""},"desc":"Remove unused variable 'CUSTOMER_SERVICE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'WORK_ORDER' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"WORK_ORDER"},"fix":{"range":[461,475],"text":""},"desc":"Remove unused variable 'WORK_ORDER'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SERVICE_REPORTS' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"SERVICE_REPORTS"},"fix":{"range":[490,509],"text":""},"desc":"Remove unused variable 'SERVICE_REPORTS'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CRM_ADMIN' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"CRM_ADMIN"},"fix":{"range":[529,542],"text":""},"desc":"Remove unused variable 'CRM_ADMIN'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CREATE' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"CREATE"},"fix":{"range":[590,596],"text":""},"desc":"Remove unused variable 'CREATE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'READ' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"READ"},"fix":{"range":[607,615],"text":""},"desc":"Remove unused variable 'READ'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'UPDATE' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"UPDATE"},"fix":{"range":[624,634],"text":""},"desc":"Remove unused variable 'UPDATE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DELETE' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"DELETE"},"fix":{"range":[645,655],"text":""},"desc":"Remove unused variable 'DELETE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'EXPORT' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"EXPORT"},"fix":{"range":[666,676],"text":""},"desc":"Remove unused variable 'EXPORT'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ADMIN' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"ADMIN"},"fix":{"range":[687,696],"text":""},"desc":"Remove unused variable 'ADMIN'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":180,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":180,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[3681,3724],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'roleIds' is defined but never used.","line":191,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"roleIds"},"fix":{"range":[3967,3984],"text":""},"desc":"Remove unused variable 'roleIds'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'roleId' is defined but never used.","line":192,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":192,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"roleId"},"fix":{"range":[4008,4022],"text":""},"desc":"Remove unused variable 'roleId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'roleId' is defined but never used.","line":199,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":199,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"roleId"},"fix":{"range":[4200,4215],"text":""},"desc":"Remove unused variable 'roleId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'permissionId' is defined but never used.","line":199,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":199,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"permissionId"},"fix":{"range":[4214,4236],"text":""},"desc":"Remove unused variable 'permissionId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'granted' is defined but never used.","line":199,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":199,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"granted"},"fix":{"range":[4236,4254],"text":""},"desc":"Remove unused variable 'granted'."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/types/rbac.types.ts\n\n/**\n * Service CRM RBAC Types\n * \n * TypeScript type definitions for Role-Based Access Control\n * in the Service CRM module.\n */\n\n// Enums matching backend\nexport enum ServiceRoleType {\n  ADMIN = 'admin',\n  MANAGER = 'manager',\n  SUPPORT = 'support',\n  VIEWER = 'viewer'\n}\n\nexport enum ServiceModule {\n  SERVICE = 'service',\n  TECHNICIAN = 'technician',\n  APPOINTMENT = 'appointment',\n  CUSTOMER_SERVICE = 'customer_service',\n  WORK_ORDER = 'work_order',\n  SERVICE_REPORTS = 'service_reports',\n  CRM_ADMIN = 'crm_admin'\n}\n\nexport enum ServiceAction {\n  CREATE = 'create',\n  READ = 'read',\n  UPDATE = 'update',\n  DELETE = 'delete',\n  EXPORT = 'export',\n  ADMIN = 'admin'\n}\n\n// Service Permission Types\nexport interface ServicePermission {\n  id: number;\n  name: string;\n  display_name: string;\n  description?: string;\n  module: ServiceModule;\n  action: ServiceAction;\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\n\nexport interface ServicePermissionCreate {\n  name: string;\n  display_name: string;\n  description?: string;\n  module: ServiceModule;\n  action: ServiceAction;\n  is_active?: boolean;\n}\n\nexport interface ServicePermissionUpdate {\n  display_name?: string;\n  description?: string;\n  is_active?: boolean;\n}\n\n// Service Role Types\nexport interface ServiceRole {\n  id: number;\n  organization_id: number;\n  name: ServiceRoleType;\n  display_name: string;\n  description?: string;\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\n\nexport interface ServiceRoleWithPermissions extends ServiceRole {\n  permissions: ServicePermission[];\n}\n\nexport interface ServiceRoleCreate {\n  name: ServiceRoleType;\n  display_name: string;\n  description?: string;\n  organization_id: number;\n  permission_ids?: number[];\n  is_active?: boolean;\n}\n\nexport interface ServiceRoleUpdate {\n  display_name?: string;\n  description?: string;\n  is_active?: boolean;\n  permission_ids?: number[];\n}\n\n// User Role Assignment Types\nexport interface UserServiceRole {\n  id: number;\n  user_id: number;\n  role_id: number;\n  assigned_by_id?: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\n\nexport interface UserServiceRoleCreate {\n  user_id: number;\n  role_id: number;\n  assigned_by_id?: number;\n  is_active?: boolean;\n}\n\nexport interface UserWithServiceRoles {\n  id: number;\n  email: string;\n  full_name?: string;\n  role: string; // Regular user role\n  is_active: boolean;\n  service_roles: ServiceRole[];\n}\n\n// Role Assignment Request/Response Types\nexport interface RoleAssignmentRequest {\n  user_id: number;\n  role_ids: number[];\n}\n\nexport interface RoleAssignmentResponse {\n  success: boolean;\n  message: string;\n  assignments: UserServiceRole[];\n}\n\nexport interface BulkRoleAssignmentRequest {\n  user_ids: number[];\n  role_ids: number[];\n  replace_existing?: boolean;\n}\n\nexport interface BulkRoleAssignmentResponse {\n  success: boolean;\n  message: string;\n  successful_assignments: number;\n  failed_assignments: number;\n  details: string[];\n}\n\n// Permission Checking Types\nexport interface PermissionCheckRequest {\n  user_id: number;\n  permission: string;\n  organization_id?: number;\n}\n\nexport interface PermissionCheckResponse {\n  has_permission: boolean;\n  user_id: number;\n  permission: string;\n  source: string;\n}\n\nexport interface UserPermissions {\n  user_id: number;\n  permissions: string[];\n  service_roles: ServiceRole[];\n  total_permissions: number;\n}\n\n// UI Component Props Types\nexport interface RoleManagementProps {\n  organizationId: number;\n}\n\nexport interface RoleFormProps {\n  role?: ServiceRoleWithPermissions;\n  permissions: ServicePermission[];\n  organizationId: number;\n  onSubmit: (data: ServiceRoleCreate | ServiceRoleUpdate) => void;\n  onCancel: () => void;\n  loading?: boolean;\n}\n\nexport interface UserRoleAssignmentProps {\n  userId: number;\n  userEmail: string;\n  userFullName?: string;\n  currentRoles: ServiceRole[];\n  availableRoles: ServiceRole[];\n  onAssign: (roleIds: number[]) => void;\n  onRemove: (roleId: number) => void;\n  loading?: boolean;\n}\n\nexport interface RolePermissionMatrixProps {\n  roles: ServiceRoleWithPermissions[];\n  permissions: ServicePermission[];\n  onPermissionToggle: (roleId: number, permissionId: number, granted: boolean) => void;\n  loading?: boolean;\n}\n\n// Service Role Defaults\nexport const SERVICE_ROLE_DEFAULTS: Record<ServiceRoleType, Partial<ServiceRoleCreate>> = {\n  [ServiceRoleType.ADMIN]: {\n    name: ServiceRoleType.ADMIN,\n    display_name: 'Service Admin',\n    description: 'Full access to all service CRM functionality'\n  },\n  [ServiceRoleType.MANAGER]: {\n    name: ServiceRoleType.MANAGER,\n    display_name: 'Service Manager',\n    description: 'Manage services, technicians, and appointments'\n  },\n  [ServiceRoleType.SUPPORT]: {\n    name: ServiceRoleType.SUPPORT,\n    display_name: 'Support Agent',\n    description: 'Handle customer service and basic operations'\n  },\n  [ServiceRoleType.VIEWER]: {\n    name: ServiceRoleType.VIEWER,\n    display_name: 'Viewer',\n    description: 'Read-only access to service information'\n  }\n};\n\n// Permission Display Names\nexport const PERMISSION_DISPLAY_NAMES: Record<string, string> = {\n  // Service Management\n  'service_create': 'Create Services',\n  'service_read': 'View Services',\n  'service_update': 'Update Services',\n  'service_delete': 'Delete Services',\n  \n  // Technician Management\n  'technician_create': 'Create Technicians',\n  'technician_read': 'View Technicians',\n  'technician_update': 'Update Technicians',\n  'technician_delete': 'Delete Technicians',\n  \n  // Appointment Management\n  'appointment_create': 'Create Appointments',\n  'appointment_read': 'View Appointments',\n  'appointment_update': 'Update Appointments',\n  'appointment_delete': 'Cancel Appointments',\n  \n  // Customer Service\n  'customer_service_create': 'Create Customer Records',\n  'customer_service_read': 'View Customer Records',\n  'customer_service_update': 'Update Customer Records',\n  'customer_service_delete': 'Delete Customer Records',\n  \n  // Work Orders\n  'work_order_create': 'Create Work Orders',\n  'work_order_read': 'View Work Orders',\n  'work_order_update': 'Update Work Orders',\n  'work_order_delete': 'Delete Work Orders',\n  \n  // Reports\n  'service_reports_read': 'View Service Reports',\n  'service_reports_export': 'Export Service Reports',\n  \n  // CRM Admin\n  'crm_admin': 'CRM Administration',\n  'crm_settings': 'CRM Settings'\n};\n\n// Module Display Names\nexport const MODULE_DISPLAY_NAMES: Record<ServiceModule, string> = {\n  [ServiceModule.SERVICE]: 'Service Management',\n  [ServiceModule.TECHNICIAN]: 'Technician Management',\n  [ServiceModule.APPOINTMENT]: 'Appointment Management',\n  [ServiceModule.CUSTOMER_SERVICE]: 'Customer Service',\n  [ServiceModule.WORK_ORDER]: 'Work Orders',\n  [ServiceModule.SERVICE_REPORTS]: 'Service Reports',\n  [ServiceModule.CRM_ADMIN]: 'CRM Administration'\n};\n\n// Role Badge Colors (for UI display)\nexport const ROLE_BADGE_COLORS: Record<ServiceRoleType, string> = {\n  [ServiceRoleType.ADMIN]: 'error', // Red\n  [ServiceRoleType.MANAGER]: 'warning', // Orange\n  [ServiceRoleType.SUPPORT]: 'info', // Blue\n  [ServiceRoleType.VIEWER]: 'success' // Green\n};\n\n// Permission checking helper functions\nexport const hasServicePermission = (\n  userRoles: ServiceRole[],\n  requiredPermission: string,\n  allRoles: ServiceRoleWithPermissions[]\n): boolean => {\n  for (const userRole of userRoles) {\n    const roleWithPermissions = allRoles.find(r => r.id === userRole.id);\n    if (roleWithPermissions) {\n      const hasPermission = roleWithPermissions.permissions.some(\n        p => p.name === requiredPermission && p.is_active\n      );\n      if (hasPermission) {return true;}\n    }\n  }\n  return false;\n};\n\nexport const getUserServicePermissions = (\n  userRoles: ServiceRole[],\n  allRoles: ServiceRoleWithPermissions[]\n): string[] => {\n  const permissions = new Set<string>();\n  \n  for (const userRole of userRoles) {\n    const roleWithPermissions = allRoles.find(r => r.id === userRole.id);\n    if (roleWithPermissions) {\n      roleWithPermissions.permissions\n        .filter(p => p.is_active)\n        .forEach(p => permissions.add(p.name));\n    }\n  }\n  \n  return Array.from(permissions);\n};\n\n// Service permission constants (matching backend)\nexport const SERVICE_PERMISSIONS = {\n  // Service Management\n  SERVICE_CREATE: 'service_create',\n  SERVICE_READ: 'service_read',\n  SERVICE_UPDATE: 'service_update',\n  SERVICE_DELETE: 'service_delete',\n  \n  // Technician Management\n  TECHNICIAN_CREATE: 'technician_create',\n  TECHNICIAN_READ: 'technician_read',\n  TECHNICIAN_UPDATE: 'technician_update',\n  TECHNICIAN_DELETE: 'technician_delete',\n  \n  // Appointment Management\n  APPOINTMENT_CREATE: 'appointment_create',\n  APPOINTMENT_READ: 'appointment_read',\n  APPOINTMENT_UPDATE: 'appointment_update',\n  APPOINTMENT_DELETE: 'appointment_delete',\n  \n  // Customer Service\n  CUSTOMER_SERVICE_CREATE: 'customer_service_create',\n  CUSTOMER_SERVICE_READ: 'customer_service_read',\n  CUSTOMER_SERVICE_UPDATE: 'customer_service_update',\n  CUSTOMER_SERVICE_DELETE: 'customer_service_delete',\n  \n  // Work Orders\n  WORK_ORDER_CREATE: 'work_order_create',\n  WORK_ORDER_READ: 'work_order_read',\n  WORK_ORDER_UPDATE: 'work_order_update',\n  WORK_ORDER_DELETE: 'work_order_delete',\n  \n  // Reports\n  SERVICE_REPORTS_READ: 'service_reports_read',\n  SERVICE_REPORTS_EXPORT: 'service_reports_export',\n  \n  // CRM Admin\n  CRM_ADMIN: 'crm_admin',\n  CRM_SETTINGS: 'crm_settings',\n  \n  // Finance & Accounting\n  FINANCE_DASHBOARD_READ: 'finance_dashboard_read',\n  FINANCE_ACCOUNTS_CREATE: 'finance_accounts_create',\n  FINANCE_ACCOUNTS_READ: 'finance_accounts_read',\n  FINANCE_ACCOUNTS_UPDATE: 'finance_accounts_update',\n  FINANCE_ACCOUNTS_DELETE: 'finance_accounts_delete',\n  \n  // General Ledger\n  GL_ENTRY_CREATE: 'gl_entry_create',\n  GL_ENTRY_READ: 'gl_entry_read',\n  GL_ENTRY_UPDATE: 'gl_entry_update',\n  GL_ENTRY_DELETE: 'gl_entry_delete',\n  GL_RECONCILE: 'gl_reconcile',\n  \n  // Cost Centers\n  COST_CENTER_CREATE: 'cost_center_create',\n  COST_CENTER_READ: 'cost_center_read',\n  COST_CENTER_UPDATE: 'cost_center_update',\n  COST_CENTER_DELETE: 'cost_center_delete',\n  COST_CENTER_BUDGET: 'cost_center_budget',\n  \n  // Bank Management\n  BANK_ACCOUNT_CREATE: 'bank_account_create',\n  BANK_ACCOUNT_READ: 'bank_account_read',\n  BANK_ACCOUNT_UPDATE: 'bank_account_update',\n  BANK_ACCOUNT_DELETE: 'bank_account_delete',\n  BANK_RECONCILIATION: 'bank_reconciliation',\n  \n  // Financial Reports\n  FINANCIAL_REPORTS_READ: 'financial_reports_read',\n  FINANCIAL_REPORTS_EXPORT: 'financial_reports_export',\n  TRIAL_BALANCE_READ: 'trial_balance_read',\n  PROFIT_LOSS_READ: 'profit_loss_read',\n  BALANCE_SHEET_READ: 'balance_sheet_read',\n  CASH_FLOW_READ: 'cash_flow_read',\n  \n  // Financial Analytics\n  FINANCE_ANALYTICS_READ: 'finance_analytics_read',\n  FINANCE_KPI_CREATE: 'finance_kpi_create',\n  FINANCE_KPI_READ: 'finance_kpi_read',\n  FINANCE_KPI_UPDATE: 'finance_kpi_update',\n  FINANCE_KPI_DELETE: 'finance_kpi_delete',\n  \n  // Finance Admin\n  FINANCE_ADMIN: 'finance_admin',\n  FINANCE_SETTINGS: 'finance_settings'\n} as const;\n\nexport type ServicePermissionType = typeof SERVICE_PERMISSIONS[keyof typeof SERVICE_PERMISSIONS];","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/reset.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/ui.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/user.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/voucher.types.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":121,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2636,2646],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":122,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2668,2678],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":123,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[2702,2722],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":124,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[2751,2771],"text":""},"desc":"Remove unused variable 'voucher'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/types/voucher.types.ts\n// TypeScript types for voucher system\n\nexport interface VoucherPageConfig {\n  voucherType: string;\n  entityType: 'purchase' | 'sales' | 'financial';\n  endpoint: string;\n  nextNumberEndpoint: string;\n  hasItems: boolean;\n  voucherTitle: string;\n  apiEndpoint?: string;\n}\n\nexport interface VoucherItem {\n  id?: number;\n  product_id: number | null;\n  product_name?: string;\n  hsn_code?: string;\n  quantity: number;\n  unit: string;\n  unit_price: number;\n  original_unit_price?: number;\n  discount_percentage: number;\n  discount_amount: number;\n  taxable_amount: number;\n  gst_rate: number;\n  cgst_amount: number;\n  sgst_amount: number;\n  igst_amount: number;\n  total_amount: number;\n  reorder_level?: number;\n}\n\nexport interface VoucherBase {\n  id?: number;\n  voucher_number: string;\n  date: string;\n  reference?: string;\n  notes?: string;\n  total_amount: number;\n  created_at?: string;\n  updated_at?: string;\n  created_by?: number;\n  organization_id?: number;\n  // Reference document fields\n  reference_type?: string;\n  reference_id?: number | null;\n  reference_number?: string;\n}\n\nexport interface PurchaseVoucher extends VoucherBase {\n  vendor_id: number | null;\n  vendor?: {\n    id: number;\n    name: string;\n    email?: string;\n    phone?: string;\n  };\n  payment_terms?: string;\n  items: VoucherItem[];\n}\n\nexport interface SalesVoucher extends VoucherBase {\n  customer_id: number | null;\n  customer?: {\n    id: number;\n    name: string;\n    email?: string;\n    phone?: string;\n  };\n  payment_terms?: string;\n  items: VoucherItem[];\n}\n\nexport interface FinancialVoucher extends VoucherBase {\n  from_account: string;\n  to_account: string;\n  payment_method?: string;\n  receipt_method?: string;\n  name_id?: number | null;\n  name_type?: 'Vendor' | 'Customer';\n}\n\nexport interface VoucherFormData extends VoucherBase {\n  items?: VoucherItem[];\n  vendor_id?: number | null;\n  customer_id?: number | null;\n  from_account?: string;\n  to_account?: string;\n  payment_method?: string;\n  receipt_method?: string;\n  payment_terms?: string;\n  name_id?: number | null;\n  name_type?: 'Vendor' | 'Customer';\n}\n\nexport interface VoucherListResponse {\n  items: VoucherBase[];\n  total: number;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n}\n\nexport interface ReferenceDocumentData {\n  id: number;\n  voucher_number: string;\n  date: string;\n  total_amount: number;\n  items?: VoucherItem[];\n  customer_id?: number;\n  vendor_id?: number;\n  type: string;\n}\n\nexport interface VoucherContextMenuProps {\n  anchorEl: null | HTMLElement;\n  open: boolean;\n  onClose: () => void;\n  voucher: VoucherBase;\n  onEdit: (id: number) => void;\n  onView: (id: number) => void;\n  onDelete: (voucher: VoucherBase) => void;\n  onGeneratePDF: (voucher: VoucherBase) => void;\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/apiUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'error' should be typed with a non-any type.","line":34,"column":32,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":34,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":44,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":44,"endColumn":41}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Revised: v1/frontend/src/utils/apiUtils.ts\n\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api/v1',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token interceptor\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Add error handling interceptor\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized - redirect to login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const handleApiError = (error: any): string => {\n  if (error.response) {\n    return error.response.data?.message || error.response.data?.detail || 'An error occurred';\n  } else if (error.request) {\n    return 'No response received from server';\n  } else {\n    return error.message || 'Unknown error';\n  }\n};\n\nexport const getApiParams = (params: any): URLSearchParams => {\n  const searchParams = new URLSearchParams();\n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      searchParams.append(key, String(value));\n    }\n  });\n  return searchParams;\n};\n\nexport const uploadStockBulk = async (file: File): Promise<any> => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file); // Ensure field name matches backend expectation ('file')\n\n    const response = await api.post('/stock/bulk', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(handleApiError(error));\n  }\n};\n\nexport default api;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/errorHandling.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":14,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":76},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":72,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":53}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toast } from 'react-toastify';\n\ninterface ApiError {\n  status?: number;\n  userMessage?: string;\n  response?: {\n    data?: {\n      detail?: string;\n      message?: string;\n    };\n  };\n}\n\nexport const handleApiError = (error: ApiError, defaultMessage?: string) => {\n  let message = defaultMessage || 'An error occurred';\n\n  // Check for user-friendly message first\n  if (error.userMessage) {\n    message = error.userMessage;\n  } else if (error.response?.data?.detail) {\n    message = error.response.data.detail;\n  } else if (error.response?.data?.message) {\n    message = error.response.data.message;\n  }\n\n  // Handle specific status codes with enhanced messaging\n  if (error.status === 412) {\n    // Precondition failed - usually company setup required\n    const companySetupMessage = message.includes('company') || message.includes('Company') \n      ? message \n      : 'Company setup required before performing this operation.';\n    toast.error(companySetupMessage, {\n      autoClose: 8000,\n      toastId: 'company-setup-required'\n    });\n    return;\n  }\n\n  if (error.status === 404) {\n    const notFoundMessage = message.includes('company') || message.includes('Company')\n      ? message\n      : message || 'Resource not found';\n    toast.error(notFoundMessage, {\n      autoClose: 5000,\n    });\n    return;\n  }\n\n  if (error.status === 403) {\n    toast.error(message || 'Access denied', {\n      autoClose: 5000,\n    });\n    return;\n  }\n\n  if (error.status === 400) {\n    const badRequestMessage = message.includes('organization') || message.includes('company')\n      ? message\n      : message || 'Invalid request';\n    toast.error(badRequestMessage, {\n      autoClose: 6000,\n    });\n    return;\n  }\n\n  // Generic error\n  toast.error(message, {\n    autoClose: 5000,\n  });\n};\n\nexport const showCompanySetupRequiredMessage = () => {\n  toast.warning('Please complete your company setup before accessing this feature.', {\n    autoClose: 8000,\n    toastId: 'company-setup-required-action'\n  });\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/jwt-decode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/nameRefUtils.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getVendors' is defined but never used.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"getVendors"},"fix":{"range":[119,130],"text":""},"desc":"Remove unused variable 'getVendors'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getCustomers' is defined but never used.","line":5,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"getCustomers"},"fix":{"range":[129,143],"text":""},"desc":"Remove unused variable 'getCustomers'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":13,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":29,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":29,"endColumn":5}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/utils/nameRefUtils.ts\n\nimport { useQuery } from '@tanstack/react-query';\nimport api from '../lib/api';\nimport { getVendors, getCustomers } from '../services/masterService';\nimport { useEntityOptions } from '../hooks/useEntity';\nimport { EntityType } from '../types/entity.types';\n\n/**\n * Legacy hook for name options - now uses Entity abstraction\n * @deprecated Use useEntityOptions from useEntity hook instead\n */\nexport const useNameOptions = () => {\n  const { options } = useEntityOptions(['Vendor', 'Customer']);\n  \n  // Convert to legacy format for backward compatibility\n  return options.map(option => ({\n    ...option.originalData,\n    type: option.type\n  }));\n};\n\n/**\n * Enhanced reference options with Entity support\n */\nexport const useReferenceOptions = (\n  selectedEntityId: number | null, \n  selectedEntityType: EntityType | null\n) => {\n  const { data: unpaidVouchers } = useQuery({\n    queryKey: ['unpaid-vouchers', selectedEntityId, selectedEntityType],\n    queryFn: () => {\n      if (!selectedEntityId || !selectedEntityType) {return [];}\n      \n      // Map entity types to voucher endpoints\n      const endpoint = selectedEntityType === 'Vendor' ? '/purchase-vouchers' : \n                     selectedEntityType === 'Customer' ? '/sales-vouchers' : null;\n      \n      if (!endpoint) {return [];}\n      \n      const params = selectedEntityType === 'Vendor' \n        ? { vendor_id: selectedEntityId }\n        : { customer_id: selectedEntityId };\n      \n      return api.get(endpoint, { params }).then(res => res.data);\n    },\n    enabled: !!selectedEntityId && !!selectedEntityType,\n  });\n\n  return [\n    ...(unpaidVouchers || []).map(v => v.voucher_number),\n    'Advance',\n    'On Account'\n  ];\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/pdfUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":51,"column":97,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":99},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'voucherData' should be typed with a non-any type.","line":311,"column":3,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":311,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":314,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":314,"endColumn":5}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Unified PDF generation utility for all voucher types\n// frontend/src/utils/pdfUtils.ts\n\nimport pdfService from '../services/pdfService';\n\nexport interface VoucherPdfConfig {\n  voucherType: string;\n  voucherTitle: string;\n  showItems?: boolean;\n  showTaxDetails?: boolean;\n  entityType?: 'vendor' | 'customer';\n}\n\nexport interface VoucherPdfData {\n  voucher_number: string;\n  date: string;\n  reference?: string;\n  notes?: string;\n  total_amount: number;\n  items?: any[];\n  // Entity information (vendor/customer)\n  vendor?: {\n    id: number;\n    name: string;\n    address?: string;\n    contact_number?: string;\n    email?: string;\n    gstin?: string;\n  };\n  customer?: {\n    id: number;\n    name: string;\n    address?: string;\n    contact_number?: string;\n    email?: string;\n    gstin?: string;\n  };\n  // Voucher specific fields\n  payment_method?: string;\n  receipt_method?: string;\n  payment_terms?: string;\n  from_account?: string;\n  to_account?: string;\n  // Additional fields for different voucher types\n  [key: string]: any;\n}\n\n/**\n * Generate PDF for any voucher type using standardized configuration\n */\nexport const generateVoucherPDF = async (voucherData: VoucherPdfData, config: VoucherPdfConfig) => {\n  try {\n    // Check authorization before generating PDF\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('You must be logged in to generate PDFs');\n      return;\n    }\n\n    // Prepare standardized voucher data for the PDF service\n    const pdfVoucherData = {\n      voucher_number: voucherData.voucher_number,\n      date: voucherData.date,\n      reference: voucherData.reference,\n      notes: voucherData.notes,\n      total_amount: voucherData.total_amount || 0,\n      items: voucherData.items || [],\n      // Map party information based on entity type\n      party: config.entityType === 'vendor' && voucherData.vendor ? {\n        name: voucherData.vendor.name,\n        address: voucherData.vendor.address,\n        contact_number: voucherData.vendor.contact_number,\n        email: voucherData.vendor.email,\n        gstin: voucherData.vendor.gstin\n      } : config.entityType === 'customer' && voucherData.customer ? {\n        name: voucherData.customer.name,\n        address: voucherData.customer.address,\n        contact_number: voucherData.customer.contact_number,\n        email: voucherData.customer.email,\n        gstin: voucherData.customer.gstin\n      } : undefined,\n      // Include voucher-specific fields\n      payment_method: voucherData.payment_method,\n      receipt_method: voucherData.receipt_method,\n      payment_terms: voucherData.payment_terms,\n      from_account: voucherData.from_account,\n      to_account: voucherData.to_account,\n      ...Object.fromEntries(\n        Object.entries(voucherData).filter(([key]) => \n          !['voucher_number', 'date', 'reference', 'notes', 'total_amount', 'items', 'vendor', 'customer'].includes(key)\n        )\n      )\n    };\n\n    const pdfOptions = {\n      voucherType: config.voucherType,\n      voucherTitle: config.voucherTitle,\n      filename: `${config.voucherTitle.replace(/\\s+/g, '')}${voucherData.voucher_number?.replace(/[^a-zA-Z0-9]/g, '_') || 'Unknown'}.pdf`,\n      showItems: config.showItems || false,\n      showTaxDetails: config.showTaxDetails || false\n    };\n\n    await pdfService.generateVoucherPDF(pdfVoucherData, pdfOptions);\n  } catch (error) {\n    console.error('Error generating PDF:', error);\n    alert('Failed to generate PDF. Please try again.');\n  }\n};\n\n/**\n * Voucher type configurations for PDF generation\n */\nexport const VOUCHER_PDF_CONFIGS: Record<string, VoucherPdfConfig> = {\n  // Financial Vouchers\n  'payment-voucher': {\n    voucherType: 'payment-voucher',\n    voucherTitle: 'PAYMENT VOUCHER',\n    showItems: false,\n    showTaxDetails: false,\n    entityType: 'vendor'\n  },\n  'receipt-voucher': {\n    voucherType: 'receipt-voucher',\n    voucherTitle: 'RECEIPT VOUCHER',\n    showItems: false,\n    showTaxDetails: false,\n    entityType: 'customer'\n  },\n  'journal-voucher': {\n    voucherType: 'journal-voucher',\n    voucherTitle: 'JOURNAL VOUCHER',\n    showItems: false,\n    showTaxDetails: false\n  },\n  'contra-voucher': {\n    voucherType: 'contra-voucher',\n    voucherTitle: 'CONTRA VOUCHER',\n    showItems: false,\n    showTaxDetails: false\n  },\n  \n  // Purchase Vouchers\n  'purchase-voucher': {\n    voucherType: 'purchase-voucher',\n    voucherTitle: 'PURCHASE VOUCHER / BILL',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  'purchase-order': {\n    voucherType: 'purchase-order',\n    voucherTitle: 'PURCHASE ORDER',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  'grn': {\n    voucherType: 'grn',\n    voucherTitle: 'GOODS RECEIPT NOTE',\n    showItems: true,\n    showTaxDetails: false,\n    entityType: 'vendor'\n  },\n  'purchase-return': {\n    voucherType: 'purchase-return',\n    voucherTitle: 'PURCHASE RETURN',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  \n  // Sales Vouchers\n  'sales-voucher': {\n    voucherType: 'sales-voucher',\n    voucherTitle: 'SALES INVOICE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'quotation': {\n    voucherType: 'quotation',\n    voucherTitle: 'QUOTATION',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'proforma-invoice': {\n    voucherType: 'proforma-invoice',\n    voucherTitle: 'PROFORMA INVOICE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'sales-order': {\n    voucherType: 'sales-order',\n    voucherTitle: 'SALES ORDER',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'delivery-challan': {\n    voucherType: 'delivery-challan',\n    voucherTitle: 'DELIVERY CHALLAN',\n    showItems: true,\n    showTaxDetails: false,\n    entityType: 'customer'\n  },\n  'sales-return': {\n    voucherType: 'sales-return',\n    voucherTitle: 'SALES RETURN',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'credit-note': {\n    voucherType: 'credit-note',\n    voucherTitle: 'CREDIT NOTE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'debit-note': {\n    voucherType: 'debit-note',\n    voucherTitle: 'DEBIT NOTE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  'non-sales-credit-note': {\n    voucherType: 'non-sales-credit-note',\n    voucherTitle: 'NON-SALES CREDIT NOTE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  \n  // Manufacturing Vouchers\n  'job-card': {\n    voucherType: 'job-card',\n    voucherTitle: 'JOB CARD',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  'production-order': {\n    voucherType: 'production-order',\n    voucherTitle: 'PRODUCTION ORDER',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'work-order': {\n    voucherType: 'work-order',\n    voucherTitle: 'WORK ORDER',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'material-receipt': {\n    voucherType: 'material-receipt',\n    voucherTitle: 'MATERIAL RECEIPT',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'material-requisition': {\n    voucherType: 'material-requisition',\n    voucherTitle: 'MATERIAL REQUISITION',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'finished-good-receipt': {\n    voucherType: 'finished-good-receipt',\n    voucherTitle: 'FINISHED GOODS RECEIPT',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'manufacturing-journal': {\n    voucherType: 'manufacturing-journal',\n    voucherTitle: 'MANUFACTURING JOURNAL',\n    showItems: false,\n    showTaxDetails: false\n  },\n  'stock-journal': {\n    voucherType: 'stock-journal',\n    voucherTitle: 'STOCK JOURNAL',\n    showItems: true,\n    showTaxDetails: false\n  }\n};\n\n/**\n * Get PDF configuration for a voucher type\n */\nexport const getVoucherPdfConfig = (voucherType: string): VoucherPdfConfig => {\n  const config = VOUCHER_PDF_CONFIGS[voucherType];\n  if (!config) {\n    console.warn(`No PDF configuration found for voucher type: ${voucherType}`);\n    return {\n      voucherType,\n      voucherTitle: voucherType.toUpperCase().replace(/-/g, ' '),\n      showItems: false,\n      showTaxDetails: false\n    };\n  }\n  return config;\n};\n\n/**\n * Standalone PDF generation function for individual vouchers\n * Can be used in any voucher component without requiring useVoucherPage hook\n */\nexport const generateStandalonePDF = async (\n  voucherData: any, \n  voucherType: string, \n  entityData?: { vendor?: any; customer?: any; employee?: any }\n) => {\n  try {\n    console.log('[PDF] Generating standalone PDF for:', voucherType, voucherData);\n    \n    // Check authorization\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('You must be logged in to generate PDFs');\n      return;\n    }\n\n    // Get PDF configuration\n    const pdfConfig = getVoucherPdfConfig(voucherType);\n    \n    // Prepare PDF data with entity information\n    const pdfData: VoucherPdfData = {\n      voucher_number: voucherData.voucher_number || voucherData.job_number || 'Unknown',\n      date: voucherData.date || new Date().toISOString().split('T')[0],\n      reference: voucherData.reference || voucherData.po_number,\n      notes: voucherData.notes || voucherData.description,\n      total_amount: voucherData.total_amount || voucherData.total_cost || 0,\n      items: voucherData.items || voucherData.materials || [],\n      // Map entity information\n      vendor: entityData?.vendor,\n      customer: entityData?.customer,\n      // Additional voucher-specific fields\n      payment_method: voucherData.payment_method,\n      receipt_method: voucherData.receipt_method,\n      payment_terms: voucherData.payment_terms,\n      from_account: voucherData.from_account,\n      to_account: voucherData.to_account,\n      // Manufacturing-specific fields\n      job_type: voucherData.job_type,\n      job_description: voucherData.job_description,\n      expected_completion_date: voucherData.expected_completion_date,\n      actual_completion_date: voucherData.actual_completion_date,\n      materials_supplied_by: voucherData.materials_supplied_by,\n      quality_specifications: voucherData.quality_specifications\n    };\n\n    // Generate PDF\n    await generateVoucherPDF(pdfData, pdfConfig);\n    \n    console.log('[PDF] PDF generated successfully for:', voucherType);\n  } catch (error) {\n    console.error('[PDF] Error generating standalone PDF:', error);\n    alert('Failed to generate PDF. Please try again.');\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/voucherUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'item' should be typed with a non-any type.","line":130,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":130,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":130,"column":78,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":130,"endColumn":80},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":166,"column":84,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":166,"endColumn":86},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":190,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":190,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":207,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":207,"endColumn":71},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":265,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":265,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":540,"column":77,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":540,"endColumn":79},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":556,"column":89,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":556,"endColumn":91},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":613,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":613,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":624,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":624,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":640,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":640,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":648,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":648,"endColumn":38}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/utils/voucherUtils.ts\n\nimport { UI_CONSTANTS } from '../constants/ui';\n\nexport const GST_SLABS = [0, 5, 12, 18, 28];\n\n// State to GST state code mapping for GST calculations\nexport const STATE_TO_CODE_MAP: { [key: string]: string } = {\n  'Andhra Pradesh': '37',\n  'Arunachal Pradesh': '12', \n  'Assam': '18',\n  'Bihar': '10',\n  'Chhattisgarh': '22',\n  'Goa': '30',\n  'Gujarat': '24',\n  'Haryana': '06',\n  'Himachal Pradesh': '02',\n  'Jammu and Kashmir': '01',\n  'Jharkhand': '20',\n  'Karnataka': '29',\n  'Kerala': '32',\n  'Madhya Pradesh': '23',\n  'Maharashtra': '27',\n  'Manipur': '14',\n  'Meghalaya': '17',\n  'Mizoram': '15',\n  'Nagaland': '13',\n  'Odisha': '21',\n  'Punjab': '03',\n  'Rajasthan': '08',\n  'Sikkim': '11',\n  'Tamil Nadu': '33',\n  'Telangana': '36',\n  'Tripura': '16',\n  'Uttar Pradesh': '09',\n  'Uttarakhand': '05',\n  'West Bengal': '19',\n  'Andaman and Nicobar Islands': '35',\n  'Chandigarh': '04',\n  'Dadra and Nagar Haveli and Daman and Diu': '26',\n  'Lakshadweep': '31',\n  'Delhi': '07',\n  'Puducherry': '34',\n  'Ladakh': '38',\n};\n\nexport const voucherTypes = {\n  purchase: [\n    { label: 'Purchase Order', slug: 'purchase-orders' },\n    { label: 'Purchase Voucher', slug: 'purchase-vouchers' },\n    { label: 'Purchase Return', slug: 'purchase-returns' },\n    { label: 'GRN', slug: 'grns' },\n  ],\n  sales: [\n    { label: 'Quotation', slug: 'quotations' },\n    { label: 'Proforma Invoice', slug: 'proforma-invoices' },\n    { label: 'Sales Order', slug: 'sales-orders' },\n    { label: 'Delivery Challan', slug: 'delivery-challans' },\n    { label: 'Sales Voucher', slug: 'sales-vouchers' },\n    { label: 'Sales Return', slug: 'sales-returns' },\n  ],\n  financial: [\n    { label: 'Payment Voucher', slug: 'payment-vouchers' },\n    { label: 'Receipt Voucher', slug: 'receipt-vouchers' },\n    { label: 'Journal Voucher', slug: 'journal-vouchers' },\n    { label: 'Contra Voucher', slug: 'contra-vouchers' },\n  ]\n};\n\n/**\n * Convert number to words in Indian format\n * This is the centralized implementation used across all voucher types\n */\nexport const numberToWordsInteger = (num: number): string => {\n  if (num === 0 || isNaN(num)) {return '';}\n  const belowTwenty = [' ', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];\n  const tens = [' ', ' ', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\n  const thousands = ['', 'Thousand', 'Million', 'Billion'];\n  let word = '';\n  let i = 0;\n  while (num > 0) {\n    const chunk = num % 1000;\n    if (chunk) {\n      let chunkWord = '';\n      if (chunk >= 100) {\n        chunkWord += belowTwenty[Math.floor(chunk / 100)] + ' Hundred ';\n      }\n      let remain = chunk % 100;\n      if (remain >= 20) {\n        chunkWord += tens[Math.floor(remain / 10)] + ' ';\n        remain %= 10;\n      }\n      if (remain > 0) {\n        chunkWord += belowTwenty[remain] + ' ';\n      }\n      word = chunkWord + thousands[i] + ' ' + word;\n    }\n    num = Math.floor(num / 1000);\n    i++;\n  }\n  return word.trim();\n};\n\n/**\n * Convert number to words with decimal support\n * This is the the centralized implementation used across all voucher types\n */\nexport const numberToWords = (num: number): string => {\n  if (num === 0 || isNaN(num)) {return 'Zero only';}\n  const integer = Math.floor(num);\n  const decimal = Math.round((num - integer) * 100);\n  let word = numberToWordsInteger(integer);\n  if (decimal > 0) {\n    word += ' point ' + numberToWordsInteger(decimal);\n  }\n  return word ? word + ' only' : '';\n};\n\n/**\n * Enhanced GST calculation utilities with state-based split logic\n * Supports both intrastate (CGST+SGST) and interstate (IGST) transactions\n */\n\n// Helper function to determine if transaction is intrastate\nexport const isIntrastateTransaction = (companyStateCode: string, customerVendorStateCode: string): boolean => {\n  return companyStateCode === customerVendorStateCode;\n};\n\n// Common voucher item calculation utilities with enhanced GST logic\nexport const calculateItemTotals = (item: any, isIntrastate: boolean = true) => {\n  const subtotal = (item.quantity || 0) * (item.unit_price || 0);\n  const discountAmount = subtotal * ((item.discount_percentage || 0) / 100);\n  const taxableAmount = subtotal - discountAmount;\n  const gstAmount = taxableAmount * ((item.gst_rate || 0) / 100);\n  \n  // GST split logic based on transaction type\n  let cgstAmount = 0;\n  let sgstAmount = 0; \n  let igstAmount = 0;\n  \n  if (isIntrastate) {\n    // Same state: Split GST into CGST and SGST (half each)\n    cgstAmount = gstAmount / 2;\n    sgstAmount = gstAmount / 2;\n    igstAmount = 0;\n  } else {\n    // Different state: Use IGST (full GST rate)\n    cgstAmount = 0;\n    sgstAmount = 0;\n    igstAmount = gstAmount;\n  }\n  \n  const totalAmount = taxableAmount + gstAmount;\n\n  return {\n    ...item,\n    discount_amount: parseFloat(discountAmount.toFixed(2)),\n    taxable_amount: parseFloat(taxableAmount.toFixed(2)),\n    cgst_amount: parseFloat(cgstAmount.toFixed(2)),\n    sgst_amount: parseFloat(sgstAmount.toFixed(2)),\n    igst_amount: parseFloat(igstAmount.toFixed(2)),\n    total_amount: parseFloat(totalAmount.toFixed(2)),\n  };\n};\n\nexport const calculateVoucherTotals = (items: any[], isIntrastate: boolean = true) => {\n  const computedItems = items.map(item => calculateItemTotals(item, isIntrastate));\n  \n  const totalAmount = computedItems.reduce((sum, item) => sum + item.total_amount, 0);\n  const totalSubtotal = computedItems.reduce((sum, item) => sum + (item.quantity || 0) * (item.unit_price || 0), 0);\n  const totalGst = computedItems.reduce((sum, item) => sum + item.taxable_amount * ((item.gst_rate || 0) / 100), 0);\n  const totalCgst = computedItems.reduce((sum, item) => sum + item.cgst_amount, 0);\n  const totalSgst = computedItems.reduce((sum, item) => sum + item.sgst_amount, 0);\n  const totalIgst = computedItems.reduce((sum, item) => sum + item.igst_amount, 0);\n  \n  return {\n    computedItems,\n    totalAmount: parseFloat(totalAmount.toFixed(2)),\n    totalSubtotal: parseFloat(totalSubtotal.toFixed(2)),\n    totalGst: parseFloat(totalGst.toFixed(2)),\n    totalCgst: parseFloat(totalCgst.toFixed(2)),\n    totalSgst: parseFloat(totalSgst.toFixed(2)),\n    totalIgst: parseFloat(totalIgst.toFixed(2)),\n  };\n};\n\n/**\n * Get GST breakdown labels based on transaction type\n */\nexport const getGstLabels = (isIntrastate: boolean) => {\n  if (isIntrastate) {\n    return {\n      tax1Label: 'CGST',\n      tax2Label: 'SGST',\n      showIgst: false\n    };\n  } else {\n    return {\n      tax1Label: 'IGST',\n      tax2Label: '',\n      showIgst: true\n    };\n  }\n};\n\n// Common default values for voucher forms\nexport const getDefaultVoucherValues = (type: 'purchase' | 'sales') => {\n  const baseValues = {\n    voucher_number: '',\n    date: new Date().toISOString().slice(0, 10),\n    reference: '',\n    payment_terms: '',\n    notes: '',\n    items: [{ \n      product_id: null as number | null, \n      hsn_code: '', \n      quantity: 0, \n      unit: '', \n      unit_price: 0.00, \n      original_unit_price: 0.00, \n      discount_percentage: 0, \n      discount_amount: 0.00, \n      taxable_amount: 0.00, \n      gst_rate: 0, \n      cgst_amount: 0.00, \n      sgst_amount: 0.00, \n      igst_amount: 0.00, \n      total_amount: 0.00 \n    }],\n    total_amount: 0.00,\n  };\n\n  if (type === 'purchase') {\n    return {\n      ...baseValues,\n      vendor_id: null as number | null,\n    };\n  } else {\n    return {\n      ...baseValues,\n      customer_id: null as number | null,\n    };\n  }\n};\n\n/**\n * Format number to 2 decimal places for rate fields\n */\nexport const formatRateField = (value: number | string): string => {\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  return isNaN(numValue) ? '0.00' : numValue.toFixed(2);\n};\n\n/**\n * Parse rate field input to ensure 2 decimal places\n */\nexport const parseRateField = (value: string): number => {\n  const parsed = parseFloat(value);\n  return isNaN(parsed) ? 0 : Math.round(parsed * 100) / 100;\n};\n\n/**\n * Get financial voucher default values (no items array)\n */\nexport const getFinancialVoucherDefaults = () => ({\n  voucher_number: '',\n  date: new Date().toISOString().slice(0, 10),\n  reference: '',\n  notes: '',\n  total_amount: 0,\n  from_account: '',\n  to_account: '',\n  payment_method: '',\n  receipt_method: ''\n});\n\n/**\n * Voucher configuration presets for common voucher types\n */\nexport const VOUCHER_CONFIGS = {\n  'payment-voucher': {\n    voucherType: 'payment-vouchers',\n    entityType: 'financial' as const,\n    endpoint: '/payment-vouchers',\n    nextNumberEndpoint: '/payment-vouchers/next-number',\n    hasItems: false,\n    voucherTitle: 'Payment Voucher'\n  },\n  'receipt-voucher': {\n    voucherType: 'receipt-vouchers',\n    entityType: 'financial' as const,\n    endpoint: '/receipt-vouchers',\n    nextNumberEndpoint: '/receipt-vouchers/next-number',\n    hasItems: false,\n    voucherTitle: 'Receipt Voucher'\n  },\n  'journal-voucher': {\n    voucherType: 'journal-vouchers',\n    entityType: 'financial' as const,\n    endpoint: '/journal-vouchers',\n    nextNumberEndpoint: '/journal-vouchers/next-number',\n    hasItems: false,\n    voucherTitle: 'Journal Voucher'\n  },\n  'contra-voucher': {\n    voucherType: 'contra-vouchers',\n    entityType: 'financial' as const,\n    endpoint: '/contra-vouchers',\n    nextNumberEndpoint: '/contra-vouchers/next-number',\n    hasItems: false,\n    voucherTitle: 'Contra Voucher'\n  },\n  'purchase-voucher': {\n    voucherType: 'purchase-vouchers',\n    entityType: 'purchase' as const,\n    endpoint: '/purchase-vouchers',\n    nextNumberEndpoint: '/purchase-vouchers/next-number',\n    hasItems: true,\n    voucherTitle: 'Purchase Voucher'\n  },\n  'purchase-order': {\n    voucherType: 'purchase-orders',\n    entityType: 'purchase' as const,\n    endpoint: '/purchase-orders',\n    nextNumberEndpoint: '/purchase-orders/next-number',\n    hasItems: true,\n    voucherTitle: 'Purchase Order'\n  },\n  'purchase-return': {\n    voucherType: 'purchase-returns',\n    entityType: 'purchase' as const,\n    endpoint: '/purchase-returns',\n    nextNumberEndpoint: '/purchase-returns/next-number',\n    hasItems: true,\n    voucherTitle: 'Purchase Return'\n  },\n  'grn': {\n    voucherType: 'goods-receipt-notes',\n    entityType: 'purchase' as const,\n    endpoint: '/goods-receipt-notes',\n    nextNumberEndpoint: '/goods-receipt-notes/next-number',\n    hasItems: true,\n    voucherTitle: 'GRN'\n  },\n  'sales-voucher': {\n    voucherType: 'sales-vouchers',\n    entityType: 'sales' as const,\n    endpoint: '/sales-vouchers',\n    nextNumberEndpoint: '/sales-vouchers/next-number',\n    hasItems: true,\n    voucherTitle: 'Sales Voucher'\n  },\n  'quotation': {\n    voucherType: 'quotations',\n    entityType: 'sales' as const,\n    endpoint: '/quotations',\n    nextNumberEndpoint: '/quotations/next-number',\n    hasItems: true,\n    voucherTitle: 'Quotation'\n  },\n  'proforma-invoice': {\n    voucherType: 'proforma-invoices',\n    entityType: 'sales' as const,\n    endpoint: '/proforma-invoices',\n    nextNumberEndpoint: '/proforma-invoices/next-number',\n    hasItems: true,\n    voucherTitle: 'Proforma Invoice'\n  },\n  'sales-order': {\n    voucherType: 'sales-orders',\n    entityType: 'sales' as const,\n    endpoint: '/sales-orders',\n    nextNumberEndpoint: '/sales-orders/next-number',\n    hasItems: true,\n    voucherTitle: 'Sales Order'\n  },\n  'delivery-challan': {\n    voucherType: 'delivery-challans',\n    entityType: 'sales' as const,\n    endpoint: '/delivery-challans',\n    nextNumberEndpoint: '/delivery-challans/next-number',\n    hasItems: true,\n    voucherTitle: 'Delivery Challan'\n  },\n  'sales-return': {\n    voucherType: 'sales-returns',\n    entityType: 'sales' as const,\n    endpoint: '/sales-returns',\n    nextNumberEndpoint: '/sales-returns/next-number',\n    hasItems: true,\n    voucherTitle: 'Sales Return'\n  },\n  'credit-note': {\n    voucherType: 'credit-notes',\n    entityType: 'financial' as const,\n    endpoint: '/credit-notes',\n    nextNumberEndpoint: '/credit-notes/next-number',\n    hasItems: false,\n    voucherTitle: 'Credit Note'\n  },\n  'debit-note': {\n    voucherType: 'debit-notes',\n    entityType: 'financial' as const,\n    endpoint: '/debit-notes',\n    nextNumberEndpoint: '/debit-notes/next-number',\n    hasItems: false,\n    voucherTitle: 'Debit Note'\n  },\n  'non-sales-credit-note': {\n    voucherType: 'non-sales-credit-notes',\n    entityType: 'financial' as const,\n    endpoint: '/non-sales-credit-notes',\n    nextNumberEndpoint: '/non-sales-credit-notes/next-number',\n    hasItems: false,\n    voucherTitle: 'Non-Sales Credit Note'\n  },\n  // Manufacturing Vouchers\n  'job-card': {\n    voucherType: 'job-cards',\n    entityType: 'purchase' as const,\n    endpoint: '/job-cards',\n    nextNumberEndpoint: '/job-cards/next-number',\n    hasItems: true,\n    voucherTitle: 'Job Card'\n  },\n  'production-order': {\n    voucherType: 'production-orders',\n    entityType: 'purchase' as const,\n    endpoint: '/production-orders',\n    nextNumberEndpoint: '/production-orders/next-number',\n    hasItems: true,\n    voucherTitle: 'Production Order'\n  },\n  'work-order': {\n    voucherType: 'work-orders',\n    entityType: 'purchase' as const,\n    endpoint: '/work-orders',\n    nextNumberEndpoint: '/work-orders/next-number',\n    hasItems: true,\n    voucherTitle: 'Work Order'\n  },\n  'material-receipt': {\n    voucherType: 'material-receipts',\n    entityType: 'purchase' as const,\n    endpoint: '/material-receipts',\n    nextNumberEndpoint: '/material-receipts/next-number',\n    hasItems: true,\n    voucherTitle: 'Material Receipt'\n  },\n  'material-requisition': {\n    voucherType: 'material-requisitions',\n    entityType: 'purchase' as const,\n    endpoint: '/material-requisitions',\n    nextNumberEndpoint: '/material-requisitions/next-number',\n    hasItems: true,\n    voucherTitle: 'Material Requisition'\n  },\n  'finished-good-receipt': {\n    voucherType: 'finished-good-receipts',\n    entityType: 'purchase' as const,\n    endpoint: '/finished-good-receipts',\n    nextNumberEndpoint: '/finished-good-receipts/next-number',\n    hasItems: true,\n    voucherTitle: 'Finished Good Receipt'\n  },\n  'manufacturing-journal': {\n    voucherType: 'manufacturing-journals',\n    entityType: 'financial' as const,\n    endpoint: '/manufacturing-journals',\n    nextNumberEndpoint: '/manufacturing-journals/next-number',\n    hasItems: false,\n    voucherTitle: 'Manufacturing Journal'\n  },\n  'stock-journal': {\n    voucherType: 'stock-journals',\n    entityType: 'financial' as const,\n    endpoint: '/stock-journals',\n    nextNumberEndpoint: '/stock-journals/next-number',\n    hasItems: true,\n    voucherTitle: 'Stock Journal'\n  }\n} as const;\n\n/**\n * Reference column configurations for voucher types\n * Defines which voucher types can reference which other voucher types\n */\nexport const REFERENCE_CONFIGS = {\n  'purchase-voucher': {\n    allowedTypes: ['purchase-order', 'grn'],\n    label: 'Reference Document'\n  },\n  'purchase-return': {\n    allowedTypes: ['purchase-voucher'],\n    label: 'Reference Purchase Voucher'\n  },\n  'sales-voucher': {\n    allowedTypes: ['delivery-challan', 'sales-order', 'quotation', 'proforma-invoice'],\n    label: 'Reference Document'\n  },\n  'sales-return': {\n    allowedTypes: ['delivery-challan', 'sales-voucher'],\n    label: 'Reference Document'\n  },\n  'delivery-challan': {\n    allowedTypes: ['sales-order', 'quotation', 'proforma-invoice'],\n    label: 'Reference Document'\n  },\n  'sales-order': {\n    allowedTypes: ['quotation', 'proforma-invoice'],\n    label: 'Reference Document'\n  },\n  'proforma-invoice': {\n    allowedTypes: ['quotation', 'sales-order'],\n    label: 'Reference Document'\n  },\n  // These voucher types don't have reference columns per requirements\n  'grn': null,\n  'quotation': null,\n  'purchase-order': null,\n} as const;\n\n/**\n * Voucher types that should NOT have GST/totals sections\n */\nexport const NO_GST_VOUCHER_TYPES = ['grn', 'delivery-challan'] as const;\n\n/**\n * Default pagination settings for all voucher types\n */\nexport const VOUCHER_PAGINATION_DEFAULTS = {\n  pageSize: 5,\n  sortOrder: 'desc', // Latest on top\n  sortBy: 'created_at'\n} as const;\n\n/**\n * Get voucher configuration by type\n */\nexport const getVoucherConfig = (voucherType: keyof typeof VOUCHER_CONFIGS) => {\n  const baseConfig = VOUCHER_CONFIGS[voucherType];\n  const referenceConfig = REFERENCE_CONFIGS[voucherType as keyof typeof REFERENCE_CONFIGS];\n  const hasGstSection = !NO_GST_VOUCHER_TYPES.includes(voucherType as any);\n  \n  return {\n    ...baseConfig,\n    referenceConfig,\n    hasGstSection,\n    pagination: VOUCHER_PAGINATION_DEFAULTS\n  };\n};\n\n/**\n * Get reference voucher options for a given voucher type\n */\nexport const getReferenceVoucherOptions = (voucherType: keyof typeof REFERENCE_CONFIGS) => {\n  const config = REFERENCE_CONFIGS[voucherType];\n  if (!config) {return [{ value: 'new', label: 'New', endpoint: '' }];}\n  \n  const options = config.allowedTypes.map(type => ({\n    value: type,\n    label: VOUCHER_CONFIGS[type]?.voucherTitle || type,\n    endpoint: VOUCHER_CONFIGS[type]?.endpoint || `/${type}s`\n  }));\n  \n  // Add 'New' as the first option instead of 'None'\n  return [{ value: 'new', label: 'New', endpoint: '' }, ...options];\n};\n\n/**\n * Check if a voucher type should have GST/totals section\n */\nexport const shouldShowGstSection = (voucherType: string): boolean => {\n  return !NO_GST_VOUCHER_TYPES.includes(voucherType as any);\n};\n\n/**\n * Enhanced rate field utilities with strict 2 decimal place formatting\n */\nexport const enhancedRateUtils = {\n  /**\n   * Format rate to exactly 2 decimal places\n   */\n  formatRate: (value: number | string): string => {\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\n    return isNaN(numValue) ? '0.00' : numValue.toFixed(2);\n  },\n  \n  /**\n   * Parse rate input ensuring 2 decimal places max\n   */\n  parseRate: (value: string): number => {\n    const parsed = parseFloat(value);\n    return isNaN(parsed) ? 0 : Math.round(parsed * 100) / 100;\n  },\n  \n  /**\n   * Validate rate input (positive number with max 2 decimal places)\n   */\n  validateRate: (value: string): boolean => {\n    const regex = /^\\d+(\\.\\d{1,2})?$/;\n    return regex.test(value) && parseFloat(value) >= 0;\n  }\n};\n\n/**\n * Enhanced voucher list utilities with minimal pagination and sorting\n */\nexport const voucherListUtils = {\n  /**\n   * Sort vouchers with latest first\n   */\n  sortLatestFirst: (vouchers: any[]) => {\n    return [...vouchers].sort((a, b) => {\n      const dateA = new Date(a.created_at || a.date);\n      const dateB = new Date(b.created_at || b.date);\n      return dateB.getTime() - dateA.getTime();\n    });\n  },\n  \n  /**\n   * Paginate vouchers with default 5 per page\n   */\n  paginate: (vouchers: any[], page: number = 1, pageSize: number = 5) => {\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return {\n      items: vouchers.slice(startIndex, endIndex),\n      totalPages: Math.ceil(vouchers.length / pageSize),\n      currentPage: page,\n      totalItems: vouchers.length,\n      hasNext: endIndex < vouchers.length,\n      hasPrev: page > 1\n    };\n  },\n  \n  /**\n   * Get latest vouchers for dashboard display\n   */\n  getLatestVouchers: (vouchers: any[], count: number = 7) => {\n    return voucherListUtils.sortLatestFirst(vouchers).slice(0, count);\n  }\n};\n\n/**\n * Common styling utilities for voucher forms and tables with minimal gaps\n */\nexport const getVoucherStyles = () => ({\n  // Center alignment for all text elements\n  centerText: {\n    textAlign: 'center' as const,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  \n  // Center alignment for form fields\n  centerField: {\n    textAlign: 'center' as const,\n    '& .MuiInputBase-input': {\n      textAlign: 'center' as const,\n    },\n  },\n  \n  // Center alignment for table headers\n  centerHeader: {\n    textAlign: 'center' as const,\n    fontWeight: 'bold',\n  },\n  \n  // Center alignment for table cells\n  centerCell: {\n    textAlign: 'center' as const,\n  },\n  \n  // Container for voucher layout with minimal padding\n  voucherContainer: {\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    width: '100%',\n    margin: 0,\n    padding: 0\n  },\n  \n  // Full-width edge-to-edge layout container\n  edgeToEdgeContainer: {\n    width: '100%',\n    margin: 0,\n    padding: 0,\n    boxSizing: 'border-box' as const,\n    '& .MuiContainer-root': {\n      maxWidth: 'none !important',\n      padding: '0 !important',\n      margin: '0 !important',\n    },\n    '& .MuiBox-root': {\n      margin: '0 !important',\n    }\n  },\n  \n  // Index and form layout containers\n  indexContainer: {\n    width: '100%',\n    padding: '8px',\n    margin: 0,\n  },\n  \n  formContainer: {\n    width: '100%',\n    padding: '8px',\n    margin: 0,\n    boxSizing: 'border-box' as const,\n    '& .MuiTextField-root': {\n      '& .MuiInputBase-input': {\n        textAlign: 'center' as const,\n      },\n    },\n    '& .MuiFormLabel-root': {\n      textAlign: 'center' as const,\n    },\n    // Enhanced dropdown width for voucher numbers\n    '& .voucher-dropdown': {\n      minWidth: `${UI_CONSTANTS.WIDTH.VOUCHER_MIN}px`,\n      '& .MuiSelect-select': {\n        minWidth: `${UI_CONSTANTS.WIDTH.VOUCHER_MIN - 20}px`,\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n      }\n    },\n    // Reference dropdown width\n    '& .reference-dropdown': {\n      minWidth: `${UI_CONSTANTS.WIDTH.REFERENCE_MIN}px`,\n      '& .MuiSelect-select': {\n        minWidth: `${UI_CONSTANTS.WIDTH.REFERENCE_MIN - 20}px`,\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n      }\n    }\n  },\n  \n  // Table with center-aligned content\n  centeredTable: {\n    '& .MuiTableCell-root': {\n      textAlign: 'center' as const,\n    },\n    '& .MuiTableCell-head': {\n      textAlign: 'center' as const,\n      fontWeight: 'bold',\n    },\n  },\n  \n  // Rate field styling with 2 decimal places\n  rateField: {\n    '& .MuiInputBase-input': {\n      textAlign: 'center' as const,\n    },\n    '& input[type=number]': {\n      '-moz-appearance': 'textfield',\n    },\n    '& input[type=number]::-webkit-outer-spin-button': {\n      '-webkit-appearance': 'none',\n      margin: 0,\n    },\n    '& input[type=number]::-webkit-inner-spin-button': {\n      '-webkit-appearance': 'none',\n      margin: 0,\n    },\n  },\n  \n  // Enhanced title styling with center alignment\n  voucherTitle: {\n    textAlign: 'center' as const,\n    fontWeight: 'bold',\n    fontSize: '1.25rem',\n    marginBottom: '16px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  \n  // Date field styling to ensure visibility in view mode\n  dateField: {\n    '& .MuiInputBase-input': {\n      textAlign: 'center' as const,\n    },\n    '& .MuiFormLabel-root': {\n      display: 'block !important',\n      visibility: 'visible !important'\n    }\n  },\n  \n  // Pagination styling for 5 per page standard\n  paginationContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '16px',\n    '& .MuiPagination-root': {\n      '& .MuiPaginationItem-root': {\n        fontSize: '0.875rem'\n      }\n    }\n  },\n\n  // Optimized table column widths for voucher product tables\n  productTableColumns: {\n    productName: {\n      width: '35%',\n      minWidth: '200px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    quantity: {\n      width: '12%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    rate: {\n      width: '10%',\n      minWidth: '70px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    discount: {\n      width: '8%',\n      minWidth: '60px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    gst: {\n      width: '8%',\n      minWidth: '60px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    amount: {\n      width: '12%',\n      minWidth: '90px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    hsn: {\n      width: '10%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    action: {\n      width: '8%',\n      minWidth: '60px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    }\n  },\n\n  // GRN specific column widths (different from standard vouchers)\n  grnTableColumns: {\n    productName: {\n      width: '30%',\n      minWidth: '200px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    orderQty: {\n      width: '17.5%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    receivedQty: {\n      width: '17.5%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    acceptedQty: {\n      width: '17.5%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    rejectedQty: {\n      width: '17.5%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n  },\n\n  // Enhanced table container with minimal gaps\n  optimizedTableContainer: {\n    '& .MuiTableContainer-root': {\n      borderRadius: '4px',\n    },\n    '& .MuiTable-root': {\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    '& .MuiTableCell-root': {\n      padding: '4px 4px',\n      '&:last-child': {\n        borderRight: 'none'\n      }\n    },\n    '& .MuiTableHead-root .MuiTableCell-root': {\n      backgroundColor: '#fafafa',\n      fontSize: '12px',\n      fontWeight: 'bold'\n    },\n    '& .MuiTableBody-root .MuiTableRow-root': {\n      '&:hover': {\n        backgroundColor: '#f8f9fa'\n      },\n      '&:nth-of-type(even)': {\n        backgroundColor: '#fafbfc'\n      }\n    }\n  }\n});","usedDeprecatedRules":[]}]
