(node:3589) ESLintIgnoreWarning: The ".eslintignore" file is no longer supported. Switch to using the "ignores" property in "eslint.config.js": https://eslint.org/docs/latest/use/configure/migration-guide#ignoring-files
(Use `node --trace-warnings ...` to show where the warning was created)
[{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddBOMModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":77,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[1616,1625],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { \n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  Grid,\n  IconButton,\n  CircularProgress,\n  Switch,\n  FormControlLabel,\n  Paper,\n  Autocomplete,\n  Box\n} from '@mui/material';\nimport { Add, Remove } from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from '../lib/api';\nimport { getProducts } from '../services/masterService';\ninterface BOMComponent {\n  component_item_id: number;\n  quantity_required: number;\n  unit: string;\n  unit_cost: number;\n  wastage_percentage: number;\n  is_optional: boolean;\n  sequence: number;\n  notes?: string;\n}\ninterface BOM {\n  id?: number;\n  bom_name: string;\n  output_item_id: number;\n  output_quantity: number;\n  version: string;\n  validity_start?: string;\n  validity_end?: string;\n  description?: string;\n  notes?: string;\n  material_cost: number;\n  labor_cost: number;\n  overhead_cost: number;\n  is_active: boolean;\n  components: BOMComponent[];\n}\nconst defaultBOM: BOM = {\n  bom_name: '',\n  output_item_id: 0,\n  output_quantity: 1.0,\n  version: '1.0',\n  description: '',\n  notes: '',\n  material_cost: 0.0,\n  labor_cost: 0.0,\n  overhead_cost: 0.0,\n  is_active: true,\n  components: [\n    {\n      component_item_id: 0,\n      quantity_required: 1.0,\n      unit: 'PCS',\n      unit_cost: 0.0,\n      wastage_percentage: 0.0,\n      is_optional: false,\n      sequence: 1,\n      notes: ''\n    }\n  ]\n};\ninterface AddBOMModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: BOM) => void;\n  initialData?: BOM;\n  mode: 'create' | 'edit';\n}\nconst AddBOMModal: React.FC<AddBOMModalProps> = ({ open, onClose, onAdd, initialData, mode }) => {\n  const queryClient = useQueryClient();\n  const { control, handleSubmit, reset, setValue, watch, formState: { errors } } = useForm<BOM>({\n    defaultValues: initialData || defaultBOM\n  });\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'components'\n  });\n  // Fetch products\n  const { data: productList, isLoading: isLoadingProducts } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts\n  });\n  const productOptions = productList || [];\n  // Mutation for create/edit\n  const mutation = useMutation({\n    mutationFn: (bomData: BOM) => {\n      // Clean the data\n      const cleanData = {\n        ...bomData,\n        output_item_id: bomData.output_item_id || null,\n        output_quantity: Number(bomData.output_quantity) || 1.0,\n        labor_cost: Number(bomData.labor_cost) || 0.0,\n        overhead_cost: Number(bomData.overhead_cost) || 0.0,\n        material_cost: Number(bomData.material_cost) || 0.0,\n        components: bomData.components.map(comp => ({\n          ...comp,\n          component_item_id: Number(comp.component_item_id) || null,\n          quantity_required: Number(comp.quantity_required) || 1.0,\n          unit_cost: Number(comp.unit_cost) || 0.0,\n          wastage_percentage: Number(comp.wastage_percentage) || 0.0,\n          sequence: Number(comp.sequence) || 0,\n          is_optional: Boolean(comp.is_optional)\n        })).filter(comp => comp.component_item_id)\n      };\n      if (mode === 'create') {\n        return api.post('/bom', cleanData).then(res => res.data);\n      } else {\n        return api.put(`/bom/${initialData?.id}`, cleanData).then(res => res.data);\n      }\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['boms'] });\n      onAdd(data);\n      onClose();\n      reset(defaultBOM);\n    },\n    onError: (error: any) => {\n      console.error(`Error ${mode === 'create' ? 'creating' : 'updating'} BOM:`, error);\n    }\n  });\n  const onSubmit = (data: BOM) => {\n    // Validations\n    if (!data.bom_name?.trim()) {return;}\n    if (!data.output_item_id || data.output_item_id === 0) {return;}\n    if (!data.components || data.components.length === 0) {return;}\n    const invalidComponents = data.components.filter(comp => \n      !comp.component_item_id || comp.quantity_required <= 0\n    );\n    if (invalidComponents.length > 0) {return;}\n    mutation.mutate(data);\n  };\n  const addComponent = () => {\n    append({\n      component_item_id: 0,\n      quantity_required: 1.0,\n      unit: 'PCS',\n      unit_cost: 0.0,\n      wastage_percentage: 0.0,\n      is_optional: false,\n      sequence: fields.length + 1,\n      notes: ''\n    });\n  };\n  const removeComponent = (index: number) => {\n    if (fields.length > 1) {\n      remove(index);\n    }\n  };\n  const calculateTotalCost = () => {\n    const components = watch('components') || [];\n    const materialCost = components.reduce((sum, comp) => {\n      const totalQty = comp.quantity_required * (1 + comp.wastage_percentage / 100);\n      return sum + (totalQty * comp.unit_cost);\n    }, 0);\n    const laborCost = watch('labor_cost') || 0;\n    const overheadCost = watch('overhead_cost') || 0;\n    return materialCost + laborCost + overheadCost;\n  };\n  if (isLoadingProducts) {\n    return <CircularProgress />;\n  }\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\n      <DialogTitle>{mode === 'create' ? 'Create BOM' : 'Edit BOM'}</DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={3}>\n            {/* Basic Information */}\n            <Grid size={12}>\n              <Typography variant=\"h6\" gutterBottom>Basic Information</Typography>\n            </Grid>\n            <Grid size={6}>\n              <TextField\n                {...control.register('bom_name', { required: 'BOM name is required' })}\n                label=\"BOM Name\"\n                fullWidth\n                error={!!errors.bom_name}\n                helperText={errors.bom_name?.message}\n              />\n            </Grid>\n            <Grid size={3}>\n              <TextField\n                {...control.register('version', { required: 'Version is required' })}\n                label=\"Version\"\n                fullWidth\n                error={!!errors.version}\n                helperText={errors.version?.message}\n              />\n            </Grid>\n            <Grid size={3}>\n              <TextField\n                {...control.register('output_quantity', { required: 'Output quantity is required', min: 0.01 })}\n                label=\"Output Quantity\"\n                type=\"number\"\n                fullWidth\n                error={!!errors.output_quantity}\n                helperText={errors.output_quantity?.message}\n                InputProps={{ inputProps: { step: 0.01 } }}\n              />\n            </Grid>\n            <Grid size={6}>\n              <Autocomplete\n                options={productOptions}\n                getOptionLabel={(option) => option.product_name || ''}\n                value={productOptions.find((p: any) => p.id === watch('output_item_id')) || null}\n                onChange={(_, newValue) => setValue('output_item_id', newValue?.id || 0)}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label=\"Output Item *\"\n                    error={!!errors.output_item_id}\n                    helperText={errors.output_item_id?.message || 'Select the product that will be manufactured'}\n                    required\n                  />\n                )}\n              />\n            </Grid>\n            <Grid size={6}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={watch('is_active')}\n                    onChange={(e) => setValue('is_active', e.target.checked)}\n                  />\n                }\n                label=\"Active\"\n              />\n            </Grid>\n            <Grid size={6}>\n              <TextField\n                {...control.register('validity_start')}\n                label=\"Validity Start\"\n                type=\"date\"\n                fullWidth\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid size={6}>\n              <TextField\n                {...control.register('validity_end')}\n                label=\"Validity End\"\n                type=\"date\"\n                fullWidth\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                {...control.register('description')}\n                label=\"Description\"\n                fullWidth\n                multiline\n                rows={2}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                {...control.register('notes')}\n                label=\"Notes\"\n                fullWidth\n                multiline\n                rows={2}\n              />\n            </Grid>\n            {/* Components */}\n            <Grid size={12}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 3, mb: 2 }}>\n                <Typography variant=\"h6\">Components</Typography>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<Add />}\n                  onClick={addComponent}\n                >\n                  Add Component\n                </Button>\n              </Box>\n            </Grid>\n            {fields.map((field, index) => (\n              <Grid size={12} key={field.id}>\n                <Paper sx={{ p: 2, mb: 2 }}>\n                  <Grid container spacing={2}>\n                    <Grid size={4}>\n                      <Autocomplete\n                        options={productOptions}\n                        getOptionLabel={(option) => option.product_name || ''}\n                        value={productOptions.find((p: any) => p.id === watch(`components.${index}.component_item_id`)) || null}\n                        onChange={(_, newValue) => setValue(`components.${index}.component_item_id`, newValue?.id || 0)}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            label=\"Component Item *\"\n                            size=\"small\"\n                            required\n                            error={!watch(`components.${index}.component_item_id`)}\n                            helperText={!watch(`components.${index}.component_item_id`) ? 'Component item is required' : ''}\n                          />\n                        )}\n                      />\n                    </Grid>\n                    <Grid size={2}>\n                      <TextField\n                        {...control.register(`components.${index}.quantity_required` as const, { \n                          required: 'Quantity is required', \n                          min: { value: 0.01, message: 'Quantity must be greater than 0' }\n                        })}\n                        label=\"Quantity *\"\n                        type=\"number\"\n                        fullWidth\n                        size=\"small\"\n                        error={!!errors.components?.[index]?.quantity_required}\n                        helperText={errors.components?.[index]?.quantity_required?.message}\n                        InputProps={{ inputProps: { step: 0.01, min: 0.01 } }}\n                      />\n                    </Grid>\n                    <Grid size={1}>\n                      <TextField\n                        {...control.register(`components.${index}.unit` as const)}\n                        label=\"Unit\"\n                        fullWidth\n                        size=\"small\"\n                      />\n                    </Grid>\n                    <Grid size={2}>\n                      <TextField\n                        {...control.register(`components.${index}.unit_cost` as const, { min: 0 })}\n                        label=\"Unit Cost\"\n                        type=\"number\"\n                        fullWidth\n                        size=\"small\"\n                        InputProps={{ inputProps: { step: 0.01 } }}\n                      />\n                    </Grid>\n                    <Grid size={2}>\n                      <TextField\n                        {...control.register(`components.${index}.wastage_percentage` as const, { min: 0, max: 100 })}\n                        label=\"Wastage %\"\n                        type=\"number\"\n                        fullWidth\n                        size=\"small\"\n                        InputProps={{ inputProps: { step: 0.1 } }}\n                      />\n                    </Grid>\n                    <Grid size={1}>\n                      <IconButton\n                        onClick={() => removeComponent(index)}\n                        color=\"error\"\n                        disabled={fields.length === 1}\n                      >\n                        <Remove />\n                      </IconButton>\n                    </Grid>\n                    <Grid size={12}>\n                      <TextField\n                        {...control.register(`components.${index}.notes` as const)}\n                        label=\"Component Notes\"\n                        fullWidth\n                        size=\"small\"\n                      />\n                    </Grid>\n                  </Grid>\n                </Paper>\n              </Grid>\n            ))}\n            {/* Costing */}\n            <Grid size={12}>\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3 }}>Costing</Typography>\n            </Grid>\n            <Grid size={4}>\n              <TextField\n                {...control.register('labor_cost', { min: 0 })}\n                label=\"Labor Cost\"\n                type=\"number\"\n                fullWidth\n                InputProps={{ inputProps: { step: 0.01 } }}\n              />\n            </Grid>\n            <Grid size={4}>\n              <TextField\n                {...control.register('overhead_cost', { min: 0 })}\n                label=\"Overhead Cost\"\n                type=\"number\"\n                fullWidth\n                InputProps={{ inputProps: { step: 0.01 } }}\n              />\n            </Grid>\n            <Grid size={4}>\n              <TextField\n                label=\"Total Cost\"\n                value={calculateTotalCost().toFixed(2)}\n                fullWidth\n                disabled\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} disabled={mutation.isPending}>\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={mutation.isPending}\n          >\n            {mutation.isPending ? <CircularProgress size={20} /> : (mode === 'create' ? 'Create' : 'Update')}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddBOMModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddCommissionModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":23,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[400,409],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  CircularProgress,\n  Box,\n  Grid,\n  InputAdornment\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\ninterface AddCommissionModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n}\ninterface CommissionFormData {\n  sales_person_id: number;\n  opportunity_id?: number;\n  lead_id?: number;\n  commission_type: string;\n  commission_rate?: number;\n  commission_amount?: number;\n  base_amount: number;\n  commission_date: string;\n  payment_status: string;\n  notes?: string;\n}\nconst commissionTypes = [\n  'percentage',\n  'fixed_amount',\n  'tiered',\n  'bonus'\n];\nconst paymentStatuses = [\n  'pending',\n  'paid',\n  'approved',\n  'rejected',\n  'on_hold'\n];\nconst AddCommissionModal: React.FC<AddCommissionModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false\n}) => {\n  const { register, handleSubmit, reset, control, watch, formState: { errors } } = useForm<CommissionFormData>({\n    defaultValues: {\n      sales_person_id: 0,\n      opportunity_id: undefined,\n      lead_id: undefined,\n      commission_type: 'percentage',\n      commission_rate: 0,\n      commission_amount: 0,\n      base_amount: 0,\n      commission_date: new Date().toISOString().split('T')[0],\n      payment_status: 'pending',\n      notes: '',\n    }\n  });\n  const commissionType = watch('commission_type');\n  const baseAmount = watch('base_amount');\n  const commissionRate = watch('commission_rate');\n  React.useEffect(() => {\n    if (open) {\n      reset({\n        sales_person_id: 0,\n        opportunity_id: undefined,\n        lead_id: undefined,\n        commission_type: 'percentage',\n        commission_rate: 0,\n        commission_amount: 0,\n        base_amount: 0,\n        commission_date: new Date().toISOString().split('T')[0],\n        payment_status: 'pending',\n        notes: ''\n      });\n    }\n  }, [open, reset]);\n  // Calculate commission amount automatically for percentage type\n  React.useEffect(() => {\n    if (commissionType === 'percentage' && baseAmount && commissionRate) {\n      const calculated = (baseAmount * commissionRate) / 100;\n      console.log(calculated); // Use the expression to fix no-unused-expressions\n    }\n  }, [commissionType, baseAmount, commissionRate]);\n  const onSubmit = async (commissionData: CommissionFormData) => {\n    try {\n      // Clean and prepare data\n      const cleanData = {\n        ...commissionData,\n        // Ensure numeric fields are properly typed\n        sales_person_id: Number(commissionData.sales_person_id),\n        opportunity_id: commissionData.opportunity_id ? Number(commissionData.opportunity_id) : null,\n        lead_id: commissionData.lead_id ? Number(commissionData.lead_id) : null,\n        commission_rate: commissionData.commission_rate ? Number(commissionData.commission_rate) : null,\n        commission_amount: commissionData.commission_amount ? Number(commissionData.commission_amount) : null,\n        base_amount: Number(commissionData.base_amount)\n      };\n      // Remove undefined/empty fields\n      Object.keys(cleanData).forEach(key => {\n        if (cleanData[key as keyof typeof cleanData] === undefined || cleanData[key as keyof typeof cleanData] === '') {\n          delete cleanData[key as keyof typeof cleanData];\n        }\n      });\n      await onAdd(cleanData);\n      reset();\n      onClose();\n    } catch (error) {\n      console.error('Error adding commission:', error);\n    }\n  };\n  const handleClose = () => {\n    if (!loading) {\n      reset();\n      onClose();\n    }\n  };\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\" component=\"div\">\n          Add New Commission Record\n        </Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Box sx={{ mt: 1 }}>\n            <Grid container spacing={3}>\n              {/* Basic Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2 }}>\n                  Commission Details\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('sales_person_id', { \n                    required: 'Sales person ID is required',\n                    min: { value: 1, message: 'Please enter a valid sales person ID' }\n                  })}\n                  label=\"Sales Person ID\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.sales_person_id}\n                  helperText={errors.sales_person_id?.message}\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Commission Type</InputLabel>\n                  <Controller\n                    name=\"commission_type\"\n                    control={control}\n                    rules={{ required: 'Commission type is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Commission Type\"\n                        error={!!errors.commission_type}\n                      >\n                        {commissionTypes.map((type) => (\n                          <MenuItem key={type} value={type}>\n                            {type.replace('_', ' ').toUpperCase()}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.commission_type && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.commission_type.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('base_amount', { \n                    required: 'Base amount is required',\n                    min: { value: 0, message: 'Base amount must be positive' }\n                  })}\n                  label=\"Base Amount\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.base_amount}\n                  helperText={errors.base_amount?.message}\n                  disabled={loading}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                  }}\n                  inputProps={{ min: 0, step: 0.01 }}\n                />\n              </Grid>\n              {commissionType === 'percentage' && (\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <TextField\n                    {...register('commission_rate', {\n                      min: { value: 0, message: 'Rate must be positive' },\n                      max: { value: 100, message: 'Rate cannot exceed 100%' }\n                    })}\n                    label=\"Commission Rate\"\n                    type=\"number\"\n                    fullWidth\n                    error={!!errors.commission_rate}\n                    helperText={errors.commission_rate?.message}\n                    disabled={loading}\n                    InputProps={{\n                      endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                    }}\n                    inputProps={{ min: 0, max: 100, step: 0.1 }}\n                  />\n                </Grid>\n              )}\n              {(commissionType === 'fixed_amount' || commissionType === 'bonus') && (\n                <Grid size={{ xs: 12, sm: 6 }}>\n                  <TextField\n                    {...register('commission_amount', {\n                      min: { value: 0, message: 'Amount must be positive' }\n                    })}\n                    label=\"Commission Amount\"\n                    type=\"number\"\n                    fullWidth\n                    error={!!errors.commission_amount}\n                    helperText={errors.commission_amount?.message}\n                    disabled={loading}\n                    InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                    }}\n                    inputProps={{ min: 0, step: 0.01 }}\n                  />\n                </Grid>\n              )}\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('commission_date', { \n                    required: 'Commission date is required' \n                  })}\n                  label=\"Commission Date\"\n                  type=\"date\"\n                  fullWidth\n                  error={!!errors.commission_date}\n                  helperText={errors.commission_date?.message}\n                  disabled={loading}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Payment Status</InputLabel>\n                  <Controller\n                    name=\"payment_status\"\n                    control={control}\n                    rules={{ required: 'Payment status is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Payment Status\"\n                        error={!!errors.payment_status}\n                      >\n                        {paymentStatuses.map((status) => (\n                          <MenuItem key={status} value={status}>\n                            {status.replace('_', ' ').toUpperCase()}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.payment_status && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.payment_status.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n              {/* Reference Fields */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Reference Information (Optional)\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('opportunity_id')}\n                  label=\"Opportunity ID\"\n                  type=\"number\"\n                  fullWidth\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('lead_id')}\n                  label=\"Lead ID\"\n                  type=\"number\"\n                  fullWidth\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('notes')}\n                  label=\"Notes\"\n                  multiline\n                  rows={3}\n                  fullWidth\n                  disabled={loading}\n                  placeholder=\"Add any additional notes about this commission...\"\n                />\n              </Grid>\n              {/* Calculation Display */}\n              {commissionType === 'percentage' && baseAmount && commissionRate && (\n                <Grid size={{ xs: 12 }}>\n                  <Box sx={{ p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Calculated Commission Amount\n                    </Typography>\n                    <Typography variant=\"h6\" color=\"primary\">\n                      ${((baseAmount * commissionRate) / 100).toFixed(2)}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {commissionRate}% of ${baseAmount}\n                    </Typography>\n                  </Box>\n                </Grid>\n              )}\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={handleClose} \n            disabled={loading}\n            color=\"inherit\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Commission'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddCommissionModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddCustomerModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":28,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[616,625],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Grid,\n  Alert,\n  InputAdornment,\n  Box,\n  Paper,\n  Chip,\n  Tooltip,\n  LinearProgress,\n  IconButton,\n} from '@mui/material';\nimport { CloudUpload, Description, CheckCircle, Search } from '@mui/icons-material';\nimport { useForm } from 'react-hook-form';\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\nimport api from '../lib/api';\ninterface AddCustomerModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd?: (data: any) => Promise<void>;\n  loading?: boolean;\n  initialName?: string;\n}\ninterface CustomerFormData {\n  name: string;\n  contact_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  gst_number: string;\n  pan_number: string;\n  state_code: string;\n}\nconst AddCustomerModal: React.FC<AddCustomerModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false,\n  initialName = ''\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [gstFile, setGstFile] = useState<File | null>(null);\n  const [gstUploadLoading, setGstUploadLoading] = useState(false);\n  const [gstExtractedData, setGstExtractedData] = useState<any>(null);\n  const [gstUploadError, setGstUploadError] = useState<string | null>(null);\n  const [gstSearchLoading, setGstSearchLoading] = useState(false);\n  const { register, handleSubmit, reset, formState: { errors }, setValue, watch } = useForm<CustomerFormData>({\n    defaultValues: {\n      name: initialName,\n      contact_number: '',\n      email: '',\n      address1: '',\n      address2: '',\n      city: '',\n      state: '',\n      pin_code: '',\n      gst_number: '',\n      pan_number: '',\n      state_code: '',\n    }\n  });\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError, clearData } = usePincodeLookup();\n  const watchedPincode = watch('pin_code');\n  const watchedGstNumber = watch('gst_number');\n  // Auto-populate form fields when pincode data is available\n  useEffect(() => {\n    if (pincodeData) {\n      setValue('city', pincodeData.city);\n      setValue('state', pincodeData.state);\n      setValue('state_code', pincodeData.state_code);\n    }\n  }, [pincodeData, setValue]);\n  // Handle pincode change with debouncing\n  useEffect(() => {\n    if (watchedPincode && /^\\d{6}$/.test(watchedPincode)) {\n      const timeoutId = setTimeout(() => {\n        lookupPincode(watchedPincode);\n      }, 500); // 500ms debounce\n      return () => clearTimeout(timeoutId);\n    } else {\n      clearData();\n    }\n  }, [watchedPincode, lookupPincode, clearData]);\n  // Handle GST certificate upload with actual API call\n  const handleGstFileUpload = async (file: File) => {\n    setGstUploadLoading(true);\n    setGstUploadError(null);\n    try {\n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append('file', file);\n      // Call backend PDF extraction API\n      const response = await api.post('/pdf-extraction/extract/customer', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.data.success) {\n        const extractedData = response.data.extracted_data;\n        // Auto-populate form fields with processed extracted data\n        Object.entries(extractedData).forEach(([key, value]) => {\n          if (value) {\n            setValue(key as keyof CustomerFormData, value as string);\n          }\n        });\n        setGstExtractedData(extractedData);\n        setGstFile(file);\n      } else {\n        const errorMessage = (response.data as any)?.detail || 'Extraction failed';\n        throw new globalThis.Error(errorMessage);\n      }\n    } catch (error: any) {\n      console.error('Error processing GST certificate:', error);\n      setGstUploadError(error.response?.data?.detail || 'Failed to process GST certificate. Please try again.');\n    } finally {\n      setGstUploadLoading(false);\n    }\n  };\n  const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/pdf') {\n        setGstUploadError('Please upload a PDF file');\n        return;\n      }\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        setGstUploadError('File size should be less than 10MB');\n        return;\n      }\n      handleGstFileUpload(file);\n    }\n  };\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n  const removeGstFile = () => {\n    setGstFile(null);\n    setGstExtractedData(null);\n    setGstUploadError(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleGstSearch = async () => {\n    if (!watchedGstNumber || !/^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/.test(watchedGstNumber)) {\n      setGstUploadError('Please enter a valid GSTIN');\n      return;\n    }\n    setGstSearchLoading(true);\n    setGstUploadError(null);\n    try {\n      const response = await api.get(`/gst/search/${watchedGstNumber}`);\n      const data = response.data;\n      // Auto-populate fields from API response\n      Object.entries(data).forEach(([key, value]) => {\n        if (value) {\n          setValue(key as keyof CustomerFormData, value as string);\n        }\n      });\n    } catch (error: any) {\n      setGstUploadError(error.response?.data?.detail || 'Failed to fetch GST details. Please check GSTIN.');\n    } finally {\n      setGstSearchLoading(false);\n    }\n  };\n  const onSubmit = async (customerData: CustomerFormData) => {\n    try {\n      // Remove empty fields to match backend schema\n      const allowedFields = ['name', 'contact_number', 'email', 'address1', 'address2', 'city', 'state', 'pin_code', 'gst_number', 'pan_number', 'state_code'];\n      const cleanData = Object.fromEntries(\n        Object.entries(customerData).filter(([key, value]) => allowedFields.includes(key) && value !== null && String(value).trim() !== '')\n      );\n      // Direct API call to save customer\n      const response = await api.post('/customers', cleanData);\n      console.log('Customer added successfully:', response.data);\n      // Call onAdd if provided and is a function\n      if (typeof onAdd === 'function') {\n        await onAdd(response.data);\n      }\n      reset();\n      onClose();  // Close modal on success\n    } catch (error: any) {\n      console.error('Error adding customer:', error);\n      // Set more specific error message\n      const errorMessage = error.response?.data?.detail || 'Failed to add customer. Please try again.';\n      setGstUploadError(errorMessage);\n    }\n  };\n  const handleClose = () => {\n    reset();\n    clearData();\n    removeGstFile();\n    onClose();\n  };\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add New Customer</Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Customer Name *\"\n                {...register('name', { required: 'Customer name is required' })}\n                error={!!errors.name}\n                helperText={errors.name?.message}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('name') || !!gstExtractedData?.name,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Contact Number\"\n                {...register('contact_number')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('contact_number') || !!gstExtractedData?.phone,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Email\"\n                type=\"email\"\n                {...register('email', {\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: 'Invalid email address'\n                  }\n                })}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('email') || !!gstExtractedData?.email,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"GST Number\"\n                {...register('gst_number')}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      {gstSearchLoading ? (\n                        <CircularProgress size={16} />\n                      ) : (\n                        <IconButton\n                          onClick={handleGstSearch}\n                          disabled={!watchedGstNumber || gstSearchLoading}\n                          aria-label=\"Search GST\"\n                        >\n                          <Search />\n                        </IconButton>\n                      )}\n                    </InputAdornment>\n                  ),\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('gst_number') || !!gstExtractedData?.gst_number,\n                }}\n              />\n            </Grid>\n            {/* GST Certificate Upload Section */}\n            <Grid size={12}>\n              <Paper sx={{ p: 2, bgcolor: 'grey.50', border: '1px dashed', borderColor: 'grey.300' }}>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    GST Certificate Upload (Optional)\n                  </Typography>\n                  <Tooltip title=\"Upload GST certificate PDF to auto-fill customer details\">\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      PDF Auto-Extract\n                    </Typography>\n                  </Tooltip>\n                </Box>\n                {!gstFile && !gstUploadLoading && (\n                  <Box\n                    sx={{\n                      border: '2px dashed',\n                      borderColor: 'grey.300',\n                      borderRadius: 1,\n                      p: 3,\n                      textAlign: 'center',\n                      cursor: 'pointer',\n                      '&:hover': {\n                        borderColor: 'primary.main',\n                        bgcolor: 'action.hover'\n                      }\n                    }}\n                    onClick={triggerFileUpload}\n                  >\n                    <CloudUpload sx={{ fontSize: 48, color: 'grey.400', mb: 1 }} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                      Click to upload GST certificate (PDF only)\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Maximum file size: 10MB\n                    </Typography>\n                  </Box>\n                )}\n                {gstUploadLoading && (\n                  <Box sx={{ p: 3, textAlign: 'center' }}>\n                    <CircularProgress size={40} sx={{ mb: 2 }} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                      Processing GST certificate...\n                    </Typography>\n                    <LinearProgress sx={{ mt: 1 }} />\n                  </Box>\n                )}\n                {gstFile && !gstUploadLoading && (\n                  <Box sx={{ p: 2, bgcolor: 'success.light', borderRadius: 1 }}>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <Description color=\"primary\" />\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {gstFile.name}\n                        </Typography>\n                        <Chip\n                          icon={<CheckCircle />}\n                          label=\"Processed\"\n                          size=\"small\"\n                          color=\"success\"\n                          variant=\"outlined\"\n                        />\n                      </Box>\n                      <Button\n                        size=\"small\"\n                        onClick={removeGstFile}\n                        color=\"error\"\n                        variant=\"outlined\"\n                      >\n                        Remove\n                      </Button>\n                    </Box>\n                    {gstExtractedData && (\n                      <Alert severity=\"success\" sx={{ mt: 1 }}>\n                        <Typography variant=\"caption\">\n                          Auto-populated: {Object.keys(gstExtractedData).join(', ')}\n                        </Typography>\n                      </Alert>\n                    )}\n                  </Box>\n                )}\n                {gstUploadError && (\n                  <Alert severity=\"error\" sx={{ mt: 1 }} onClose={() => setGstUploadError(null)}>\n                    {gstUploadError}\n                  </Alert>\n                )}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".pdf\"\n                  style={{ display: 'none' }}\n                  onChange={handleFileInputChange}\n                />\n              </Paper>\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"PAN Number\"\n                {...register('pan_number')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('pan_number') || !!gstExtractedData?.pan_number,\n                }}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 1\"\n                {...register('address1')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('address1') || !!gstExtractedData?.address1,\n                }}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 2\"\n                {...register('address2')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('address2') || !!gstExtractedData?.address2,\n                }}\n              />\n            </Grid>\n            {/* PIN Code moved to be first after address lines */}\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"PIN Code *\"\n                {...register('pin_code', { \n                  required: 'PIN code is required',\n                  pattern: {\n                    value: /^\\d{6}$/,\n                    message: 'Please enter a valid 6-digit PIN code'\n                  }\n                })}\n                error={!!errors.pin_code}\n                helperText={errors.pin_code?.message || (pincodeError && pincodeError)}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: pincodeLoading ? (\n                    <InputAdornment position=\"end\">\n                      <CircularProgress size={16} />\n                    </InputAdornment>\n                  ) : null,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('pin_code') || !!gstExtractedData?.pin_code,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"City\"\n                {...register('city', { required: 'City is required' })}\n                error={!!errors.city}\n                helperText={errors.city?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('city') || !!pincodeData || !!gstExtractedData?.city,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"State\"\n                {...register('state', { required: 'State is required' })}\n                error={!!errors.state}\n                helperText={errors.state?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state') || !!pincodeData || !!gstExtractedData?.state,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"State Code\"\n                {...register('state_code', { required: 'State code is required' })}\n                error={!!errors.state_code}\n                helperText={errors.state_code?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state_code') || !!pincodeData || !!gstExtractedData?.state_code,\n                }}\n              />\n            </Grid>\n            {pincodeError && (\n              <Grid size={12}>\n                <Alert severity=\"warning\" sx={{ mt: 1 }}>\n                  {pincodeError}\n                </Alert>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Customer'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddCustomerModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddEmployeeModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":31,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[688,697],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Alert,\n  Box,\n  Paper,\n  LinearProgress,\n  IconButton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Tabs,\n  Tab,\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport { CloudUpload, Description, Delete as DeleteIcon } from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\nimport api from '../lib/api';\ninterface AddEmployeeModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n  initialData?: any;\n  mode: 'create' | 'edit';\n}\ninterface EmployeeFormData {\n  full_name: string;\n  email: string;\n  phone: string;\n  date_of_birth?: string;\n  gender?: string;\n  employee_code: string;\n  employee_type: string;\n  hire_date?: string;\n  job_title?: string;\n  department?: string;\n  work_location?: string;\n  reporting_manager_id?: number;\n  pan_number?: string;\n  aadhaar_number?: string;\n  passport_number?: string;\n  driving_license?: string;\n  bank_account_number?: string;\n  bank_name?: string;\n  ifsc_code?: string;\n  bank_branch?: string;\n  address_line1?: string;\n  address_line2?: string;\n  city?: string;\n  state?: string;\n  pin_code?: string;\n  country?: string;\n  emergency_contact_name?: string;\n  emergency_contact_phone?: string;\n  emergency_contact_relation?: string;\n}\nconst AddEmployeeModal: React.FC<AddEmployeeModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false,\n  initialData,\n  mode,\n}) => {\n  const fileInputRefs = [\n    useRef<HTMLInputElement>(null),\n    useRef<HTMLInputElement>(null),\n    useRef<HTMLInputElement>(null),\n    useRef<HTMLInputElement>(null),\n    useRef<HTMLInputElement>(null),\n  ];\n  const [documents, setDocuments] = useState<\n    Array<{ file: File | null; type: string; extractedData?: any; loading: boolean; error?: string }>\n  >(\n    Array.from({ length: 5 }, () => ({\n      file: null,\n      type: '',\n      extractedData: null,\n      loading: false,\n      error: undefined,\n    }))\n  );\n  const [tabValue, setTabValue] = useState(0);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n    setValue,\n    watch,\n    control,\n  } = useForm<EmployeeFormData>({\n    defaultValues: initialData || {\n      full_name: '',\n      email: '',\n      phone: '',\n      employee_code: '',\n      employee_type: 'permanent',\n      gender: '',\n      country: 'India',\n    },\n  });\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError, clearData } = usePincodeLookup();\n  const watchedPincode = watch('pin_code');\n  useEffect(() => {\n    if (pincodeData) {\n      setValue('city', pincodeData.city);\n      setValue('state', pincodeData.state);\n    }\n  }, [pincodeData, setValue]);\n  useEffect(() => {\n    if (watchedPincode && /^\\d{6}$/.test(watchedPincode)) {\n      const timeoutId = setTimeout(() => {\n        lookupPincode(watchedPincode);\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    } else {\n      clearData();\n    }\n  }, [watchedPincode, lookupPincode, clearData]);\n  const handleDocumentUpload = async (index: number, file: File) => {\n    const updatedDocs = [...documents];\n    updatedDocs[index] = { ...updatedDocs[index], loading: true, error: undefined };\n    setDocuments(updatedDocs);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('document_type', updatedDocs[index].type || 'general');\n      const response: { data: { success: boolean; extracted_data?: any; detail?: string } } = await api.post(\n        '/pdf-extraction/extract/employee',\n        formData,\n        {\n          headers: { 'Content-Type': 'multipart/form-data' },\n        }\n      );\n      if (response.data.success) {\n        const extractedData = response.data.extracted_data;\n        Object.entries(extractedData).forEach(([key, value]) => {\n          if (value) {setValue(key as keyof EmployeeFormData, value as string);}\n        });\n        updatedDocs[index] = { ...updatedDocs[index], file, extractedData, loading: false };\n      } else {\n        throw new globalThis.Error(response.data.detail || 'Extraction failed');\n      }\n    } catch (error: any) {\n      updatedDocs[index] = {\n        ...updatedDocs[index],\n        loading: false,\n        error: error.message || 'Failed to process document',\n      };\n    }\n    setDocuments(updatedDocs);\n  };\n  const handleFileChange = (index: number, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/pdf') {return alert('Please upload a PDF file');}\n      if (file.size > 10 * 1024 * 1024) {return alert('File size should be less than 10MB');}\n      handleDocumentUpload(index, file);\n    }\n  };\n  const triggerUpload = (index: number) => {\n    fileInputRefs[index].current?.click();\n  };\n  const removeDocument = (index: number) => {\n    const updatedDocs = [...documents];\n    updatedDocs[index] = { file: null, type: '', extractedData: null, loading: false, error: undefined };\n    setDocuments(updatedDocs);\n  };\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n  const onSubmit = async (employeeData: EmployeeFormData) => {\n    try {\n      const formData = new FormData();\n      Object.entries(employeeData).forEach(([key, value]) => {\n        formData.append(key, value as string);\n      });\n      documents.forEach((doc, index) => {\n        if (doc.file) {\n          formData.append(`documents_${index}`, doc.file);\n          formData.append(`document_types_${index}`, doc.type);\n        }\n      });\n      const endpoint = mode === 'create' ? '/hr/employees' : `/hr/employees/${initialData?.id}`;\n      const method = mode === 'create' ? 'post' : 'put';\n      const response = await api[method](endpoint, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n      });\n      await onAdd(response.data);\n      reset();\n      onClose();\n    } catch (error: any) {\n      console.error('Error saving employee:', error);\n      alert(error.response?.data?.detail || 'Failed to save employee');\n    }\n  };\n  const handleClose = () => {\n    reset();\n    clearData();\n    setDocuments(\n      Array.from({ length: 5 }, () => ({\n        file: null,\n        type: '',\n        extractedData: null,\n        loading: false,\n        error: undefined,\n      }))\n    );\n    onClose();\n  };\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">{mode === 'create' ? 'Add New Employee' : 'Edit Employee'}</Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Tabs value={tabValue} onChange={handleTabChange}>\n            <Tab label=\"Personal Details\" />\n            <Tab label=\"Employment Details\" />\n            <Tab label=\"KYC & Bank\" />\n            <Tab label=\"Address & Emergency\" />\n          </Tabs>\n          {tabValue === 0 && (\n            <Grid container spacing={2} sx={{ mt: 2 }}>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Full Name *\"\n                  {...register('full_name', { required: 'Full name is required' })}\n                  error={!!errors.full_name}\n                  helperText={errors.full_name?.message}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Email *\"\n                  type=\"email\"\n                  {...register('email', { required: 'Email is required' })}\n                  error={!!errors.email}\n                  helperText={errors.email?.message}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Phone Number\"\n                  {...register('phone')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Date of Birth\"\n                  type=\"date\"\n                  {...register('date_of_birth')}\n                  InputLabelProps={{ shrink: true }}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Gender</InputLabel>\n                  <Controller\n                    name=\"gender\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select {...field} label=\"Gender\">\n                        <MenuItem value=\"male\">Male</MenuItem>\n                        <MenuItem value=\"female\">Female</MenuItem>\n                        <MenuItem value=\"other\">Other</MenuItem>\n                        <MenuItem value=\"prefer_not_to_say\">Prefer not to say</MenuItem>\n                      </Select>\n                    )}\n                  />\n                </FormControl>\n              </Grid>\n            </Grid>\n          )}\n          {tabValue === 1 && (\n            <Grid container spacing={2} sx={{ mt: 2 }}>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Employee Code *\"\n                  {...register('employee_code', { required: 'Employee code is required' })}\n                  error={!!errors.employee_code}\n                  helperText={errors.employee_code?.message}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Employee Type</InputLabel>\n                  <Controller\n                    name=\"employee_type\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select {...field} label=\"Employee Type\">\n                        <MenuItem value=\"permanent\">Permanent</MenuItem>\n                        <MenuItem value=\"contract\">Contract</MenuItem>\n                        <MenuItem value=\"intern\">Intern</MenuItem>\n                        <MenuItem value=\"consultant\">Consultant</MenuItem>\n                      </Select>\n                    )}\n                  />\n                </FormControl>\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Hire Date\"\n                  type=\"date\"\n                  {...register('hire_date')}\n                  InputLabelProps={{ shrink: true }}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Job Title\"\n                  {...register('job_title')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Department\"\n                  {...register('department')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Work Location\"\n                  {...register('work_location')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Reporting Manager ID\"\n                  type=\"number\"\n                  {...register('reporting_manager_id')}\n                  margin=\"normal\"\n                />\n              </Grid>\n            </Grid>\n          )}\n          {tabValue === 2 && (\n            <Grid container spacing={2} sx={{ mt: 2 }}>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"PAN Number\"\n                  {...register('pan_number')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Aadhaar Number\"\n                  {...register('aadhaar_number')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Passport Number\"\n                  {...register('passport_number')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Driving License\"\n                  {...register('driving_license')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Bank Account Number\"\n                  {...register('bank_account_number')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Bank Name\"\n                  {...register('bank_name')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"IFSC Code\"\n                  {...register('ifsc_code')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Bank Branch\"\n                  {...register('bank_branch')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={12}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Upload Documents (up to 5 PDFs)\n                </Typography>\n                {documents.map((doc, index) => (\n                  <Paper key={index} sx={{ p: 2, mb: 2, bgcolor: 'grey.50' }}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={2}>\n                      <FormControl fullWidth>\n                        <InputLabel>Document Type</InputLabel>\n                        <Select\n                          value={doc.type}\n                          label=\"Document Type\"\n                          onChange={(e) => {\n                            const updated = [...documents];\n                            updated[index].type = e.target.value as string;\n                            setDocuments(updated);\n                          }}\n                        >\n                          <MenuItem value=\"aadhaar\">Aadhaar</MenuItem>\n                          <MenuItem value=\"pan\">PAN</MenuItem>\n                          <MenuItem value=\"passport\">Passport</MenuItem>\n                          <MenuItem value=\"driving_license\">Driving License</MenuItem>\n                          <MenuItem value=\"bank_passbook\">Bank Passbook</MenuItem>\n                          <MenuItem value=\"other\">Other</MenuItem>\n                        </Select>\n                      </FormControl>\n                      <Button variant=\"outlined\" startIcon={<CloudUpload />} onClick={() => triggerUpload(index)}>\n                        Upload PDF\n                      </Button>\n                      <input\n                        ref={fileInputRefs[index]}\n                        type=\"file\"\n                        accept=\".pdf\"\n                        style={{ display: 'none' }}\n                        onChange={(e) => handleFileChange(index, e)}\n                      />\n                    </Box>\n                    {doc.loading && <LinearProgress sx={{ mt: 1 }} />}\n                    {doc.file && (\n                      <Box sx={{ mt: 1, display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Description />\n                        <Typography>{doc.file.name}</Typography>\n                        <IconButton color=\"error\" onClick={() => removeDocument(index)}>\n                          <DeleteIcon />\n                        </IconButton>\n                      </Box>\n                    )}\n                    {doc.error && (\n                      <Alert severity=\"error\" sx={{ mt: 1 }}>\n                        {doc.error}\n                      </Alert>\n                    )}\n                    {doc.extractedData && (\n                      <Alert severity=\"success\" sx={{ mt: 1 }}>\n                        Extracted: {Object.keys(doc.extractedData).join(', ')}\n                      </Alert>\n                    )}\n                  </Paper>\n                ))}\n              </Grid>\n            </Grid>\n          )}\n          {tabValue === 3 && (\n            <Grid container spacing={2} sx={{ mt: 2 }}>\n              <Grid size={12}>\n                <TextField\n                  fullWidth\n                  label=\"Address Line 1\"\n                  {...register('address_line1')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={12}>\n                <TextField\n                  fullWidth\n                  label=\"Address Line 2\"\n                  {...register('address_line2')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 4 }}>\n                <TextField\n                  fullWidth\n                  label=\"PIN Code\"\n                  {...register('pin_code')}\n                  error={!!pincodeError}\n                  helperText={pincodeError}\n                  margin=\"normal\"\n                  InputProps={{\n                    endAdornment: pincodeLoading ? <CircularProgress size={16} /> : null,\n                  }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 4 }}>\n                <TextField\n                  fullWidth\n                  label=\"City\"\n                  {...register('city')}\n                  margin=\"normal\"\n                  InputProps={{ readOnly: !!pincodeData }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 4 }}>\n                <TextField\n                  fullWidth\n                  label=\"State\"\n                  {...register('state')}\n                  margin=\"normal\"\n                  InputProps={{ readOnly: !!pincodeData }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Country\"\n                  {...register('country')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Emergency Contact Name\"\n                  {...register('emergency_contact_name')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Emergency Contact Phone\"\n                  {...register('emergency_contact_phone')}\n                  margin=\"normal\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12, md: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Emergency Contact Relation\"\n                  {...register('emergency_contact_relation')}\n                  margin=\"normal\"\n                />\n              </Grid>\n            </Grid>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" variant=\"contained\" disabled={loading}>\n            {loading ? <CircularProgress size={20} /> : mode === 'create' ? 'Add Employee' : 'Update Employee'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddEmployeeModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddLeadModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":23,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[384,393],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  CircularProgress,\n  Box,\n  Grid,\n  Chip\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\ninterface AddLeadModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n}\ninterface LeadFormData {\n  first_name: string;\n  last_name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  job_title?: string;\n  website?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  country?: string;\n  source: string;\n  status: string;\n  score: number;\n  estimated_value?: number;\n  expected_close_date?: string;\n  notes?: string;\n}\nconst leadSources = [\n  'Website',\n  'Social Media',\n  'Email Campaign',\n  'Cold Call',\n  'Referral',\n  'Trade Show',\n  'Partner',\n  'Advertisement',\n  'Direct Mail',\n  'Other'\n];\nconst leadStatuses = [\n  'new',\n  'contacted',\n  'qualified',\n  'proposal_sent',\n  'negotiation',\n  'converted',\n  'lost',\n  'disqualified'\n];\nconst AddLeadModal: React.FC<AddLeadModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false\n}) => {\n  const { register, handleSubmit, reset, control, formState: { errors } } = useForm<LeadFormData>({\n    defaultValues: {\n      first_name: '',\n      last_name: '',\n      email: '',\n      phone: '',\n      company: '',\n      job_title: '',\n      website: '',\n      address: '',\n      city: '',\n      state: '',\n      postal_code: '',\n      country: '',\n      source: 'Website',\n      status: 'new',\n      score: 0,\n      estimated_value: 0,\n      expected_close_date: '',\n      notes: ''\n    }\n  });\n  React.useEffect(() => {\n    if (open) {\n      reset({\n        first_name: '',\n        last_name: '',\n        email: '',\n        phone: '',\n        company: '',\n        job_title: '',\n        website: '',\n        address: '',\n        city: '',\n        state: '',\n        postal_code: '',\n        country: '',\n        source: 'Website',\n        status: 'new',\n        score: 0,\n        estimated_value: 0,\n        expected_close_date: '',\n        notes: ''\n      });\n    }\n  }, [open, reset]);\n  const onSubmit = async (leadData: LeadFormData) => {\n    try {\n      // Remove empty fields to match backend schema\n      const cleanData = Object.fromEntries(\n        Object.entries(leadData).filter(([key, value]) => {\n          if (key === 'score' || key === 'estimated_value') {\n            return value !== undefined && value !== null;\n          }\n          return value !== undefined && value !== null && value !== '';\n        })\n      );\n      await onAdd(cleanData);\n      reset();\n      onClose();\n    } catch (error) {\n      console.error('Error adding lead:', error);\n    }\n  };\n  const handleClose = () => {\n    if (!loading) {\n      reset();\n      onClose();\n    }\n  };\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\" component=\"div\">\n          Add New Lead\n        </Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Box sx={{ mt: 1 }}>\n            <Grid container spacing={3}>\n              {/* Basic Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2 }}>\n                  Basic Information\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('first_name', { \n                    required: 'First name is required',\n                    minLength: { value: 2, message: 'First name must be at least 2 characters' }\n                  })}\n                  label=\"First Name\"\n                  fullWidth\n                  error={!!errors.first_name}\n                  helperText={errors.first_name?.message}\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('last_name', { \n                    required: 'Last name is required',\n                    minLength: { value: 2, message: 'Last name must be at least 2 characters' }\n                  })}\n                  label=\"Last Name\"\n                  fullWidth\n                  error={!!errors.last_name}\n                  helperText={errors.last_name?.message}\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('email', { \n                    required: 'Email is required',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: 'Invalid email address'\n                    }\n                  })}\n                  label=\"Email\"\n                  type=\"email\"\n                  fullWidth\n                  error={!!errors.email}\n                  helperText={errors.email?.message}\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('phone')}\n                  label=\"Phone\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              {/* Company Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Company Information\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('company')}\n                  label=\"Company\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('job_title')}\n                  label=\"Job Title\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('website')}\n                  label=\"Website\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              {/* Address Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Address Information\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('address')}\n                  label=\"Address\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('city')}\n                  label=\"City\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('state')}\n                  label=\"State\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('postal_code')}\n                  label=\"Postal Code\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('country')}\n                  label=\"Country\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              {/* Lead Details */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Lead Details\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Source</InputLabel>\n                  <Controller\n                    name=\"source\"\n                    control={control}\n                    rules={{ required: 'Source is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Source\"\n                        error={!!errors.source}\n                      >\n                        {leadSources.map((source) => (\n                          <MenuItem key={source} value={source}>\n                            {source}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.source && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.source.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Status</InputLabel>\n                  <Controller\n                    name=\"status\"\n                    control={control}\n                    rules={{ required: 'Status is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Status\"\n                        error={!!errors.status}\n                      >\n                        {leadStatuses.map((status) => (\n                          <MenuItem key={status} value={status}>\n                            <Chip \n                              label={status.replace('_', ' ').toUpperCase()} \n                              size=\"small\" \n                              variant=\"outlined\"\n                              sx={{ textTransform: 'capitalize' }}\n                            />\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.status && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.status.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('score', {\n                    min: { value: 0, message: 'Score must be at least 0' },\n                    max: { value: 100, message: 'Score must be at most 100' }\n                  })}\n                  label=\"Lead Score (0-100)\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.score}\n                  helperText={errors.score?.message}\n                  disabled={loading}\n                  inputProps={{ min: 0, max: 100 }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('estimated_value', {\n                    min: { value: 0, message: 'Value must be positive' }\n                  })}\n                  label=\"Estimated Value\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.estimated_value}\n                  helperText={errors.estimated_value?.message}\n                  disabled={loading}\n                  inputProps={{ min: 0 }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 4 }}>\n                <TextField\n                  {...register('expected_close_date')}\n                  label=\"Expected Close Date\"\n                  type=\"date\"\n                  fullWidth\n                  disabled={loading}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('notes')}\n                  label=\"Notes\"\n                  multiline\n                  rows={3}\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={handleClose} \n            disabled={loading}\n            color=\"inherit\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Lead'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddLeadModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddOpportunityModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":24,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[409,418],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  CircularProgress,\n  Box,\n  Grid,\n  Chip,\n  InputAdornment\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\ninterface AddOpportunityModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n}\ninterface OpportunityFormData {\n  name: string;\n  account_name?: string;\n  contact_name?: string;\n  amount: number;\n  probability: number;\n  stage: string;\n  source: string;\n  close_date: string;\n  description?: string;\n  next_step?: string;\n  lead_id?: number;\n  assigned_to_id?: number;\n}\nconst opportunityStages = [\n  'prospecting',\n  'qualification',\n  'needs_analysis',\n  'proposal',\n  'negotiation',\n  'closed_won',\n  'closed_lost'\n];\nconst opportunitySources = [\n  'Website',\n  'Social Media',\n  'Email Campaign',\n  'Cold Call',\n  'Referral',\n  'Trade Show',\n  'Partner',\n  'Lead Conversion',\n  'Existing Customer',\n  'Other'\n];\nconst AddOpportunityModal: React.FC<AddOpportunityModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false\n}) => {\n  const { register, handleSubmit, reset, control, formState: { errors } } = useForm<OpportunityFormData>({\n    defaultValues: {\n      name: '',\n      account_name: '',\n      contact_name: '',\n      amount: 0,\n      probability: 50,\n      stage: 'prospecting',\n      source: 'Website',\n      close_date: '',\n      description: '',\n      next_step: '',\n      lead_id: undefined,\n      assigned_to_id: undefined\n    }\n  });\n  React.useEffect(() => {\n    if (open) {\n      reset({\n        name: '',\n        account_name: '',\n        contact_name: '',\n        amount: 0,\n        probability: 50,\n        stage: 'prospecting',\n        source: 'Website',\n        close_date: '',\n        description: '',\n        next_step: '',\n        lead_id: undefined,\n        assigned_to_id: undefined\n      });\n    }\n  }, [open, reset]);\n  const onSubmit = async (opportunityData: OpportunityFormData) => {\n    try {\n      // Remove empty fields to match backend schema\n      const cleanData = Object.fromEntries(\n        Object.entries(opportunityData).filter(([key, value]) => {\n          if (key === 'amount' || key === 'probability') {\n            return value !== undefined && value !== null;\n          }\n          return value !== undefined && value !== null && value !== '';\n        })\n      );\n      await onAdd(cleanData);\n      reset();\n      onClose();\n    } catch (error) {\n      console.error('Error adding opportunity:', error);\n    }\n  };\n  const handleClose = () => {\n    if (!loading) {\n      reset();\n      onClose();\n    }\n  };\n  const getStageColor = (stage: string) => {\n    switch (stage) {\n      case 'prospecting': return 'info';\n      case 'qualification': return 'warning';\n      case 'needs_analysis': return 'secondary';\n      case 'proposal': return 'primary';\n      case 'negotiation': return 'error';\n      case 'closed_won': return 'success';\n      case 'closed_lost': return 'default';\n      default: return 'default';\n    }\n  };\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\" component=\"div\">\n          Add New Opportunity\n        </Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Box sx={{ mt: 1 }}>\n            <Grid container spacing={3}>\n              {/* Basic Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2 }}>\n                  Opportunity Details\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('name', { \n                    required: 'Opportunity name is required',\n                    minLength: { value: 3, message: 'Name must be at least 3 characters' }\n                  })}\n                  label=\"Opportunity Name\"\n                  fullWidth\n                  error={!!errors.name}\n                  helperText={errors.name?.message}\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('account_name')}\n                  label=\"Account Name\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('contact_name')}\n                  label=\"Contact Name\"\n                  fullWidth\n                  disabled={loading}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('amount', { \n                    required: 'Amount is required',\n                    min: { value: 0, message: 'Amount must be positive' }\n                  })}\n                  label=\"Opportunity Value\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.amount}\n                  helperText={errors.amount?.message}\n                  disabled={loading}\n                  InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">$</InputAdornment>,\n                  }}\n                  inputProps={{ min: 0 }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('probability', {\n                    required: 'Probability is required',\n                    min: { value: 0, message: 'Probability must be at least 0%' },\n                    max: { value: 100, message: 'Probability must be at most 100%' }\n                  })}\n                  label=\"Probability\"\n                  type=\"number\"\n                  fullWidth\n                  error={!!errors.probability}\n                  helperText={errors.probability?.message}\n                  disabled={loading}\n                  InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n                  }}\n                  inputProps={{ min: 0, max: 100 }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Stage</InputLabel>\n                  <Controller\n                    name=\"stage\"\n                    control={control}\n                    rules={{ required: 'Stage is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Stage\"\n                        error={!!errors.stage}\n                      >\n                        {opportunityStages.map((stage) => (\n                          <MenuItem key={stage} value={stage}>\n                            <Chip \n                              label={stage.replace('_', ' ').toUpperCase()} \n                              size=\"small\" \n                              color={getStageColor(stage) as any}\n                              variant=\"outlined\"\n                              sx={{ textTransform: 'capitalize' }}\n                            />\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.stage && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.stage.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <FormControl fullWidth disabled={loading}>\n                  <InputLabel>Source</InputLabel>\n                  <Controller\n                    name=\"source\"\n                    control={control}\n                    rules={{ required: 'Source is required' }}\n                    render={({ field }) => (\n                      <Select\n                        {...field}\n                        label=\"Source\"\n                        error={!!errors.source}\n                      >\n                        {opportunitySources.map((source) => (\n                          <MenuItem key={source} value={source}>\n                            {source}\n                          </MenuItem>\n                        ))}\n                      </Select>\n                    )}\n                  />\n                  {errors.source && (\n                    <Typography variant=\"caption\" color=\"error\" sx={{ mt: 0.5, ml: 2 }}>\n                      {errors.source.message}\n                    </Typography>\n                  )}\n                </FormControl>\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('close_date', { \n                    required: 'Expected close date is required' \n                  })}\n                  label=\"Expected Close Date\"\n                  type=\"date\"\n                  fullWidth\n                  error={!!errors.close_date}\n                  helperText={errors.close_date?.message}\n                  disabled={loading}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                />\n              </Grid>\n              {/* Additional Information */}\n              <Grid size={{ xs: 12 }}>\n                <Typography variant=\"h6\" color=\"primary\" sx={{ mb: 2, mt: 2 }}>\n                  Additional Information\n                </Typography>\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('description')}\n                  label=\"Description\"\n                  multiline\n                  rows={3}\n                  fullWidth\n                  disabled={loading}\n                  placeholder=\"Describe the opportunity details, requirements, and potential challenges...\"\n                />\n              </Grid>\n              <Grid size={{ xs: 12 }}>\n                <TextField\n                  {...register('next_step')}\n                  label=\"Next Step\"\n                  fullWidth\n                  disabled={loading}\n                  placeholder=\"What is the next next action required to move this opportunity forward?\"\n                />\n              </Grid>\n              {/* Optional Reference Fields */}\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('lead_id')}\n                  label=\"Lead ID (if converted from lead)\"\n                  type=\"number\"\n                  fullWidth\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  {...register('assigned_to_id')}\n                  label=\"Assigned To (User ID)\"\n                  type=\"number\"\n                  fullWidth\n                  disabled={loading}\n                  inputProps={{ min: 1 }}\n                />\n              </Grid>\n            </Grid>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={handleClose} \n            disabled={loading}\n            color=\"inherit\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            variant=\"contained\" \n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Opportunity'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddOpportunityModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddProductModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":23,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[472,481],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n  CircularProgress,\n  Box,\n  Grid,\n  Autocomplete,\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { useQuery } from '@tanstack/react-query';\nimport { getProducts } from '../services/masterService';\ninterface AddProductModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n  initialName?: string;\n}\ninterface ProductFormData {\n  product_name: string;\n  hsn_code: string;\n  part_number: string;\n  unit: string;\n  unit_price: number;\n  gst_rate: number;\n  is_gst_inclusive: boolean;\n  reorder_level: number;\n  description: string;\n  is_manufactured: boolean;\n}\ninterface Product {\n  product_name: string;\n  hsn_code: string;\n  unit: string;\n  gst_rate: number;\n}\nconst AddProductModal: React.FC<AddProductModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false,\n  initialName = ''\n}) => {\n  const { register, handleSubmit, reset, watch, setValue, formState: { errors } } = useForm<ProductFormData>({\n    defaultValues: {\n      product_name: initialName,\n      hsn_code: '',\n      part_number: '',\n      unit: 'PCS',\n      unit_price: 0,\n      gst_rate: 18,\n      is_gst_inclusive: false,\n      reorder_level: 0,\n      description: '',\n      is_manufactured: false,\n    }\n  });\n  // Watch form values for bidirectional updates\n  const watchedProductName = watch('product_name');\n  const watchedHsnCode = watch('hsn_code');\n  // Fetch all products for autocomplete functionality\n  const { data: allProducts = [], isLoading: productsLoading } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts,\n    enabled: open, // Only fetch when modal is open\n    staleTime: 300000, // 5 minutes cache\n  });\n  // Create unique HSN codes list from existing products\n  const uniqueHsnCodes = React.useMemo(() => {\n    const hsnSet = new Set<string>();\n    allProducts.forEach((product: Product) => {\n      if (product.hsn_code && product.hsn_code.trim()) {\n        hsnSet.add(product.hsn_code.trim());\n      }\n    });\n    return Array.from(hsnSet).sort();\n  }, [allProducts]);\n  // Create product suggestions based on HSN code\n  const getProductsByHsn = React.useCallback((hsnCode: string): Product[] => {\n    if (!hsnCode.trim()) {return [];}\n    return allProducts.filter((product: Product) => \n      product.hsn_code && product.hsn_code.toLowerCase().includes(hsnCode.toLowerCase())\n    );\n  }, [allProducts]);\n  // Create HSN suggestions based on product name\n  const getHsnByProductName = React.useCallback((productName: string) => {\n    if (!productName.trim()) {return [];}\n    const matchingProducts = allProducts.filter((product: Product) =>\n      product.product_name.toLowerCase().includes(productName.toLowerCase())\n    );\n    const hsnCodes = matchingProducts\n      .map((product: Product) => product.hsn_code)\n      .filter((hsn: string) => hsn && hsn.trim())\n      .filter((hsn: string, index: number, array: string[]) => array.indexOf(hsn) === index); // unique\n    return hsnCodes;\n  }, [allProducts]);\n  React.useEffect(() => {\n    if (open && initialName) {\n      reset({ \n        product_name: initialName,\n        hsn_code: '',\n        part_number: '',\n        unit: 'PCS',\n        unit_price: 0,\n        gst_rate: 18,\n        is_gst_inclusive: false,\n        reorder_level: 0,\n        description: '',\n        is_manufactured: false,\n      });\n    }\n  }, [open, initialName, reset]);\n  // Bidirectional auto-population logic\n  React.useEffect(() => {\n    // When product name changes, suggest HSN codes\n    if (watchedProductName && watchedProductName.length > 2) {\n      const suggestedHsns = getHsnByProductName(watchedProductName);\n      if (suggestedHsns.length === 1 && !watchedHsnCode) {\n        // Auto-populate if there's exactly one matching HSN and HSN field is empty\n        setValue('hsn_code', suggestedHsns[0]);\n      }\n    }\n  }, [watchedProductName, watchedHsnCode, getHsnByProductName, setValue]);\n  React.useEffect(() => {\n    // When HSN code changes, suggest product info\n    if (watchedHsnCode && watchedHsnCode.length > 2) {\n      const matchingProducts = getProductsByHsn(watchedHsnCode);\n      if (matchingProducts.length > 0 && !watchedProductName) {\n        // If there's a strong match and product name is empty, suggest the most common unit/gst_rate\n        const commonUnit = matchingProducts[0].unit;\n        const commonGstRate = matchingProducts[0].gst_rate;\n        if (commonUnit && commonUnit !== 'PCS') {\n          setValue('unit', commonUnit);\n        }\n        if (commonGstRate && commonGstRate !== 18) {\n          setValue('gst_rate', commonGstRate);\n        }\n      }\n    }\n  }, [watchedHsnCode, watchedProductName, getProductsByHsn, setValue]);\n  const onSubmit = async (productData: ProductFormData) => {\n    try {\n      // Remove empty fields to match backend schema to match backend schema\n      const allowedFields = ['product_name', 'hsn_code', 'part_number', 'unit', 'unit_price', 'gst_rate', 'is_gst_inclusive', 'reorder_level', 'description', 'is_manufactured'];\n      const cleanData = Object.fromEntries(\n        Object.entries(productData).filter(([key, value]) => {\n          if (key === 'unit_price' || key === 'gst_rate' || key === 'reorder_level') {\n            return true;  // Send 0 values for numbers as they are meaningful defaults\n          }\n          return allowedFields.includes(key) && value !== null && String(value).trim() !== '';\n        })\n      );\n      await onAdd(cleanData);\n      reset();\n      onClose();  // Close modal on success\n    } catch (error) {\n      console.error('Error adding product:', error);\n    }\n  };\n  const handleClose = () => {\n    reset();\n    onClose();\n  };\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { minHeight: '500px' }\n      }}\n    >\n      <DialogTitle>\n        <Typography variant=\"h6\" component=\"div\">\n          Add New Product\n        </Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Product Name\"\n                {...register('product_name', { required: 'Product name is required' })}\n                error={!!errors.product_name}\n                helperText={\n                  errors.product_name?.message || \n                  (watchedProductName && watchedProductName.length > 2 && getHsnByProductName(watchedProductName).length > 0\n                    ? `Suggested HSN: ${getHsnByProductName(watchedProductName).slice(0, 3).join(', ')}`\n                    : undefined)\n                }\n                disabled={loading}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <Autocomplete\n                freeSolo\n                options={uniqueHsnCodes}\n                value={watchedHsnCode || ''}\n                onInputChange={(_, newValue) => {\n                  setValue('hsn_code', newValue || '');\n                }}\n                onChange={(_, newValue) => {\n                  setValue('hsn_code', newValue || '');\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    fullWidth\n                    label=\"HSN Code\"\n                    placeholder=\"Search or enter HSN code...\"\n                    disabled={loading}\n                    helperText={\n                      watchedHsnCode && getProductsByHsn(watchedHsnCode).length > 0\n                        ? `Found ${getProductsByHsn(watchedHsnCode).length} product(s) with this HSN`\n                        : undefined\n                    }\n                    InputProps={{\n                      ...params.InputProps,\n                      endAdornment: (\n                        <>\n                          {productsLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                          {params.InputProps.endAdornment}\n                        </>\n                      ),\n                    }}\n                  />\n                )}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <Box sx={{ width: '100%' }}>\n                      <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\n                        {option}\n                      </Typography>\n                      {getProductsByHsn(option).length > 0 && (\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {getProductsByHsn(option).length} product(s): {getProductsByHsn(option).slice(0, 2).map((p: Product) => p.product_name).join(', ')}\n                          {getProductsByHsn(option).length > 2 && '...'}\n                        </Typography>\n                      )}\n                    </Box>\n                  </Box>\n                )}\n                noOptionsText=\"No HSN codes found\"\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Part Number\"\n                {...register('part_number')}\n                disabled={loading}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Unit\"\n                {...register('unit', { required: 'Unit is required' })}\n                error={!!errors.unit}\n                helperText={errors.unit?.message}\n                disabled={loading}\n                placeholder=\"e.g., PCS, KG, METER\"\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Unit Price\"\n                type=\"number\"\n                inputProps={{ step: 0.01 }}\n                {...register('unit_price', { \n                  required: 'Unit price is required',\n                  min: { value: 0.01, message: 'Price must be greater than 0' },\n                  valueAsNumber: true \n                })}\n                error={!!errors.unit_price}\n                helperText={errors.unit_price?.message}\n                disabled={loading}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"GST Rate (%)\"\n                type=\"number\"\n                inputProps={{ step: 0.01 }}\n                {...register('gst_rate', { \n                  min: { value: 0, message: 'GST rate must be positive' },\n                  max: { value: 100, message: 'GST rate cannot exceed 100%' },\n                  valueAsNumber: true \n                })}\n                error={!!errors.gst_rate}\n                helperText={errors.gst_rate?.message}\n                disabled={loading}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Reorder Level\"\n                type=\"number\"\n                {...register('reorder_level', { \n                  min: { value: 0, message: 'Reorder level must be positive' },\n                  valueAsNumber: true \n                })}\n                error={!!errors.reorder_level}\n                helperText={errors.reorder_level?.message}\n                disabled={loading}\n              />\n            </Grid>\n            <Grid size={{ xs: 12 }}>\n              <TextField\n                fullWidth\n                label=\"Description\"\n                multiline\n                rows={3}\n                {...register('description')}\n                disabled={loading}\n              />\n            </Grid>\n            <Grid size={{ xs: 12 }}>\n              <Box sx={{ display: 'flex', gap: 2 }}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      {...register('is_gst_inclusive')}\n                      disabled={loading}\n                    />\n                  }\n                  label=\"GST Inclusive\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      {...register('is_manufactured')}\n                      disabled={loading}\n                    />\n                  }\n                  label=\"Manufactured Item\"\n                />\n              </Box>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions sx={{ px: 3, pb: 2 }}>\n          <Button \n            onClick={handleClose}\n            disabled={loading}\n            color=\"inherit\"\n          >\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\"\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Product'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddProductModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddShippingAddressModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":21,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[475,484],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":82,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"key"},"fix":{"range":[2518,2521],"text":""},"desc":"Remove unused variable 'key'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useCallback } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Grid,\n  Alert,\n  InputAdornment,\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\nimport debounce from 'lodash/debounce';\ninterface AddShippingAddressModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd: (data: any) => Promise<void>;\n  loading?: boolean;\n}\ninterface ShippingAddressFormData {\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  country: string;\n}\nconst AddShippingAddressModal: React.FC<AddShippingAddressModalProps> = ({ \n  open, \n  onClose, \n  onAdd, \n  loading = false \n}) => {\n  const { register, handleSubmit, reset, formState: { errors }, setValue, watch } = useForm<ShippingAddressFormData>({\n    defaultValues: {\n      address1: '',\n      address2: '',\n      city: '',\n      state: '',\n      pin_code: '',\n      state_code: '',\n      country: 'India',\n    }\n  });\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError, clearData } = usePincodeLookup();\n  // Auto-populate address fields when pincode data is available\n  useEffect(() => {\n    if (pincodeData) {\n      console.log('Auto-populating fields with PIN data:', pincodeData);\n      setValue('city', pincodeData.city, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n      setValue('state', pincodeData.state, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n      setValue('state_code', pincodeData.state_code, { shouldDirty: true, shouldTouch: true, shouldValidate: true });\n    }\n  }, [pincodeData, setValue]);\n  // Debounced lookup function\n  const debouncedLookup = useCallback(\n    debounce((pin: string) => {\n      console.log('Executing debounced lookup for PIN:', pin);\n      lookupPincode(pin);\n    }, 500),\n    [lookupPincode]\n  );\n  // Handle PIN change\n  const handlePinChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const pin = e.target.value;\n    console.log('PIN field onChange triggered, value:', pin);\n    if (pin && /^\\d{6}$/.test(pin)) {\n      debouncedLookup(pin);\n    } else {\n      clearData();\n    }\n  };\n  // Handle form submission\n  const onSubmit = async (shippingData: ShippingAddressFormData) => {\n    try {\n      const cleanData = Object.fromEntries(\n        Object.entries(shippingData).filter(([key, value]) => value && value.trim() !== '')\n      );\n      await onAdd(cleanData);\n      reset();\n      onClose();\n    } catch (error) {\n      console.error('Error adding shipping address:', error);\n    }\n  };\n  const handleClose = () => {\n    reset();\n    clearData();\n    onClose();\n  };\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add Shipping Address</Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 1\"\n                {...register('address1', { required: 'Address is required' })}\n                error={!!errors.address1}\n                helperText={errors.address1?.message}\n                margin=\"normal\"\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 2\"\n                {...register('address2')}\n                margin=\"normal\"\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 4 }}>\n              <TextField\n                fullWidth\n                label=\"PIN Code *\"\n                {...register('pin_code', { \n                  required: 'PIN code is required',\n                  pattern: {\n                    value: /^\\d{6}$/,\n                    message: 'Please enter a valid 6-digit PIN code'\n                  }\n                })}\n                error={!!errors.pin_code}\n                helperText={errors.pin_code?.message || (pincodeError && pincodeError)}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: pincodeLoading ? (\n                    <InputAdornment position=\"end\">\n                      <CircularProgress size={16} />\n                    </InputAdornment>\n                  ) : null,\n                }}\n                onChange={handlePinChange}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 4 }}>\n              <TextField\n                fullWidth\n                label=\"City\"\n                {...register('city', { required: 'City is required' })}\n                error={!!errors.city}\n                helperText={errors.city?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('city') || !!pincodeData,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 4 }}>\n              <TextField\n                fullWidth\n                label=\"State\"\n                {...register('state', { required: 'State is required' })}\n                error={!!errors.state}\n                helperText={errors.state?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state') || !!pincodeData,\n                }}\n                sx={{\n                  '& .MuiInputBase-root': {\n                    height: '40px',\n                  },\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"State Code\"\n                {...register('state_code', { required: 'State code is required' })}\n                error={!!errors.state_code}\n                helperText={errors.state_code?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state_code') || !!pincodeData,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Country\"\n                {...register('country', { required: 'Country is required' })}\n                error={!!errors.country}\n                helperText={errors.country?.message}\n                margin=\"normal\"\n              />\n            </Grid>\n            {pincodeError && (\n              <Grid size={12}>\n                <Alert severity=\"warning\" sx={{ mt: 1 }}>\n                  {pincodeError}\n                </Alert>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Address'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddShippingAddressModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddUserDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AddVendorModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":29,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[668,677],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/AddVendorModal.tsx\nimport React, { useEffect, useState, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n  Grid as Grid,\n  Alert,\n  InputAdornment,\n  Box,\n  Paper,\n  Chip,\n  Tooltip,\n  LinearProgress,\n  IconButton,\n} from '@mui/material';\nimport { CloudUpload, Description, CheckCircle, Search } from '@mui/icons-material';\nimport { useForm } from 'react-hook-form';\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\nimport api from '../lib/api';\ninterface AddVendorModalProps {\n  open: boolean;\n  onClose: () => void;\n  onAdd?: (data: any) => Promise<void>;\n  loading?: boolean;\n  initialName?: string;\n}\ninterface VendorFormData {\n  name: string;\n  contact_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  gst_number: string;\n  pan_number: string;\n  state_code: string;\n}\nconst AddVendorModal: React.FC<AddVendorModalProps> = ({\n  open,\n  onClose,\n  onAdd,\n  loading = false,\n  initialName = ''\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [gstFile, setGstFile] = useState<File | null>(null);\n  const [gstUploadLoading, setGstUploadLoading] = useState(false);\n  const [gstExtractedData, setGstExtractedData] = useState<any>(null);\n  const [gstUploadError, setGstUploadError] = useState<string | null>(null);\n  const [gstSearchLoading, setGstSearchLoading] = useState(false);\n  const { register, handleSubmit, reset, formState: { errors }, setValue, watch } = useForm<VendorFormData>({\n    defaultValues: {\n      name: initialName,\n      contact_number: '',\n      email: '',\n      address1: '',\n      address2: '',\n      city: '',\n      state: '',\n      pin_code: '',\n      gst_number: '',\n      pan_number: '',\n      state_code: '',\n    }\n  });\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError, clearData } = usePincodeLookup();\n  const watchedPincode = watch('pin_code');\n  const watchedGstNumber = watch('gst_number');\n  // Auto-populate form fields when pincode data is available\n  useEffect(() => {\n    if (pincodeData) {\n      setValue('city', pincodeData.city);\n      setValue('state', pincodeData.state);\n      setValue('state_code', pincodeData.state_code);\n    }\n  }, [pincodeData, setValue]);\n  // Handle pincode change with debouncing\n  useEffect(() => {\n    if (watchedPincode && /^\\d{6}$/.test(watchedPincode)) {\n      const timeoutId = setTimeout(() => {\n        lookupPincode(watchedPincode);\n      }, 500); // 500ms debounce\n      return () => clearTimeout(timeoutId);\n    } else {\n      clearData();\n    }\n  }, [watchedPincode, lookupPincode, clearData]);\n  // Handle GST certificate upload with actual API call\n  const handleGstFileUpload = async (file: File) => {\n    setGstUploadLoading(true);\n    setGstUploadError(null);\n    try {\n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append('file', file);\n      // Call backend PDF extraction API\n      const response = await api.post('/pdf-extraction/extract/vendor', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (response.data.success) {\n        const extractedData = response.data.extracted_data;\n        // Auto-populate form fields with processed extracted data\n        Object.entries(extractedData).forEach(([key, value]) => {\n          if (value) {\n            setValue(key as keyof VendorFormData, value as string);\n          }\n        });\n        setGstExtractedData(extractedData);\n        setGstFile(file);\n      } else {\n        const errorMessage = (response.data as any)?.detail || 'Extraction failed';\n        throw new globalThis.Error(errorMessage);\n      }\n    } catch (error: any) {\n      console.error('Error processing GST certificate:', error);\n      setGstUploadError(error.response?.data?.detail || 'Failed to process GST certificate. Please try again.');\n    } finally {\n      setGstUploadLoading(false);\n    }\n  };\n  const handleFileInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/pdf') {\n        setGstUploadError('Please upload a PDF file');\n        return;\n      }\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        setGstUploadError('File size should be less than 10MB');\n        return;\n      }\n      handleGstFileUpload(file);\n    }\n  };\n  const triggerFileUpload = () => {\n    fileInputRef.current?.click();\n  };\n  const removeGstFile = () => {\n    setGstFile(null);\n    setGstExtractedData(null);\n    setGstUploadError(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleGstSearch = async () => {\n    if (!watchedGstNumber || !/^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/.test(watchedGstNumber)) {\n      setGstUploadError('Please enter a valid GSTIN');\n      return;\n    }\n    setGstSearchLoading(true);\n    setGstUploadError(null);\n    try {\n      const response = await api.get(`/gst/search/${watchedGstNumber}`);\n      const data = response.data;\n      // Auto-populate fields from API response\n      Object.entries(data).forEach(([key, value]) => {\n        if (value) {\n          setValue(key as keyof VendorFormData, value as string);\n        }\n      });\n    } catch (error: any) {\n      setGstUploadError(error.response?.data?.detail || 'Failed to fetch GST details. Please check GSTIN.');\n    } finally {\n      setGstSearchLoading(false);\n    }\n  };\n  const onSubmit = async (data: VendorFormData) => {\n    try {\n      // Remove empty fields and exclude unexpected fields like 'is_active'\n      const allowedFields = ['name', 'contact_number', 'email', 'address1', 'address2', 'city', 'state', 'pin_code', 'gst_number', 'pan_number', 'state_code'];\n      const cleanData = Object.fromEntries(\n        Object.entries(data).filter(([key, value]) => allowedFields.includes(key) && value !== null && String(value).trim() !== '')\n      );\n      // Direct API call to save vendor\n      const response = await api.post('/vendors', cleanData);\n      console.log('Vendor added successfully:', response.data);\n      // Call onAdd if provided and is a function\n      if (typeof onAdd === 'function') {\n        await onAdd(response.data);\n      }\n      reset();\n      onClose();  // Close modal on success\n    } catch (error: any) {\n      console.error('Error adding vendor:', error);\n      // Set more specific error message\n      const errorMessage = error.response?.data?.detail || 'Failed to add vendor. Please try again.';\n      setGstUploadError(errorMessage);\n    }\n  };\n  const handleClose = () => {\n    reset();\n    clearData();\n    removeGstFile();\n    onClose();\n  };\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Typography variant=\"h6\">Add New Vendor</Typography>\n      </DialogTitle>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Vendor Name *\"\n                {...register('name', { required: 'Vendor name is required' })}\n                error={!!errors.name}\n                helperText={errors.name?.message}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('name') || !!gstExtractedData?.name,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Contact Number\"\n                {...register('contact_number')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('contact_number') || !!gstExtractedData?.phone,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Email\"\n                type=\"email\"\n                {...register('email', {\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: 'Invalid email address'\n                  }\n                })}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('email') || !!gstExtractedData?.email,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"GST Number\"\n                {...register('gst_number')}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      {gstSearchLoading ? (\n                        <CircularProgress size={16} />\n                      ) : (\n                        <IconButton\n                          onClick={handleGstSearch}\n                          disabled={!watchedGstNumber || gstSearchLoading}\n                          aria-label=\"Search GST\"\n                        >\n                          <Search />\n                        </IconButton>\n                      )}\n                    </InputAdornment>\n                  ),\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('gst_number') || !!gstExtractedData?.gst_number,\n                }}\n              />\n            </Grid>\n            {/* GST Certificate Upload Section */}\n            <Grid size={12}>\n              <Paper sx={{ p: 2, bgcolor: 'grey.50', border: '1px dashed', borderColor: 'grey.300' }}>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    GST Certificate Upload (Optional)\n                  </Typography>\n                  <Tooltip title=\"Upload GST certificate PDF to auto-fill vendor details\">\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      PDF Auto-Extract\n                    </Typography>\n                  </Tooltip>\n                </Box>\n                {!gstFile && !gstUploadLoading && (\n                  <Box\n                    sx={{\n                      border: '2px dashed',\n                      borderColor: 'grey.300',\n                      borderRadius: 1,\n                      p: 3,\n                      textAlign: 'center',\n                      cursor: 'pointer',\n                      '&:hover': {\n                        borderColor: 'primary.main',\n                        bgcolor: 'action.hover'\n                      }\n                    }}\n                    onClick={triggerFileUpload}\n                  >\n                    <CloudUpload sx={{ fontSize: 48, color: 'grey.400', mb: 1 }} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                      Click to upload GST certificate (PDF only)\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"textSecondary\">\n                      Maximum file size: 10MB\n                    </Typography>\n                  </Box>\n                )}\n                {gstUploadLoading && (\n                  <Box sx={{ p: 3, textAlign: 'center' }}>\n                    <CircularProgress size={40} sx={{ mb: 2 }} />\n                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                      Processing GST certificate...\n                    </Typography>\n                    <LinearProgress sx={{ mt: 1 }} />\n                  </Box>\n                )}\n                {gstFile && !gstUploadLoading && (\n                  <Box sx={{ p: 2, bgcolor: 'success.light', borderRadius: 1 }}>\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <Description color=\"primary\" />\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {gstFile.name}\n                        </Typography>\n                        <Chip\n                          icon={<CheckCircle />}\n                          label=\"Processed\"\n                          size=\"small\"\n                          color=\"success\"\n                          variant=\"outlined\"\n                        />\n                      </Box>\n                      <Button\n                        size=\"small\"\n                        onClick={removeGstFile}\n                        color=\"error\"\n                        variant=\"outlined\"\n                      >\n                        Remove\n                      </Button>\n                    </Box>\n                    {gstExtractedData && (\n                      <Alert severity=\"success\" sx={{ mt: 1 }}>\n                        <Typography variant=\"caption\">\n                          Auto-populated: {Object.keys(gstExtractedData).join(', ')}\n                        </Typography>\n                      </Alert>\n                    )}\n                  </Box>\n                )}\n                {gstUploadError && (\n                  <Alert severity=\"error\" sx={{ mt: 1 }} onClose={() => setGstUploadError(null)}>\n                    {gstUploadError}\n                  </Alert>\n                )}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\".pdf\"\n                  style={{ display: 'none' }}\n                  onChange={handleFileInputChange}\n                />\n              </Paper>\n            </Grid>\n            <Grid size={{ xs: 12, md: 6 }}>\n              <TextField\n                fullWidth\n                label=\"PAN Number\"\n                {...register('pan_number')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('pan_number') || !!gstExtractedData?.pan_number,\n                }}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 1\"\n                {...register('address1')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('address1') || !!gstExtractedData?.address1,\n                }}\n              />\n            </Grid>\n            <Grid size={12}>\n              <TextField\n                fullWidth\n                label=\"Address Line 2\"\n                {...register('address2')}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: !!watch('address2') || !!gstExtractedData?.address2,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"PIN Code *\"\n                {...register('pin_code', { \n                  required: 'PIN code is required',\n                  pattern: {\n                    value: /^\\d{6}$/,\n                    message: 'Please enter a valid 6-digit PIN code'\n                  }\n                })}\n                error={!!errors.pin_code}\n                helperText={errors.pin_code?.message || (pincodeError && pincodeError)}\n                margin=\"normal\"\n                InputProps={{\n                  endAdornment: pincodeLoading ? (\n                    <InputAdornment position=\"end\">\n                      <CircularProgress size={16} />\n                    </InputAdornment>\n                  ) : null,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('pin_code') || !!gstExtractedData?.pin_code,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"City\"\n                {...register('city', { required: 'City is required' })}\n                error={!!errors.city}\n                helperText={errors.city?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('city') || !!pincodeData || !!gstExtractedData?.city,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"State\"\n                {...register('state', { required: 'State is required' })}\n                error={!!errors.state}\n                helperText={errors.state?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state') || !!pincodeData || !!gstExtractedData?.state,\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 3 }}>\n              <TextField\n                fullWidth\n                label=\"State Code\"\n                {...register('state_code', { required: 'State code is required' })}\n                error={!!errors.state_code}\n                helperText={errors.state_code?.message}\n                margin=\"normal\"\n                InputProps={{\n                  readOnly: !!pincodeData,\n                }}\n                InputLabelProps={{\n                  shrink: !!watch('state_code') || !!pincodeData || !!gstExtractedData?.state_code,\n                }}\n              />\n            </Grid>\n            {pincodeError && (\n              <Grid size={12}>\n                <Alert severity=\"warning\" sx={{ mt: 1 }}>\n                  {pincodeError}\n                </Alert>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            {loading ? 'Adding...' : 'Add Vendor'}\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\nexport default AddVendorModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AdminUserForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'formData' is defined but never used.","line":5,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"formData"},"fix":{"range":[229,242],"text":""},"desc":"Remove unused variable 'formData'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/AdminUserForm.tsx\nimport React, { useState } from 'react';\nimport { Box, TextField, MenuItem, FormControl, InputLabel, Select, Button } from '@mui/material';\ninterface AdminUserFormProps {\n  onSubmit: (formData: any) => void;\n}\nconst AdminUserForm: React.FC<AdminUserFormProps> = ({ onSubmit }) => {\n  const [formData, setFormData] = useState({\n    email: '',\n    full_name: '',\n    role: 'platform_admin',\n    password: ''\n  });\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n  const handleChange = (field: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({ ...prev, [field]: e.target.value }));\n  };\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\n      <TextField\n        fullWidth\n        label=\"Email\"\n        value={formData.email}\n        onChange={handleChange('email')}\n        required\n        margin=\"normal\"\n      />\n      <TextField\n        fullWidth\n        label=\"Full Name\"\n        value={formData.full_name}\n        onChange={handleChange('full_name')}\n        margin=\"normal\"\n      />\n      <FormControl fullWidth margin=\"normal\">\n        <InputLabel>Role</InputLabel>\n        <Select\n          label=\"Role\"\n          value={formData.role}\n          onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}\n        >\n          <MenuItem value=\"platform_admin\">Platform Admin</MenuItem>\n        </Select>\n      </FormControl>\n      <TextField\n        fullWidth\n        label=\"Password\"\n        type=\"password\"\n        value={formData.password}\n        onChange={handleChange('password')}\n        required\n        margin=\"normal\"\n      />\n      <Button type=\"submit\" variant=\"contained\" fullWidth sx={{ mt: 2 }}>\n        Create User\n      </Button>\n    </Box>\n  );\n};\nexport default AdminUserForm;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AlertsFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/AuthProvider.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'email' is defined but never used.","line":16,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"email"},"fix":{"range":[397,411],"text":""},"desc":"Remove unused variable 'email'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'password' is defined but never used.","line":16,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"password"},"fix":{"range":[410,428],"text":""},"desc":"Remove unused variable 'password'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'refreshToken' was used before it was defined.","line":45,"column":15,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":45,"endColumn":27},{"ruleId":"no-use-before-define","severity":2,"message":"'logout' was used before it was defined.","line":54,"column":25,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":54,"endColumn":31},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchUser' was used before it was defined.","line":59,"column":13,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":59,"endColumn":22},{"ruleId":"no-use-before-define","severity":2,"message":"'logout' was used before it was defined.","line":63,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":63,"endColumn":13}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/AuthProvider.tsx\nimport React, {ReactNode, createContext, useEffect, useState} from 'react';\nimport { useRouter } from 'next/router';\nimport { jwtDecode } from 'jwt-decode';\nimport axios from 'axios';\ninterface User {\n  id: number;\n  email: string;\n}\ninterface JwtPayload {\n  exp: number;\n}\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<void>;\n}\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n  const api = axios.create({\n    baseURL: '/api/v1',\n  });\n  api.interceptors.request.use(\n    (config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => Promise.reject(error)\n  );\n  api.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n      const originalRequest = error.config;\n      if (error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n// refreshToken is defined later in this file\n        await refreshToken();\n        return api(originalRequest);\n      }\n      return Promise.reject(error);\n    }\n  );\n  const refreshToken = async () => {\n    const token = localStorage.getItem('token');\n// logout is defined later in this file\n    if (!token) {return logout();}\n    try {\n      const response = await api.post('/auth/refresh-token');\n      localStorage.setItem('token', response.data.access_token);\n// fetchUser is defined later in this file\n      await fetchUser();\n    } catch (refreshError) {\n      console.error('Token refresh failed', refreshError);\n// logout is defined later in this file\n      logout();\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    router.push('/login');\n  };\n  const fetchUser = async () => {\n    try {\n      const response = await api.get('/users/me');\n      setUser(response.data);\n    } catch (fetchError) {\n      console.error('Fetch user error', fetchError);\n      throw fetchError;\n    }\n  };\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const decoded: JwtPayload = jwtDecode(token);\n          if (decoded.exp * 1000 < Date.now()) {\n            console.log('Token expired on load, logging out');\n            logout();\n            return;\n          }\n          await fetchUser();\n        } catch (authError) {\n          console.error('Auth check failed', authError);\n          logout();\n        }\n      } else {\n        logout();\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await api.post('/auth/login/email', { email, password });\n      localStorage.setItem('token', response.data.access_token);\n      setUser(response.data.user);\n      router.push('/dashboard');\n    } catch (loginError) {\n      console.error('Login error', loginError);\n      throw loginError;\n    }\n  };\n  return (\n    <AuthContext.Provider value={{ user, loading, login, logout, refreshToken }}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\nexport const useAuth = (): AuthContextType => {\n  const context = React.useContext(AuthContext);\n  if (undefined === context) {throw new Error('useAuth must be used within AuthProvider');}\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/BalanceDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CompanyDetailsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CompanyLogoUpload.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'logoPath' is defined but never used.","line":26,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"logoPath"},"fix":{"range":[542,565],"text":""},"desc":"Remove unused variable 'logoPath'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  IconButton,\n  Paper,\n  CircularProgress,\n  Alert,\n  Avatar,\n  Tooltip,\n  Stack\n} from '@mui/material';\nimport {\n  CloudUpload,\n  Delete,\n  PhotoCamera,\n  Business\n} from '@mui/icons-material';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { companyService } from '../services/authService';\ninterface CompanyLogoUploadProps {\n  companyId: number;\n  currentLogoPath?: string | null;\n  disabled?: boolean;\n  onLogoChange?: (logoPath: string | null) => void;\n}\nconst CompanyLogoUpload: React.FC<CompanyLogoUploadProps> = ({\n  companyId,\n  currentLogoPath,\n  disabled = false,\n  onLogoChange\n}) => {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(currentLogoPath || null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  // Upload mutation\n  const uploadMutation = useMutation({\n    mutationFn: (file: File) => companyService.uploadLogo(companyId, file),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['company'] });\n      setPreviewUrl(companyService.getLogoUrl(companyId));\n      setUploadError(null);\n      if (onLogoChange) {\n        onLogoChange(data.logo_path);\n      }\n    },\n    onError: (error: any) => {\n      setUploadError(error.message || 'Failed to upload logo');\n    },\n  });\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: () => companyService.deleteLogo(companyId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['company'] });\n      setPreviewUrl(null);\n      setUploadError(null);\n      if (onLogoChange) {\n        onLogoChange(null);\n      }\n    },\n    onError: (error: any) => {\n      setUploadError(error.message || 'Failed to delete logo');\n    },\n  });\n  const validateFile = (file: File): string | null => {\n    // Check file type\n    if (!file.type.startsWith('image/')) {\n      return 'Please select an image file (PNG, JPG, JPEG, GIF, etc.)';\n    }\n    // Check file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      return 'Logo file size must be less than 5MB';\n    }\n    return null;\n  };\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files || files.length === 0) {return;}\n    const file = files[0];\n    const validationError = validateFile(file);\n    if (validationError) {\n      setUploadError(validationError);\n      return;\n    }\n    // Create preview URL\n    const objectUrl = URL.createObjectURL(file);\n    setPreviewUrl(objectUrl);\n    // Upload file\n    uploadMutation.mutate(file);\n  };\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    if (!disabled) {\n      handleFileSelect(e.dataTransfer.files);\n    }\n  };\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (!disabled) {\n      setIsDragOver(true);\n    }\n  };\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFileSelect(e.target.files);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleUploadClick = () => {\n    fileInputRef.current?.click();\n  };\n  const handleDeleteLogo = () => {\n    deleteMutation.mutate();\n  };\n  const isLoading = uploadMutation.isPending || deleteMutation.isPending;\n  return (\n    <Box>\n      <Typography variant=\"subtitle2\" gutterBottom>\n        Company Logo\n      </Typography>\n      {uploadError && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {uploadError}\n        </Alert>\n      )}\n      <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n        {/* Logo Preview */}\n        <Avatar\n          src={previewUrl || undefined}\n          sx={{\n            width: 80,\n            height: 80,\n            bgcolor: 'grey.200',\n            border: '2px solid',\n            borderColor: 'grey.300'\n          }}\n        >\n          {!previewUrl && <Business sx={{ fontSize: 40, color: 'grey.500' }} />}\n        </Avatar>\n        {/* Upload Area */}\n        <Box sx={{ flex: 1 }}>\n          {!previewUrl ? (\n            <Paper\n              sx={{\n                p: 2,\n                border: '2px dashed',\n                borderColor: isDragOver ? 'primary.main' : 'grey.300',\n                bgcolor: isDragOver ? 'action.hover' : 'background.paper',\n                cursor: disabled ? 'default' : 'pointer',\n                textAlign: 'center',\n                transition: 'all 0.2s ease-in-out',\n                minHeight: 80,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n              onDrop={handleDrop}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onClick={disabled ? undefined : handleUploadClick}\n            >\n              {isLoading ? (\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <CircularProgress size={20} />\n                  <Typography variant=\"body2\">\n                    {uploadMutation.isPending ? 'Uploading...' : 'Processing...'}\n                  </Typography>\n                </Box>\n              ) : (\n                <Box>\n                  <CloudUpload sx={{ fontSize: 32, color: 'grey.500', mb: 1 }} />\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    Drag & drop logo here or click to upload\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    PNG, JPG, JPEG, GIF up to 5MB\n                  </Typography>\n                </Box>\n              )}\n            </Paper>\n          ) : (\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              <Tooltip title=\"Change Logo\">\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<PhotoCamera />}\n                  onClick={handleUploadClick}\n                  disabled={disabled || isLoading}\n                  size=\"small\"\n                >\n                  Change\n                </Button>\n              </Tooltip>\n              <Tooltip title=\"Remove Logo\">\n                <IconButton\n                  color=\"error\"\n                  onClick={handleDeleteLogo}\n                  disabled={disabled || isLoading}\n                  size=\"small\"\n                >\n                  <Delete />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          )}\n        </Box>\n      </Stack>\n      {/* Hidden file input */}\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileInputChange}\n        accept=\"image/*\"\n        style={{ display: 'none' }}\n        disabled={disabled}\n      />\n    </Box>\n  );\n};\nexport default CompanyLogoUpload;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CompanySetupGuard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CreateOrganizationLicenseModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[334,345],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Accordion' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Accordion"},"fix":{"range":[390,403],"text":""},"desc":"Remove unused variable 'Accordion'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionSummary' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionSummary"},"fix":{"range":[403,423],"text":""},"desc":"Remove unused variable 'AccordionSummary'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionDetails' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionDetails"},"fix":{"range":[423,443],"text":""},"desc":"Remove unused variable 'AccordionDetails'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used.","line":34,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"result"},"fix":{"range":[767,778],"text":""},"desc":"Remove unused variable 'result'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/CreateOrganizationLicenseModal.tsx\n'use client';\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Alert,\n  CircularProgress,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Grid as Grid,\n  Divider,\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { organizationService } from '../services/organizationService'; // Adjust if needed\nimport { usePincodeLookup } from '../hooks/usePincodeLookup';\ninterface CreateOrganizationLicenseModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSuccess?: (result: any) => void;\n}\ninterface LicenseFormData {\n  organization_name: string;\n  superadmin_email: string;\n  primary_phone: string;\n  address1: string;\n  pin_code: string;\n  city: string;\n  state: string;\n  state_code: string;\n  gst_number?: string;\n  max_users: number;\n}\n// Indian states for dropdown selection\nconst INDIAN_STATES = [\n  'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh', \n  'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir',\n  'Jharkhand', 'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra',\n  'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab',\n  'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura',\n  'Uttar Pradesh', 'Uttarakhand', 'West Bengal', 'Andaman and Nicobar Islands',\n  'Chandigarh', 'Dadra and Nagar Haveli and Daman and Diu', 'Lakshadweep',\n  'Delhi', 'Puducherry', 'Ladakh'\n];\n// State to GST state code mapping\nconst stateToCodeMap: { [key: string]: string } = {\n  'Andhra Pradesh': '37',\n  'Arunachal Pradesh': '12',\n  'Assam': '18',\n  'Bihar': '10',\n  'Chhattisgarh': '22',\n  'Goa': '30',\n  'Gujarat': '24',\n  'Haryana': '06',\n  'Himachal Pradesh': '02',\n  'Jammu and Kashmir': '01',\n  'Jharkhand': '20',\n  'Karnataka': '29',\n  'Kerala': '32',\n  'Madhya Pradesh': '23',\n  'Maharashtra': '27',\n  'Manipur': '14',\n  'Meghalaya': '17',\n  'Mizoram': '15',\n  'Nagaland': '13',\n  'Odisha': '21',\n  'Punjab': '03',\n  'Rajasthan': '08',\n  'Sikkim': '11',\n  'Tamil Nadu': '33',\n  'Telangana': '36',\n  'Tripura': '16',\n  'Uttar Pradesh': '09',\n  'Uttarakhand': '05',\n  'West Bengal': '19',\n  'Andaman and Nicobar Islands': '35',\n  'Chandigarh': '04',\n  'Dadra and Nagar Haveli and Daman and Diu': '26',\n  'Lakshadweep': '31',\n  'Delhi': '07',\n  'Puducherry': '34',\n  'Ladakh': '38',\n};\nconst CreateOrganizationLicenseModal: React.FC<CreateOrganizationLicenseModalProps> = ({\n  open,\n  onClose,\n  onSuccess\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<any | null>(null);\n  const [moduleDialogOpen, setModuleDialogOpen] = useState(false);\n  const [licenseActivationOpen, setLicenseActivationOpen] = useState(false);\n  const [activationPeriod, setActivationPeriod] = useState<'month' | 'year' | 'perpetual'>('year');\n  const [selectedModules, setSelectedModules] = useState({\n    \"CRM\": true,\n    \"ERP\": true,\n    \"HR\": true,\n    \"Inventory\": true,\n    \"Service\": true,\n    \"Analytics\": true,\n    \"Finance\": true\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue,\n    watch\n  } = useForm<LicenseFormData>({\n    defaultValues: {\n      max_users: 5, // Default value\n    },\n  });\n  // Use the enhanced pincode lookup hook\n  const { lookupPincode, pincodeData, loading: pincodeLoading, error: pincodeError } = usePincodeLookup();\n  const pin_code = watch('pin_code');\n  const state = watch('state');\n  // Auto-populate city, state, and state_code when pin code changes\n  useEffect(() => {\n    if (pin_code && pin_code.length === 6 && /^\\d{6}$/.test(pin_code)) {\n      lookupPincode(pin_code);\n    }\n  }, [pin_code, lookupPincode]);\n  // Auto-populate fields when pincode data is fetched\n  useEffect(() => {\n    if (pincodeData) {\n      setValue('city', pincodeData.city, { shouldValidate: true });\n      setValue('state', pincodeData.state, { shouldValidate: true });\n      setValue('state_code', pincodeData.state_code, { shouldValidate: true });\n    }\n  }, [pincodeData, setValue]);\n  // Auto-populate state_code when state changes\n  useEffect(() => {\n    if (state) {\n      const code = stateToCodeMap[state];\n      if (code) {\n        setValue('state_code', code, { shouldValidate: true });\n      }\n    }\n  }, [state, setValue]);\n  const handleClose = () => {\n    reset();\n    setError(null);\n    setSuccess(null);\n    onClose();\n  };\n  const onSubmit = async (data: LicenseFormData) => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    console.log('[LicenseModal] Starting license creation process');\n    console.log('[LicenseModal] Current auth state before license creation:', {\n      hasToken: !!localStorage.getItem('token'),\n      userRole: localStorage.getItem('user_role'),\n      timestamp: new Date().toISOString(),\n      note: 'Organization context managed by backend session'\n    });\n    // Validate required fields that might not be caught by form validation\n    if (!data.state) {\n      setError('Please select a state');\n      setLoading(false);\n      return;\n    }\n    // Prepare the data for submission\n    const submissionData = {\n      organization_name: data.organization_name.trim(),\n      superadmin_email: data.superadmin_email.trim(),\n      primary_phone: data.primary_phone?.trim(),\n      address1: data.address1.trim(),\n      pin_code: data.pin_code.trim(),\n      city: data.city.trim(),\n      state: data.state.trim(),\n      state_code: data.state_code.trim(),\n      gst_number: data.gst_number?.trim() || undefined, // Optional field\n      max_users: data.max_users,\n      enabled_modules: selectedModules, // Include selected modules\n    };\n    console.log('[LicenseModal] Submitting license data:', submissionData);\n    try {\n      const result = await organizationService.createLicense(submissionData);\n      if (!result || typeof result !== 'object') {\n        throw new Error('Invalid response from server');\n      }\n      console.log('[LicenseModal] License creation successful:', {\n        organizationName: result.organization_name,\n        subdomain: result.subdomain,\n        adminEmail: result.superadmin_email\n      });\n      // Verify current user's session is still intact\n      console.log('[LicenseModal] Verifying session after license creation:', {\n        hasToken: !!localStorage.getItem('token'),\n        userRole: localStorage.getItem('user_role'),\n        timestamp: new Date().toISOString(),\n        note: 'Organization context managed by backend session'\n      });\n      setSuccess(result);\n      if (onSuccess) {\n        onSuccess(result);\n      }\n      // Show license activation dialog after successful creation\n      setLicenseActivationOpen(true);\n      // IMPORTANT: Auto-login functionality removed to preserve current user's session\n      // The current super admin remains logged in and sees the success message\n      console.log('[LicenseModal] License creation complete - current user session preserved');\n    } catch (err: any) {\n      console.error('[LicenseModal] License creation error:', err);\n      console.error('[LicenseModal] Error details:', {\n        message: err.message,\n        status: err.status,\n        userMessage: err.userMessage\n      });\n      setError(err.message || 'Failed to create organization license. Please check if RBAC initialization succeeded or run init_rbac_for_org.py manually.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleModuleChange = (module: string, enabled: boolean) => {\n    setSelectedModules(prev => ({\n      ...prev,\n      [module]: enabled\n    }));\n  };\n  const handleOpenModuleDialog = () => {\n    setModuleDialogOpen(true);\n  };\n  const handleCloseModuleDialog = () => {\n    setModuleDialogOpen(false);\n  };\n  return (\n    <>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"lg\" fullWidth>\n        <DialogTitle sx={{ \n          textAlign: 'center', \n          fontWeight: 'bold',\n          pb: 1,\n          borderBottom: '1px solid',\n          borderColor: 'divider'\n        }}>\n          Create Organization License\n        </DialogTitle>\n        <DialogContent sx={{ pt: 3 }}>\n          <Box>\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 3 }}>\n                {error}\n              </Alert>\n            )}\n            {success && (\n              <Alert severity=\"success\" sx={{ mb: 3 }}>\n                <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold', color: 'success.dark' }}>\n                  🎉 License Created Successfully!\n                </Typography>\n                <Box sx={{ mt: 2, p: 2, bgcolor: 'success.50', borderRadius: 1, border: '1px solid', borderColor: 'success.200' }}>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Organization:</strong> {success.organization_name}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Subdomain:</strong> {success.subdomain}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Admin Email:</strong> {success.superadmin_email}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    <strong>Temporary Password:</strong> \n                    <Box component=\"span\" sx={{ \n                      ml: 1, \n                      p: 0.5, \n                      bgcolor: 'warning.100', \n                      borderRadius: 0.5,\n                      fontFamily: 'monospace',\n                      fontSize: '0.9em'\n                    }}>\n                      {success.temp_password}\n                    </Box>\n                  </Typography>\n                </Box>\n                <Alert severity=\"warning\" sx={{ mt: 2 }}>\n                  <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                    ⚠️ Important: Save these credentials immediately!\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                    This password will not be displayed again. The admin must change it on first login.\n                  </Typography>\n                </Alert>\n              </Alert>\n            )}\n            {!success && (\n              <form onSubmit={handleSubmit(onSubmit)}>\n                {/* Organization Information Section */}\n                <Box sx={{ mb: 4 }}>\n                  <Typography variant=\"h6\" sx={{ \n                    mb: 2, \n                    fontWeight: 'bold', \n                    color: 'primary.main',\n                    borderBottom: '2px solid',\n                    borderColor: 'primary.main',\n                    pb: 0.5\n                  }}>\n                    📋 Organization Information\n                  </Typography>\n                  <Grid container spacing={3}>\n                    <Grid size={12}>\n                      <TextField\n                        fullWidth\n                        label=\"Organization Name\"\n                        placeholder=\"Enter your organization's full legal name\"\n                        {...register('organization_name', {\n                          required: 'Organization name is required',\n                          minLength: {\n                            value: 3,\n                            message: 'Organization name must be at least 3 characters'\n                          }\n                        })}\n                        error={!!errors.organization_name}\n                        helperText={errors.organization_name?.message || 'This will be used for official documents and branding'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"Primary/Admin Email\"\n                        type=\"email\"\n                        placeholder=\"admin@yourorganization.com\"\n                        {...register('superadmin_email', {\n                          required: 'Primary email is required',\n                          pattern: {\n                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                            message: 'Please enter a valid email address'\n                          }\n                        })}\n                        error={!!errors.superadmin_email}\n                        helperText={errors.superadmin_email?.message || 'This will be the admin login email'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"Primary Phone Number\"\n                        placeholder=\"+91-1234567890\"\n                        {...register('primary_phone', {\n                          required: 'Primary phone is required',\n                          pattern: {\n                            value: /^[+\\0-9\\s()-]{10,15}$/,\n                            message: 'Enter a valid phone number (10-15 digits)'\n                          }\n                        })}\n                        error={!!errors.primary_phone}\n                        helperText={errors.primary_phone?.message || 'Include country code for international numbers'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"Maximum Users\"\n                        type=\"number\"\n                        inputProps={{ min: 1, max: 1000 }}\n                        {...register('max_users', {\n                          required: 'Maximum users is required',\n                          min: {\n                            value: 1,\n                            message: 'Must allow at least 1 user'\n                          },\n                          max: {\n                            value: 1000,\n                            message: 'Cannot exceed 1000 users'\n                          }\n                        })}\n                        error={!!errors.max_users}\n                        helperText={errors.max_users?.message || 'Number of users allowed in this organization'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"GST Number (Optional)\"\n                        placeholder=\"22AAAAA0000A1Z5\"\n                        {...register('gst_number', {\n                          pattern: {\n                            value: /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/,\n                            message: 'Invalid GST format (15 characters: 22AAAAA0000A1Z5)'\n                          }\n                        })}\n                        error={!!errors.gst_number}\n                        helperText={errors.gst_number?.message || 'Leave empty if not applicable'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                  </Grid>\n                </Box>\n                {/* Address Information Section */}\n                <Box sx={{ mb: 4 }}>\n                  <Typography variant=\"h6\" sx={{ \n                    mb: 2, \n                    fontWeight: 'bold', \n                    color: 'secondary.main',\n                    borderBottom: '2px solid',\n                    borderColor: 'secondary.main',\n                    pb: 0.5\n                  }}>\n                    🏢 Address Information\n                  </Typography>\n                  <Grid container spacing={3}>\n                    <Grid size={12}>\n                      <TextField\n                        fullWidth\n                        label=\"Full Address\"\n                        multiline\n                        rows={3}\n                        placeholder=\"Enter complete address including building, street, and area\"\n                        {...register('address1', {\n                          required: 'Address is required',\n                          minLength: {\n                            value: 10,\n                            message: 'Please provide a complete address'\n                          }\n                        })}\n                        error={!!errors.address1}\n                        helperText={errors.address1?.message || 'Include building name, street, and locality'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid size={{ xs: 12, md: 4 }}>\n                      <TextField\n                        fullWidth\n                        label=\"PIN Code\"\n                        placeholder=\"123456\"\n                        {...register('pin_code', {\n                          required: 'PIN code is required',\n                          pattern: {\n                            value: /^\\d{6}$/,\n                            message: 'PIN code must be exactly 6 digits'\n                          }\n                        })}\n                        error={!!errors.pin_code || !!pincodeError}\n                        helperText={\n                          pincodeLoading ? 'Looking up location...' :\n                          errors.pin_code?.message || pincodeError || \n                          '6-digit postal code (automatically fetches city & state)'\n                        }\n                        disabled={loading || pincodeLoading}\n                        variant=\"outlined\"\n                        InputProps={{\n                          endAdornment: pincodeLoading ? (\n                            <Box sx={{ display: 'flex', alignItems: 'center', pr: 1 }}>\n                              <CircularProgress size={20} />\n                            </Box>\n                          ) : null\n                        }}\n                      />\n                    </Grid>\n                    <Grid size={{ xs: 12, md: 4 }}>\n                      <TextField\n                        fullWidth\n                        label=\"City\"\n                        placeholder=\"Enter city name\"\n                        {...register('city', { \n                          required: 'City is required',\n                          minLength: {\n                            value: 2,\n                            message: 'City name must be at least 2 characters'\n                          }\n                        })}\n                        error={!!errors.city}\n                        helperText={errors.city?.message || (pincodeData ? 'Auto-filled from PIN code' : 'Will be auto-filled when PIN is entered')}\n                        disabled={loading}\n                        variant=\"outlined\"\n                      />\n                    </Grid>\n                    <Grid size={{ xs: 12, md: 4 }}>\n                      <FormControl fullWidth error={!!errors.state} variant=\"outlined\">\n                        <InputLabel>State</InputLabel>\n                        <Select\n                          label=\"State\"\n                          value={watch('state') || ''}\n                          onChange={(e) => setValue('state', e.target.value, { shouldValidate: true })}\n                          disabled={loading}\n                        >\n                          <MenuItem value=\"\">\n                            <em>Select a state</em>\n                          </MenuItem>\n                          {INDIAN_STATES.map((stateName) => (\n                            <MenuItem key={stateName} value={stateName}>\n                              {stateName}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                        <Typography variant=\"caption\" color={errors.state ? 'error' : 'text.secondary'} sx={{ mt: 0.5, ml: 2 }}>\n                          {errors.state?.message || (pincodeData ? 'Auto-filled from PIN code' : 'Will be auto-filled when PIN is entered')}\n                        </Typography>\n                      </FormControl>\n                    </Grid>\n                    <Grid size={{ xs: 12, md: 6 }}>\n                      <TextField\n                        fullWidth\n                        label=\"State Code\"\n                        {...register('state_code', {\n                          required: 'State code is required',\n                          pattern: {\n                            value: /^\\d{2}$/,\n                            message: 'State code must be 2 digits'\n                          }\n                        })}\n                        error={!!errors.state_code}\n                        helperText={errors.state_code?.message || 'Automatically set based on selected state'}\n                        disabled={loading}\n                        variant=\"outlined\"\n                        InputProps={{\n                          readOnly: true,\n                        }}\n                      />\n                    </Grid>\n                  </Grid>\n                </Box>\n                {/* Information Notice */}\n              </form>\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions sx={{ p: 3, borderTop: '1px solid', borderColor: 'divider' }}>\n          <Button \n            onClick={handleClose} \n            disabled={loading}\n            variant=\"outlined\"\n            size=\"large\"\n            sx={{ minWidth: 120 }}\n          >\n            {success ? 'Close' : 'Cancel'}\n          </Button>\n          {!success && (\n            <>\n              <Button\n                onClick={handleOpenModuleDialog}\n                variant=\"text\"\n                disabled={loading}\n                size=\"large\"\n                sx={{ minWidth: 150 }}\n              >\n                Manage Modules\n              </Button>\n              <Button\n                onClick={handleSubmit(onSubmit)}\n                variant=\"contained\"\n                disabled={loading}\n                size=\"large\"\n                sx={{ minWidth: 150 }}\n                startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : null}\n              >\n                {loading ? 'Creating...' : 'Create License'}\n              </Button>\n            </>\n          )}\n        </DialogActions>\n      </Dialog>\n      {/* Module Selection Dialog */}\n      <Dialog \n        open={moduleDialogOpen} \n        onClose={handleCloseModuleDialog}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          Module Selection for New Organization\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" sx={{ mb: 2 }}>\n            Select which modules should be enabled for this organization. All modules are enabled by default.\n          </Typography>\n          <FormGroup>\n            {Object.entries(selectedModules).map(([module, enabled]) => (\n              <FormControlLabel\n                key={module}\n                control={\n                  <Checkbox\n                    checked={enabled}\n                    onChange={(e) => handleModuleChange(module, e.target.checked)}\n                    color=\"primary\"\n                  />\n                }\n                label={module}\n              />\n            ))}\n          </FormGroup>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseModuleDialog}>\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* License Activation Dialog */}\n      <Dialog \n        open={licenseActivationOpen} \n        onClose={() => setLicenseActivationOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          Activate License\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\" sx={{ mb: 3 }}>\n            The organization license has been created successfully. Please set the license activation period:\n          </Typography>\n          <FormControl fullWidth sx={{ mb: 2 }}>\n            <InputLabel id=\"activation-period-label\">License Period</InputLabel>\n            <Select\n              labelId=\"activation-period-label\"\n              value={activationPeriod}\n              label=\"License Period\"\n              onChange={(e) => setActivationPeriod(e.target.value as 'month' | 'year' | 'perpetual')}\n            >\n              <MenuItem value=\"month\">1 Month</MenuItem>\n              <MenuItem value=\"year\">1 Year</MenuItem>\n              <MenuItem value=\"perpetual\">Perpetual</MenuItem>\n            </Select>\n          </FormControl>\n          {success && (\n            <Box sx={{ mt: 2, p: 2, bgcolor: 'success.light', borderRadius: 1 }}>\n              <Typography variant=\"body2\" color=\"success.dark\">\n                <strong>Organization:</strong> {success.organization_name}<br/>\n                <strong>Subdomain:</strong> {success.subdomain}<br/>\n                <strong>Admin Email:</strong> {success.superadmin_email}\n              </Typography>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setLicenseActivationOpen(false)}>\n            Skip\n          </Button>\n          <Button \n            onClick={() => {\n              // Here you would typically make an API call to activate the license\n              console.log(`Activating license for ${activationPeriod}`);\n              setLicenseActivationOpen(false);\n            }}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Activate License\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\nexport default CreateOrganizationLicenseModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CreateVoucherButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CustomerAnalytics.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[235,244],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Person' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Person"},"fix":{"range":[362,372],"text":""},"desc":"Remove unused variable 'Person'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'refetch' is assigned a value but never used.","line":47,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"refetch"},"fix":{"range":[973,986],"text":""},"desc":"Remove unused variable 'refetch'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/CustomerAnalytics.tsx\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  Chip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  CircularProgress,\n  Alert,\n  FormControlLabel,\n  Switch,\n  TextField\n} from '@mui/material';\nimport {\n  TrendingUp,\n  Person,\n  DateRange,\n  Category,\n  Assessment,\n  Timeline\n} from '@mui/icons-material';\nimport { useQuery } from '@tanstack/react-query';\nimport {analyticsService} from '../services/analyticsService';\ninterface CustomerAnalyticsProps {\n  customerId: number;\n  customerName?: string;\n}\nconst CustomerAnalytics: React.FC<CustomerAnalyticsProps> = ({ \n  customerId, \n  customerName \n}) => {\n  const [includeRecentInteractions, setIncludeRecentInteractions] = useState(true);\n  const [recentInteractionsLimit, setRecentInteractionsLimit] = useState(5);\n  const { \n    data: analytics, \n    isLoading, \n    error,\n    refetch \n  } = useQuery({\n    queryKey: ['customerAnalytics', customerId, includeRecentInteractions, recentInteractionsLimit],\n    queryFn: () => analyticsService.getCustomerAnalytics(\n      customerId, \n      includeRecentInteractions, \n      recentInteractionsLimit\n    ),\n    enabled: !!customerId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n  if (isLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n        <Typography variant=\"body1\" sx={{ ml: 2 }}>\n          Loading customer analytics...\n        </Typography>\n      </Box>\n    );\n  }\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ m: 2 }}>\n        Error loading customer analytics: {(error as Error).message}\n      </Alert>\n    );\n  }\n  if (!analytics) {\n    return (\n      <Alert severity=\"info\" sx={{ m: 2 }}>\n        No analytics data available for this customer.\n      </Alert>\n    );\n  }\n  const formatDate = (dateString?: string) => {\n    if (!dateString) {return 'Never';}\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  const getInteractionTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      call: 'primary',\n      email: 'secondary',\n      meeting: 'success',\n      support_ticket: 'warning',\n      complaint: 'error',\n      feedback: 'info'\n    };\n    return colors[type] || 'default';\n  };\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      pending: 'warning',\n      in_progress: 'info',\n      completed: 'success',\n      cancelled: 'error'\n    };\n    return colors[status] || 'default';\n  };\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" alignItems=\"center\" mb={3}>\n        <Assessment sx={{ mr: 2, fontSize: 32, color: 'primary.main' }} />\n        <Box>\n          <Typography variant=\"h4\" component=\"h1\">\n            Customer Analytics\n          </Typography>\n          <Typography variant=\"h6\" color=\"textSecondary\">\n            {analytics.customer_name || customerName}\n          </Typography>\n        </Box>\n      </Box>\n      {/* Controls */}\n      <Box mb={3}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid size={{ xs: 12 }}>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={includeRecentInteractions}\n                  onChange={(e) => setIncludeRecentInteractions(e.target.checked)}\n                />\n              }\n              label=\"Show Recent Interactions\"\n            />\n          </Grid>\n          {includeRecentInteractions && (\n            <Grid size={{ xs: 12 }}>\n              <TextField\n                type=\"number\"\n                label=\"Recent Interactions Limit\"\n                value={recentInteractionsLimit}\n                onChange={(e) => setRecentInteractionsLimit(Number(e.target.value))}\n                InputProps={{ inputProps: { min: 1, max: 20 } }}\n                size=\"small\"\n                sx={{ width: 200 }}\n              />\n            </Grid>\n          )}\n        </Grid>\n      </Box>\n      {/* Summary Cards */}\n      <Grid container spacing={3} mb={4}>\n        <Grid size={{ xs: 12, md: 3 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <TrendingUp color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Interactions\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {analytics.total_interactions}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid size={{ xs: 12, md: 3 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <DateRange color=\"secondary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Last Interaction\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatDate(analytics.last_interaction_date)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid size={{ xs: 12, md: 3 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Category color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Segments\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {analytics.segments.length}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid size={{ xs: 12, md: 3 }}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Timeline color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Interaction Types\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {Object.keys(analytics.interaction_types).length}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        {/* Interaction Types Breakdown */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Interaction Types\n              </Typography>\n              <Box>\n                {Object.entries(analytics.interaction_types).map(([type, count]) => (\n                  <Box key={type} display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                    <Chip \n                      label={type.replace('_', ' ').toUpperCase()} \n                      color={getInteractionTypeColor(type) as any}\n                      size=\"small\"\n                    />\n                    <Typography variant=\"body2\">{count}</Typography>\n                  </Box>\n                ))}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        {/* Interaction Status */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Interaction Status\n              </Typography>\n              <Box>\n                {Object.entries(analytics.interaction_status).map(([status, count]) => (\n                  <Box key={status} display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                    <Chip \n                      label={status.replace('_', ' ').toUpperCase()} \n                      color={getStatusColor(status) as any}\n                      size=\"small\"\n                    />\n                    <Typography variant=\"body2\">{count}</Typography>\n                  </Box>\n                ))}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        {/* Customer Segments */}\n        <Grid size={{ xs: 12 }}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Customer Segments\n              </Typography>\n              {analytics.segments.length > 0 ? (\n                <TableContainer>\n                  <Table size=\"small\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Segment</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Assigned Date</TableCell>\n                        <TableCell>Description</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {analytics.segments.map((segment, index) => (\n                        <TableRow key={index}>\n                          <TableCell>\n                            <Chip \n                              label={segment.segment_name} \n                              color=\"primary\" \n                              size=\"small\" \n                            />\n                          </TableCell>\n                          <TableCell>\n                            {segment.segment_value ? segment.segment_value.toFixed(2) : '-'}\n                          </TableCell>\n                          <TableCell>{formatDate(segment.assigned_date)}</TableCell>\n                          <TableCell>{segment.description || '-'}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              ) : (\n                <Typography color=\"textSecondary\">\n                  No segments assigned to this customer.\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n        {/* Recent Interactions */}\n        {includeRecentInteractions && analytics.recent_interactions.length > 0 && (\n          <Grid size={{ xs: 12 }}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Recent Interactions\n                </Typography>\n                <TableContainer>\n                  <Table size=\"small\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Type</TableCell>\n                        <TableCell>Subject</TableCell>\n                        <TableCell>Status</TableCell>\n                        <TableCell>Date</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {analytics.recent_interactions.map((interaction, index) => (\n                        <TableRow key={index}>\n                          <TableCell>\n                            <Chip \n                              label={interaction.interaction_type} \n                              color={getInteractionTypeColor(interaction.interaction_type) as any}\n                              size=\"small\" \n                            />\n                          </TableCell>\n                          <TableCell>{interaction.subject}</TableCell>\n                          <TableCell>\n                            <Chip \n                              label={interaction.status} \n                              color={getStatusColor(interaction.status) as any}\n                              size=\"small\" \n                            />\n                          </TableCell>\n                          <TableCell>{formatDate(interaction.interaction_date)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n      </Grid>\n      {/* Footer */}\n      <Box mt={3}>\n        <Typography variant=\"caption\" color=\"textSecondary\">\n          Analytics calculated at: {formatDate(analytics.calculated_at)}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\nexport default CustomerAnalytics;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CustomerAnalyticsModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Box' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"Box"},"fix":{"range":[171,178],"text":""},"desc":"Remove unused variable 'Box'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/CustomerAnalyticsModal.tsx\nimport React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  IconButton,\n  Box\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\nimport CustomerAnalytics from './CustomerAnalytics';\ninterface CustomerAnalyticsModalProps {\n  open: boolean;\n  onClose: () => void;\n  customerId: number;\n  customerName?: string;\n}\nconst CustomerAnalyticsModal: React.FC<CustomerAnalyticsModalProps> = ({\n  open,\n  onClose,\n  customerId,\n  customerName\n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"lg\"\n      fullWidth\n      PaperProps={{\n        sx: {\n          height: '90vh',\n          maxHeight: '90vh'\n        }\n      }}\n    >\n      <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        Customer Analytics\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <Close />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent dividers sx={{ p: 0 }}>\n        <CustomerAnalytics customerId={customerId} customerName={customerName} />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default CustomerAnalyticsModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/CustomerAutocomplete.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"useCallback"},"fix":{"range":[24,37],"text":""},"desc":"Remove unused variable 'useCallback'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'customer' is defined but never used.","line":30,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"customer"},"fix":{"range":[787,812],"text":""},"desc":"Remove unused variable 'customer'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[1002,1008],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 40 column 3.","line":70,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":70,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 40 column 3.","line":70,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":70,"endColumn":25},{"ruleId":"no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 38 column 3.","line":110,"column":40,"nodeType":"Identifier","messageId":"noShadow","endLine":110,"endColumn":45},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 38 column 3.","line":110,"column":40,"nodeType":"Identifier","messageId":"noShadow","endLine":110,"endColumn":45}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  CircularProgress,\n  Box,\n  Typography,\n  Chip\n} from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient, keepPreviousData } from '@tanstack/react-query';\nimport { searchCustomers, createCustomer } from '../services/masterService';\nimport AddCustomerModal from './AddCustomerModal';\ninterface Customer {\n  id: number;\n  name: string;\n  contact_number: string;\n  email?: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  gst_number?: string;\n  pan_number?: string;\n}\ninterface CustomerAutocompleteProps {\n  value?: string | number | null;\n  onChange: (customer: Customer | null) => void;\n  error?: boolean;\n  helperText?: string;\n  disabled?: boolean;\n  label?: string;\n  placeholder?: string;\n}\nconst CustomerAutocomplete: React.FC<CustomerAutocompleteProps> = ({\n  value,\n  onChange,\n  error = false,\n  helperText = '',\n  disabled = false,\n  label = 'Customer',\n  placeholder = 'Search or add customer...'\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [addModalOpen, setAddModalOpen] = useState(false);\n  const queryClient = useQueryClient();\n  // Search query with debouncing\n  const { data: searchResults = [], isLoading } = useQuery({\n    queryKey: ['searchCustomers', inputValue, 10],\n    queryFn: searchCustomers,\n    enabled: inputValue.length >= 2,\n    placeholderData: keepPreviousData,\n    staleTime: 300, // Cache for 300ms to debounce\n  });\n  // Create customer mutation\n  const createCustomerMutation = useMutation({\n    mutationFn: createCustomer,\n    onSuccess: (newCustomer: Customer) => {\n      // Invalidate search queries\n      queryClient.invalidateQueries({queryKey: ['customerSearch']});\n      queryClient.invalidateQueries({queryKey: ['customers']});\n      // Auto-select the newly created customer\n      setSelectedCustomer(newCustomer);\n      onChange(newCustomer);\n      setAddModalOpen(false);\n    },\n    onError: (error: any) => {\n      console.error('Failed to create customer:', error);\n    }\n  });\n  // Create options array with \"Add Customer\" option\n  const options = React.useMemo(() => {\n    const addOption = {\n      id: -1,\n      name: '➕ Add Customer',\n      isAddOption: true,\n    };\n    return inputValue.length >= 2 \n      ? [addOption, ...searchResults]\n      : searchResults.length > 0 \n        ? [addOption, ...searchResults]\n        : [addOption];\n  }, [searchResults, inputValue]);\n  const handleSelectionChange = (_: any, newValue: any) => {\n    if (newValue?.isAddOption) {\n      setAddModalOpen(true);\n      return;\n    }\n    setSelectedCustomer(newValue);\n    onChange(newValue);\n  };\n  const handleAddCustomer = async (customerData: any) => {\n    await createCustomerMutation.mutateAsync(customerData);\n  };\n  return (\n    <>\n      <Autocomplete\n        value={selectedCustomer}\n        onChange={handleSelectionChange}\n        inputValue={inputValue}\n        onInputChange={(_, newInputValue) => setInputValue(newInputValue)}\n        options={options}\n        getOptionLabel={(option) => {\n          if (option.isAddOption) {return option.name;}\n          return option.name;\n        }}\n        isOptionEqualToValue={(option, value) => option.id === value?.id}\n        loading={isLoading}\n        disabled={disabled}\n        filterOptions={(x) => x} // Disable default default filtering since we use backend search\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={label}\n            placeholder={placeholder}\n            error={error}\n            helperText={helperText}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <>\n                  {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                  {params.InputProps.endAdornment}\n                </>\n              ),\n            }}\n          />\n        )}\n        renderOption={(props, option) => {\n          if (option.isAddOption) {\n            return (\n              <Box component=\"li\" {...props} sx={{ \n                color: 'primary.main', \n                fontWeight: 'bold',\n                borderBottom: '1px solid #eee'\n              }}>\n                <AddIcon sx={{ mr: 1 }} />\n                {option.name}\n              </Box>\n            );\n          }\n          return (\n            <Box component=\"li\" {...props}>\n              <Box sx={{ width: '100%' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\n                    {option.name}\n                  </Typography>\n                  {option.gst_number && (\n                    <Chip \n                      label={`GST: ${option.gst_number}`} \n                      size=\"small\" \n                      variant=\"outlined\" \n                    />\n                  )}\n                </Box>\n                <Box sx={{ display: 'flex', gap: 1, mt: 0.5 }}>\n                  {option.contact_number && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      📞 {option.contact_number}\n                    </Typography>\n                  )}\n                  {option.city && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      📍 {option.city}, {option.state}\n                    </Typography>\n                  )}\n                  {option.email && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      ✉️ {option.email}\n                    </Typography>\n                  )}\n                </Box>\n              </Box>\n            </Box>\n          );\n        }}\n        noOptionsText={\n          inputValue.length < 2 \n            ? \"Type to search customers...\" \n            : \"No customers found\"\n        }\n      />\n      <AddCustomerModal\n        open={addModalOpen}\n        onClose={() => setAddModalOpen(false)}\n        onAdd={handleAddCustomer}\n        loading={createCustomerMutation.isPending}\n        initialName={inputValue}\n      />\n    </>\n  );\n};\nexport default CustomerAutocomplete;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/DemoModeDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":25,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"token"},"fix":{"range":[425,439],"text":""},"desc":"Remove unused variable 'token'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":25,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[438,459],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":69,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 38 column 10.","line":69,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":69,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 38 column 10.","line":69,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":69,"endColumn":24},{"ruleId":"no-use-before-define","severity":2,"message":"'handleReset' was used before it was defined.","line":109,"column":9,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":109,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":111,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 38 column 10.","line":111,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":111,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 38 column 10.","line":111,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":111,"endColumn":24}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  TextField,\n  Alert,\n  CircularProgress,\n  Stepper,\n  Step,\n  StepLabel\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\ninterface DemoModeDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onDemoStart: (token: string, loginResponse?: any) => void;\n}\ninterface NewUserFormData {\n  fullName: string;\n  email: string;\n  phoneNumber: string;\n  companyName: string;\n  otp: string;\n}\nconst DemoModeDialog: React.FC<DemoModeDialogProps> = ({ open, onClose, onDemoStart }) => {\n  const [userType, setUserType] = useState<'current' | 'new' | ''>('');\n  const [step, setStep] = useState(0); // 0: selection, 1: form/login, 2: OTP (for new users)\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [tempEmail, setTempEmail] = useState('');\n  const { register, handleSubmit, formState: { errors }, reset } = useForm<NewUserFormData>();\n  const steps = ['User Type', 'Details', 'Verification'];\n  const handleUserTypeNext = () => {\n    if (!userType) {\n      setError('Please select whether you are a current or new user');\n      return;\n    }\n    setError('');\n    setStep(1);\n  };\n  const handleCurrentUserLogin = () => {\n    // For current users, close this dialog and let them use regular login\n    // Then they'll enter demo mode after login\n    onClose();\n    // Set a flag to indicate demo mode should be activated after login\n    localStorage.setItem('pendingDemoMode', 'true');\n  };\n  const handleNewUserSubmit = async (data: NewUserFormData) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      // For demo purposes, simulate sending OTP to the email\n      // In a real implementation, this would call an API endpoint\n      console.log('[Demo] Simulating OTP send to:', data.email);\n      setTempEmail(data.email);\n      setSuccess(`Demo OTP sent to ${data.email}. Please check your email.`);\n      setStep(2);\n    } catch (error: any) {\n      setError('Failed to send demo OTP. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleOTPSubmit = async () => {\n    // Get the OTP value directly from the input\n    const otpInput = document.querySelector('input[name=\"otp\"]') as HTMLInputElement;\n    const otp = otpInput?.value || '';\n    if (!otp || otp.length !== 6) {\n      setError('Please enter a valid 6-digit OTP');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    try {\n      // For demo purposes, accept any 6-digit OTP\n      // Create a temporary demo token\n      const demoToken = `demo_temp_token_${Date.now()}`;\n      const demoResponse = {\n        access_token: demoToken,\n        user_role: 'demo_user',\n        organization_id: 'demo_org',\n        user: {\n          email: tempEmail,\n          is_demo_user: true,\n          is_temporary: true\n        },\n        demo_mode: true\n      };\n      // Set demo mode flag\n      localStorage.setItem('demoMode', 'true');\n      localStorage.setItem('isDemoTempUser', 'true');\n      setSuccess('Demo login successful! Welcome to TRITIQ ERP Demo.');\n      // Close dialog and start demo\n      setTimeout(() => {\n        onDemoStart(demoToken, demoResponse);\n        onClose();\n// handleReset is defined later in this file\n        handleReset();\n      }, 1500);\n    } catch (error: any) {\n      setError('Demo OTP verification failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleBack = () => {\n    if (step > 0) {\n      setStep(step - 1);\n      setError('');\n      setSuccess('');\n    }\n  };\n  const handleReset = () => {\n    setUserType('');\n    setStep(0);\n    setError('');\n    setSuccess('');\n    setTempEmail('');\n    reset();\n  };\n  const handleClose = () => {\n    handleReset();\n    onClose();\n  };\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"sm\" \n      fullWidth\n      PaperProps={{\n        sx: { borderRadius: 3 }\n      }}\n    >\n      <DialogTitle sx={{ textAlign: 'center', pb: 1 }}>\n        <Typography variant=\"h5\" component=\"div\" sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>\n          🎭 Demo Mode\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n          Experience TRITIQ ERP with sample data\n        </Typography>\n      </DialogTitle>\n      <DialogContent sx={{ pt: 2 }}>\n        {/* Stepper */}\n        <Stepper activeStep={step} sx={{ mb: 3 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n        {success && (\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\n            {success}\n          </Alert>\n        )}\n        {/* Step 0: User Type Selection */}\n        {step === 0 && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Are you a current user or new user?\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n              Please select your user type to continue with the demo experience.\n            </Typography>\n            <RadioGroup\n              value={userType}\n              onChange={(e) => setUserType(e.target.value as 'current' | 'new')}\n            >\n              <FormControlLabel\n                value=\"current\"\n                control={<Radio />}\n                label={\n                  <Box>\n                    <Typography variant=\"body1\" fontWeight=\"medium\">\n                      Current User\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      I have an existing account and want to explore demo features\n                    </Typography>\n                  </Box>\n                }\n              />\n              <FormControlLabel\n                value=\"new\"\n                control={<Radio />}\n                label={\n                  <Box>\n                    <Typography variant=\"body1\" fontWeight=\"medium\">\n                      New User\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      I'm new and want to try the system with a temporary demo account\n                    </Typography>\n                  </Box>\n                }\n                sx={{ mt: 2 }}\n              />\n            </RadioGroup>\n          </Box>\n        )}\n        {/* Step 1: Current User Login or New User Form */}\n        {step === 1 && userType === 'current' && (\n          <Box textAlign=\"center\">\n            <Typography variant=\"h6\" gutterBottom>\n              Login to Start Demo\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n              Please login with your existing credentials. After successful login, you'll enter demo mode with sample data.\n            </Typography>\n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              <Typography variant=\"body2\">\n                <strong>Demo Mode Features:</strong>\n                <br />• All functionality available with sample data\n                <br />• No real data will be affected or saved\n                <br />• Full access to all modules and features\n              </Typography>\n            </Alert>\n          </Box>\n        )}\n        {step === 1 && userType === 'new' && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Demo Account Details\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n              Fill in your details to create a temporary demo account. This account will be valid until you logout or close your browser.\n            </Typography>\n            <form onSubmit={handleSubmit(handleNewUserSubmit)}>\n              <TextField\n                fullWidth\n                label=\"Full Name\"\n                margin=\"normal\"\n                {...register('fullName', { required: 'Full name is required' })}\n                error={!!errors.fullName}\n                helperText={errors.fullName?.message}\n              />\n              <TextField\n                fullWidth\n                label=\"Email Address\"\n                type=\"email\"\n                margin=\"normal\"\n                {...register('email', { \n                  required: 'Email is required',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: 'Invalid email address'\n                  }\n                })}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n              />\n              <TextField\n                fullWidth\n                label=\"Phone Number\"\n                margin=\"normal\"\n                {...register('phoneNumber', { required: 'Phone number is required' })}\n                error={!!errors.phoneNumber}\n                helperText={errors.phoneNumber?.message}\n              />\n              <TextField\n                fullWidth\n                label=\"Company Name\"\n                margin=\"normal\"\n                {...register('companyName', { required: 'Company name is required' })}\n                error={!!errors.companyName}\n                helperText={errors.companyName?.message}\n              />\n              <Alert severity=\"warning\" sx={{ mt: 2 }}>\n                <Typography variant=\"body2\">\n                  This is a temporary demo account. No real user will be created in the database.\n                </Typography>\n              </Alert>\n            </form>\n          </Box>\n        )}\n        {/* Step 2: OTP Verification for New Users */}\n        {step === 2 && userType === 'new' && (\n          <Box>\n            <Typography variant=\"h6\" gutterBottom>\n              Verify Demo OTP\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n              Enter the 6-digit demo OTP sent to: <strong>{tempEmail}</strong>\n            </Typography>\n            <TextField\n              fullWidth\n              label=\"Demo OTP\"\n              name=\"otp\"\n              type=\"text\"\n              inputProps={{ maxLength: 6, pattern: '[0-9]*' }}\n              margin=\"normal\"\n              placeholder=\"123456\"\n              helperText=\"For demo purposes, enter any 6-digit number\"\n            />\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              <Typography variant=\"body2\">\n                <strong>Demo Mode:</strong> Enter any 6-digit number to continue. In a real environment, this would be sent to your email.\n              </Typography>\n            </Alert>\n          </Box>\n        )}\n      </DialogContent>\n      <DialogActions sx={{ p: 3, pt: 1 }}>\n        {step > 0 && (\n          <Button onClick={handleBack} disabled={loading}>\n            Back\n          </Button>\n        )}\n        <Button onClick={handleClose} disabled={loading}>\n          Cancel\n        </Button>\n        {step === 0 && (\n          <Button \n            variant=\"contained\" \n            onClick={handleUserTypeNext}\n            disabled={!userType}\n          >\n            Continue\n          </Button>\n        )}\n        {step === 1 && userType === 'current' && (\n          <Button \n            variant=\"contained\" \n            onClick={handleCurrentUserLogin}\n            disabled={loading}\n          >\n            Proceed to Login\n          </Button>\n        )}\n        {step === 1 && userType === 'new' && (\n          <Button \n            variant=\"contained\" \n            onClick={handleSubmit(handleNewUserSubmit)}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={20} /> : 'Send Demo OTP'}\n          </Button>\n        )}\n        {step === 2 && userType === 'new' && (\n          <Button \n            variant=\"contained\" \n            onClick={handleOTPSubmit}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={20} /> : 'Start Demo'}\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default DemoModeDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/EmailTemplateEditor.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":504,"column":0}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Box,\n  Typography,\n  Tab,\n  Tabs,\n  Grid,\n  Chip,\n  Alert,\n  IconButton,\n  Tooltip,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Divider,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction\n} from '@mui/material';\nimport {\n  Preview,\n  Code,\n  Send,\n  Save,\n  Refresh,\n  Info,\n  ContentCopy,\n  Delete,\n  Add\n} from '@mui/icons-material';\nimport { toast } from 'react-toastify';\ninterface EmailTemplate {\n  id: number;\n  name: string;\n  description?: string;\n  template_type: string;\n  channel: string;\n  subject: string;\n  body: string;\n  html_body?: string;\n  trigger_event?: string;\n  variables: string[];\n  is_active: boolean;\n}\ninterface EmailTemplateEditorProps {\n  open: boolean;\n  onClose: () => void;\n  template?: EmailTemplate | null;\n  onSave: (template: Partial<EmailTemplate>) => void;\n  onTest?: (template: Partial<EmailTemplate>) => void;\n}\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`template-tabpanel-${index}`}\n      aria-labelledby={`template-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\nconst EmailTemplateEditor: React.FC<EmailTemplateEditorProps> = ({\n  open,\n  onClose,\n  template,\n  onSave,\n  onTest\n}) => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [formData, setFormData] = useState<Partial<EmailTemplate>>({\n    name: template?.name || '',\n    description: template?.description || '',\n    template_type: template?.template_type || 'exhibition_intro',\n    channel: template?.channel || 'email',\n    subject: template?.subject || '',\n    body: template?.body || '',\n    html_body: template?.html_body || '',\n    trigger_event: template?.trigger_event || '',\n    variables: template?.variables || [],\n    is_active: template?.is_active ?? true\n  });\n  const [newVariable, setNewVariable] = useState('');\nconst [previewData,] = useState<{ [key: string]: string }>({\n    prospect_name: 'John Smith',\n    company_name: 'TechCorp Solutions',\n    exhibition_name: 'Tech Expo 2024',\n    exhibition_location: 'Convention Center',\n    contact_person: 'Sarah Johnson',\n    contact_email: 'sarah@yourcompany.com',\n    contact_phone: '+1-555-0123'\n  });\n  const templateTypes = [\n    { value: 'exhibition_intro', label: 'Exhibition Introduction' },\n    { value: 'follow_up', label: 'Follow-up Email' },\n    { value: 'appointment_reminder', label: 'Appointment Reminder' },\n    { value: 'thank_you', label: 'Thank You Note' },\n    { value: 'proposal_sent', label: 'Proposal Sent' },\n    { value: 'meeting_request', label: 'Meeting Request' }\n  ];\n  const availableVariables = [\n    'prospect_name',\n    'company_name',\n    'designation',\n    'exhibition_name',\n    'exhibition_location',\n    'contact_person',\n    'contact_email',\n    'contact_phone',\n    'follow_up_date',\n    'meeting_time',\n    'proposal_link'\n  ];\n  const defaultTemplates = {\n    exhibition_intro: {\n      subject: 'Great meeting you at {{exhibition_name}}!',\n      body: `Hi {{prospect_name}},\nIt was wonderful meeting you at {{exhibition_name}} in {{exhibition_location}}. I enjoyed our conversation about {{company_name}} and would love to continue our discussion.\nI believe our solutions could be a great fit for your needs. Would you be interested in scheduling a brief call to explore how we can help {{company_name}} achieve its goals?\nBest regards,\n{{contact_person}}\n{{contact_email}}\n{{contact_phone}}`,\n      html_body: `<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n  <h2 style=\"color: #2196F3;\">Great meeting you at {{exhibition_name}}!</h2>\n  <p>Hi <strong>{{prospect_name}}</strong>,</p>\n  <p>It was wonderful meeting you at <strong>{{exhibition_name}}</strong> in {{exhibition_location}}. I enjoyed our conversation about <strong>{{company_name}}</strong> and would love to continue our discussion.</p>\n  <p>I believe our solutions could be a great fit for your needs. Would you be interested in scheduling a brief call to explore how we can help {{company_name}} achieve its goals?</p>\n  <div style=\"margin: 20px 0; padding: 15px; background-color: #f5f5f5; border-radius: 5px;\">\n    <p style=\"margin: 0;\"><strong>{{contact_person}}</strong><br>\n    📧 {{contact_email}}<br>\n    📞 {{contact_phone}}</p>\n  </div>\n</div>`\n    }\n  };\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  const handleInputChange = (field: keyof EmailTemplate, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const handleAddVariable = () => {\n    if (newVariable && !formData.variables?.includes(newVariable)) {\n      setFormData(prev => ({\n        ...prev,\n        variables: [...(prev.variables || []), newVariable]\n      }));\n      setNewVariable('');\n    }\n  };\n  const handleRemoveVariable = (variable: string) => {\n    setFormData(prev => ({\n      ...prev,\n      variables: prev.variables?.filter(v => v !== variable) || []\n    }));\n  };\n    const variableText = `{{${variable}}}`;\n    const currentValue = formData[field] || '';\n    // For simplicity, just append the variable. In a real implementation,\n    // you'd want to insert at cursor position\n    handleInputChange(field, currentValue + variableText);\n  };\n  const renderPreview = (text: string, isHtml: boolean = false) => {\n    let processedText = text;\n    // Replace variables with preview data\n    Object.entries(previewData).forEach(([key, value]) => {\n      const regex = new RegExp(`{{${key}}}`, 'g');\n      processedText = processedText.replace(regex, value);\n    });\n    if (isHtml) {\n      return <div dangerouslySetInnerHTML={{ __html: processedText }} />;\n    }\n    return (\n      <Typography component=\"pre\" sx={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit' }}>\n        {processedText}\n      </Typography>\n    );\n  };\n  const loadDefaultTemplate = () => {\n    const defaultTemplate = defaultTemplates[formData.template_type as keyof typeof defaultTemplates];\n    if (defaultTemplate) {\n      setFormData(prev => ({\n        ...prev,\n        ...defaultTemplate,\n        variables: [...(prev.variables || []), ...Object.keys(previewData)]\n      }));\n      toast.success('Default template loaded');\n    }\n  };\n  const handleSave = () => {\n    if (!formData.name || !formData.subject || !formData.body) {\n      toast.error('Please fill in required fields: Name, Subject, and Body');\n      return;\n    }\n    onSave(formData);\n    toast.success('Email template saved successfully');\n  };\n  const handleTest = () => {\n    if (onTest) {\n      onTest(formData);\n      toast.success('Test email sent');\n    }\n  };\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"lg\" fullWidth>\n      <DialogTitle>\n        <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\">\n          <Typography variant=\"h6\">\n            {template ? 'Edit Email Template' : 'Create Email Template'}\n          </Typography>\n          <Box>\n            <Tooltip title=\"Load default template\">\n              <IconButton onClick={loadDefaultTemplate}>\n                <Refresh />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Template help\">\n              <IconButton>\n                <Info />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Box>\n      </DialogTitle>\n      <DialogContent sx={{ p: 0 }}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <Tabs value={activeTab} onChange={handleTabChange}>\n            <Tab label=\"Template Settings\" />\n            <Tab label=\"Email Content\" />\n            <Tab label=\"Variables\" />\n            <Tab label=\"Preview\" />\n          </Tabs>\n        </Box>\n        {/* Template Settings Tab */}\n        <TabPanel value={activeTab} index={0}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Template Name\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Template Type</InputLabel>\n                <Select\n                  value={formData.template_type}\n                  label=\"Template Type\"\n                  onChange={(e) => handleInputChange('template_type', e.target.value)}\n                >\n                  {templateTypes.map(type => (\n                    <MenuItem key={type.value} value={type.value}>\n                      {type.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Description\"\n                value={formData.description}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                multiline\n                rows={2}\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <TextField\n                fullWidth\n                label=\"Trigger Event\"\n                value={formData.trigger_event}\n                onChange={(e) => handleInputChange('trigger_event', e.target.value)}\n                helperText=\"When should this template be automatically sent?\"\n              />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>Channel</InputLabel>\n                <Select\n                  value={formData.channel}\n                  label=\"Channel\"\n                  onChange={(e) => handleInputChange('channel', e.target.value)}\n                >\n                  <MenuItem value=\"email\">Email</MenuItem>\n                  <MenuItem value=\"sms\">SMS</MenuItem>\n                  <MenuItem value=\"push\">Push Notification</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </TabPanel>\n        {/* Email Content Tab */}\n        <TabPanel value={activeTab} index={1}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Email Subject\"\n                value={formData.subject}\n                onChange={(e) => handleInputChange('subject', e.target.value)}\n                required\n                helperText=\"Use {{variable_name}} for dynamic content\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Email Body (Plain Text)\"\n                value={formData.body}\n                onChange={(e) => handleInputChange('body', e.target.value)}\n                multiline\n                rows={10}\n                required\n                helperText=\"Plain text version of the email\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Email Body (HTML)\"\n                value={formData.html_body}\n                onChange={(e) => handleInputChange('html_body', e.target.value)}\n                multiline\n                rows={10}\n                helperText=\"HTML version for rich formatting (optional)\"\n              />\n            </Grid>\n          </Grid>\n        </TabPanel>\n        {/* Variables Tab */}\n        <TabPanel value={activeTab} index={2}>\n          <Typography variant=\"h6\" gutterBottom>\n            Template Variables\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n// TODO: Define or import variable_name\n            Variables allow you to personalize emails with dynamic content. Use {{variable_name}} in your template.\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Available Variables\n                </Typography>\n                <List dense>\n                  {availableVariables.map(variable => (\n                    <ListItem key={variable}>\n                      <ListItemText \n                        primary={`{{${variable}}}`}\n                        secondary={previewData[variable] || 'Sample data not available'}\n                      />\n                      <ListItemSecondaryAction>\n                        <Tooltip title=\"Copy to clipboard\">\n                          <IconButton \n                            size=\"small\"\n                            onClick={() => {\n                              navigator.clipboard.writeText(`{{${variable}}}`);\n                              toast.success('Variable copied to clipboard');\n                            }}\n                          >\n                            <ContentCopy />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" gutterBottom>\n                  Used Variables\n                </Typography>\n                <Box display=\"flex\" flexWrap=\"wrap\" gap={1} mb={2}>\n                  {formData.variables?.map(variable => (\n                    <Chip\n                      key={variable}\n                      label={variable}\n                      onDelete={() => handleRemoveVariable(variable)}\n                      size=\"small\"\n                    />\n                  ))}\n                </Box>\n                <Box display=\"flex\" gap={1}>\n                  <TextField\n                    size=\"small\"\n                    label=\"Add Variable\"\n                    value={newVariable}\n                    onChange={(e) => setNewVariable(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddVariable()}\n                  />\n                  <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    startIcon={<Add />}\n                    onClick={handleAddVariable}\n                  >\n                    Add\n                  </Button>\n                </Box>\n              </Paper>\n            </Grid>\n          </Grid>\n        </TabPanel>\n        {/* Preview Tab */}\n        <TabPanel value={activeTab} index={3}>\n          <Typography variant=\"h6\" gutterBottom>\n            Email Preview\n          </Typography>\n          <Alert severity=\"info\" sx={{ mb: 3 }}>\n            This preview shows how the email will look with sample data.\n          </Alert>\n          <Paper sx={{ p: 3, mb: 3 }}>\n            <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold' }}>\n              Subject: {renderPreview(formData.subject || '')}\n            </Typography>\n            <Divider sx={{ my: 2 }} />\n            <Box sx={{ minHeight: 200 }}>\n              {activeTab === 3 && formData.html_body ? (\n                <Box>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    HTML Preview:\n                  </Typography>\n                  {renderPreview(formData.html_body, true)}\n                </Box>\n              ) : (\n                <Box>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Plain Text Preview:\n                  </Typography>\n                  {renderPreview(formData.body || '')}\n                </Box>\n              )}\n            </Box>\n          </Paper>\n          <Box display=\"flex\" gap={2}>\n            <Button\n              variant=\"outlined\"\n              startIcon={<Send />}\n              onClick={handleTest}\n              disabled={!onTest}\n            >\n              Send Test Email\n            </Button>\n            <Button\n              variant=\"outlined\"\n              startIcon={<Preview />}\n              onClick={() => {\n                // Toggle between HTML and plain text preview\n                // This is just a demo action\n                toast.info('Preview mode toggled');\n              }}\n            >\n              Toggle Preview Mode\n            </Button>\n          </Box>\n        </TabPanel>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          startIcon={<Save />}\n          onClick={handleSave}\n        >\n          {template ? 'Update Template' : 'Create Template'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default EmailTemplateEditor;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/EntitySelector.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[231,241],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[310,321],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'entity' is defined but never used.","line":32,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"entity"},"fix":{"range":[934,945],"text":""},"desc":"Remove unused variable 'entity'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/EntitySelector.tsx\n// Unified Entity selection component for Customer + Vendor + Employee + ExpenseAccount\nimport React, { useState } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  Box,\n  Chip,\n  Typography,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  InputAdornment,\n  Tooltip,\n  CircularProgress\n} from '@mui/material';\nimport { Add, Person, Business, Badge, AccountBalance } from '@mui/icons-material';\nimport { Controller, Control } from 'react-hook-form';\nimport {useEntityOptions} from '../hooks/useEntity';\nimport { EntityType, EntityOption, ENTITY_CONFIGS } from '../types/entity.types';\nimport AddVendorModal from './AddVendorModal';\nimport AddCustomerModal from './AddCustomerModal';\ninterface EntitySelectorProps {\n  name: string;\n  control: Control<any>;\n  label?: string;\n  required?: boolean;\n  entityTypes?: EntityType[];\n  allowTypeSelection?: boolean;\n  onEntityCreated?: (entity: any) => void;\n  disabled?: boolean;\n  error?: boolean;\n  helperText?: string;\n}\nconst getEntityIcon = (entityType: EntityType) => {\n  switch (entityType) {\n    case 'Customer':\n      return <Person fontSize=\"small\" />;\n    case 'Vendor':\n      return <Business fontSize=\"small\" />;\n    case 'Employee':\n      return <Badge fontSize=\"small\" />;\n    case 'ExpenseAccount':\n      return <AccountBalance fontSize=\"small\" />;\n    default:\n      return <Person fontSize=\"small\" />;\n  }\n};\nconst EntitySelector: React.FC<EntitySelectorProps> = ({\n  name,\n  control,\n  label = 'Select Entity',\n  required = false,\n  entityTypes = ['Customer', 'Vendor'],\n  allowTypeSelection = true,\n  onEntityCreated,\n  disabled = false,\n  error = false,\n  helperText\n}) => {\n  const [selectedEntityType, setSelectedEntityType] = useState<EntityType>(entityTypes[0]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [addModalType, setAddModalType] = useState<'Customer' | 'Vendor'>('Customer');\n  const { options, isLoading } = useEntityOptions(\n    allowTypeSelection ? [selectedEntityType] : entityTypes\n  );\n  const handleAddNew = () => {\n    if (selectedEntityType === 'Customer' || selectedEntityType === 'Vendor') {\n      setAddModalType(selectedEntityType);\n      setShowAddModal(true);\n    } else {\n      // For Employee and ExpenseAccount, we can add these modals later\n      alert(`Create ${selectedEntityType} functionality will be implemented soon`);\n    }\n  };\n  const handleEntityCreated = async (newEntity: any) => {\n    setShowAddModal(false);\n    if (onEntityCreated) {\n      onEntityCreated(newEntity);\n    }\n  };\n  // Enhanced options with \"Add New\" option\n  const enhancedOptions = [\n    ...options,\n    {\n      id: -1,\n      name: `Add New ${selectedEntityType}...`,\n      type: selectedEntityType,\n      label: `Add New ${selectedEntityType}...`,\n      value: -1,\n      originalData: null\n    } as EntityOption\n  ];\n  return (\n    <Box>\n      <Box display=\"flex\" gap={1} alignItems=\"flex-start\">\n        {/* Entity Type Selector */}\n        {allowTypeSelection && entityTypes.length > 1 && (\n          <FormControl size=\"small\" sx={{ minWidth: 140 }}>\n            <InputLabel>Type</InputLabel>\n            <Select\n              value={selectedEntityType}\n              onChange={(e) => setSelectedEntityType(e.target.value as EntityType)}\n              label=\"Type\"\n              disabled={disabled}\n            >\n              {entityTypes.map((type) => (\n                <MenuItem key={type} value={type}>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    {getEntityIcon(type)}\n                    {ENTITY_CONFIGS[type].displayName}\n                  </Box>\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        )}\n        {/* Entity Selector */}\n        <Box flex={1}>\n          <Controller\n            name={name}\n            control={control}\n            rules={{ required: required ? `${label} is required` : false }}\n            render={({ field }) => (\n              <Autocomplete\n                {...field}\n                options={enhancedOptions}\n                getOptionLabel={(option) => \n                  typeof option === 'string' ? option : (option?.label || '')\n                }\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props}>\n                    <Box display=\"flex\" alignItems=\"center\" gap={1} width=\"100%\">\n                      {option.id === -1 ? (\n                        <>\n                          <Add fontSize=\"small\" color=\"primary\" />\n                          <Typography color=\"primary\" fontWeight=\"bold\">\n                            {option.label}\n                          </Typography>\n                        </>\n                      ) : (\n                        <>\n                          {getEntityIcon(option.type)}\n                          <Box>\n                            <Typography variant=\"body2\">\n                              {option.name}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {option.type}\n                            </Typography>\n                          </Box>\n                        </>\n                      )}\n                    </Box>\n                  </Box>\n                )}\n                renderTags={(value, getTagProps) =>\n                  value.map((option, index) => (\n                    <Chip\n                      {...getTagProps({ index })}\n                      key={option.id}\n                      label={option.name}\n                      size=\"small\"\n                      color={option.type === 'Customer' ? 'success' : 'primary'}\n                    />\n                  ))\n                }\n                onChange={(_, newValue) => {\n                  if (newValue && newValue.id === -1) {\n                    handleAddNew();\n                    return;\n                  }\n                  field.onChange(newValue);\n                }}\n                loading={isLoading}\n                disabled={disabled}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label={label}\n                    required={required}\n                    error={error}\n                    helperText={helperText}\n                    InputProps={{\n                      ...params.InputProps,\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          {getEntityIcon(selectedEntityType)}\n                        </InputAdornment>\n                      ),\n                      endAdornment: (\n                        <>\n                          {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                          {params.InputProps.endAdornment}\n                        </>\n                      ),\n                    }}\n                  />\n                )}\n                isOptionEqualToValue={(option, value) => option.id === value?.id}\n              />\n            )}\n          />\n        </Box>\n      </Box>\n      {/* Add Entity Modals */}\n      {addModalType === 'Customer' && (\n        <AddCustomerModal\n          open={showAddModal}\n          onClose={() => setShowAddModal(false)}\n          onAdd={handleEntityCreated}\n        />\n      )}\n      {addModalType === 'Vendor' && (\n        <AddVendorModal\n          open={showAddModal}\n          onClose={() => setShowAddModal(false)}\n          onAdd={handleEntityCreated}\n        />\n      )}\n    </Box>\n  );\n};\nexport default EntitySelector;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ExcelImportExport.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'importedData' is defined but never used.","line":9,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"importedData"},"fix":{"range":[271,290],"text":""},"desc":"Remove unused variable 'importedData'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/ExcelImportExport.tsx\n'use client';\nimport React from 'react';\nimport { Button, Box } from '@mui/material';\nimport { exportToExcel, importFromExcel } from '../lib/excelUtils';\ninterface ExcelImportExportProps {\n  data: any[];\n  entity: string;\n  onImport: (importedData: any[]) => void;\n}\nconst ExcelImportExport: React.FC<ExcelImportExportProps> = ({ data, entity, onImport }) => {\n  const handleExport = () => {\n    exportToExcel(data, entity);\n  };\n  const handleImport = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const importedData = await importFromExcel(file);\n      onImport(importedData);\n    }\n  };\n  return (\n    <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n      <Button variant=\"outlined\" onClick={handleExport}>\n        Export {entity} to Excel\n      </Button>\n      <Button variant=\"outlined\" component=\"label\">\n        Import {entity} from Excel\n        <input type=\"file\" hidden accept=\".xlsx\" onChange={handleImport} />\n      </Button>\n    </Box>\n  );\n};\nexport default ExcelImportExport;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ExcelUploadComponent.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Object pattern argument should be typed.","line":5,"column":31,"nodeType":"ObjectPattern","messageId":"missingArgTypeUnnamed","endLine":5,"endColumn":74}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState } from 'react';\nimport { Button, Typography, CircularProgress, Alert, Box } from '@mui/material';\nimport axios from 'axios';\nconst ExcelUploadComponent = ({ endpoint = '/api/v1/stock/import/excel' }): void => {  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState<{ message: string; total_processed: number; errors: any[] } | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedFile(event.target.files?.[0] || null);\n    setResponse(null);\n    setError(null);\n  };\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError('Please select an Excel file first');\n      return;\n    }\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      const res = await axios.post(endpoint, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${localStorage.getItem('token')}`,  // Assume token-based auth\n        },\n      });\n      setResponse(res.data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Upload failed');\n      setResponse(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h6\">Upload Excel File</Typography>\n      <input type=\"file\" accept=\".xlsx,.xls\" onChange={handleFileChange} />\n      <Button variant=\"contained\" onClick={handleUpload} disabled={loading} sx={{ mt: 2 }}>\n        {loading ? <CircularProgress size={24} /> : 'Upload'}\n      </Button>\n      {response && (\n        <Alert severity=\"success\" sx={{ mt: 2 }}>\n          {response.message} (Processed: {response.total_processed}, Errors: {response.errors.length})\n        </Alert>\n      )}\n      {error && <Alert severity=\"error\" sx={{ mt: 2 }}>{error}</Alert>}\n    </Box>\n  );\n};\nexport default ExcelUploadComponent;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ExportPrintToolbar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'GetApp' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"GetApp"},"fix":{"range":[197,207],"text":""},"desc":"Remove unused variable 'GetApp'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Menu,\n  MenuItem,\n  IconButton,\n  Tooltip,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Download,\n  Print,\n  GetApp,\n  TableChart,\n  Description\n} from '@mui/icons-material';\nimport { saveAs } from 'file-saver';\ninterface ExportPrintToolbarProps {\n  onExportExcel?: () => Promise<Blob | void>;\n  onExportCSV?: () => Promise<Blob | void>;\n  onPrint?: () => void;\n  showExcel?: boolean;\n  showCSV?: boolean;\n  showPrint?: boolean;\n  disabled?: boolean;\n  loading?: boolean;\n  filename?: string;\n}\nconst ExportPrintToolbar: React.FC<ExportPrintToolbarProps> = ({\n  onExportExcel,\n  onExportCSV,\n  onPrint,\n  showExcel = true,\n  showCSV = true,\n  showPrint = true,\n  disabled = false,\n  loading = false,\n  filename = 'report'\n}) => {\n  const [exportAnchorEl, setExportAnchorEl] = useState<null | HTMLElement>(null);\n  const [isExporting, setIsExporting] = useState(false);\n  const handleExportClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setExportAnchorEl(event.currentTarget);\n  };\n  const handleExportClose = () => {\n    setExportAnchorEl(null);\n  };\n  const handleExcelExport = async () => {\n    if (!onExportExcel) {return;}\n    setIsExporting(true);\n    try {\n      const blob = await onExportExcel();\n      if (blob) {\n        saveAs(blob, `${filename}.xlsx`);\n      }\n    } catch (error) {\n      console.error('Error exporting Excel:', error);\n      // You might want to show a toast notification here\n    } finally {\n      setIsExporting(false);\n      handleExportClose();\n    }\n  };\n  const handleCSVExport = async () => {\n    if (!onExportCSV) {return;}\n    setIsExporting(true);\n    try {\n      const blob = await onExportCSV();\n      if (blob) {\n        saveAs(blob, `${filename}.csv`);\n      }\n    } catch (error) {\n      console.error('Error exporting CSV:', error);\n      // You might want to show a toast notification here\n    } finally {\n      setIsExporting(false);\n      handleExportClose();\n    }\n  };\n  const handlePrint = () => {\n    if (onPrint) {\n      onPrint();\n    } else {\n      // Default print behavior\n      window.print();\n    }\n  };\n  const hasExportOptions = (showExcel && onExportExcel) || (showCSV && onExportCSV);\n  return (\n    <Box sx={{ display: 'flex', gap: 1 }}>\n      {hasExportOptions && (\n        <>\n          <Button\n            startIcon={loading || isExporting ? <CircularProgress size={16} /> : <Download />}\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={handleExportClick}\n            disabled={disabled || loading || isExporting}\n            aria-label=\"Export options\"\n          >\n            Export\n          </Button>\n          <Menu\n            anchorEl={exportAnchorEl}\n            open={Boolean(exportAnchorEl)}\n            onClose={handleExportClose}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n          >\n            {showExcel && onExportExcel && (\n              <MenuItem onClick={handleExcelExport} disabled={isExporting}>\n                <TableChart sx={{ mr: 1 }} fontSize=\"small\" />\n                Export to Excel\n              </MenuItem>\n            )}\n            {showCSV && onExportCSV && (\n              <MenuItem onClick={handleCSVExport} disabled={isExporting}>\n                <Description sx={{ mr: 1 }} fontSize=\"small\" />\n                Export to CSV\n              </MenuItem>\n            )}\n          </Menu>\n        </>\n      )}\n      {showPrint && (\n        <Tooltip title=\"Print Report\">\n          <IconButton\n            size=\"small\"\n            onClick={handlePrint}\n            disabled={disabled || loading}\n            aria-label=\"Print report\"\n          >\n            <Print />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Box>\n  );\n};\nexport default ExportPrintToolbar;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/FactoryReset.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ForgotPasswordModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/IntegrationDashboard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Variable declaration expected.","line":90,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n/**\n * Integration Dashboard Component\n * \n * Centralized dashboard for managing all external integrations (Tally, email, calendar, payment, Zoho, etc.)\n * with health status, sync info, and access control.\n */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  Chip,\n  IconButton,\n  Tooltip,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Switch,\n  FormControlLabel,\n  Divider,\n  LinearProgress,\n  Badge\n} from '@mui/material';\nimport {\n  Settings,\n  CheckCircle,\n  Error,\n  Warning,\n  Refresh,\n  Edit,\n  Add,\n  Sync,\n  Timeline,\n  Security,\n  Email,\n  CalendarToday,\n  Payment,\n  AccountBalance,\n  Cloud,\n  Info,\n  PlayArrow,\n  History\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport axios from 'axios';\nexport interface IntegrationHealthStatus {\n  integration_name: string;\n  status: 'healthy' | 'warning' | 'error' | 'disconnected';\n  last_sync_at?: string;\n  sync_frequency?: string;\n  error_count: number;\n  configuration_valid: boolean;\n  performance_metrics?: {\n    last_sync_duration?: string;\n    records_synced?: number;\n    avg_response_time?: string;\n  };\n}\nexport interface IntegrationDashboardData {\n  tally_integration: IntegrationHealthStatus;\n  email_integration: IntegrationHealthStatus;\n  calendar_integration: IntegrationHealthStatus;\n  payment_integration: IntegrationHealthStatus;\n  zoho_integration: IntegrationHealthStatus;\n  system_health: {\n    database_status: string;\n    api_response_time: string;\n    last_backup: string;\n    storage_usage: string;\n  };\n}\ninterface IntegrationDashboardProps {\n  open: boolean;\n  onClose: () => void;\n}\nconst IntegrationDashboard: React.FC<IntegrationDashboardProps> = ({ open, onClose }) => {\nconst  = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [dashboardData, setDashboardData] = useState<IntegrationDashboardData | null>(null);\n  const [err, setErr] = useState<string | null>(null);\n  const [selectedIntegration, setSelectedIntegration] = useState<string | null>(null);\n  const [configDialogOpen, setConfigDialogOpen] = useState(false);\n  useEffect(() => {\n    if (open) {\n      loadDashboardData();\n    }\n  }, [open]);\n  const loadDashboardData = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('/api/v1/integrations/dashboard');\n      setDashboardData(response.data);\n    } catch (error) {\n      console.error('Failed to load dashboard data:', error);\n      setErr('Failed to load integration dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const syncIntegration = async (integrationName: string) => {\n    setLoading(true);\n    try {\n      await axios.post(`/api/v1/integrations/${integrationName}/sync`);\n      await loadDashboardData();\n    } catch (error) {\n      console.error(`Failed to sync ${integrationName}:`, error);\n      setErr(`Failed to sync ${integrationName}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const testConnection = async (integrationName: string) => {\n    setLoading(true);\n    try {\n      await axios.post(`/api/v1/integrations/${integrationName}/test`);\n      await loadDashboardData();\n    } catch (error) {\n      console.error(`Failed to test ${integrationName}:`, error);\n      setErr(`Failed to test connection for ${integrationName}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'healthy':\n        return 'success';\n      case 'warning':\n        return 'warning';\n      case 'error':\n        return 'error';\n      case 'disconnected':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'healthy':\n        return <CheckCircle color=\"success\" />;\n      case 'warning':\n        return <Warning color=\"warning\" />;\n      case 'error':\n        return <Error color=\"error\" />;\n      case 'disconnected':\n        return <Error color=\"disabled\" />;\n      default:\n        return <Info />;\n    }\n  };\n  const getIntegrationIcon = (name: string) => {\n    switch (name.toLowerCase()) {\n      case 'tally':\n        return <AccountBalance />;\n      case 'email':\n        return <Email />;\n      case 'calendar':\n        return <CalendarToday />;\n      case 'payment':\n        return <Payment />;\n      case 'zoho':\n        return <Cloud />;\n      default:\n        return <Settings />;\n    }\n  };\n  const renderIntegrationCard = (integration: IntegrationHealthStatus) => (\n    <Card key={integration.integration_name} sx={{ height: '100%' }}>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {getIntegrationIcon(integration.integration_name)}\n            <Typography variant=\"h6\">\n              {integration.integration_name}\n            </Typography>\n          </Box>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            {getStatusIcon(integration.status)}\n            <Chip \n              label={integration.status} \n              color={getStatusColor(integration.status) as any}\n              size=\"small\"\n            />\n          </Box>\n        </Box>\n        <Divider sx={{ mb: 2 }} />\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Last Sync: {integration.last_sync_at \n              ? new Date(integration.last_sync_at).toLocaleString()\n              : 'Never'\n            }\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Frequency: {integration.sync_frequency || 'Manual'}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Errors: {integration.error_count}\n          </Typography>\n        </Box>\n        {integration.performance_metrics && (\n          <Box sx={{ mb: 2 }}>\n            <Typography variant=\"caption\" color=\"text.secondary\" gutterBottom display=\"block\">\n              Performance Metrics:\n            </Typography>\n            {integration.performance_metrics.last_sync_duration && (\n              <Typography variant=\"body2\" fontSize=\"0.75rem\">\n                Last Sync: {integration.performance_metrics.last_sync_duration}\n              </Typography>\n            )}\n            {integration.performance_metrics.records_synced && (\n              <Typography variant=\"body2\" fontSize=\"0.75rem\">\n                Records: {integration.performance_metrics.records_synced}\n              </Typography>\n            )}\n            {integration.performance_metrics.avg_response_time && (\n              <Typography variant=\"body2\" fontSize=\"0.75rem\">\n                Response Time: {integration.performance_metrics.avg_response_time}\n              </Typography>\n            )}\n          </Box>\n        )}\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n          <Tooltip title=\"Test Connection\">\n            <IconButton \n              size=\"small\" \n              onClick={() => testConnection(integration.integration_name)}\n              disabled={loading}\n            >\n              <Refresh />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Sync Now\">\n            <IconButton \n              size=\"small\" \n              onClick={() => syncIntegration(integration.integration_name)}\n              disabled={loading}\n            >\n              <Sync />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Configure\">\n            <IconButton \n              size=\"small\" \n              onClick={() => {\n                setSelectedIntegration(integration.integration_name);\n                setConfigDialogOpen(true);\n              }}\n            >\n              <Settings />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"View History\">\n            <IconButton \n              size=\"small\"\n              onClick={() => {\n                // Navigate to integration history\n              }}\n            >\n              <History />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n  const renderSystemHealth = () => {\n    if (!dashboardData?.system_health) {return null;}\n    const { system_health } = dashboardData;\n    return (\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Timeline />\n          System Health\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"caption\" color=\"text.secondary\">Database</Typography>\n              <Typography variant=\"h6\" color={system_health.database_status === 'healthy' ? 'success.main' : 'error.main'}>\n                {system_health.database_status}\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"caption\" color=\"text.secondary\">API Response</Typography>\n              <Typography variant=\"h6\">\n                {system_health.api_response_time}\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"caption\" color=\"text.secondary\">Last Backup</Typography>\n              <Typography variant=\"body2\">\n                {new Date(system_health.last_backup).toLocaleDateString()}\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"caption\" color=\"text.secondary\">Storage Usage</Typography>\n              <Typography variant=\"h6\">\n                {system_health.storage_usage}\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  };\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      maxWidth=\"xl\" \n      fullWidth\n      PaperProps={{ sx: { minHeight: '80vh' } }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Timeline />\n            Integration Dashboard\n          </Box>\n          <Button\n            startIcon={<Refresh />}\n            onClick={loadDashboardData}\n            disabled={loading}\n          >\n            Refresh All\n          </Button>\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        {loading && !dashboardData && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n        {err && (\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setErr(null)}>\n            {err}\n          </Alert>\n        )}\n        {dashboardData && (\n          <>\n            {renderSystemHealth()}\n            <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <Settings />\n              Active Integrations\n            </Typography>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.tally_integration)}\n              </Grid>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.email_integration)}\n              </Grid>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.calendar_integration)}\n              </Grid>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.payment_integration)}\n              </Grid>\n              <Grid item xs={12} md={6} lg={4}>\n                {renderIntegrationCard(dashboardData.zoho_integration)}\n              </Grid>\n            </Grid>\n            <Box sx={{ mt: 4 }}>\n              <Typography variant=\"h6\" gutterBottom>Quick Actions</Typography>\n              <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                <Button variant=\"outlined\" startIcon={<Add />}>\n                  Add Integration\n                </Button>\n                <Button variant=\"outlined\" startIcon={<Security />}>\n                  Manage Permissions\n                </Button>\n                <Button variant=\"outlined\" startIcon={<Timeline />}>\n                  View Analytics\n                </Button>\n              </Box>\n            </Box>\n          </>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n      {/* Configuration Dialog */}\n      <Dialog\n        open={configDialogOpen}\n        onClose={() => setConfigDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          Configure {selectedIntegration}\n        </DialogTitle>\n        <DialogContent>\n          <Typography>\n            Configuration interface for {selectedIntegration} would be loaded here.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setConfigDialogOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\">Save</Button>\n        </DialogActions>\n      </Dialog>\n    </Dialog>\n  );\n};\nexport default IntegrationDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/LoginForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[38,49],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useRouter' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"useRouter"},"fix":{"range":[250,294],"text":""},"desc":"Remove unused variable 'useRouter'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":17,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"token"},"fix":{"range":[389,403],"text":""},"desc":"Remove unused variable 'token'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":17,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[402,423],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 25 column 10.","line":39,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 25 column 10.","line":39,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":39,"endColumn":24}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useEffect } from 'react';\nimport { \n  Box,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  CircularProgress\n} from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useRouter } from 'next/navigation';\nimport { authService } from '../services/authService';\ninterface LoginFormProps {\n  onLogin: (token: string, loginResponse?: any) => void;\n}\ninterface LoginFormData {\n  email: string;\n  password: string;\n}\nconst LoginForm: React.FC<LoginFormProps> = ({ onLogin }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { control, handleSubmit, formState: { errors } } = useForm<LoginFormData>({\n    defaultValues: {\n      email: '',\n      password: ''\n    }\n  });\n  const onSubmit = async (data: LoginFormData) => {\n    setLoading(true);\n    setError('');\n    try {\n      const response = await authService.loginWithEmail(data.email, data.password);\n      // Store user info - removed redundant localStorage sets since AuthContext handles it\n      onLogin(response.access_token, response);\n    } catch (error: any) {\n      // Better error handling to prevent flicker\n      const errorMessage = error.message || error.response?.data?.detail || 'Login failed. Please check your credentials.';\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return (\n    <Card>\n      <CardContent sx={{ p: 4 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom align=\"center\">\n          Standard Login\n        </Typography>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n        <Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>\n          <Controller\n            name=\"email\"\n            control={control}\n            rules={{\n              required: 'Email is required',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: 'Invalid email address'\n              }\n            }}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                fullWidth\n                label=\"Email Address\"\n                type=\"email\"\n                variant=\"outlined\"\n                slotProps={{\n                  inputLabel: {\n                    shrink: field.value ? true : undefined\n                  }\n                }}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n                margin=\"normal\"\n                autoComplete=\"email\"\n                autoFocus\n              />\n            )}\n          />\n          <Controller\n            name=\"password\"\n            control={control}\n            rules={{\n              required: 'Password is required'\n            }}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                fullWidth\n                label=\"Password\"\n                type=\"password\"\n                variant=\"outlined\"\n                slotProps={{\n                  inputLabel: {\n                    shrink: field.value ? true : undefined\n                  }\n                }}\n                error={!!errors.password}\n                helperText={errors.password?.message}\n                margin=\"normal\"\n                autoComplete=\"current-password\"\n              />\n            )}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n            disabled={loading}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Login'}\n          </Button>\n        </Box>\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n          Use your email and password to login, or try OTP authentication for enhanced security.\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\nexport default LoginForm;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/MegaMenu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":255,"column":2}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useEffect, useRef } from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  Menu,\n  MenuItem,\n  Box,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  IconButton,\n  ListItemButton,\n  Grid,\n  Tooltip,\n  InputBase\n} from '@mui/material';\nimport {\n  Dashboard,\n  Receipt,\n  Inventory,\n  People,\n  Business,\n  Assessment,\n  Settings,\n  AccountCircle,\n  ExpandMore,\n  ShoppingCart,\n  LocalShipping,\n  AccountBalance,\n  SwapHoriz,\n  TrendingUp,\n  BarChart,\n  Security,\n  Storage,\n  Build,\n  ReceiptLong,\n  NoteAdd,\n  AddBusiness,\n  DeveloperMode,\n  Analytics,\n  SupervisorAccount,\n  Engineering,\n  Schedule,\n  Payment,\n  Feedback,\n  AdminPanelSettings,\n  NotificationsActive,\n  History,\n  CloudUpload,\n  SupportAgent,\n  Assignment,\n  Timeline,\n  Groups,\n  CorporateFare,\n  ChevronRight,\n  LockOutlined,\n  Person,\n  ContactPhone,\n  PersonAdd,\n  AssignmentTurnedIn,\n  MonetizationOn,\n  Campaign,\n  LocalOffer,\n  Email,\n  Sms,\n  Chat,\n  SmartToy,\n  Poll,\n  SupportAgent as ServiceDeskIcon,\n  Task,\n  CalendarToday,\n  EventNote,\n  Alarm,\n  AccessTime,\n  CheckBox,\n  Inbox,\n  Send,\n  Drafts,\n  Menu as MenuIcon,\n  Search as SearchIcon\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\nimport CreateOrganizationLicenseModal from './CreateOrganizationLicenseModal';\nimport { isAppSuperAdmin, isOrgSuperAdmin, canManageUsers, canShowUserManagementInMegaMenu } from '../types/user.types';\nimport { useQuery } from '@tanstack/react-query';\nimport { companyService } from '../services/authService';\nimport { rbacService, SERVICE_PERMISSIONS } from '../services/rbacService';\nimport { organizationService } from '../services/organizationService';\ninterface MegaMenuProps {\n  user?: any;\n  onLogout: () => void;\n  isVisible?: boolean;\n}\nconst MegaMenu: React.FC<MegaMenuProps> = ({ user, onLogout, isVisible = true }) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [userMenuAnchor, setUserMenuAnchor] = useState<null | HTMLElement>(null);\n  const [activeMenu, setActiveMenu] = useState<string | null>(null);\n  const [subAnchorEl, setSubAnchorEl] = useState<null | HTMLElement>(null);\n  const [activeSubCategory, setActiveSubCategory] = useState<any>(null);\n  const [createLicenseModalOpen, setCreateLicenseModalOpen] = useState(false);\n  const [selectedSection, setSelectedSection] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filteredMenuItems, setFilteredMenuItems] = useState<any[]>([]);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const router = useRouter();\n  // Common button style for enhanced UI/UX\n  const modernButtonStyle = {\n    mx: 1,\n    transition: 'all 0.2s ease-in-out',\n    borderRadius: 2,\n    '&:hover': {\n      transform: 'translateY(-2px)',\n      backgroundColor: 'rgba(59, 130, 246, 0.1)',\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n    },\n    '&:focus': {\n      outline: '2px solid',\n      outlineColor: 'primary.main',\n      outlineOffset: '2px',\n    },\n    '&:active': {\n      transform: 'translateY(0) scale(0.98)',\n    }\n  };\n  // Query for company data to show logo\n  const { data: companyData } = useQuery({\n    queryKey: ['company'],\n    queryFn: companyService.getCurrentCompany,\n    enabled: !isAppSuperAdmin(user), // Only fetch for organization users\n    retry: false,\n    staleTime: 0, // 5 minutes\n  });\n  // Query for current organization (to get enabled_modules)\n  const { data: organizationData } = useQuery({\n    queryKey: ['currentOrganization'],\n    queryFn: organizationService.getCurrentOrganization,\n    enabled: !isAppSuperAdmin(user), // Only for organization users\n    retry: false,\n    staleTime: 0,\n    refetchOnWindowFocus: true, // Refetch when window regains focus\n    refetchInterval: 10000, // Auto-refetch every 10 seconds for testing\n    onSuccess: (data) => {\n      console.log('Organization data fetched:', {\n        enabled_modules: data.enabled_modules,\n        timestamp: new Date().toISOString()\n      });\n    },\n    onError: (error) => {\n      console.error('Failed to fetch organization data:', error);\n    }\n  });\n  // Query for current user's service permissions\n  const { data: userPermissions = [] } = useQuery({\n    queryKey: ['userServicePermissions'],\n    queryFn: rbacService.getCurrentUserPermissions,\n    enabled: !!user && !isAppSuperAdmin(user), // Only fetch for organization users\n    retry: false,\n    staleTime: 0, // 5 minutes\n    onSuccess: (data) => {\n      console.log('User permissions fetched:', data);\n    }\n  });\n  // Add keyboard event listener for Escape key\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        if (anchorEl) {\n// handleMenuClose is defined later in this file\n          handleMenuClose();\n        }\n        if (userMenuAnchor) {\n// handleUserMenuClose is defined later in this file\n          handleUserMenuClose();\n        }\n        if (subAnchorEl) {\n// handleSubClose is defined later in this file\n          handleSubClose();\n        }\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [anchorEl, userMenuAnchor, subAnchorEl]);\n  // Click outside to close search results\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setSearchQuery('');\n        setFilteredMenuItems([]);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [searchRef]);\n  // Don't render if not visible\n  if (!isVisible) {\n    return null;\n  }\n  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, menuName: string) => {\n    setAnchorEl(event.currentTarget);\n    setActiveMenu(menuName);\n    setSelectedSection(null);\n  };\n  const handleSubClick = (event: React.MouseEvent<HTMLElement>, category: any) => {\n    setSubAnchorEl(event.currentTarget);\n    setActiveSubCategory(category);\n  };\n  const handleUserMenuClick = (event: React.MouseEvent<HTMLElement>) => {\n    setUserMenuAnchor(event.currentTarget);\n  };\n  const navigateTo = (path: string) => {\n    router.push(path);\n// handleMenuClose is defined later in this file\n    handleMenuClose();\n// handleSubClose is defined later in this file\n    handleSubClose();\n  };\n  // Enhanced logo navigation function\n  const navigateToHome = () => {\n    router.push('/dashboard');\n// handleMenuClose is defined later in this file\n    handleMenuClose();\n  };\n  // Check user roles using proper utility functions\n  const isSuperAdmin = isAppSuperAdmin(user);\n  // Service permission helper functions\n  const hasServicePermission = (permission: string): boolean => {\n    return userPermissions.includes(permission);\n  };\n  const hasAnyServicePermission = (permissions: string[]): boolean => {\n    return permissions.some(permission => userPermissions.includes(permission));\n  };\n    const hasAccess = hasAnyServicePermission([\n      SERVICE_PERMISSIONS.SERVICE_READ,\n      SERVICE_PERMISSIONS.APPOINTMENT_READ,\n      SERVICE_PERMISSIONS.TECHNICIAN_READ,\n      SERVICE_PERMISSIONS.WORK_ORDER_READ\n    ]);\n    console.log('Permission check - canAccessService:', hasAccess, {\n      userPermissions,\n      timestamp: new Date().toISOString()\n    });\n    return hasAccess;\n  };\n    return hasServicePermission(SERVICE_PERMISSIONS.SERVICE_REPORTS_READ);\n  };\n    return hasServicePermission(SERVICE_PERMISSIONS.CRM_ADMIN) || isOrgSuperAdmin(user);\n  };\n  // Helper to check if a module is enabled for the organization\n    if (isSuperAdmin) {return true;} // Super admins see all\n    const enabled = organizationData?.enabled_modules?.[module] ?? false;\n    console.log(`Module check - ${module}:`, enabled, {\n      allModules: organizationData?.enabled_modules,\n      timestamp: new Date().toISOString()\n    });\n    return enabled;\n  };\n    // Navigate to demo page\n    router.push('/demo');\n// handleMenuClose is defined later in this file\n    handleMenuClose();\n  };\n    // In production, this could open a support ticket form or email client\n    window.location.href = 'mailto:support@tritiq.com?subject=Module Activation Request&body=Please activate the Service CRM module for my organization.';\n  };\n  const handleSubClose = () => {\n    setSubAnchorEl(null);\n    setActiveSubCategory(null);\n  };\n  const handleUserMenuClose = () => {\n    setUserMenuAnchor(null);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setActiveMenu(null);\n    setSelectedSection(null);\n  };\n    // For now, we'll use a state to control the modal\n    // In a full implementation, this would be managed by parent component\n    setCreateLicenseModalOpen(true);\n    handleMenuClose();\n  };\n  const menuItems = {\n    // Master Data - Restored as top-level menu with direct navigation\n    masterData: {\n      title: 'Master Data',\n      icon: <People />,\n      sections: [\n        {\n          title: 'Business Entities',\n          items: [\n            { name: 'Vendors', path: 'masters/vendors', icon: <People /> },\n            { name: 'Customers', path: 'masters/customers', icon: <Business /> },\n            { name: 'Employees', path: 'masters/employees', icon: <People /> },\n            { name: 'Company Details', path: 'masters/company-details', icon: <Business /> }\n          ]\n        },\n        {\n          title: 'Product & Inventory',\n          items: [\n            { name: 'Products', path: 'masters/products', icon: <Inventory /> },\n            { name: 'Categories', path: '/categories', icon: <Storage /> },\n            { name: 'Units', path: '/units', icon: <Storage /> },\n            { name: 'Bill of Materials (BOM)', path: '/bom', icon: <Build /> }\n          ]\n        },\n        {\n          title: 'Financial Configuration',\n          items: [\n            { name: 'Chart of Accounts', path: '/chart-of-accounts', icon: <AccountBalance /> },\n            { name: 'Tax Codes', path: '/tax-codes', icon: <Assessment /> },\n            { name: 'Payment Terms', path: '/payment-terms', icon: <Business /> }\n          ]\n        }\n      ]\n    },\n    // ERP menu now contains inventory and vouchers only\n    erp: {\n      title: 'ERP',\n      icon: <Business />,\n      sections: [\n        {\n          title: 'Inventory',\n          items: [\n            { name: 'Current Stock', path: '/inventory/stock', icon: <Inventory /> },\n            { name: 'Stock Movements', path: '/inventory/movements', icon: <SwapHoriz /> },\n            { name: 'Low Stock Report', path: '/inventory/low-stock', icon: <TrendingUp /> },\n            { name: 'Stock Bulk Import', path: '/inventory/bulk-import', icon: <CloudUpload />, role: 'org_admin' },\n            { name: 'Locations', path: '/inventory/locations', icon: <Storage /> },\n            { name: 'Bin Management', path: '/inventory/bins', icon: <Storage /> },\n            { name: 'Cycle Count', path: '/inventory/cycle-count', icon: <Assessment /> }\n          ]\n        },\n        {\n          title: 'Vouchers',\n          items: [\n            {\n              name: 'Purchase Vouchers',\n              subItems: [\n                { name: 'Purchase Order', path: '/vouchers/Purchase-Vouchers/purchase-order', icon: <LocalShipping /> },\n                { name: 'GRN (Goods Received Note)', path: '/vouchers/Purchase-Vouchers/grn', icon: <Inventory /> },\n                { name: 'Purchase Voucher', path: '/vouchers/Purchase-Vouchers/purchase-voucher', icon: <ShoppingCart /> },\n                { name: 'Purchase Return', path: '/vouchers/Purchase-Vouchers/purchase-return', icon: <SwapHoriz /> }\n              ]\n            },\n            {\n              name: 'Pre-Sales Vouchers',\n              subItems: [\n                { name: 'Quotation', path: '/vouchers/Pre-Sales-Voucher/quotation', icon: <NoteAdd /> },\n                { name: 'Proforma Invoice', path: '/vouchers/Pre-Sales-Voucher/proforma-invoice', icon: <ReceiptLong /> },\n                { name: 'Sales Order', path: '/vouchers/Pre-Sales-Voucher/sales-order', icon: <Assessment /> }\n              ]\n            },\n            {\n              name: 'Sales Vouchers',\n              subItems: [\n                { name: 'Sales Voucher', path: '/vouchers/Sales-Vouchers/sales-voucher', icon: <TrendingUp /> },\n                { name: 'Delivery Challan', path: '/vouchers/Sales-Vouchers/delivery-challan', icon: <LocalShipping /> },\n                { name: 'Sales Return', path: '/vouchers/Sales-Vouchers/sales-return', icon: <SwapHoriz /> }\n              ]\n            },\n            {\n              name: 'Financial Vouchers',\n              subItems: [\n                { name: 'Payment Voucher', path: '/vouchers/Financial-Vouchers/payment-voucher', icon: <AccountBalance /> },\n                { name: 'Receipt Voucher', path: '/vouchers/Financial-Vouchers/receipt-voucher', icon: <AccountBalance /> },\n                { name: 'Journal Voucher', path: '/vouchers/Financial-Vouchers/journal-voucher', icon: <AccountBalance /> },\n                { name: 'Contra Voucher', path: '/vouchers/Financial-Vouchers/contra-voucher', icon: <AccountBalance /> },\n                { name: 'Credit Note', path: '/vouchers/Financial-Vouchers/credit-note', icon: <AccountBalance /> },\n                { name: 'Debit Note', path: '/vouchers/Financial-Vouchers/debit-note', icon: <AccountBalance /> },\n                { name: 'Non-Sales Credit Note', path: '/vouchers/Financial-Vouchers/non-sales-credit-note', icon: <AccountBalance /> },\n                { name: 'Inter Department Voucher', path: '/vouchers/inter-department-voucher', icon: <SwapHoriz /> }\n              ]\n            },\n            {\n              name: 'Manufacturing Vouchers',\n              subItems: [\n                { name: 'Production Order', path: '/vouchers/Manufacturing-Vouchers/production-order', icon: <Build /> },\n                { name: 'Material Requisition', path: '/vouchers/Manufacturing-Vouchers/material-requisition', icon: <Storage /> },\n                { name: 'Work Order', path: '/vouchers/Manufacturing-Vouchers/work-order', icon: <Assessment /> },\n                { name: 'Finished Goods Receipt', path: '/vouchers/Manufacturing-Vouchers/finished-goods-receipt', icon: <Inventory /> }\n              ]\n            },\n            {\n              name: 'Others',\n              subItems: [\n                { name: 'RFQ (Request for Quotation)', path: '/vouchers/Others/rfq', icon: <Assignment /> },\n                { name: 'Dispatch Details', path: '/vouchers/Others/dispatch-details', icon: <LocalShipping /> }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    // Finance menu (split from Finance & Accounting)\n    finance: {\n      title: 'Finance',\n      icon: <AccountBalance />,\n      sections: [\n        {\n          title: 'Accounts Payable',\n          items: [\n            { name: 'Vendor Bills', path: '/accounts-payable', icon: <Receipt /> },\n            { name: 'Payment Vouchers', path: '/payment-vouchers', icon: <Payment /> },\n            { name: 'Vendor Aging', path: '/vendor-aging', icon: <Schedule /> }\n          ]\n        },\n        {\n          title: 'Accounts Receivable',\n          items: [\n            { name: 'Customer Invoices', path: '/accounts-receivable', icon: <ReceiptLong /> },\n            { name: 'Receipt Vouchers', path: '/receipt-vouchers', icon: <MonetizationOn /> },\n            { name: 'Customer Aging', path: '/customer-aging', icon: <Schedule /> }\n          ]\n        },\n        {\n          title: 'Cost Management',\n          items: [\n            { name: 'Cost Centers', path: '/cost-centers', icon: <CorporateFare /> },\n            { name: 'Budget Management', path: '/budgets', icon: <TrendingUp /> },\n            { name: 'Cost Analysis', path: '/cost-analysis', icon: <Analytics /> }\n          ]\n        },\n        {\n          title: 'Financial Reports',\n          items: [\n            { name: 'Cash Flow', path: '/reports/cash-flow', icon: <AccountBalance /> },\n            { name: 'Cash Flow Forecast', path: '/cash-flow-forecast', icon: <Assessment /> }\n          ]\n        },\n        {\n          title: 'Analytics & KPIs',\n          items: [\n            { name: 'Finance Dashboard', path: '/finance-dashboard', icon: <Analytics /> },\n            { name: 'Financial KPIs', path: '/financial-kpis', icon: <TrendingUp /> },\n            { name: 'Expense Analysis', path: '/expense-analysis', icon: <BarChart /> }\n          ]\n        }\n      ]\n    },\n    // Accounting menu (split from Finance & Accounting)\n    accounting: {\n      title: 'Accounting',\n      icon: <AccountBalance />,\n      sections: [\n        {\n          title: 'Chart of Accounts',\n          items: [\n            { name: 'Chart of Accounts', path: '/chart-of-accounts', icon: <AccountBalance /> },\n            { name: 'Account Groups', path: '/account-groups', icon: <Business /> },\n            { name: 'Opening Balances', path: '/opening-balances', icon: <TrendingUp /> }\n          ]\n        },\n        {\n          title: 'Transactions',\n          items: [\n            { name: 'General Ledger', path: '/general-ledger', icon: <ReceiptLong /> },\n            { name: 'Journal Entries', path: '/journal-entries', icon: <NoteAdd /> },\n            { name: 'Bank Reconciliation', path: '/bank-reconciliation', icon: <AccountBalance /> }\n          ]\n        },\n        {\n          title: 'Financial Reports',\n          items: [\n            { name: 'Trial Balance', path: '/reports/trial-balance', icon: <BarChart /> },\n            { name: 'Profit & Loss', path: '/reports/profit-loss', icon: <TrendingUp /> },\n            { name: 'Balance Sheet', path: '/reports/balance-sheet', icon: <Assessment /> }\n          ]\n        }\n      ]\n    },\n    // Reports & Analytics menu\n    reportsAnalytics: {\n      title: 'Reports & Analytics',\n      icon: <Assessment />,\n      sections: [\n        {\n          title: 'Financial Reports',\n          items: [\n            { name: 'Ledgers', path: '/reports/ledgers', icon: <AccountBalance /> },\n            { name: 'Trial Balance', path: '/reports/trial-balance', icon: <BarChart /> },\n            { name: 'Profit & Loss', path: '/reports/profit-loss', icon: <TrendingUp /> },\n            { name: 'Balance Sheet', path: '/reports/balance-sheet', icon: <Assessment /> }\n          ]\n        },\n        {\n          title: 'Inventory Reports',\n          items: [\n            { name: 'Stock Report', path: '/reports/stock', icon: <Inventory /> },\n            { name: 'Valuation Report', path: '/reports/valuation', icon: <BarChart /> },\n            { name: 'Movement Report', path: '/reports/movements', icon: <SwapHoriz /> }\n          ]\n        },\n        {\n          title: 'Business Reports',\n          items: [\n            { name: 'Sales Analysis', path: '/reports/sales-analysis', icon: <TrendingUp /> },\n            { name: 'Purchase Analysis', path: '/reports/purchase-analysis', icon: <ShoppingCart /> },\n            { name: 'Vendor Analysis', path: '/reports/vendor-analysis', icon: <People /> }\n          ]\n        },\n        {\n          title: 'Business Analytics',\n          items: [\n            { name: 'Customer Analytics', path: '/analytics/customer', icon: <TrendingUp /> },\n            { name: 'Sales Analytics', path: '/analytics/sales', icon: <BarChart /> },\n            { name: 'Purchase Analytics', path: '/analytics/purchase', icon: <ShoppingCart /> }\n          ]\n        },\n        {\n          title: 'Service Analytics',\n          items: [\n            { name: 'Service Dashboard', path: '/analytics/service', icon: <Dashboard />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ },\n            { name: 'Job Completion', path: '/analytics/service/job-completion', icon: <Assignment />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ },\n            { name: 'Technician Performance', path: '/analytics/service/technician-performance', icon: <Engineering />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ },\n            { name: 'Customer Satisfaction', path: '/analytics/service/customer-satisfaction', icon: <Feedback />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ },\n            { name: 'SLA Compliance', path: '/analytics/service/sla-compliance', icon: <Timeline />, servicePermission: SERVICE_PERMISSIONS.SERVICE_REPORTS_READ }\n          ]\n        }\n      ]\n    },\n    // Sales menu (renamed from CRM, with service options removed)\n    sales: {\n      title: 'Sales',\n      icon: <Person />,\n      sections: [\n        {\n          title: 'Sales CRM',\n          items: [\n            { name: 'Sales Dashboard', path: '/sales/dashboard', icon: <Dashboard /> },\n            { name: 'Lead Management', path: '/sales/leads', icon: <PersonAdd /> },\n            { name: 'Opportunity Tracking', path: '/sales/opportunities', icon: <TrendingUp /> },\n            { name: 'Sales Pipeline', path: '/sales/pipeline', icon: <Timeline /> }\n          ]\n        },\n        {\n          title: 'Customer Management',\n          items: [\n            { name: 'Customer Database', path: '/sales/customers', icon: <People /> },\n            { name: 'Contact Management', path: '/sales/contacts', icon: <ContactPhone /> },\n            { name: 'Account Management', path: '/sales/accounts', icon: <Business /> },\n            { name: 'Customer Analytics', path: '/sales/customer-analytics', icon: <Analytics /> }\n          ]\n        },\n        {\n          title: 'Sales Operations',\n          items: [\n            { name: 'Quotations', path: '/vouchers/Pre-Sales-Voucher/quotation', icon: <NoteAdd /> },\n            { name: 'Sales Orders', path: '/vouchers/Pre-Sales-Voucher/sales-order', icon: <Receipt /> },\n            { name: 'Commission Tracking', path: '/sales/commissions', icon: <MonetizationOn /> },\n            { name: 'Sales Reports', path: '/sales/reports', icon: <Assessment /> }\n          ]\n        }\n      ]\n    },\n    // Marketing Module\n    marketing: {\n      title: 'Marketing',\n      icon: <Campaign />,\n      sections: [\n        {\n          title: 'Campaign Management',\n          items: [\n            { name: 'Marketing Dashboard', path: '/marketing', icon: <Dashboard /> },\n            { name: 'Campaigns', path: '/marketing/campaigns', icon: <Campaign /> },\n            { name: 'Email Campaigns', path: '/marketing/campaigns/email', icon: <Email /> },\n            { name: 'SMS Campaigns', path: '/marketing/campaigns/sms', icon: <Sms /> },\n            { name: 'Social Media', path: '/marketing/campaigns/social', icon: <Groups /> }\n          ]\n        },\n        {\n          title: 'Promotions & Offers',\n          items: [\n            { name: 'Promotions', path: '/marketing/promotions', icon: <LocalOffer /> },\n            { name: 'Discount Codes', path: '/marketing/discount-codes', icon: <LocalOffer /> },\n            { name: 'Promotion Analytics', path: '/marketing/promotion-analytics', icon: <Analytics /> }\n          ]\n        },\n        {\n          title: 'Customer Engagement',\n          items: [\n            { name: 'Marketing Lists', path: '/marketing/lists', icon: <ContactPhone /> },\n            { name: 'Segmentation', path: '/marketing/segmentation', icon: <Groups /> },\n            { name: 'Campaign Analytics', path: '/marketing/analytics', icon: <Assessment /> },\n            { name: 'ROI Reports', path: '/marketing/reports/roi', icon: <MonetizationOn /> }\n          ]\n        }\n      ]\n    },\n    // Service menu (renamed from Service Desk, with CRM service options added)\n    service: {\n      title: 'Service',\n      icon: <SupportAgent />,\n      sections: [\n        {\n          title: 'Helpdesk & Ticketing',\n          items: [\n            { name: 'Service Dashboard', path: '/service-desk', icon: <Dashboard /> },\n            { name: 'Tickets', path: '/service-desk/tickets', icon: <Assignment /> },\n            { name: 'SLA Management', path: '/service-desk/sla', icon: <Schedule /> },\n            { name: 'Escalations', path: '/service-desk/escalations', icon: <TrendingUp /> }\n          ]\n        },\n        {\n          title: 'Omnichannel Support',\n          items: [\n            { name: 'Chat Conversations', path: '/service-desk/chat', icon: <Chat /> },\n            { name: 'Chatbot Management', path: '/service-desk/chatbot', icon: <SmartToy /> },\n            { name: 'Channel Configuration', path: '/service-desk/channels', icon: <Settings /> },\n            { name: 'Knowledge Base', path: '/service-desk/knowledge', icon: <Storage /> }\n          ]\n        },\n        {\n          title: 'Feedback & Surveys',\n          items: [\n            { name: 'Customer Surveys', path: '/service-desk/surveys', icon: <Poll /> },\n            { name: 'Survey Templates', path: '/service-desk/survey-templates', icon: <NoteAdd /> },\n            { name: 'Feedback Analytics', path: '/service-desk/feedback-analytics', icon: <Analytics /> },\n            { name: 'Satisfaction Reports', path: '/service-desk/satisfaction', icon: <Feedback /> }\n          ]\n        },\n        {\n          title: 'Service CRM',\n          items: [\n            { name: 'Service Dashboard', path: '/service/dashboard', icon: <Dashboard />, servicePermission: SERVICE_PERMISSIONS.SERVICE_READ },\n            { name: 'Dispatch Management', path: '/service/dispatch', icon: <LocalShipping />, servicePermission: SERVICE_PERMISSIONS.WORK_ORDER_READ },\n            { name: 'SLA Management', path: '/sla', icon: <Schedule />, servicePermission: SERVICE_PERMISSIONS.SERVICE_READ },\n            { name: 'Feedback Workflow', path: '/service/feedback', icon: <Feedback />, servicePermission: SERVICE_PERMISSIONS.CUSTOMER_SERVICE_READ }\n          ]\n        },\n        {\n          title: 'Management',\n          items: [\n            { name: 'Technicians', path: '/service/technicians', icon: <Engineering />, servicePermission: SERVICE_PERMISSIONS.TECHNICIAN_READ },\n            { name: 'Work Orders', path: '/service/work-orders', icon: <Assignment />, servicePermission: SERVICE_PERMISSIONS.WORK_ORDER_READ },\n            { name: 'Appointments', path: '/service/appointments', icon: <Schedule />, servicePermission: SERVICE_PERMISSIONS.APPOINTMENT_READ }\n          ]\n        }\n      ]\n    },\n    hrManagement: {\n      title: 'HR Management',\n      icon: <Groups />,\n      sections: [\n        {\n          title: 'Employee Management',\n          items: [\n            { name: 'Employee Directory', path: '/hr/employees-directory', icon: <People /> },\n            { name: 'Employee Onboarding', path: '/hr/onboarding', icon: <PersonAdd /> },\n            { name: 'Performance Management', path: '/hr/performance', icon: <Assessment /> },\n            { name: 'Employee Records', path: '/hr/records', icon: <Storage /> }\n          ]\n        },\n        {\n          title: 'Payroll & Benefits',\n          items: [\n            { name: 'Payroll Management', path: '/hr/payroll', icon: <MonetizationOn /> },\n            { name: 'Salary Processing', path: '/hr/salary', icon: <Payment /> },\n            { name: 'Benefits Administration', path: '/hr/benefits', icon: <Security /> },\n            { name: 'Tax Management', path: '/hr/tax', icon: <AccountBalance /> }\n          ]\n        },\n        {\n          title: 'Time & Attendance',\n          items: [\n            { name: 'Time Tracking', path: '/hr/timesheet', icon: <Schedule /> },\n            { name: 'Leave Management', path: '/hr/leave', icon: <Timeline /> },\n            { name: 'Attendance Reports', path: '/hr/attendance', icon: <BarChart /> },\n            { name: 'Shift Management', path: '/hr/shifts', icon: <Schedule /> }\n          ]\n        },\n        {\n          title: 'Recruitment',\n          items: [\n            { name: 'Job Postings', path: '/hr/jobs', icon: <AddBusiness /> },\n            { name: 'Candidate Management', path: '/hr/candidates', icon: <Person /> },\n            { name: 'Interview Scheduling', path: '/hr/interviews', icon: <Schedule /> },\n            { name: 'Hiring Pipeline', path: '/hr/hiring', icon: <Timeline /> }\n          ]\n        }\n      ]\n    },\n    // Tasks & Calendar menu (split from Workspace)\n    tasksCalendar: {\n      title: 'Tasks & Calendar',\n      icon: <Task />,\n      sections: [\n        {\n          title: 'Tasks',\n          items: [\n            { name: 'Task Dashboard', path: '/tasks/dashboard', icon: <Dashboard /> },\n            { name: 'My Tasks', path: '/tasks', icon: <Task /> },\n            { name: 'Task Projects', path: '/tasks/projects', icon: <Assignment /> },\n            { name: 'Create Task', path: '/tasks/create', icon: <NoteAdd /> }\n          ]\n        },\n        {\n          title: 'Time Management',\n          items: [\n            { name: 'Time Tracking', path: '/tasks/time-logs', icon: <AccessTime /> },\n            { name: 'Task Reports', path: '/tasks/reports', icon: <Assessment /> },\n            { name: 'Team Performance', path: '/tasks/team-performance', icon: <Groups /> },\n            { name: 'Project Analytics', path: '/tasks/project-analytics', icon: <Analytics /> }\n          ]\n        },\n        {\n          title: 'Task Operations',\n          items: [\n            { name: 'Task Assignment', path: '/tasks/assignments', icon: <AssignmentTurnedIn /> },\n            { name: 'Task Templates', path: '/tasks/templates', icon: <Storage /> },\n            { name: 'Task Reminders', path: '/tasks/reminders', icon: <Alarm /> },\n            { name: 'Task Comments', path: '/tasks/comments', icon: <Chat /> }\n          ]\n        },\n        {\n          title: 'Calendar Views',\n          items: [\n            { name: 'Calendar Dashboard', path: '/calendar/dashboard', icon: <Dashboard /> },\n            { name: 'Calendar View', path: '/calendar', icon: <CalendarToday /> },\n            { name: 'My Events', path: '/calendar/events', icon: <EventNote /> },\n            { name: 'Create Event', path: '/calendar/create', icon: <NoteAdd /> }\n          ]\n        },\n        {\n          title: 'Scheduling',\n          items: [\n            { name: 'Appointments', path: '/calendar/appointments', icon: <Schedule /> },\n            { name: 'Meeting Rooms', path: '/calendar/meeting-rooms', icon: <Business /> },\n            { name: 'Event Reminders', path: '/calendar/reminders', icon: <Alarm /> },\n            { name: 'Recurring Events', path: '/calendar/recurring', icon: <Timeline /> }\n          ]\n        }\n      ]\n    },\n    // Email menu (split from Workspace)\n    email: {\n      title: 'Email',\n      icon: <Email />,\n      sections: [\n        {\n          title: 'Email Management',\n          items: [\n            { name: 'Mail Dashboard', path: '/mail/dashboard', icon: <Dashboard /> },\n            { name: 'Inbox', path: '/mail/inbox', icon: <Inbox /> },\n            { name: 'Sent Items', path: '/mail/sent', icon: <Send /> },\n            { name: 'Drafts', path: '/mail/drafts', icon: <Drafts /> }\n          ]\n        },\n        {\n          title: 'Mail Operations',\n          items: [\n            { name: 'Compose Mail', path: '/mail/compose', icon: <NoteAdd /> },\n            { name: 'Email Accounts', path: '/mail/accounts', icon: <AccountCircle /> },\n            { name: 'Email Templates', path: '/mail/templates', icon: <Storage /> },\n            { name: 'Email Rules', path: '/mail/rules', icon: <Settings /> }\n          ]\n        },\n        {\n          title: 'Integration & Sync',\n          items: [\n            { name: 'Email Sync', path: '/mail/sync', icon: <CloudUpload /> },\n            { name: 'Task Linking', path: '/mail/task-linking', icon: <Task /> },\n            { name: 'Calendar Linking', path: '/mail/calendar-linking', icon: <CalendarToday /> },\n            { name: 'Email Analytics', path: '/mail/analytics', icon: <Analytics /> }\n          ]\n        }\n      ]\n    },\n    settings: {\n      title: 'Settings',\n      icon: <Settings />,\n      sections: [\n        {\n          title: 'Organization Settings',\n          items: [\n            { name: 'General Settings', path: '/settings', icon: <Settings /> },\n            { name: 'Company Profile', path: '/settings/company', icon: <Business /> },\n            { name: 'User Management', path: '/settings/users', icon: <People /> }\n          ]\n        },\n        {\n          title: 'Administration',\n          items: [\n            { name: 'App Users', path: '/admin/app-user-management', icon: <Groups />, superAdminOnly: true },\n            { name: 'Organization Management', path: '/admin/manage-organizations', icon: <CorporateFare />, superAdminOnly: true },\n            { name: 'License Management', path: '/admin/license-management', icon: <Security />, superAdminOnly: true },\n            { name: 'Role Management', path: '/admin/rbac', icon: <SupervisorAccount />, servicePermission: SERVICE_PERMISSIONS.CRM_ADMIN },\n            { name: 'Service Settings', path: '/admin/service-settings', icon: <Settings />, servicePermission: SERVICE_PERMISSIONS.CRM_SETTINGS },\n            { name: 'Audit Logs', path: '/admin/audit-logs', icon: <History />, role: 'org_admin' },\n            { name: 'Notification Management', path: '/admin/notifications', icon: <NotificationsActive />, role: 'org_admin' }\n          ]\n        }\n      ]\n    }\n  };\n  // Create main menu sections dynamically\n  const mainMenuSections = isSuperAdmin\n    ? [\n        {\n          title: 'Administration',\n          subSections: [\n            {\n              title: 'Administration',\n              items: [\n                { name: 'Dashboard', path: '/dashboard', icon: <Dashboard /> },\n                { name: 'Demo', path: '/demo', icon: <DeveloperMode /> }\n              ]\n            }\n          ]\n        }\n      ]\n    : [\n        { title: 'Master Data', subSections: menuItems.masterData.sections },\n        { title: 'ERP', subSections: menuItems.erp.sections },\n        { title: 'Finance', subSections: menuItems.finance.sections },\n        { title: 'Accounting', subSections: menuItems.accounting.sections },\n        { title: 'Reports & Analytics', subSections: menuItems.reportsAnalytics.sections },\n        { title: 'Sales', subSections: menuItems.sales.sections },\n        { title: 'Marketing', subSections: menuItems.marketing.sections },\n        { title: 'Service', subSections: menuItems.service.sections },\n        { title: 'HR Management', subSections: menuItems.hrManagement.sections },\n        { title: 'Tasks & Calendar', subSections: menuItems.tasksCalendar.sections },\n        { title: 'Email', subSections: menuItems.email.sections }\n      ];\n  menuItems.menu = {\n    title: 'Menu',\n    icon: <MenuIcon />,\n    sections: mainMenuSections\n  };\n  const flattenMenuItems = (menu: any) => {\n    let items = [];\n    menu.sections.forEach(section => {\n      section.subSections.forEach(subSection => {\n        subSection.items.forEach(item => {\n          if (item.subItems) {\n            item.subItems.forEach(subItem => items.push(subItem));\n          } else {\n            items.push(item);\n          }\n        });\n      });\n    });\n    return items;\n  };\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    if (query.length >= 2) {\n      const allItems = flattenMenuItems(menuItems.menu);\n      const filtered = allItems.filter(item => item.name.toLowerCase().includes(query.toLowerCase()));\n      setFilteredMenuItems(filtered);\n    } else {\n      setFilteredMenuItems([]);\n    }\n  };\n  const renderMegaMenu = () => {\n    if (!activeMenu || !menuItems[activeMenu as keyof typeof menuItems]) {return null;}\n    const menu = menuItems[activeMenu as keyof typeof menuItems];\n    // Filter menu items based on user permissions\n    const filterMenuItems = (subSection: any) => {\n      return subSection.items.filter((item: any) => {\n        // Check role-based permissions\n        if (item.role && !canManageUsers(user)) {\n          return false;\n        }\n        // Check super admin only items\n        if (item.superAdminOnly && !isSuperAdmin) {\n          return false;\n        }\n        // Check service permissions\n        if (item.servicePermission && !hasServicePermission(item.servicePermission)) {\n          return false;\n        }\n        return true;\n      });\n    };\n    const normalizedSections = menu.sections.map(section => {\n      if (!section.subSections) {\n        return {\n          ...section,\n          subSections: [{\n            title: '',\n            items: section.items || []\n          }]\n        };\n      }\n      return section;\n    });\n    const filteredSections = normalizedSections.map(section => ({\n      ...section,\n      subSections: section.subSections.map((subSection: any) => ({\n        ...subSection,\n        items: filterMenuItems(subSection)\n      })).filter((subSection: any) => subSection.items.length > 0)\n    })).filter(section => section.subSections.length > 0);\n    if (filteredSections.length === 0) {\n      console.log(`No items in submenu for ${activeMenu} - permissions may be missing`);\n      return null;\n    }\n    return (\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n        PaperProps={{\n          sx: {\n            width: selectedSection ? 'calc(100vw - 40px)' : 'auto',\n            maxWidth: selectedSection ? 'calc(100vw - 40px)' : 'auto',\n            maxHeight: 'calc(100vh - 100px)',\n            overflowY: 'hidden',\n            mt: 0,\n            borderRadius: 2,\n            boxShadow: '0 10px 40px rgba(0, 0, 0, 0.15)',\n            border: '1px solid',\n            borderColor: 'divider',\n            left: '20px !important',\n            right: 'auto',\n            '& .MuiMenuItem-root': {\n              borderRadius: 1,\n              margin: '2px 8px',\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                backgroundColor: 'primary.50',\n                transform: 'translateX(4px)',\n              }\n            }\n          }\n        }}\n        MenuListProps={{\n          sx: {\n            padding: 1\n          }\n        }}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n        disableAutoFocusItem\n      >\n        <Grid container>\n          <Grid item xs={3}>\n            <List>\n              {filteredSections.map((section, index) => (\n                <ListItemButton\n                  key={index}\n                  selected={selectedSection === section.title}\n                  onClick={() => setSelectedSection(section.title)}\n                  sx={{\n                    backgroundColor: selectedSection === section.title ? 'primary.light' : 'transparent',\n                    color: selectedSection === section.title ? 'primary.contrastText' : 'text.primary',\n                    '&:hover': {\n                      backgroundColor: 'primary.main',\n                      color: 'primary.contrastText',\n                    }\n                  }}\n                >\n                  <ListItemText primary={section.title} />\n                  <ChevronRight />\n                </ListItemButton>\n              ))}\n            </List>\n          </Grid>\n          <Grid item xs={9} sx={{ pl: 2 }}>\n            {selectedSection && (\n              <Grid container spacing={2}>\n                {filteredSections.find(s => s.title === selectedSection)?.subSections.map((subSection: any, subIndex: number) => (\n                  <Grid item xs={12} sm={6} md={4} key={subIndex}>\n                    {subSection.title && (\n                      <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 'bold', color: 'secondary.main' }}>\n                        {subSection.title}\n                      </Typography>\n                    )}\n                    <List dense>\n                      {subSection.items.map((item: any, itemIndex: number) => (\n                        <ListItemButton\n                          key={itemIndex}\n                          onClick={(e) => item.subItems ? handleSubClick(e, item) : navigateTo(item.path)}\n                          sx={{\n                            borderRadius: 1,\n                            mb: 0.5,\n                            '&:hover': {\n                              backgroundColor: 'secondary.light',\n                              color: 'secondary.contrastText'\n                            }\n                          }}\n                        >\n                          <ListItemIcon sx={{ minWidth: 36 }}>\n                            {item.icon}\n                          </ListItemIcon>\n                          <ListItemText primary={item.name} />\n                          {item.subItems && <ChevronRight />}\n                        </ListItemButton>\n                      ))}\n                    </List>\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </Grid>\n        </Grid>\n      </Menu>\n    );\n  };\n  const renderSubMenu = () => {\n    if (!activeSubCategory) {return null;}\n    return (\n      <Menu\n        anchorEl={subAnchorEl}\n        open={Boolean(subAnchorEl)}\n        onClose={handleSubClose}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'left' }}\n        PaperProps={{\n          sx: {\n            ml: 1,\n            borderRadius: 2,\n            boxShadow: '0 10px 40px rgba(0, 0, 0, 0.15)',\n            border: '1px solid',\n            borderColor: 'divider',\n            '& .MuiMenuItem-root': {\n              borderRadius: 1,\n              margin: '2px 8px',\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                backgroundColor: 'primary.50',\n                transform: 'translateX(4px)',\n              }\n            }\n          }\n        }}\n        MenuListProps={{\n          sx: {\n            padding: 1\n          }\n        }}\n      >\n        <Typography variant=\"subtitle2\" sx={{ px: 2, py: 1, fontWeight: 'bold' }}>\n          {activeSubCategory.name}\n        </Typography>\n        <Divider />\n        <List dense>\n          {activeSubCategory.subItems.map((subItem: any, subIndex: number) => (\n            <ListItemButton\n              key={subIndex}\n              onClick={() => navigateTo(subItem.path)}\n              sx={{\n                px: 3,\n                py: 1,\n                minWidth: 200,\n                '&:hover': {\n                  backgroundColor: 'primary.light',\n                  color: 'primary.contrastText'\n                }\n              }}\n            >\n              <ListItemIcon sx={{ minWidth: 36 }}>\n                {subItem.icon}\n              </ListItemIcon>\n              <ListItemText primary={subItem.name} />\n            </ListItemButton>\n          ))}\n        </List>\n      </Menu>\n    );\n  };\n  const renderSearchResults = () => {\n    if (filteredMenuItems.length === 0) {return null;}\n    return (\n      <Menu\n        open={filteredMenuItems.length > 0}\n        onClose={() => setSearchQuery('')}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        PaperProps={{\n          sx: {\n            width: 300,\n            maxHeight: 400,\n          }\n        }}\n      >\n        {filteredMenuItems.map((item, index) => (\n          <MenuItem key={index} onClick={() => navigateTo(item.path)}>\n            {item.name}\n          </MenuItem>\n        ))}\n      </Menu>\n    );\n  };\n  return (\n    <>\n      <AppBar\n        position=\"static\"\n        className=\"modern-nav\"\n        sx={{\n          backgroundColor: 'var(--bg-surface)',\n          color: 'var(--text-primary)',\n          boxShadow: 'var(--shadow-sm)',\n          borderBottom: '1px solid var(--border-primary)'\n        }}\n      >\n        <Toolbar>\n          {/* Menu and Settings on the left */}\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <Button\n              color=\"inherit\"\n              startIcon={<MenuIcon />}\n              endIcon={<ExpandMore />}\n              onClick={(e) => handleMenuClick(e, 'menu')}\n              className=\"modern-menu-button\"\n              sx={modernButtonStyle}\n            >\n              Menu\n            </Button>\n            <Button\n              color=\"inherit\"\n              startIcon={<Settings />}\n              endIcon={<ExpandMore />}\n              onClick={(e) => handleMenuClick(e, 'settings')}\n              className=\"modern-menu-button\"\n              sx={modernButtonStyle}\n            >\n              Settings\n            </Button>\n          </Box>\n          {/* Enhanced Logo Section in the center */}\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              cursor: 'pointer',\n              flexGrow: 1,\n              justifyContent: 'center',\n              '&:hover': {\n                backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                borderRadius: 1\n              },\n              p: 1,\n              borderRadius: 1,\n              transition: 'background-color 0.2s'\n            }}\n            onClick={navigateToHome}\n          >\n            <Box\n              component=\"img\"\n              src=\"/Tritiq.png\"\n              alt=\"TritiQ\"\n              sx={{\n                width: 40,\n                height: 40,\n                mr: 1,\n                objectFit: 'contain'\n              }}\n            />\n            <Typography variant=\"h6\" component=\"div\" sx={{ fontWeight: 'bold' }}>\n              {companyData?.name || 'ERP'}\n            </Typography>\n          </Box>\n          {/* Search bar on the right */}\n          <Box sx={{ display: 'flex', alignItems: 'center', position: 'relative', ml: 2 }} ref={searchRef}>\n            <InputBase\n              placeholder=\"Search…\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              startAdornment={<SearchIcon />}\n              sx={{\n                color: 'inherit',\n                ml: 1,\n                '& .MuiInputBase-input': {\n                  padding: '8px 8px 8px 0',\n                  transition: 'width 0.3s',\n                  width: searchQuery ? '200px' : '100px',\n                },\n              }}\n            />\n            {renderSearchResults()}\n          </Box>\n          <IconButton\n            color=\"inherit\"\n            onClick={handleUserMenuClick}\n            sx={{ ml: 2 }}\n          >\n            <AccountCircle />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      {renderMegaMenu()}\n      {renderSubMenu()}\n      <Menu\n        anchorEl={userMenuAnchor}\n        open={Boolean(userMenuAnchor)}\n        onClose={handleUserMenuClose}\n        PaperProps={{\n          sx: {\n            borderRadius: 2,\n            boxShadow: '0 10px 40px rgba(0, 0, 0, 0.15)',\n            border: '1px solid',\n            borderColor: 'divider',\n            minWidth: 200,\n            '& .MuiMenuItem-root': {\n              borderRadius: 1,\n              margin: '2px 8px',\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                backgroundColor: 'primary.50',\n                transform: 'translateX(4px)',\n              }\n            }\n          }\n        }}\n        MenuListProps={{\n          sx: {\n            padding: 1\n          }\n        }}\n      >\n        <MenuItem onClick={handleUserMenuClose}>\n          <Typography variant=\"body2\">\n            {user?.full_name || user?.email || 'User'}\n          </Typography>\n        </MenuItem>\n        <MenuItem onClick={handleUserMenuClose}>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            Role: {user?.role || 'Standard User'}\n          </Typography>\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={() => router.push('/profile')}>\n          Profile Settings\n        </MenuItem>\n        <MenuItem onClick={onLogout}>\n          Logout\n        </MenuItem>\n      </Menu>\n      {/* Organization License Creation Modal */}\n      <CreateOrganizationLicenseModal\n        open={createLicenseModalOpen}\n        onClose={() => setCreateLicenseModalOpen(false)}\n        onSuccess={(result) => {\n          console.log('License created:', result);\n          // You might want to show a success notification here\n        }}\n      />\n    </>\n  );\n};\nexport default MegaMenu;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/MigrationWizard.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Variable declaration expected.","line":94,"column":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n/**\n * Migration Wizard Component\n * \n * A comprehensive step-by-step wizard for importing data from external ERPs like Tally, Zoho.\n * Provides guided migration workflow with data mapping, validation, and progress monitoring.\n */\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Stepper,\n  Step,\n  StepLabel,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  LinearProgress,\n  Chip,\n  Card,\n  CardContent,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport {\n  Upload,\n  CheckCircle,\n  Error,\n  Warning,\n  Refresh,\n  CloudUpload,\n  Settings,\n  PlayArrow,\n  Undo,\n  Download,\n  Info\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport axios from 'axios';\nexport interface MigrationJob {\n  id: number;\n  job_name: string;\n  description: string;\n  source_type: string;\n  data_types: string[];\n  status: string;\n  created_at: string;\n  progress_percentage?: number;\n  error_message?: string;\n}\nexport interface MigrationWizardStep {\n  step_number: number;\n  step_name: string;\n  is_completed: boolean;\n  is_current: boolean;\n  can_skip: boolean;\n  data?: any;\n}\nexport interface MigrationWizardState {\n  job_id: number;\n  current_step: number;\n  total_steps: number;\n  steps: MigrationWizardStep[];\n  can_proceed: boolean;\n  validation_errors: string[];\n}\ninterface MigrationWizardProps {\n  open: boolean;\n  onClose: () => void;\n  jobId?: number;\n}\nconst MigrationWizard: React.FC<MigrationWizardProps> = ({ open, onClose, jobId }) => {\nconst  = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [wizardState, setWizardState] = useState<MigrationWizardState | null>(null);\n  const [currentJob, setCurrentJob] = useState<MigrationJob | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [err, setErr] = useState<string | null>(null);\n  // Form data for creating new migration job\n  const [newJobData, setNewJobData] = useState({\n    job_name: '',\n    description: '',\n    source_type: 'tally',\n    data_types: [] as string[],\n    conflict_resolution_strategy: 'skip_existing'\n  });\n  // Step definitions\n  const stepNames = [\n    'Create Migration Job',\n    'Upload Source File',\n    'Configure Data Mapping',\n    'Validate Data',\n    'Execute Migration'\n  ];\n  useEffect(() => {\n    if (open && jobId) {\n      loadWizardState();\n    }\n  }, [open, jobId]);\n  const loadWizardState = async () => {\n    if (!jobId) {return;}\n    setLoading(true);\n    try {\n      const response = await axios.get(`/api/v1/migration/jobs/${jobId}/wizard`);\n      setWizardState(response.data);\n      // Also load job details\n      const jobResponse = await axios.get(`/api/v1/migration/jobs/${jobId}`);\n      setCurrentJob(jobResponse.data);\n    } catch (error) {\n      console.error('Failed to load wizard state:', error);\n      setErr('Failed to load migration wizard state');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createMigrationJob = async () => {\n    if (!newJobData.job_name || newJobData.data_types.length === 0) {\n      setErr('Please provide job name and select at least one data type');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await axios.post('/api/v1/migration/jobs', newJobData);\n      const newJob = response.data;\n      setCurrentJob(newJob);\n      // Load wizard state for the new job\n      const wizardResponse = await axios.get(`/api/v1/migration/jobs/${newJob.id}/wizard`);\n      setWizardState(wizardResponse.data);\n    } catch (error) {\n      console.error('Failed to create migration job:', error);\n      setErr('Failed to create migration job');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const uploadFile = async () => {\n    if (!selectedFile || !currentJob) {\n      setErr('Please select a file to upload');\n      return;\n    }\n    setLoading(true);\n    setUploadProgress(0);\n    const formData = new FormData();\n    formData.append('file', selectedFile);\n    try {\n      await axios.post(`/api/v1/migration/jobs/${currentJob.id}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round(\n            (progressEvent.loaded * 100) / (progressEvent.total || 1)\n          );\n          setUploadProgress(percentCompleted);\n        },\n      });\n      // Reload wizard state\n      await loadWizardState();\n    } catch (error) {\n      console.error('Failed to upload file:', error);\n      setErr('Failed to upload file');\n    } finally {\n      setLoading(false);\n      setUploadProgress(0);\n    }\n  };\n  const executeMigration = async () => {\n    if (!currentJob) {return;}\n    setLoading(true);\n    try {\n      await axios.post(`/api/v1/migration/jobs/${currentJob.id}/execute`);\n      await loadWizardState();\n    } catch (error) {\n      console.error('Failed to execute migration:', error);\n      setErr('Failed to execute migration');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const rollbackMigration = async () => {\n    if (!currentJob) {return;}\n    setLoading(true);\n    try {\n      await axios.post(`/api/v1/migration/jobs/${currentJob.id}/rollback`);\n      await loadWizardState();\n    } catch (error) {\n      console.error('Failed to rollback migration:', error);\n      setErr('Failed to rollback migration');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const renderStepContent = () => {\n    if (!wizardState) {return null;}\n    const currentStep = wizardState.current_step;\n    switch (currentStep) {\n      case 1:\n        return renderCreateJobStep();\n      case 2:\n        return renderUploadStep();\n      case 3:\n        return renderMappingStep();\n      case 4:\n        return renderValidationStep();\n      case 5:\n        return renderExecutionStep();\n      default:\n        return <Typography>Unknown step</Typography>;\n    }\n  };\n  const renderCreateJobStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Create Migration Job</Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            label=\"Job Name\"\n            value={newJobData.job_name}\n            onChange={(e) => setNewJobData({ ...newJobData, job_name: e.target.value })}\n            required\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            multiline\n            rows={3}\n            label=\"Description\"\n            value={newJobData.description}\n            onChange={(e) => setNewJobData({ ...newJobData, description: e.target.value })}\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <FormControl fullWidth>\n            <InputLabel>Source Type</InputLabel>\n            <Select\n              value={newJobData.source_type}\n              onChange={(e) => setNewJobData({ ...newJobData, source_type: e.target.value })}\n            >\n              <MenuItem value=\"tally\">Tally ERP</MenuItem>\n              <MenuItem value=\"zoho\">Zoho</MenuItem>\n              <MenuItem value=\"excel\">Excel/CSV</MenuItem>\n              <MenuItem value=\"json\">JSON</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"subtitle2\" gutterBottom>Data Types to Import</Typography>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n            {['ledgers', 'vouchers', 'contacts', 'products', 'customers', 'vendors', 'stock'].map((type) => (\n              <Chip\n                key={type}\n                label={type.charAt(0).toUpperCase() + type.slice(1)}\n                clickable\n                color={newJobData.data_types.includes(type) ? 'primary' : 'default'}\n                onClick={() => {\n                  const newTypes = newJobData.data_types.includes(type)\n                    ? newJobData.data_types.filter(t => t !== type)\n                    : [...newJobData.data_types, type];\n                  setNewJobData({ ...newJobData, data_types: newTypes });\n                }}\n              />\n            ))}\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n  const renderUploadStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Upload Source File</Typography>\n      <Card>\n        <CardContent>\n          <Box sx={{ textAlign: 'center', p: 3, border: '2px dashed #ccc', borderRadius: 1 }}>\n            <CloudUpload sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n            <Typography variant=\"h6\" gutterBottom>\n              {selectedFile ? selectedFile.name : 'Select File to Upload'}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n              Supported formats: CSV, Excel, JSON, Tally XML\n            </Typography>\n            <Button\n              variant=\"contained\"\n              component=\"label\"\n              startIcon={<Upload />}\n            >\n              Choose File\n              <input\n                type=\"file\"\n                hidden\n                accept=\".csv,.xlsx,.xls,.json,.xml\"\n                onChange={(e) => setSelectedFile(e.target.files?.[0] || null)}\n              />\n            </Button>\n          </Box>\n          {uploadProgress > 0 && (\n            <Box sx={{ mt: 2 }}>\n              <LinearProgress variant=\"determinate\" value={uploadProgress} />\n              <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                Uploading... {uploadProgress}%\n              </Typography>\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n    </Box>\n  );\n  const renderMappingStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Configure Data Mapping</Typography>\n      <Alert severity=\"info\" sx={{ mb: 2 }}>\n        Map source fields to target system fields. Auto-mapping suggestions are provided.\n      </Alert>\n      {/* Placeholder for mapping interface */}\n      <Typography variant=\"body2\">\n        Data mapping interface will be implemented based on uploaded file structure.\n      </Typography>\n    </Box>\n  );\n  const renderValidationStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Validate Data</Typography>\n      <Alert severity=\"warning\" sx={{ mb: 2 }}>\n        Review validation results before proceeding with migration.\n      </Alert>\n      {/* Placeholder for validation results */}\n      <Typography variant=\"body2\">\n        Data validation results will be displayed here.\n      </Typography>\n    </Box>\n  );\n  const renderExecutionStep = () => (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>Execute Migration</Typography>\n      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n        <Button\n          variant=\"contained\"\n          startIcon={<PlayArrow />}\n          onClick={executeMigration}\n          disabled={loading}\n        >\n          Start Migration\n        </Button>\n        {currentJob?.status === 'completed' && (\n          <Button\n            variant=\"outlined\"\n            startIcon={<Undo />}\n            onClick={rollbackMigration}\n            disabled={loading}\n          >\n            Rollback\n          </Button>\n        )}\n      </Box>\n      {currentJob?.progress_percentage !== undefined && (\n        <Box sx={{ mt: 2 }}>\n          <LinearProgress \n            variant=\"determinate\" \n            value={currentJob.progress_percentage} \n          />\n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            Progress: {currentJob.progress_percentage}%\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  );\n  const getStepStatus = (stepIndex: number) => {\n    if (!wizardState) {return 'pending';}\n    const step = wizardState.steps[stepIndex];\n    if (step?.is_completed) {return 'completed';}\n    if (step?.is_current) {return 'active';}\n    return 'pending';\n  };\n  const canProceedToNext = () => {\n    if (!wizardState) {return false;}\n    const currentStep = wizardState.current_step;\n    switch (currentStep) {\n      case 1:\n        return newJobData.job_name && newJobData.data_types.length > 0;\n      case 2:\n        return selectedFile !== null;\n      default:\n        return wizardState.can_proceed;\n    }\n  };\n  const handleNext = async () => {\n    if (!wizardState) {return;}\n    const currentStep = wizardState.current_step;\n    switch (currentStep) {\n      case 1:\n        await createMigrationJob();\n        break;\n      case 2:\n        await uploadFile();\n        break;\n      default:\n        // For other steps, just reload the wizard state\n        await loadWizardState();\n        break;\n    }\n  };\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose} \n      maxWidth=\"lg\" \n      fullWidth\n      PaperProps={{ sx: { minHeight: '600px' } }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Settings />\n          Migration Wizard\n          {currentJob && (\n            <Chip \n              label={currentJob.status} \n              size=\"small\" \n              color={currentJob.status === 'completed' ? 'success' : 'primary'} \n            />\n          )}\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        {loading && !wizardState && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n        {err && (\n          <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setErr(null)}>\n            {err}\n          </Alert>\n        )}\n        {wizardState && (\n          <>\n            <Stepper activeStep={wizardState.current_step - 1} sx={{ mb: 4 }}>\n              {stepNames.map((label, index) => (\n                <Step key={label}>\n                  <StepLabel \n                    error={getStepStatus(index) === 'error'}\n                    completed={getStepStatus(index) === 'completed'}\n                  >\n                    {label}\n                  </StepLabel>\n                </Step>\n              ))}\n            </Stepper>\n            {wizardState.validation_errors.length > 0 && (\n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle2\">Validation Issues:</Typography>\n                <ul>\n                  {wizardState.validation_errors.map((validationError, index) => (\n                    <li key={index}>{validationError}</li>\n                  ))}\n                </ul>\n              </Alert>\n            )}\n            {renderStepContent()}\n          </>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {wizardState && wizardState.current_step > 1 && (\n          <Button onClick={() => loadWizardState()}>\n            <Refresh />\n            Refresh\n          </Button>\n        )}\n        {wizardState && wizardState.current_step < wizardState.total_steps && (\n          <Button\n            variant=\"contained\"\n            onClick={handleNext}\n            disabled={!canProceedToNext() || loading}\n          >\n            {wizardState.current_step === 1 ? 'Create Job' : \n             wizardState.current_step === 2 ? 'Upload File' : 'Next'}\n          </Button>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default MigrationWizard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ModernChart.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":35,"column":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Typography, Paper } from '@mui/material';\nexport interface ModernChartProps {\n  title: string;\n  data: any[];\n  type: 'bar' | 'line' | 'pie' | 'area';\n  height?: number;\n  color?: 'primary' | 'success' | 'warning' | 'error' | 'info';\n  loading?: boolean;\n}\nconst ModernChart: React.FC<ModernChartProps> = ({\n  title,\n  data,\n  type,\n  height = 300,\n  color = 'primary',\n  loading = false\n}) => {\n  const getColorScheme = () => {\n    switch (color) {\n      case 'success':\n        return ['var(--success-500)', 'var(--success-600)', 'var(--success-700)'];\n      case 'warning':\n        return ['var(--warning-500)', 'var(--warning-600)', 'var(--warning-700)'];\n      case 'error':\n        return ['var(--error-500)', 'var(--error-600)', 'var(--error-700)'];\n      case 'info':\n        return ['var(--info-500)', 'var(--info-600)', 'var(--info-700)'];\n      case 'primary':\n      default:\n        return ['var(--primary-500)', 'var(--primary-600)', 'var(--primary-700)'];\n    }\n  };\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n          font: {\n            family: 'var(--font-family-sans)',\n            size: 12,\n            weight: '500'\n          }\n        }\n      },\n      tooltip: {\n        backgroundColor: 'var(--bg-surface)',\n        titleColor: 'var(--text-primary)',\n        bodyColor: 'var(--text-secondary)',\n        borderColor: 'var(--border-primary)',\n        borderWidth: 1,\n        cornerRadius: 8,\n        padding: 12,\n        titleFont: {\n          family: 'var(--font-family-sans)',\n          size: 14,\n          weight: '600'\n        },\n        bodyFont: {\n          family: 'var(--font-family-sans)',\n          size: 13\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'var(--border-primary)',\n          borderDash: [3, 3]\n        },\n        ticks: {\n          color: 'var(--text-secondary)',\n          font: {\n            family: 'var(--font-family-sans)',\n            size: 11\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: 'var(--border-primary)',\n          borderDash: [3, 3]\n        },\n        ticks: {\n          color: 'var(--text-secondary)',\n          font: {\n            family: 'var(--font-family-sans)',\n            size: 11\n          }\n        }\n      }\n    }\n  };\n  if (loading) {\n    return (\n      <Paper className=\"modern-card\" sx={{ p: 3 }}>\n        <Typography className=\"modern-card-title\" variant=\"h6\" gutterBottom>\n          {title}\n        </Typography>\n        <Box \n          className=\"modern-skeleton\"\n          sx={{ \n            height: height, \n            borderRadius: 'var(--radius-md)',\n            mt: 2\n          }} \n        />\n      </Paper>\n    );\n  }\n  return (\n    <Paper className=\"modern-card\" sx={{ p: 3 }}>\n      <Typography className=\"modern-card-title\" variant=\"h6\" gutterBottom>\n        {title}\n      </Typography>\n      <Box \n        sx={{ \n          height: height, \n          mt: 2,\n          '& canvas': {\n            borderRadius: 'var(--radius-md)'\n          }\n        }}\n      >\n        {/* Chart component would be rendered here */}\n        {/* This is a placeholder for chart libraries like Chart.js, Recharts, etc. */}\n        <Box\n          sx={{\n            width: '100%',\n            height: '100%',\n            background: `linear-gradient(135deg, ${getColorScheme()[0]}20, ${getColorScheme()[1]}10)`,\n            borderRadius: 'var(--radius-md)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            border: '1px solid var(--border-primary)'\n          }}\n        >\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {type.toUpperCase()} Chart - {data.length} data points\n          </Typography>\n        </Box>\n      </Box>\n    </Paper>\n  );\n};\nexport default ModernChart;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ModernLoading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationBell.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[189,201],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Clear' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Clear"},"fix":{"range":[473,482],"text":""},"desc":"Remove unused variable 'Clear'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":81,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[2324,2329],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 49 column 48.","line":81,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":81,"endColumn":20},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 49 column 48.","line":81,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":81,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/NotificationBell.tsx\n// Notification bell icon component with unread count badge\nimport React, { useState, useEffect } from 'react';\nimport {\n  IconButton,\n  Badge,\n  Menu,\n  MenuItem,\n  Typography,\n  Box,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Avatar,\n  Chip,\n  Button,\n  CircularProgress\n} from '@mui/material';\nimport {\n  Notifications,\n  NotificationsNone,\n  Email,\n  Sms,\n  NotificationImportant,\n  Settings,\n  MarkEmailRead,\n  Clear\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport {\n  getNotificationLogs,\n  notificationQueryKeys,\n  NotificationLog,\n  getChannelDisplayName,\n  getStatusDisplayName,\n  getStatusColor\n} from '../services/notificationService';\ninterface NotificationBellProps {\n  onSettingsClick?: () => void;\n}\nconst NotificationBell: React.FC<NotificationBellProps> = ({ onSettingsClick }) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const queryClient = useQueryClient();\n  // Fetch recent notifications\n  const { data: notifications = [], isLoading, error } = useQuery({\n    queryKey: notificationQueryKeys.logsFiltered({ \n      limit: 20, \n      status: undefined,\n      recipient_type: 'user'  // For current user notifications\n    }),\n    queryFn: () => getNotificationLogs({ \n      limit: 20, \n      recipient_type: 'user'\n    }),\n    refetchInterval: 30000, // Poll every 30 seconds for real-time updates\n  });\n  // Calculate unread count (notifications that haven't been opened)\n  useEffect(() => {\n    if (notifications) {\n      const unread = notifications.filter(notif => \n        !notif.opened_at && notif.status === 'delivered'\n      ).length;\n      setUnreadCount(unread);\n    }\n  }, [notifications]);\n  // Mark notification as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      // TODO: Implement mark as read API endpoint\n      console.log('Marking notification as read:', notificationId);\n      return Promise.resolve();\n    },\n    onSuccess: () => {\n      // Refresh notifications\n      queryClient.invalidateQueries({ queryKey: notificationQueryKeys.logs() });\n    },\n    onError: (error) => {\n      toast.error('Failed to mark notification as read');\n    }\n  });\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleNotificationClick = (notification: NotificationLog) => {\n    // Mark as read if not already read\n    if (!notification.opened_at) {\n      markAsReadMutation.mutate(notification.id);\n    }\n    // TODO: Navigate to relevant page based on notification type\n    console.log('Clicked notification:', notification);\n    handleClose();\n  };\n  const handleMarkAllRead = () => {\n    // TODO: Implement mark all as read\n    console.log('Mark all as read');\n    handleClose();\n  };\n  const getNotificationIcon = (channel: string) => {\n    switch (channel) {\n      case 'email':\n        return <Email fontSize=\"small\" />;\n      case 'sms':\n        return <Sms fontSize=\"small\" />;\n      case 'push':\n      case 'in_app':\n        return <NotificationImportant fontSize=\"small\" />;\n      default:\n        return <Notifications fontSize=\"small\" />;\n    }\n  };\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMs = now.getTime() - date.getTime();\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInMinutes < 1) {return 'Just now';}\n    if (diffInMinutes < 60) {return `${diffInMinutes}m ago`;}\n    if (diffInHours < 24) {return `${diffInHours}h ago`;}\n    if (diffInDays < 7) {return `${diffInDays}d ago`;}\n    return date.toLocaleDateString();\n  };\n  const isOpen = Boolean(anchorEl);\n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        onClick={handleClick}\n        aria-label=\"notifications\"\n        aria-describedby={isOpen ? 'notification-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={isOpen ? 'true' : undefined}\n        sx={{\n          transition: 'all 0.2s ease-in-out',\n          '&:hover': {\n            transform: 'scale(1.1)',\n            backgroundColor: 'rgba(255, 255, 255, 0.1)',\n          },\n          '&:active': {\n            transform: 'scale(0.95)',\n          }\n        }}\n      >\n        <Badge \n          badgeContent={unreadCount} \n          color=\"error\" \n          max={99}\n          sx={{\n            '& .MuiBadge-badge': {\n              animation: unreadCount > 0 ? 'pulse 2s infinite' : 'none',\n              '@keyframes pulse': {\n                '0%': { transform: 'scale(1)' },\n                '50%': { transform: 'scale(1.2)' },\n                '100%': { transform: 'scale(1)' }\n              }\n            }\n          }}\n        >\n          <Box\n            sx={{\n              transition: 'all 0.3s ease',\n              transform: unreadCount > 0 ? 'rotate(10deg)' : 'rotate(0deg)',\n            }}\n          >\n            {unreadCount > 0 ? <Notifications /> : <NotificationsNone />}\n          </Box>\n        </Badge>\n      </IconButton>\n      <Menu\n        id=\"notification-menu\"\n        anchorEl={anchorEl}\n        open={isOpen}\n        onClose={handleClose}\n        PaperProps={{\n          sx: {\n            maxHeight: 400,\n            width: 360,\n            borderRadius: 2,\n            boxShadow: '0 20px 40px rgba(0, 0, 0, 0.15)',\n            border: '1px solid',\n            borderColor: 'divider',\n            '& .MuiMenuItem-root': {\n              borderRadius: 1,\n              margin: '2px 8px',\n              transition: 'all 0.2s ease-in-out',\n              '&:hover': {\n                backgroundColor: 'primary.50',\n                transform: 'translateX(4px)',\n              }\n            }\n          }\n        }}\n        MenuListProps={{\n          sx: { padding: 0 }\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <Typography variant=\"h6\" component=\"div\">\n              Notifications\n            </Typography>\n            <Box>\n              {onSettingsClick && (\n                <IconButton size=\"small\" onClick={onSettingsClick} aria-label=\"notification settings\">\n                  <Settings />\n                </IconButton>\n              )}\n              {unreadCount > 0 && (\n                <IconButton size=\"small\" onClick={handleMarkAllRead} aria-label=\"mark all as read\">\n                  <MarkEmailRead />\n                </IconButton>\n              )}\n            </Box>\n          </Box>\n          {unreadCount > 0 && (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {unreadCount} unread notification{unreadCount !== 1 ? 's' : ''}\n            </Typography>\n          )}\n        </Box>\n        <Box sx={{ maxHeight: 300, overflow: 'auto' }}>\n          {isLoading ? (\n            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n              <CircularProgress size={24} />\n            </Box>\n          ) : error ? (\n            <Box sx={{ p: 2, textAlign: 'center' }}>\n              <Typography variant=\"body2\" color=\"error\">\n                Failed to load notifications\n              </Typography>\n            </Box>\n          ) : notifications.length === 0 ? (\n            <Box sx={{ p: 3, textAlign: 'center' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                No notifications\n              </Typography>\n            </Box>\n          ) : (\n            <List sx={{ p: 0 }}>\n              {notifications.map((notification, index) => (\n                <React.Fragment key={notification.id}>\n                  <ListItem\n                    button\n                    onClick={() => handleNotificationClick(notification)}\n                    sx={{\n                      backgroundColor: notification.opened_at ? 'transparent' : 'action.hover',\n                      '&:hover': {\n                        backgroundColor: 'action.selected',\n                      },\n                    }}\n                  >\n                    <ListItemIcon>\n                      <Avatar sx={{ width: 32, height: 32, bgcolor: 'primary.main' }}>\n                        {getNotificationIcon(notification.channel)}\n                      </Avatar>\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                          <Typography\n                            variant=\"body2\"\n                            sx={{\n                              fontWeight: notification.opened_at ? 'normal' : 'bold',\n                              flex: 1,\n                              mr: 1\n                            }}\n                          >\n                            {notification.subject || 'Notification'}\n                          </Typography>\n                          <Chip\n                            label={getChannelDisplayName(notification.channel as any)}\n                            size=\"small\"\n                            variant=\"outlined\"\n                            sx={{ fontSize: '0.7rem', height: 20 }}\n                          />\n                        </Box>\n                      }\n                      secondary={\n                        <Box>\n                          <Typography\n                            variant=\"body2\"\n                            color=\"text.secondary\"\n                            sx={{\n                              display: '-webkit-box',\n                              WebkitLineClamp: 2,\n                              WebkitBoxOrient: 'vertical',\n                              overflow: 'hidden',\n                              mb: 0.5\n                            }}\n                          >\n                            {notification.content}\n                          </Typography>\n                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {formatTimeAgo(notification.created_at)}\n                            </Typography>\n                            <Chip\n                              label={getStatusDisplayName(notification.status as any)}\n                              size=\"small\"\n                              sx={{\n                                fontSize: '0.6rem',\n                                height: 16,\n                                ...getStatusColor(notification.status as any).split(' ').reduce((acc, cls) => {\n                                  if (cls.startsWith('text-')) {\n                                    acc.color = cls.replace('text-', '');\n                                  } else if (cls.startsWith('bg-')) {\n                                    acc.backgroundColor = cls.replace('bg-', '');\n                                  }\n                                  return acc;\n                                }, {} as any)\n                              }}\n                            />\n                          </Box>\n                        </Box>\n                      }\n                    />\n                  </ListItem>\n                  {index < notifications.length - 1 && <Divider />}\n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n        <Divider />\n        <Box sx={{ p: 1 }}>\n          <Button\n            fullWidth\n            variant=\"text\"\n            onClick={() => {\n              // TODO: Navigate to notifications page\n              console.log('View all notifications');\n              handleClose();\n            }}\n          >\n            View All Notifications\n          </Button>\n        </Box>\n      </Menu>\n    </>\n  );\n};\nexport default NotificationBell;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationDashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Dashboard' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dashboard"},"fix":{"range":[252,262],"text":""},"desc":"Remove unused variable 'Dashboard'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"BarChart"},"fix":{"range":[290,302],"text":""},"desc":"Remove unused variable 'BarChart'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/NotificationDashboard.tsx\n// Main dashboard component for notification management\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Paper,\n  Tabs,\n  Tab,\n  Typography,\n  AppBar\n} from '@mui/material';\nimport {\n  Dashboard,\n  Create,\n  Send,\n  History,\n  BarChart\n} from '@mui/icons-material';\nimport NotificationTemplates from './NotificationTemplates';\nimport SendNotification from './SendNotification';\nimport NotificationLogs from './NotificationLogs';\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`notification-tabpanel-${index}`}\n      aria-labelledby={`notification-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}\n    </div>\n  );\n}\nconst NotificationDashboard: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setSelectedTab(newValue);\n  };\n  return (\n    <Container maxWidth=\"xl\">\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Notification Management\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Manage notification templates, send messages, and view delivery logs\n        </Typography>\n      </Box>\n      <Paper sx={{ width: '100%' }}>\n        <AppBar position=\"static\" color=\"default\" elevation={0}>\n          <Tabs\n            value={selectedTab}\n            onChange={handleTabChange}\n            variant=\"fullWidth\"\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            sx={{ borderBottom: 1, borderColor: 'divider' }}\n          >\n            <Tab\n              label=\"Templates\"\n              icon={<Create />}\n              iconPosition=\"start\"\n              sx={{ textTransform: 'none' }}\n            />\n            <Tab\n              label=\"Send Notifications\"\n              icon={<Send />}\n              iconPosition=\"start\"\n              sx={{ textTransform: 'none' }}\n            />\n            <Tab\n              label=\"Logs & History\"\n              icon={<History />}\n              iconPosition=\"start\"\n              sx={{ textTransform: 'none' }}\n            />\n          </Tabs>\n        </AppBar>\n        <TabPanel value={selectedTab} index={0}>\n          <NotificationTemplates />\n        </TabPanel>\n        <TabPanel value={selectedTab} index={1}>\n          <SendNotification />\n        </TabPanel>\n        <TabPanel value={selectedTab} index={2}>\n          <NotificationLogs />\n        </TabPanel>\n      </Paper>\n    </Container>\n  );\n};\nexport default NotificationDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationLogs.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[547,558],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'analyticsLoading' is assigned a value but never used.","line":105,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"analyticsLoading"},"fix":{"range":[2237,2270],"text":""},"desc":"Remove unused variable 'analyticsLoading'."}]},{"ruleId":"no-undef","severity":2,"message":"'analyticsDays' is not defined.","line":108,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":60},{"ruleId":"no-undef","severity":2,"message":"'analyticsDays' is not defined.","line":110,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":58}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/NotificationLogs.tsx\n// Component for viewing notification history and logs\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  CircularProgress,\n  Alert,\n  Chip,\n  IconButton,\n  Tooltip,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Grid,\n  TablePagination,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider\n} from '@mui/material';\nimport {\n  Visibility,\n  Email,\n  Sms,\n  NotificationImportant,\n  Notifications,\n  Person,\n  Group,\n  Refresh,\n  FilterList,\n  TrendingUp,\n  Schedule,\n  CheckCircle,\n  Error as ErrorIcon,\n  Warning\n} from '@mui/icons-material';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  getNotificationLogs,\n  getNotificationLog,\n  getNotificationAnalytics,\n  NotificationLog,\n  NOTIFICATION_CHANNELS,\n  NOTIFICATION_STATUSES,\n  getChannelDisplayName,\n  getStatusDisplayName,\n  getStatusColor,\n  notificationQueryKeys\n} from '../services/notificationService';\nimport { format } from 'date-fns';\nconst NotificationLogs: React.FC = () => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(25);\n  const [selectedLog, setSelectedLog] = useState<NotificationLog | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  // Filter state\n  const [filters, setFilters] = useState({\n    recipient_type: '',\n    status: '',\n    channel: '',\n    search: ''\n  });\n  // Analytics state\n  // Get notification logs\n  const { \n    data: logs = [], \n    isLoading: logsLoading,\n    error: logsError,\n    refetch: refetchLogs\n  } = useQuery({\n    queryKey: notificationQueryKeys.logsFiltered({\n      ...filters,\n      limit: rowsPerPage,\n      offset: page * rowsPerPage\n    }),\n    queryFn: () => getNotificationLogs({\n      recipient_type: filters.recipient_type || undefined,\n      status: filters.status as any || undefined,\n      channel: filters.channel as any || undefined,\n      limit: rowsPerPage,\n      offset: page * rowsPerPage\n    }),\n  });\n  // Get analytics\n  const { \n    data: analytics,\n    isLoading: analyticsLoading \n  } = useQuery({\n// TODO: Define or import analyticsDays\n    queryKey: notificationQueryKeys.analytics(analyticsDays),\n// TODO: Define or import analyticsDays\n    queryFn: () => getNotificationAnalytics(analyticsDays),\n  });\n  // Get detailed log when modal opens\n  const { \n    data: logDetail,\n    isLoading: logDetailLoading \n  } = useQuery({\n    queryKey: notificationQueryKeys.log(selectedLog?.id || 0),\n    queryFn: () => getNotificationLog(selectedLog!.id),\n    enabled: !!selectedLog\n  });\n  const handleViewDetails = (log: NotificationLog) => {\n    setSelectedLog(log);\n    setIsDetailModalOpen(true);\n  };\n  const handleFilterChange = (field: string, value: string) => {\n    setFilters(prev => ({ ...prev, [field]: value }));\n    setPage(0); // Reset to first page when filtering\n  };\n  const resetFilters = () => {\n    setFilters({\n      recipient_type: '',\n      status: '',\n      channel: '',\n      search: ''\n    });\n    setPage(0);\n  };\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case 'email': return <Email fontSize=\"small\" />;\n      case 'sms': return <Sms fontSize=\"small\" />;\n      case 'push': return <NotificationImportant fontSize=\"small\" />;\n      case 'in_app': return <Notifications fontSize=\"small\" />;\n      default: return <Notifications fontSize=\"small\" />;\n    }\n  };\n  const getRecipientTypeIcon = (type: string) => {\n    return type === 'customer' ? <Person fontSize=\"small\" /> : <Group fontSize=\"small\" />;\n  };\n  const formatDate = (dateString: string) => {\n    return format(new Date(dateString), 'MMM dd, yyyy HH:mm');\n  };\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'sent':\n      case 'delivered':\n        return <CheckCircle fontSize=\"small\" color=\"success\" />;\n      case 'failed':\n      case 'bounced':\n        return <ErrorIcon fontSize=\"small\" color=\"error\" />;\n      case 'pending':\n        return <Schedule fontSize=\"small\" color=\"warning\" />;\n      default:\n        return <Warning fontSize=\"small\" />;\n    }\n  };\n  if (logsError) {\n    return (\n      <Alert severity=\"error\">\n        Failed to load notification logs. Please try again.\n      </Alert>\n    );\n  }\n  return (\n    <Box>\n      {/* Analytics Cards */}\n      {analytics && (\n        <Grid container spacing={3} mb={3}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                      Total Notifications\n                    </Typography>\n                    <Typography variant=\"h5\">\n                      {analytics.total_notifications.toLocaleString()}\n                    </Typography>\n                  </Box>\n                  <TrendingUp color=\"primary\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                      Success Rate\n                    </Typography>\n                    <Typography variant=\"h5\">\n                      {analytics.total_notifications > 0 \n                        ? Math.round(((analytics.status_breakdown?.delivered || 0) + (analytics.status_breakdown?.sent || 0)) / analytics.total_notifications * 100)\n                        : 0}%\n                    </Typography>\n                  </Box>\n                  <CheckCircle color=\"success\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                      Email Notifications\n                    </Typography>\n                    <Typography variant=\"h5\">\n                      {analytics.channel_breakdown?.email || 0}\n                    </Typography>\n                  </Box>\n                  <Email color=\"primary\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" gutterBottom variant=\"body2\">\n                      Failed Notifications\n                    </Typography>\n                    <Typography variant=\"h5\">\n                      {(analytics.status_breakdown?.failed || 0) + (analytics.status_breakdown?.bounced || 0)}\n                    </Typography>\n                  </Box>\n                  <ErrorIcon color=\"error\" />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      )}\n      {/* Main Content */}\n      <Card>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h5\" component=\"h2\">\n              Notification Logs\n            </Typography>\n            <Box display=\"flex\" gap={1}>\n              <Tooltip title=\"Refresh\">\n                <IconButton onClick={() => refetchLogs()}>\n                  <Refresh />\n                </IconButton>\n              </Tooltip>\n            </Box>\n          </Box>\n          {/* Filters */}\n          <Grid container spacing={2} mb={3}>\n            <Grid item xs={12} sm={6} md={2}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Channel</InputLabel>\n                <Select\n                  value={filters.channel}\n                  label=\"Channel\"\n                  onChange={(e) => handleFilterChange('channel', e.target.value)}\n                >\n                  <MenuItem value=\"\">All Channels</MenuItem>\n                  {NOTIFICATION_CHANNELS.map(channel => (\n                    <MenuItem key={channel} value={channel}>\n                      {getChannelDisplayName(channel)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6} md={2}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Status</InputLabel>\n                <Select\n                  value={filters.status}\n                  label=\"Status\"\n                  onChange={(e) => handleFilterChange('status', e.target.value)}\n                >\n                  <MenuItem value=\"\">All Statuses</MenuItem>\n                  {NOTIFICATION_STATUSES.map(status => (\n                    <MenuItem key={status} value={status}>\n                      {getStatusDisplayName(status)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6} md={2}>\n              <FormControl fullWidth size=\"small\">\n                <InputLabel>Recipient Type</InputLabel>\n                <Select\n                  value={filters.recipient_type}\n                  label=\"Recipient Type\"\n                  onChange={(e) => handleFilterChange('recipient_type', e.target.value)}\n                >\n                  <MenuItem value=\"\">All Types</MenuItem>\n                  <MenuItem value=\"customer\">Customer</MenuItem>\n                  <MenuItem value=\"user\">User</MenuItem>\n                  <MenuItem value=\"segment\">Segment</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <TextField\n                fullWidth\n                size=\"small\"\n                label=\"Search recipient\"\n                value={filters.search}\n                onChange={(e) => handleFilterChange('search', e.target.value)}\n                placeholder=\"Search by email, name...\"\n              />\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <Box display=\"flex\" gap={1}>\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  startIcon={<FilterList />}\n                  onClick={resetFilters}\n                >\n                  Clear Filters\n                </Button>\n              </Box>\n            </Grid>\n          </Grid>\n          {/* Table */}\n          {logsLoading ? (\n            <Box display=\"flex\" justifyContent=\"center\" py={4}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <TableContainer component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Recipient</TableCell>\n                      <TableCell>Channel</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Subject/Content</TableCell>\n                      <TableCell>Sent At</TableCell>\n                      <TableCell>Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {logs.map((log) => (\n                      <TableRow key={log.id}>\n                        <TableCell>\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                            {getRecipientTypeIcon(log.recipient_type)}\n                            <Box>\n                              <Typography variant=\"body2\">\n                                {log.recipient_identifier}\n                              </Typography>\n                              <Typography variant=\"caption\" color=\"text.secondary\">\n                                {log.recipient_type}\n                              </Typography>\n                            </Box>\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                            {getChannelIcon(log.channel)}\n                            {getChannelDisplayName(log.channel as any)}\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                            {getStatusIcon(log.status)}\n                            <Chip\n                              label={getStatusDisplayName(log.status as any)}\n                              size=\"small\"\n                              className={getStatusColor(log.status as any)}\n                            />\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          <Box>\n                            {log.subject && (\n                              <Typography variant=\"body2\" fontWeight=\"medium\">\n                                {log.subject.length > 50 ? `${log.subject.substring(0, 50)}...` : log.subject}\n                              </Typography>\n                            )}\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {log.content.length > 80 ? `${log.content.substring(0, 80)}...` : log.content}\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          {log.sent_at ? (\n                            <Box>\n                              <Typography variant=\"body2\">\n                                {formatDate(log.sent_at)}\n                              </Typography>\n                              {log.delivered_at && (\n                                <Typography variant=\"caption\" color=\"text.secondary\">\n                                  Delivered: {formatDate(log.delivered_at)}\n                                </Typography>\n                              )}\n                            </Box>\n                          ) : (\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              {formatDate(log.created_at)}\n                            </Typography>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Tooltip title=\"View Details\">\n                            <IconButton \n                              size=\"small\" \n                              onClick={() => handleViewDetails(log)}\n                            >\n                              <Visibility />\n                            </IconButton>\n                          </Tooltip>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                    {logs.length === 0 && (\n                      <TableRow>\n                        <TableCell colSpan={6} align=\"center\" sx={{ py: 4 }}>\n                          <Typography color=\"text.secondary\">\n                            No notification logs found\n                          </Typography>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                component=\"div\"\n                count={-1} // Unknown total count\n                page={page}\n                onPageChange={(_, newPage) => setPage(newPage)}\n                rowsPerPage={rowsPerPage}\n                onRowsPerPageChange={(e) => {\n                  setRowsPerPage(parseInt(e.target.value, 10));\n                  setPage(0);\n                }}\n                rowsPerPageOptions={[10, 25, 50, 100]}\n              />\n            </>\n          )}\n        </CardContent>\n      </Card>\n      {/* Detail Modal */}\n      <Dialog \n        open={isDetailModalOpen} \n        onClose={() => setIsDetailModalOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>Notification Details</DialogTitle>\n        <DialogContent>\n          {logDetailLoading ? (\n            <Box display=\"flex\" justifyContent=\"center\" py={4}>\n              <CircularProgress />\n            </Box>\n          ) : logDetail ? (\n            <Box>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Recipient\n                  </Typography>\n                  <Typography gutterBottom>\n                    {logDetail.recipient_identifier} ({logDetail.recipient_type})\n                  </Typography>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Channel\n                  </Typography>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1} gutterBottom>\n                    {getChannelIcon(logDetail.channel)}\n                    {getChannelDisplayName(logDetail.channel as any)}\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Status\n                  </Typography>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1} gutterBottom>\n                    {getStatusIcon(logDetail.status)}\n                    <Chip\n                      label={getStatusDisplayName(logDetail.status as any)}\n                      size=\"small\"\n                      className={getStatusColor(logDetail.status as any)}\n                    />\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Created At\n                  </Typography>\n                  <Typography gutterBottom>\n                    {formatDate(logDetail.created_at)}\n                  </Typography>\n                </Grid>\n                {logDetail.subject && (\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                      Subject\n                    </Typography>\n                    <Typography gutterBottom>\n                      {logDetail.subject}\n                    </Typography>\n                  </Grid>\n                )}\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Content\n                  </Typography>\n                  <Paper sx={{ p: 2, bgcolor: 'grey.50', mt: 1 }}>\n                    <Typography style={{ whiteSpace: 'pre-wrap' }}>\n                      {logDetail.content}\n                    </Typography>\n                  </Paper>\n                </Grid>\n                {logDetail.error_message && (\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle2\" color=\"error\">\n                      Error Message\n                    </Typography>\n                    <Alert severity=\"error\" sx={{ mt: 1 }}>\n                      {logDetail.error_message}\n                    </Alert>\n                  </Grid>\n                )}\n                {logDetail.context_data && (\n                  <Grid item xs={12}>\n                    <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                      Context Data\n                    </Typography>\n                    <Paper sx={{ p: 2, bgcolor: 'grey.50', mt: 1 }}>\n                      <pre>{JSON.stringify(logDetail.context_data, null, 2)}</pre>\n                    </Paper>\n                  </Grid>\n                )}\n                {/* Timeline */}\n                <Grid item xs={12}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n                    Timeline\n                  </Typography>\n                  <List dense>\n                    <ListItem>\n                      <ListItemIcon>\n                        <Schedule fontSize=\"small\" />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary=\"Created\"\n                        secondary={formatDate(logDetail.created_at)}\n                      />\n                    </ListItem>\n                    {logDetail.sent_at && (\n                      <ListItem>\n                        <ListItemIcon>\n                          <CheckCircle fontSize=\"small\" color=\"primary\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Sent\"\n                          secondary={formatDate(logDetail.sent_at)}\n                        />\n                      </ListItem>\n                    )}\n                    {logDetail.delivered_at && (\n                      <ListItem>\n                        <ListItemIcon>\n                          <CheckCircle fontSize=\"small\" color=\"success\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Delivered\"\n                          secondary={formatDate(logDetail.delivered_at)}\n                        />\n                      </ListItem>\n                    )}\n                    {logDetail.opened_at && (\n                      <ListItem>\n                        <ListItemIcon>\n                          <Visibility fontSize=\"small\" color=\"info\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Opened\"\n                          secondary={formatDate(logDetail.opened_at)}\n                        />\n                      </ListItem>\n                    )}\n                    {logDetail.clicked_at && (\n                      <ListItem>\n                        <ListItemIcon>\n                          <TrendingUp fontSize=\"small\" color=\"success\" />\n                        </ListItemIcon>\n                        <ListItemText\n                          primary=\"Clicked\"\n                          secondary={formatDate(logDetail.clicked_at)}\n                        />\n                      </ListItem>\n                    )}\n                  </List>\n                </Grid>\n              </Grid>\n            </Box>\n          ) : null}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDetailModalOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\nexport default NotificationLogs;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationSettingsModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"CardContent"},"fix":{"range":[287,302],"text":""},"desc":"Remove unused variable 'CardContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[310,321],"text":""},"desc":"Remove unused variable 'Divider'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getNotificationTemplates' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"getNotificationTemplates"},"fix":{"range":[741,766],"text":""},"desc":"Remove unused variable 'getNotificationTemplates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'createNotificationTemplate' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"createNotificationTemplate"},"fix":{"range":[765,795],"text":""},"desc":"Remove unused variable 'createNotificationTemplate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updateNotificationTemplate' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"updateNotificationTemplate"},"fix":{"range":[795,825],"text":""},"desc":"Remove unused variable 'updateNotificationTemplate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'notificationQueryKeys' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"notificationQueryKeys"},"fix":{"range":[825,850],"text":""},"desc":"Remove unused variable 'notificationQueryKeys'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'NotificationTemplate' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"NotificationTemplate"},"fix":{"range":[850,874],"text":""},"desc":"Remove unused variable 'NotificationTemplate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TEMPLATE_TYPES' is defined but never used.","line":45,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"TEMPLATE_TYPES"},"fix":{"range":[899,917],"text":""},"desc":"Remove unused variable 'TEMPLATE_TYPES'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getTemplateTypeDisplayName' is defined but never used.","line":47,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"getTemplateTypeDisplayName"},"fix":{"range":[942,972],"text":""},"desc":"Remove unused variable 'getTemplateTypeDisplayName'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":130,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[4737,4742],"text":""},"desc":"Remove unused variable 'error'."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/NotificationSettingsModal.tsx\n// Modal for managing user notification preferences\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  Switch,\n  FormControlLabel,\n  Card,\n  CardContent,\n  Grid,\n  Divider,\n  Alert,\n  CircularProgress,\n  Chip,\n  IconButton,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  Close,\n  Email,\n  Sms,\n  NotificationImportant,\n  Notifications,\n  ExpandMore,\n  Save,\n  RestoreDefaultsNone as Restore\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport {\n  getNotificationTemplates,\n  createNotificationTemplate,\n  updateNotificationTemplate,\n  notificationQueryKeys,\n  NotificationTemplate,\n  NOTIFICATION_CHANNELS,\n  TEMPLATE_TYPES,\n  getChannelDisplayName,\n  getTemplateTypeDisplayName\n} from '../services/notificationService';\ninterface NotificationSettingsModalProps {\n  open: boolean;\n  onClose: () => void;\n  userId: number;\n  userType?: 'user' | 'customer';\n}\ninterface PreferenceState {\n  [key: string]: {\n    [channel: string]: boolean;\n  };\n}\nconst NotificationSettingsModal: React.FC<NotificationSettingsModalProps> = ({\n  open,\n  onClose,\n  userId,\n  userType = 'user'\n}) => {\n  const [preferences, setPreferences] = useState<PreferenceState>({});\n  const [hasChanges, setHasChanges] = useState(false);\n  const queryClient = useQueryClient();\n  // Available notification types\n  const notificationTypes = [\n    { key: 'job_assignment', label: 'Job Assignment', description: 'When a new job is assigned to you' },\n    { key: 'job_update', label: 'Job Updates', description: 'When job status or details change' },\n    { key: 'job_completion', label: 'Job Completion', description: 'When a job is completed' },\n    { key: 'feedback_request', label: 'Feedback Requests', description: 'When feedback is requested' },\n    { key: 'sla_breach', label: 'SLA Breach Alerts', description: 'When SLA deadlines are at risk' },\n    { key: 'appointment_reminder', label: 'Appointment Reminders', description: 'Reminders for upcoming appointments' },\n    { key: 'service_completion', label: 'Service Completion', description: 'When service work is completed' },\n    { key: 'follow_up', label: 'Follow-up Messages', description: 'Follow-up communications' },\n    { key: 'marketing', label: 'Marketing Messages', description: 'Promotional and marketing content' },\n    { key: 'system', label: 'System Notifications', description: 'Important system updates and alerts' }\n  ];\n  // Fetch current preferences\n  const { data: currentPreferences = [], isLoading } = useQuery({\n    queryKey: ['notification-preferences', userType, userId],\n    queryFn: async () => {\n      // TODO: Implement API call to get user preferences\n      // For now, return mock data\n      return [\n        { notification_type: 'job_assignment', channel: 'email', is_enabled: true },\n        { notification_type: 'job_assignment', channel: 'in_app', is_enabled: true },\n        { notification_type: 'sla_breach', channel: 'email', is_enabled: true },\n        { notification_type: 'sla_breach', channel: 'sms', is_enabled: true },\n        { notification_type: 'marketing', channel: 'email', is_enabled: false },\n      ];\n    },\n    enabled: open,\n  });\n  // Initialize preferences state from API data\n  useEffect(() => {\n    if (currentPreferences.length > 0) {\n      const prefState: PreferenceState = {};\n      notificationTypes.forEach(type => {\n        prefState[type.key] = {};\n        NOTIFICATION_CHANNELS.forEach(channel => {\n          const existing = currentPreferences.find(\n            p => p.notification_type === type.key && p.channel === channel\n          );\n          // Default to enabled for important notifications, disabled for marketing\n          const defaultEnabled = !['marketing'].includes(type.key);\n          prefState[type.key][channel] = existing ? existing.is_enabled : defaultEnabled;\n        });\n      });\n      setPreferences(prefState);\n    }\n  }, [currentPreferences]);\n  // Save preferences mutation\n  const savePreferencesMutation = useMutation({\n    mutationFn: async (prefs: PreferenceState) => {\n      // TODO: Implement API call to save preferences\n      console.log('Saving preferences:', prefs);\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return { success: true };\n    },\n    onSuccess: () => {\n      toast.success('Notification preferences saved successfully');\n      setHasChanges(false);\n      queryClient.invalidateQueries({ queryKey: ['notification-preferences'] });\n    },\n    onError: (error) => {\n      toast.error('Failed to save notification preferences');\n    }\n  });\n  const handlePreferenceChange = (notificationType: string, channel: string, enabled: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      [notificationType]: {\n        ...prev[notificationType],\n        [channel]: enabled\n      }\n    }));\n    setHasChanges(true);\n  };\n  const handleSelectAll = (notificationType: string, enabled: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      [notificationType]: NOTIFICATION_CHANNELS.reduce((acc, channel) => ({\n        ...acc,\n        [channel]: enabled\n      }), {})\n    }));\n    setHasChanges(true);\n  };\n  const handleSave = () => {\n    savePreferencesMutation.mutate(preferences);\n  };\n  const handleReset = () => {\n    // Reset to defaults\n    const defaultPrefs: PreferenceState = {};\n    notificationTypes.forEach(type => {\n      defaultPrefs[type.key] = {};\n      NOTIFICATION_CHANNELS.forEach(channel => {\n        defaultPrefs[type.key][channel] = !['marketing'].includes(type.key);\n      });\n    });\n    setPreferences(defaultPrefs);\n    setHasChanges(true);\n  };\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case 'email':\n        return <Email sx={{ fontSize: 16 }} />;\n      case 'sms':\n        return <Sms sx={{ fontSize: 16 }} />;\n      case 'push':\n        return <NotificationImportant sx={{ fontSize: 16 }} />;\n      case 'in_app':\n        return <Notifications sx={{ fontSize: 16 }} />;\n      default:\n        return null;\n    }\n  };\n  const getEnabledChannelsCount = (notificationType: string) => {\n    if (!preferences[notificationType]) {return 0;}\n    return Object.values(preferences[notificationType]).filter(Boolean).length;\n  };\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { height: '80vh' }\n      }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">Notification Settings</Typography>\n          <IconButton onClick={onClose} aria-label=\"close\">\n            <Close />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          Choose how you want to be notified about different types of events. You can enable or disable \n          notifications for each channel (email, SMS, push, in-app).\n        </Alert>\n        {isLoading ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>\n            <CircularProgress />\n          </Box>\n        ) : (\n          <Box>\n            {notificationTypes.map((type) => (\n              <Accordion key={type.key} defaultExpanded>\n                <AccordionSummary expandIcon={<ExpandMore />}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%', mr: 2 }}>\n                    <Box>\n                      <Typography variant=\"subtitle1\" sx={{ fontWeight: 'medium' }}>\n                        {type.label}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {type.description}\n                      </Typography>\n                    </Box>\n                    <Box sx={{ display: 'flex', gap: 1 }}>\n                      <Chip\n                        label={`${getEnabledChannelsCount(type.key)}/${NOTIFICATION_CHANNELS.length} enabled`}\n                        size=\"small\"\n                        color={getEnabledChannelsCount(type.key) > 0 ? 'primary' : 'default'}\n                        variant=\"outlined\"\n                      />\n                    </Box>\n                  </Box>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <Box sx={{ pl: 2 }}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={12}>\n                        <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n                          <Button\n                            size=\"small\"\n                            variant=\"outlined\"\n                            onClick={() => handleSelectAll(type.key, true)}\n                          >\n                            Enable All\n                          </Button>\n                          <Button\n                            size=\"small\"\n                            variant=\"outlined\"\n                            onClick={() => handleSelectAll(type.key, false)}\n                          >\n                            Disable All\n                          </Button>\n                        </Box>\n                      </Grid>\n                      {NOTIFICATION_CHANNELS.map((channel) => (\n                        <Grid item xs={6} sm={3} key={channel}>\n                          <Card variant=\"outlined\" sx={{ p: 1 }}>\n                            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\n                              {getChannelIcon(channel)}\n                              <Typography variant=\"body2\" align=\"center\">\n                                {getChannelDisplayName(channel)}\n                              </Typography>\n                              <FormControlLabel\n                                control={\n                                  <Switch\n                                    checked={preferences[type.key]?.[channel] || false}\n                                    onChange={(e) => handlePreferenceChange(type.key, channel, e.target.checked)}\n                                    size=\"small\"\n                                  />\n                                }\n                                label=\"\"\n                                sx={{ m: 0 }}\n                              />\n                            </Box>\n                          </Card>\n                        </Grid>\n                      ))}\n                    </Grid>\n                  </Box>\n                </AccordionDetails>\n              </Accordion>\n            ))}\n          </Box>\n        )}\n      </DialogContent>\n      <DialogActions sx={{ p: 3, gap: 1 }}>\n        <Button\n          onClick={handleReset}\n          startIcon={<Restore />}\n          variant=\"outlined\"\n        >\n          Reset to Defaults\n        </Button>\n        <Box sx={{ flex: 1 }} />\n        <Button onClick={onClose} variant=\"outlined\">\n          Cancel\n        </Button>\n        <Button\n          onClick={handleSave}\n          variant=\"contained\"\n          startIcon={<Save />}\n          disabled={!hasChanges || savePreferencesMutation.isPending}\n        >\n          {savePreferencesMutation.isPending ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default NotificationSettingsModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/NotificationTemplates.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":2,"column":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  PlayArrow,\n  Notifications,\n  Email,\n  Sms,\n  NotificationImportant\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport {\n  getNotificationTemplates,\n  createNotificationTemplate,\n  updateNotificationTemplate,\n  deleteNotificationTemplate,\n  testNotificationTemplate,\n  NotificationTemplate,\n  NotificationTemplateCreate,\n  NotificationTemplateUpdate,\n  NOTIFICATION_CHANNELS,\n  TEMPLATE_TYPES,\n  getChannelDisplayName,\n  getTemplateTypeDisplayName\n} from '../services/notificationService';\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`template-tabpanel-${index}`}\n      aria-labelledby={`template-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\nconst NotificationTemplates: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [editingTemplate, setEditingTemplate] = useState<NotificationTemplate | null>(null);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [templateToDelete, setTemplateToDelete] = useState<NotificationTemplate | null>(null);\n  const queryClient = useQueryClient();\n  // Form state for create/edit\n  const [formData, setFormData] = useState<NotificationTemplateCreate>({\n    name: '',\n    description: '',\n    template_type: 'appointment_reminder',\n    channel: 'email',\n    subject: '',\n    body: '',\n    html_body: '',\n    trigger_event: '',\n    variables: [],\n    is_active: true\n  });\n  // Get templates data\n  const { \n    data: templates = [], \n    isLoading, \n    error \n  } = useQuery({\n    queryKey: notificationQueryKeys.templates(),\n    queryFn: () => getNotificationTemplates(),\n  });\n  // Create template mutation\n  const createMutation = useMutation({\n    mutationFn: createNotificationTemplate,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: notificationQueryKeys.templates() });\n      setIsCreateModalOpen(false);\n      resetForm();\n      toast.success('Template created successfully');\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to create template');\n    }\n  });\n  // Update template mutation\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: NotificationTemplateUpdate }) =>\n      updateNotificationTemplate(id, data),\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: notificationQueryKeys.templates() });\n      setEditingTemplate(null);\n      resetForm();\n      toast.success('Template updated successfully');\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to update template');\n    }\n  });\n  // Delete template mutation\n  const deleteMutation = useMutation({\n    mutationFn: deleteNotificationTemplate,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: notificationQueryKeys.templates() });\n      setIsDeleteModalOpen(false);\n      setTemplateToDelete(null);\n      toast.success('Template deleted successfully');\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to delete template');\n    }\n  });\n  // Test template mutation\n  const testMutation = useMutation({\n    mutationFn: ({ id, testData }: { id: number; testData: any }) =>\n      testNotificationTemplate(id, testData),\n    onSuccess: (data) => {\n      toast.success('Template test completed successfully');\n      console.log('Test result:', data);\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to test template');\n    }\n  });\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      template_type: 'appointment_reminder',\n      channel: 'email',\n      subject: '',\n      body: '',\n      html_body: '',\n      trigger_event: '',\n      variables: [],\n      is_active: true\n    });\n  };\n  const handleEdit = (template: NotificationTemplate) => {\n    setEditingTemplate(template);\n    setFormData({\n      name: template.name,\n      description: template.description || '',\n      template_type: template.template_type,\n      channel: template.channel,\n      subject: template.subject || '',\n      body: template.body,\n      html_body: template.html_body || '',\n      trigger_event: template.trigger_event || '',\n      variables: template.variables || [],\n      is_active: template.is_active\n    });\n    setIsCreateModalOpen(true);\n  };\n  const handleSubmit = () => {\n    if (editingTemplate) {\n      updateMutation.mutate({ id: editingTemplate.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n  const handleDelete = (template: NotificationTemplate) => {\n    setTemplateToDelete(template);\n    setIsDeleteModalOpen(true);\n  };\n  const confirmDelete = () => {\n    if (templateToDelete) {\n      deleteMutation.mutate(templateToDelete.id);\n    }\n  };\n  const handleTest = (template: NotificationTemplate) => {\n    testMutation.mutate({\n      id: template.id,\n      testData: {\n        variables: {\n          customer_name: 'John Doe',\n          appointment_date: '2024-01-15 10:00 AM',\n          service_type: 'AC Repair'\n        }\n      }\n    });\n  };\n  const getChannelIcon = (channel: string) => {\n    switch (channel) {\n      case 'email':\n        return <Email />;\n      case 'sms':\n        return <Sms />;\n      case 'push':\n        return <NotificationImportant />;\n      case 'in_app':\n        return <Notifications />;\n      default:\n        return <Assignment />;\n    }\n  };\n  // Filter templates by channel for tabs\n  const emailTemplates = templates.filter(t => t.channel === 'email');\n  const smsTemplates = templates.filter(t => t.channel === 'sms');\n  const pushTemplates = templates.filter(t => t.channel === 'push');\n  const inAppTemplates = templates.filter(t => t.channel === 'in_app');\n  const TemplateTable: React.FC<{ templates: NotificationTemplate[] }> = ({ templates }) => (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Type</TableCell>\n            <TableCell>Channel</TableCell>\n            <TableCell>Status</TableCell>\n            <TableCell>Variables</TableCell>\n            <TableCell>Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {templates.map((template) => (\n            <TableRow key={template.id}>\n              <TableCell>\n                <Box>\n                  <Typography variant=\"subtitle2\">{template.name}</Typography>\n                  {template.description && (\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {template.description}\n                    </Typography>\n                  )}\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Chip \n                  label={getTemplateTypeDisplayName(template.template_type as any)} \n                  size=\"small\"\n                  variant=\"outlined\"\n                />\n              </TableCell>\n              <TableCell>\n                <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                  {getChannelIcon(template.channel)}\n                  {getChannelDisplayName(template.channel as any)}\n                </Box>\n              </TableCell>\n              <TableCell>\n                <Chip \n                  label={template.is_active ? 'Active' : 'Inactive'}\n                  color={template.is_active ? 'success' : 'default'}\n                  size=\"small\"\n                />\n              </TableCell>\n              <TableCell>\n                {template.variables && template.variables.length > 0 && (\n                  <Tooltip title={template.variables.join(', ')}>\n                    <Chip \n                      label={`${template.variables.length} variables`} \n                      size=\"small\"\n                      variant=\"outlined\"\n                    />\n                  </Tooltip>\n                )}\n              </TableCell>\n              <TableCell>\n                <Box display=\"flex\" gap={1}>\n                  <Tooltip title=\"Test Template\">\n                    <IconButton \n                      size=\"small\" \n                      onClick={() => handleTest(template)}\n                      disabled={testMutation.isPending}\n                    >\n                      <PlayArrow />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Edit Template\">\n                    <IconButton size=\"small\" onClick={() => handleEdit(template)}>\n                      <Edit />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Delete Template\">\n                    <IconButton \n                      size=\"small\" \n                      onClick={() => handleDelete(template)}\n                      color=\"error\"\n                    >\n                      <Delete />\n                    </IconButton>\n                  </Tooltip>\n                </Box>\n              </TableCell>\n            </TableRow>\n          ))}\n          {templates.length === 0 && (\n            <TableRow>\n              <TableCell colSpan={6} align=\"center\" sx={{ py: 4 }}>\n                <Typography color=\"text.secondary\">\n                  No templates found for this channel\n                </Typography>\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n  if (error) {\n    return (\n      <Alert severity=\"error\">\n        Failed to load notification templates. Please try again.\n      </Alert>\n    );\n  }\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h5\" component=\"h2\">\n              Notification Templates\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={() => setIsCreateModalOpen(true)}\n            >\n              Create Template\n            </Button>\n          </Box>\n          {isLoading ? (\n            <Box display=\"flex\" justifyContent=\"center\" py={4}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <Box>\n              <Tabs \n                value={selectedTab} \n                onChange={(_, newValue) => setSelectedTab(newValue)}\n                sx={{ borderBottom: 1, borderColor: 'divider' }}\n              >\n                <Tab \n                  label={`Email (${emailTemplates.length})`} \n                  icon={<Email />}\n                  iconPosition=\"start\"\n                />\n                <Tab \n                  label={`SMS (${smsTemplates.length})`} \n                  icon={<Sms />}\n                  iconPosition=\"start\"\n                />\n                <Tab \n                  label={`Push (${pushTemplates.length})`} \n                  icon={<NotificationImportant />}\n                  iconPosition=\"start\"\n                />\n                <Tab \n                  label={`In-App (${inAppTemplates.length})`} \n                  icon={<Notifications />}\n                  iconPosition=\"start\"\n                />\n              </Tabs>\n              <TabPanel value={selectedTab} index={0}>\n                <TemplateTable templates={emailTemplates} />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={1}>\n                <TemplateTable templates={smsTemplates} />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={2}>\n                <TemplateTable templates={pushTemplates} />\n              </TabPanel>\n              <TabPanel value={selectedTab} index={3}>\n                <TemplateTable templates={inAppTemplates} />\n              </TabPanel>\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n      {/* Create/Edit Template Modal */}\n      <Dialog \n        open={isCreateModalOpen} \n        onClose={() => setIsCreateModalOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          {editingTemplate ? 'Edit Template' : 'Create Template'}\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Template Name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Template Type</InputLabel>\n                <Select\n                  value={formData.template_type}\n                  label=\"Template Type\"\n                  onChange={(e) => setFormData({ ...formData, template_type: e.target.value })}\n                >\n                  {TEMPLATE_TYPES.map(type => (\n                    <MenuItem key={type} value={type}>\n                      {getTemplateTypeDisplayName(type)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Channel</InputLabel>\n                <Select\n                  value={formData.channel}\n                  label=\"Channel\"\n                  onChange={(e) => setFormData({ ...formData, channel: e.target.value })}\n                >\n                  {NOTIFICATION_CHANNELS.map(channel => (\n                    <MenuItem key={channel} value={channel}>\n                      {getChannelDisplayName(channel)}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={formData.is_active}\n                    onChange={(e) => setFormData({ ...formData, is_active: e.target.checked })}\n                  />\n                }\n                label=\"Active\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                multiline\n                rows={2}\n              />\n            </Grid>\n            {formData.channel === 'email' && (\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Subject\"\n                  value={formData.subject}\n                  onChange={(e) => setFormData({ ...formData, subject: e.target.value })}\n                />\n              </Grid>\n            )}\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Message Body\"\n                value={formData.body}\n                onChange={(e) => setFormData({ ...formData, body: e.target.value })}\n                multiline\n                rows={4}\n                required\n                helperText=\"Use {variable_name} for dynamic content (e.g., {customer_name}, {appointment_date})\"\n              />\n            </Grid>\n            {formData.channel === 'email' && (\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"HTML Body (Optional)\"\n                  value={formData.html_body}\n                  onChange={(e) => setFormData({ ...formData, html_body: e.target.value })}\n                  multiline\n                  rows={4}\n                  helperText=\"HTML version of the email for rich formatting\"\n                />\n              </Grid>\n            )}\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Trigger Event (Optional)\"\n                value={formData.trigger_event}\n                onChange={(e) => setFormData({ ...formData, trigger_event: e.target.value })}\n                helperText=\"Event that automatically triggers this notification (e.g., customer_interaction, appointment_scheduled)\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsCreateModalOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleSubmit}\n            variant=\"contained\"\n            disabled={createMutation.isPending || updateMutation.isPending}\n          >\n            {editingTemplate ? 'Update' : 'Create'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Delete Confirmation Modal */}\n      <Dialog open={isDeleteModalOpen} onClose={() => setIsDeleteModalOpen(false)}>\n        <DialogTitle>Confirm Delete</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to delete the template \"{templateToDelete?.name}\"?\n            This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDeleteModalOpen(false)}>Cancel</Button>\n          <Button \n            onClick={confirmDelete}\n            color=\"error\"\n            variant=\"contained\"\n            disabled={deleteMutation.isPending}\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\nexport default NotificationTemplates;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OTPLogin.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":20,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"token"},"fix":{"range":[393,407],"text":""},"desc":"Remove unused variable 'token'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":20,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[406,427],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 31 column 10.","line":46,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":46,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 31 column 10.","line":46,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":46,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 31 column 10.","line":66,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":66,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 31 column 10.","line":66,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":66,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 31 column 10.","line":78,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":78,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 31 column 10.","line":78,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":78,"endColumn":24}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  CircularProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  Container\n} from '@mui/material';\nimport {useForm} from 'react-hook-form';\nimport { useRouter } from 'next/navigation';\nimport { authService } from '../services/authService';\ninterface OTPLoginProps {\n  onLogin: (token: string, loginResponse?: any) => void;\n}\ninterface EmailFormData {\n  email: string;\n}\ninterface OTPFormData {\n  otp: string;\n}\nconst OTPLogin: React.FC<OTPLoginProps> = ({ onLogin }) => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const emailForm = useForm<EmailFormData>();\n  const otpForm = useForm<OTPFormData>();\n  const router = useRouter(); // Removed underscore since it's used\n  const steps = ['Enter Email', 'Verify OTP'];\n  const handleEmailSubmit = async (data: EmailFormData) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      setUserEmail(data.email);\n      setSuccess(`OTP sent to ${data.email}. Please check your email.`);\n      setActiveStep(1);\n    } catch (error: any) {\n      setError(error.response?.data?.detail || 'Failed to send OTP. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleOTPSubmit = async (data: OTPFormData) => {\n    setLoading(true);\n    setError('');\n    try {\n      const response = await authService.verifyOTP(userEmail, data.otp);\n      setSuccess('Login successful!');\n      // Login successful!\n      localStorage.setItem('token', response.access_token);\n      localStorage.setItem('user_role', response.user_role);\n      // Organization context is managed by backend session only\n      // Call parent callback with token and response\n      onLogin(response.access_token, response);\n      // Redirect to dashboard\n      router.push('/dashboard');\n    } catch (error: any) {\n      setError(error.response?.data?.detail || 'Invalid OTP. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleResendOTP = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      await authService.requestOTP(userEmail);\n      setSuccess('OTP resent successfully!');\n    } catch (error: any) {\n      setError(error.response?.data?.detail || 'Failed to resend OTP.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleBack = () => {\n    setActiveStep(0);\n    setError('');\n    setSuccess('');\n    emailForm.reset();\n    otpForm.reset();\n  };\n  return (\n    <Container maxWidth=\"sm\">\n      <Box sx={{ mt: 8, mb: 4 }}>\n        <Card>\n          <CardContent sx={{ p: 4 }}>\n            <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\">\n              TRITIQ ERP\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\" gutterBottom align=\"center\" color=\"textSecondary\">\n              OTP Authentication\n            </Typography>\n            <Stepper activeStep={activeStep} sx={{ mt: 3, mb: 4 }}>\n              {steps.map((label) => (\n                <Step key={label}>\n                  <StepLabel>{label}</StepLabel>\n                </Step>\n              ))}\n            </Stepper>\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\n                {error}\n              </Alert>\n            )}\n            {success && (\n              <Alert severity=\"success\" sx={{ mb: 2 }}>\n                {success}\n              </Alert>\n            )}\n            {activeStep === 0 && (\n              <Box component=\"form\" onSubmit={emailForm.handleSubmit(handleEmailSubmit)}>\n                <TextField\n                  fullWidth\n                  label=\"Email Address\"\n                  type=\"email\"\n                  {...emailForm.register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                      message: 'Invalid email address'\n                    }\n                  })}\n                  error={!!emailForm.formState.errors.email}\n                  helperText={emailForm.formState.errors.email?.message}\n                  margin=\"normal\"\n                  autoFocus\n                />\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  sx={{ mt: 3, mb: 2 }}\n                  disabled={loading}\n                >\n                  {loading ? <CircularProgress size={24} /> : 'Send OTP'}\n                </Button>\n                <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n                  Enter your email address to receive an OTP for secure login.\n                </Typography>\n              </Box>\n            )}\n            {activeStep === 1 && (\n              <Box component=\"form\" onSubmit={otpForm.handleSubmit(handleOTPSubmit)}>\n                <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                  Enter the 6-digit OTP sent to: <strong>{userEmail}</strong>\n                </Typography>\n                <TextField\n                  fullWidth\n                  label=\"OTP Code\"\n                  type=\"text\"\n                  inputProps={{ maxLength: 6, pattern: '[0-9]*' }}\n                  {...otpForm.register('otp', {\n                    required: 'OTP is required',\n                    pattern: {\n                      value: /^\\d{6}$/,\n                      message: 'OTP must be 6 digits'\n                    }\n                  })}\n                  error={!!otpForm.formState.errors.otp}\n                  helperText={otpForm.formState.errors.otp?.message}\n                  margin=\"normal\"\n                  autoFocus\n                />\n                <Box sx={{ mt: 3, mb: 2, display: 'flex', gap: 2 }}>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={handleBack}\n                    disabled={loading}\n                    sx={{ flex: 1 }}\n                  >\n                    Back\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    disabled={loading}\n                    sx={{ flex: 1 }}\n                  >\n                    {loading ? <CircularProgress size={24} /> : 'Verify & Login'}\n                  </Button>\n                </Box>\n                <Button\n                  variant=\"text\"\n                  onClick={handleResendOTP}\n                  disabled={loading}\n                  fullWidth\n                  sx={{ mt: 1 }}\n                >\n                  Resend OTP\n                </Button>\n                <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" sx={{ mt: 2 }}>\n                  OTP is valid for 10 minutes.\n                </Typography>\n              </Box>\n            )}\n          </CardContent>\n        </Card>\n      </Box>\n    </Container>\n  );\n};\nexport default OTPLogin;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OrganizationForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":68,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[1913,1927],"text":""},"desc":"Remove unused variable 'data'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState } from 'react';\nimport { TextField, Button, CircularProgress, Grid, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\nimport axios from 'axios';\n// State to GST state code map (mirrored from backend for autofill)\nconst STATE_CODE_MAP: { [key: string]: string } = {\n  \"Andaman & Nicobar Islands\": \"35\",\n  \"Andhra Pradesh\": \"37\",\n  \"Arunachal Pradesh\": \"12\",\n  \"Assam\": \"18\",\n  \"Bihar\": \"10\",\n  \"Chandigarh\": \"04\",\n  \"Chhattisgarh\": \"22\",\n  \"Dadra & Nagar Haveli & Daman & Diu\": \"26\",\n  \"Delhi\": \"07\",\n  \"Goa\": \"30\",\n  \"Gujarat\": \"24\",\n  \"Haryana\": \"06\",\n  \"Himachal Pradesh\": \"02\",\n  \"Jammu & Kashmir\": \"01\",\n  \"Jharkhand\": \"20\",\n  \"Karnataka\": \"29\",\n  \"Kerala\": \"32\",\n  \"Ladakh\": \"38\",\n  \"Lakshadweep\": \"31\",\n  \"Madhya Pradesh\": \"23\",\n  \"Maharashtra\": \"27\",\n  \"Manipur\": \"14\",\n  \"Meghalaya\": \"17\",\n  \"Mizoram\": \"15\",\n  \"Nagaland\": \"13\",\n  \"Odisha\": \"21\",\n  \"Puducherry\": \"34\",\n  \"Punjab\": \"03\",\n  \"Rajasthan\": \"08\",\n  \"Sikkim\": \"11\",\n  \"Tamil Nadu\": \"33\",\n  \"Telangana\": \"36\",\n  \"Tripura\": \"16\",\n  \"Uttar Pradesh\": \"09\",\n  \"Uttarakhand\": \"05\",\n  \"West Bengal\": \"19\",\n  \"Other Territory\": \"97\",\n  \"Other Country\": \"99\"\n};\ninterface FormData {\n  name?: string; // For direct organization creation\n  subdomain?: string; // For direct organization creation\n  organization_name?: string; // For license creation\n  admin_password?: string; // For license creation\n  superadmin_email?: string; // For license creation\n  primary_email?: string; // For direct organization creation\n  primary_phone: string;\n  address1?: string; // For license creation\n  address?: string; // For direct organization creation\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  gst_number: string;\n  business_type?: string;\n  industry?: string;\n  website?: string;\n  description?: string;\n  max_users?: number;\n}\ninterface OrganizationFormProps {\n  onSubmit: (data: FormData) => void;\n  mode?: 'license' | 'create'; // license = create license, create = direct org creation\n  initialData?: Partial<FormData>;\n  isEditing?: boolean;\n}\nconst OrganizationForm: React.FC<OrganizationFormProps> = ({ \n  onSubmit, \n  mode = 'license',\n  initialData = {},\n  isEditing = false \n}) => {\n  const [formData, setFormData] = useState<FormData>({\n    organization_name: '',\n    name: '',\n    subdomain: '',\n    admin_password: '',\n    superadmin_email: '',\n    primary_email: '',\n    primary_phone: '',\n    address1: '',\n    address: '',\n    city: '',\n    state: '',\n    pin_code: '',\n    state_code: '',\n    gst_number: '',\n    business_type: '',\n    industry: '',\n    website: '',\n    description: '',\n    max_users: 5,\n    ...initialData\n  });\n  const [pincodeLoading, setPincodeLoading] = useState(false);\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | { target: { name: string; value: unknown } }) => {\n    const name = e.target.name as string;\n    const value = e.target.value as string;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n      ...(name === 'state' ? { state_code: STATE_CODE_MAP[value] || '' } : {}),  // Autofill state_code based on state change\n    }));\n  };\n  const handlePincodeChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    handleChange(e);\n    if (value.length === 6) {\n      setPincodeLoading(true);\n      try {\n        const response = await axios.get(`/api/pincode/lookup/${value}`);\n        const { city, state, state_code } = response.data;\n        setFormData((prev) => ({\n          ...prev,\n          city,\n          state,\n          state_code\n        }));\n      } catch (error) {\n        console.error('Failed to lookup pincode:', error);\n      } finally {\n        setPincodeLoading(false);\n      }\n    }\n  };\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Transform data based on mode\n    let submitData = { ...formData };\n    if (mode === 'create') {\n      // For direct organization creation, map fields appropriately\n      submitData = {\n        name: formData.name || formData.organization_name,\n        subdomain: formData.subdomain,\n        primary_email: formData.primary_email || formData.superadmin_email,\n        primary_phone: formData.primary_phone,\n        address1: formData.address || formData.address1,\n        city: formData.city,\n        state: formData.state,\n        pin_code: formData.pin_code,\n        state_code: formData.state_code,\n        gst_number: formData.gst_number,\n        business_type: formData.business_type,\n        industry: formData.industry,\n        website: formData.website,\n        description: formData.description,\n        max_users: formData.max_users\n      };\n    }\n    onSubmit(submitData);\n  };\n  const isLicenseMode = mode === 'license';\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"Organization Name\"\n            name={isLicenseMode ? \"organization_name\" : \"name\"}\n            value={isLicenseMode ? formData.organization_name : formData.name}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        {!isLicenseMode && (\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <TextField\n              fullWidth\n              label=\"Subdomain\"\n              name=\"subdomain\"\n              value={formData.subdomain}\n              onChange={handleChange}\n              helperText=\"Used for organization-specific URLs\"\n              required\n            />\n          </Grid>\n        )}\n        {isLicenseMode && (\n          <Grid size={{ xs: 12, sm: 6 }}>\n            <TextField\n              fullWidth\n              label=\"Admin Password\"\n              name=\"admin_password\"\n              type=\"password\"\n              value={formData.admin_password}\n              onChange={handleChange}\n              required={!isEditing}\n            />\n          </Grid>\n        )}\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"Primary Email\"\n            name={isLicenseMode ? \"superadmin_email\" : \"primary_email\"}\n            type=\"email\"\n            value={isLicenseMode ? formData.superadmin_email : formData.primary_email}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"Primary Phone\"\n            name=\"primary_phone\"\n            value={formData.primary_phone}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        {!isLicenseMode && (\n          <>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <FormControl fullWidth>\n                <InputLabel>Business Type</InputLabel>\n                <Select\n                  name=\"business_type\"\n                  value={formData.business_type || ''}\n                  label=\"Business Type\"\n                  onChange={handleChange}\n                >\n                  <MenuItem value=\"Manufacturing\">Manufacturing</MenuItem>\n                  <MenuItem value=\"Trading\">Trading</MenuItem>\n                  <MenuItem value=\"Service\">Service</MenuItem>\n                  <MenuItem value=\"Retail\">Retail</MenuItem>\n                  <MenuItem value=\"Other\">Other</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Industry\"\n                name=\"industry\"\n                value={formData.industry}\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Website\"\n                name=\"website\"\n                type=\"url\"\n                value={formData.website}\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid size={{ xs: 12, sm: 6 }}>\n              <TextField\n                fullWidth\n                label=\"Max Users\"\n                name=\"max_users\"\n                type=\"number\"\n                value={formData.max_users}\n                onChange={handleChange}\n                inputProps={{ min: 1, max: 1000 }}\n              />\n            </Grid>\n          </>\n        )}\n        <Grid size={12}>\n          <TextField\n            fullWidth\n            label=\"Address\"\n            name={isLicenseMode ? \"address1\" : \"address\"}\n            value={isLicenseMode ? formData.address1 : formData.address}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        <Grid size={{ xs: 12, sm: 4 }}>\n          <TextField\n            fullWidth\n            label=\"City\"\n            name=\"city\"\n            value={formData.city}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        <Grid size={{ xs: 12, sm: 4 }}>\n          <TextField\n            fullWidth\n            label=\"State\"\n            name=\"state\"\n            value={formData.state}\n            onChange={handleChange}\n            required\n          />\n        </Grid>\n        <Grid size={{ xs: 12, sm: 4 }}>\n          <TextField\n            fullWidth\n            label=\"PIN Code\"\n            name=\"pin_code\"\n            value={formData.pin_code}\n            onChange={handlePincodeChange}\n            required\n            InputProps={{\n              endAdornment: pincodeLoading ? <CircularProgress size={20} /> : null,\n            }}\n          />\n        </Grid>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"State Code\"\n            name=\"state_code\"\n            value={formData.state_code}\n            onChange={handleChange}\n            disabled  // Autofilled, so disabled for user input\n          />\n        </Grid>\n        <Grid size={{ xs: 12, sm: 6 }}>\n          <TextField\n            fullWidth\n            label=\"GST No.\"\n            name=\"gst_number\"\n            value={formData.gst_number}\n            onChange={handleChange}\n          />\n        </Grid>\n        {!isLicenseMode && (\n          <Grid size={12}>\n            <TextField\n              fullWidth\n              label=\"Description\"\n              name=\"description\"\n              multiline\n              rows={3}\n              value={formData.description}\n              onChange={handleChange}\n            />\n          </Grid>\n        )}\n        <Grid size={12}>\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            {isEditing ? 'Update Organization' : (isLicenseMode ? 'Create License' : 'Create Organization')}\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\nexport default OrganizationForm;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OrganizationMembersDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ListItemSecondaryAction' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"ListItemSecondaryAction"},"fix":{"range":[178,205],"text":""},"desc":"Remove unused variable 'ListItemSecondaryAction'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[205,219],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'fetchMembers' was used before it was defined.","line":61,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":61,"endColumn":19},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 48 column 10.","line":70,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":70,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 48 column 10.","line":70,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":70,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 48 column 10.","line":91,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":91,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 48 column 10.","line":91,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":91,"endColumn":24}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Typography,\n  Alert,\n  CircularProgress,\n  Box,\n  Chip,\n  TextField,\n  Grid\n} from '@mui/material';\nimport { Add, Email, Person } from '@mui/icons-material';\nimport { organizationService } from '../services/organizationService';\ninterface User {\n  id: number;\n  email: string;\n  full_name: string;\n  role: string;\n  is_active: boolean;\n  username: string;\n}\ninterface OrganizationMembersDialogProps {\n  open: boolean;\n  onClose: () => void;\n  organizationId: number;\n  organizationName: string;\n  canInvite?: boolean;\n}\nconst OrganizationMembersDialog: React.FC<OrganizationMembersDialogProps> = ({\n  open,\n  onClose,\n  organizationId,\n  organizationName,\n  canInvite = false\n}) => {\n  const [members, setMembers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showInviteForm, setShowInviteForm] = useState(false);\n  const [inviteData, setInviteData] = useState({\n    email: '',\n    username: '',\n    full_name: '',\n    password: '',\n    role: 'standard_user'\n  });\n  const [inviting, setInviting] = useState(false);\n  useEffect(() => {\n    if (open && organizationId) {\n// fetchMembers is defined later in this file\n      fetchMembers();\n    }\n  }, [open, organizationId]);\n  const fetchMembers = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const membersData = await organizationService.getOrganizationMembers(organizationId);\n      setMembers(membersData);\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleInviteSubmit = async () => {\n    try {\n      setInviting(true);\n      setError(null);\n      await organizationService.inviteUserToOrganization(organizationId, inviteData);\n      // Reset form and refresh members\n      setInviteData({\n        email: '',\n        username: '',\n        full_name: '',\n        password: '',\n        role: 'standard_user'\n      });\n      setShowInviteForm(false);\n      await fetchMembers();\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setInviting(false);\n    }\n  };\n  const getRoleColor = (role: string): 'error' | 'warning' | 'info' | 'default' => {\n    switch (role) {\n      case 'super_admin':\n        return 'error';\n      case 'org_admin':\n        return 'warning';\n      case 'admin':\n        return 'info';\n      default:\n        return 'default';\n    }\n  };\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'super_admin':\n        return 'Super Admin';\n      case 'org_admin':\n        return 'Org Admin';\n      case 'admin':\n        return 'Admin';\n      case 'standard_user':\n        return 'User';\n      default:\n        return role;\n    }\n  };\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth>\n      <DialogTitle>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Typography variant=\"h6\">\n            {organizationName} - Members\n          </Typography>\n          {canInvite && (\n            <Button\n              startIcon={<Add />}\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={() => setShowInviteForm(!showInviteForm)}\n            >\n              Invite User\n            </Button>\n          )}\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n        {showInviteForm && (\n          <Box sx={{ mb: 3, p: 2, border: 1, borderColor: 'divider', borderRadius: 1 }}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Invite New User\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Email\"\n                  type=\"email\"\n                  value={inviteData.email}\n                  onChange={(e) => setInviteData(prev => ({ ...prev, email: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Username\"\n                  value={inviteData.username}\n                  onChange={(e) => setInviteData(prev => ({ ...prev, username: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Full Name\"\n                  value={inviteData.full_name}\n                  onChange={(e) => setInviteData(prev => ({ ...prev, full_name: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <TextField\n                  fullWidth\n                  label=\"Temporary Password\"\n                  type=\"password\"\n                  value={inviteData.password}\n                  onChange={(e) => setInviteData(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                />\n              </Grid>\n              <Grid size={12}>\n                <Box display=\"flex\" gap={1} justifyContent=\"flex-end\">\n                  <Button\n                    onClick={() => setShowInviteForm(false)}\n                    disabled={inviting}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleInviteSubmit}\n                    disabled={inviting || !inviteData.email || !inviteData.username || !inviteData.password}\n                  >\n                    {inviting ? <CircularProgress size={20} /> : 'Send Invitation'}\n                  </Button>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n        )}\n        {loading ? (\n          <Box display=\"flex\" justifyContent=\"center\" p={3}>\n            <CircularProgress />\n          </Box>\n        ) : (\n          <List>\n            {members.length === 0 ? (\n              <ListItem>\n                <ListItemText\n                  primary=\"No members found\"\n                  secondary=\"This organization has no active members\"\n                />\n              </ListItem>\n            ) : (\n              members.map((member) => (\n                <ListItem key={member.id} divider>\n                  <ListItemText\n                    primary={\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        <Person fontSize=\"small\" color=\"action\" />\n                        <Typography variant=\"body1\">\n                          {member.full_name}\n                        </Typography>\n                        <Chip\n                          label={getRoleLabel(member.role)}\n                          size=\"small\"\n                          color={getRoleColor(member.role)}\n                          variant=\"outlined\"\n                        />\n                        {!member.is_active && (\n                          <Chip label=\"Inactive\" size=\"small\" color=\"default\" />\n                        )}\n                      </Box>\n                    }\n                    secondary={\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          <Email fontSize=\"small\" sx={{ mr: 0.5, verticalAlign: 'text-bottom' }} />\n                          {member.email}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Username: {member.username}\n                        </Typography>\n                      </Box>\n                    }\n                  />\n                </ListItem>\n              ))\n            )}\n          </List>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default OrganizationMembersDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OrganizationSwitcher.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":2,"column":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { from '@mui/material';\nimport { organizationService } from '../services/organizationService';\ninterface Organization {\n  id: number;\n  name: string;\n  subdomain: string;\n  role: string;\n  is_current: boolean;\n}\nconst OrganizationSwitcher: React.FC = () => {\n  const [organizations, setOrganizations] = useState<Organization[]>([]);\n  const [currentOrganization, setCurrentOrganization] = useState<number | ''>('');\n  const [loading, setLoading] = useState(true);\n  const [switching, setSwitching] = useState(false);\n  const [err, setErr] = useState<string | null>(null);\n  useEffect(() => {\n    fetchUserOrganizations();\n  }, []);\n  const fetchUserOrganizations = async () => {\n    try {\n      setLoading(true);\n      const orgs = await organizationService.getUserOrganizations();\n      setOrganizations(orgs);\n      // Find current organization\n      const current = orgs.find((org: Organization) => org.is_current);\n      if (current) {\n        setCurrentOrganization(current.id);\n      }\n    } catch (error: any) {\n      setErr(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleOrganizationSwitch = async (event: SelectChangeEvent<number | ''>) => {\n    const organizationId = event.target.value as number;\n    if (!organizationId || organizationId === currentOrganization) {\n      return;\n    }\n    try {\n      setSwitching(true);\n      setErr(null);\n      await organizationService.switchOrganization(organizationId);\n      // Update current organization state\n      setCurrentOrganization(organizationId);\n      setOrganizations(prev => \n        prev.map(org => ({\n          ...org,\n          is_current: org.id === organizationId\n        }))\n      );\n      // Call the page to update all components with new organization context\n      window.location.reload();\n    } catch (error: any) {\n      setErr(error.message);\n    } finally {\n      setSwitching(false);\n    }\n  };\n  if (loading) {\n    return (\n      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n        <CircularProgress size={20} />\n        <Typography variant=\"caption\">Loading organizations...</Typography>\n      </Box>\n    );\n  }\n  if (organizations.length === 0) {\n    return (\n      <Typography variant=\"caption\" color=\"text.secondary\">\n        No organizations available\n      </Typography>\n    );\n  }\n  if (organizations.length === 1) {\n    const org = organizations[0];\n    return (\n      <Box>\n        <Typography variant=\"body2\" fontWeight=\"medium\">\n          {org.name}\n        </Typography>\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          Role: {org.role}\n        </Typography>\n      </Box>\n    );\n  }\n  return (\n    <Box sx={{ minWidth: 200 }}>\n      {err && (\n        <Alert severity=\"error\" sx={{ mb: 1, fontSize: '0.8rem' }}>\n          {err}\n        </Alert>\n      )}\n      <FormControl fullWidth size=\"small\">\n        <InputLabel id=\"organization-select-label\">Organization</InputLabel>\n        <Select\n          labelId=\"organization-select-label\"\n          value={currentOrganization}\n          label=\"Organization\"\n          onChange={handleOrganizationSwitch}\n          disabled={switching}\n        >\n          {organizations.map((org) => (\n            <MenuItem key={org.id} value={org.id}>\n              <Box>\n                <Typography variant=\"body2\" fontWeight=\"medium\">\n                  {org.name}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Role: {org.role} | {org.subdomain}\n                </Typography>\n              </Box>\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      {switching && (\n        <Box display=\"flex\" alignItems=\"center\" gap={1} mt={1}>\n          <CircularProgress size={16} />\n          <Typography variant=\"caption\">Switching organization...</Typography>\n        </Box>\n      )}\n    </Box>\n  );\n};\nexport default OrganizationSwitcher;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/OrganizatonList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/PasswordChangeModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useRef' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"useRef"},"fix":{"range":[38,46],"text":""},"desc":"Remove unused variable 'useRef'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getValues' is assigned a value but never used.","line":45,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"getValues"},"fix":{"range":[1090,1105],"text":""},"desc":"Remove unused variable 'getValues'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Alert,\n  CircularProgress\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { getFeatureFlag } from '../utils/config';\ninterface PasswordChangeModalProps {\n  open: boolean;\n  onClose: () => void;\n  onSuccess?: () => void;\n  isRequired?: boolean; // For mandatory password changes\n}\ninterface PasswordFormData {\n  current_password?: string;\n  new_password: string;\n  confirm_password: string;\n}\nconst PasswordChangeModal: React.FC<PasswordChangeModalProps> = ({\n  open,\n  onClose,\n  onSuccess,\n  isRequired = false\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  // Check if password change functionality is enabled\n  const passwordChangeEnabled = getFeatureFlag('passwordChange');\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    watch,\n    getValues\n  } = useForm<PasswordFormData>();\n  const new_password = watch('new_password');\n  const handleClose = () => {\n    if (!isRequired || success) {\n      reset();\n      setError(null);\n      setSuccess(false);\n      onClose();\n    }\n  };\n  const onSubmit = async (data: PasswordFormData) => {\n    // Validation checks\n    if (data.new_password !== data.confirm_password) {\n      setError('New passwords do not match');\n      return;\n    }\n    if (!isRequired && !data.current_password) {\n      setError('Current password is required');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // Call API for password change (mandatory or regular)\n      const endpoint = isRequired ? '/api/v1/password/change-mandatory' : '/api/v1/password/change';\n      const payload = isRequired ? { new_password: data.new_password } : data;\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n      if (!response.ok) {throw new Error('Failed to change password');}\n      setSuccess(true);\n      if (onSuccess) {\n        onSuccess();\n      }\n      if (!isRequired) {\n        setTimeout(() => {\n          handleClose();\n        }, 2000);\n      }\n    } catch (err: any) {\n      // Try to extract from various error structures\n      const detail = err.response?.data?.detail;\n      const message = err.response?.data?.message;\n      let errorMessage = 'Failed to change password';\n      if (typeof detail === 'string' && detail) {\n        errorMessage = detail;\n      } else if (typeof message === 'string' && message) {\n        errorMessage = message;\n      } else if (Array.isArray(detail) && detail.length > 0) {\n        // Handle Pydantic validation errors\n        const messages = detail.map(e => e.msg || `${e.loc?.join(' -> ')}: ${e.type}`).filter(Boolean);\n        errorMessage = messages.length > 0 ? messages.join(', ') : 'Validation error';\n      } else if (detail && typeof detail === 'object') {\n        // Handle object error details\n        errorMessage = detail.error || detail.message || 'Invalid request format';\n      } else if (typeof err.message === 'string' && err.message) {\n        errorMessage = err.message;\n      } else if (err.status === 422) {\n        errorMessage = 'Invalid request. Please check your input fields.';\n      }\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose} \n      maxWidth=\"sm\" \n      fullWidth\n      disableEscapeKeyDown={isRequired && !success}\n    >\n      <DialogTitle>\n        {isRequired ? 'Change Your Password' : 'Change Password'}\n      </DialogTitle>\n      <DialogContent>\n        <Box sx={{ pt: 2 }}>\n          {isRequired && !success && (\n            <Alert severity=\"warning\" sx={{ mb: 2 }}>\n              You are required to change your password before continuing.\n            </Alert>\n          )}\n          {!passwordChangeEnabled && (\n            <Alert severity=\"info\" sx={{ mb: 2 }}>\n              Password change functionality is temporarily disabled. Please contact your administrator.\n            </Alert>\n          )}\n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error}\n            </Alert>\n          )}\n          {success && (\n            <Alert severity=\"success\" sx={{ mb: 2 }}>\n              Password changed successfully!\n              {isRequired && (\n                <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                  You can now continue using the application.\n                </Typography>\n              )}\n            </Alert>\n          )}\n          {!success && passwordChangeEnabled && (\n            <form onSubmit={handleSubmit(onSubmit)}>\n              {!isRequired && (\n                <TextField\n                  fullWidth\n                  label=\"Current Password\"\n                  type=\"password\"\n                  margin=\"normal\"\n                  {...register('current_password', {\n                    required: 'Current password is required'\n                  })}\n                  error={!!errors.current_password}\n                  helperText={errors.current_password?.message}\n                  disabled={loading}\n                />\n              )}\n              <TextField\n                fullWidth\n                label=\"New Password\"\n                type=\"password\"\n                margin=\"normal\"\n                {...register('new_password', {\n                  required: 'New password is required',\n                  minLength: {\n                    value: 8,\n                    message: 'Password must be at least 8 characters long'\n                  },\n                  pattern: {\n                    value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&].+$/,\n                    message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\n                  }\n                })}\n                error={!!errors.new_password}\n                helperText={errors.new_password?.message}\n                disabled={loading}\n              />\n              <TextField\n                fullWidth\n                label=\"Confirm New Password\"\n                type=\"password\"\n                margin=\"normal\"\n                {...register('confirm_password', {\n                  required: 'Please confirm your new password',\n                  validate: (value) => value === new_password || 'Passwords do not match'\n                })}\n                error={!!errors.confirm_password}\n                helperText={errors.confirm_password?.message}\n                disabled={loading}\n              />\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Password must be at least 8 characters long and contain at least one uppercase letter, \n                  one lowercase letter, one number, and one special character (@$!%*?&).\n                </Typography>\n              </Box>\n            </form>\n          )}\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        {!isRequired && (\n          <Button onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n        )}\n        {success && isRequired && (\n          <Button onClick={handleClose} variant=\"contained\">\n            Continue\n          </Button>\n        )}\n        {!success && passwordChangeEnabled && (\n          <Button\n            onClick={handleSubmit(onSubmit)}\n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : null}\n          >\n            Change Password\n          </Button>\n        )}\n        {!passwordChangeEnabled && (isRequired ? (\n          <Button onClick={handleClose} variant=\"contained\">\n            Continue Without Changing Password\n          </Button>\n        ) : (\n          <Button onClick={handleClose}>\n            Close\n          </Button>\n        ))}\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default PasswordChangeModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ProductAutocomplete.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"useCallback"},"fix":{"range":[66,79],"text":""},"desc":"Remove unused variable 'useCallback'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Chip' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"Chip"},"fix":{"range":[173,181],"text":""},"desc":"Remove unused variable 'Chip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'product' is defined but never used.","line":30,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"product"},"fix":{"range":[846,869],"text":""},"desc":"Remove unused variable 'product'."}]},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 41 column 3.","line":68,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":68,"endColumn":25},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 41 column 3.","line":68,"column":15,"nodeType":"Identifier","messageId":"noShadow","endLine":68,"endColumn":25},{"ruleId":"no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 39 column 3.","line":112,"column":40,"nodeType":"Identifier","messageId":"noShadow","endLine":112,"endColumn":45},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'value' is already declared in the upper scope on line 39 column 3.","line":112,"column":40,"nodeType":"Identifier","messageId":"noShadow","endLine":112,"endColumn":45}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/ProductAutocomplete.tsx\nimport React, { useState, useCallback } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  CircularProgress,\n  Box,\n  Typography,\n  Chip\n} from '@mui/material';\nimport { Add as AddIcon } from '@mui/icons-material';\nimport {useQuery, useMutation, useQueryClient} from '@tanstack/react-query';\nimport { getProducts, createProduct } from '../services/masterService';\nimport AddProductModal from './AddProductModal';\ninterface Product {\n  id: number;\n  product_name: string; // Updated to match API response format\n  hsn_code?: string;\n  part_number?: string;\n  unit: string;\n  unit_price: number;\n  gst_rate?: number;\n  is_gst_inclusive?: boolean;\n  reorder_level?: number;\n  description?: string;\n  is_manufactured?: boolean;\n}\ninterface ProductAutocompleteProps {\n  value: Product | null;\n  onChange: (product: Product | null) => void;\n  error?: boolean;\n  helperText?: string;\n  disabled?: boolean;\n  label?: string;\n  placeholder?: string;\n  size?: 'small' | 'medium';\n}\nconst ProductAutocomplete: React.FC<ProductAutocompleteProps> = ({\n  value,\n  onChange,\n  error = false,\n  helperText = '',\n  disabled = false,\n  label = 'Product',\n  placeholder = 'Search or add product...',\n  size = 'medium'\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [addModalOpen, setAddModalOpen] = useState(false);\n  const queryClient = useQueryClient();\n  // Fetch all products\n  const { data: allProducts = [], isLoading } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts,\n    enabled: true,\n    staleTime: Infinity, // Cache indefinitely since it's all data\n  });\n  // Create product mutation\n  const createProductMutation = useMutation({\n    mutationFn: createProduct,\n    onSuccess: (newProduct) => {\n      // Invalidate queries\n      queryClient.invalidateQueries({queryKey: ['products']});\n      // Auto-select the newly created product\n      onChange(newProduct);\n      setAddModalOpen(false);\n    },\n    onError: (error: any) => {\n      console.error('Failed to create product:', error);\n    }\n  });\n  // Filtered options based on input\n  const filteredOptions = React.useMemo(() => {\n    const lowerInput = inputValue.toLowerCase();\n    return allProducts.filter((product: any) => \n      product.product_name.toLowerCase().includes(lowerInput) ||\n      (product.hsn_code || '').toLowerCase().includes(lowerInput) ||\n      (product.part_number || '').toLowerCase().includes(lowerInput)\n    );\n  }, [allProducts, inputValue]);\n  // Create options array with \"Add Product\" option\n  const options = React.useMemo(() => {\n    const addOption = {\n      id: -1,\n      product_name: '➕ Add Product',\n      isAddOption: true,\n    };\n    return [addOption, ...filteredOptions];\n  }, [filteredOptions]);\n  const handleSelectionChange = (_: any, newValue: any) => {\n    if (newValue?.isAddOption) {\n      setAddModalOpen(true);\n      return;\n    }\n    onChange(newValue);\n  };\n  const handleAddProduct = async (productData: any) => {\n    await createProductMutation.mutateAsync(productData);\n  };\n  return (\n    <>\n      <Autocomplete\n        value={value}\n        onChange={handleSelectionChange}\n        inputValue={inputValue}\n        onInputChange={(_, newInputValue) => setInputValue(newInputValue)}\n        options={options}\n        getOptionLabel={(option) => {\n          if (option.isAddOption) {return option.product_name;}\n          return option.product_name;\n        }}\n        isOptionEqualToValue={(option, value) => option.id === value?.id}\n        loading={isLoading}\n        disabled={disabled}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={label}\n            placeholder={placeholder}\n            error={error}\n            helperText={helperText}\n            size={size}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <>\n                  {isLoading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                  {params.InputProps.endAdornment}\n                </>\n              ),\n            }}\n          />\n        )}\n        renderOption={(props, option) => {\n          if (option.isAddOption) {\n            return (\n              <Box component=\"li\" {...props} sx={{ \n                color: 'primary.main', \n                fontWeight: 'bold',\n                borderBottom: '1px solid #eee'\n              }}>\n                <AddIcon sx={{ mr: 1 }} />\n                {option.product_name}\n              </Box>\n            );\n          }\n          return (\n            <Box component=\"li\" {...props}>\n              <Typography variant=\"body1\" sx={{ fontWeight: 'medium' }}>\n                {option.product_name}\n              </Typography>\n            </Box>\n          );\n        }}\n        noOptionsText={\n          inputValue.length < 1 \n            ? \"Type to search or select from list...\" \n            : \"No products found\"\n        }\n      />\n      <AddProductModal\n        open={addModalOpen}\n        onClose={() => setAddModalOpen(false)}\n        onAdd={handleAddProduct}\n        loading={createProductMutation.isPending}\n        initialName={inputValue}\n      />\n    </>\n  );\n};\nexport default ProductAutocomplete;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ProductDropdown.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":2,"column":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { from '@mui/material';\nexport interface Product {\n  id: number;\n  product_name: string;  // Using product_name field for frontend consistency as per requirements\n  hsn_code?: string;\n  part_number?: string;\n  unit: string;\n  unit_price: number;\n  gst_rate: number;\n  is_gst_inclusive: boolean;\n  reorder_level: number;\n  description?: string;\n  is_manufactured: boolean;\n  organization_id: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\ninterface ProductDropdownProps {\n  value?: number;\n  onChange: (productId: number, product: Product | null) => void;\n  label?: string;\n  disabled?: boolean;\n  error?: boolean;\n  helperText?: string;\n  required?: boolean;\n  fullWidth?: boolean;\n  variant?: 'autocomplete' | 'select';\n  placeholder?: string;\n  showDetails?: boolean;\n}\nconst ProductDropdown: React.FC<ProductDropdownProps> = ({\n  value,\n  onChange,\n  label = 'Select Product',\n  disabled = false,\n  error = false,\n  helperText,\n  required = false,\n  fullWidth = true,\n  variant = 'autocomplete',\n  placeholder = 'Search products...',\n  showDetails = false\n}) => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    fetchProducts();\n  }, []);\n  const fetchProducts = async (search?: string) => {\n    try {\n      setLoading(true);\n      const queryParams = new URLSearchParams();\n      if (search) {\n        queryParams.append('search', search);\n      }\n      queryParams.append('active_only', 'true');\n      queryParams.append('limit', '100');\n      const response = await fetch(`/api/v1/products?${queryParams}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch products');\n      }\n      const data = await response.json();\n      setProducts(data);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleChange = (productId: number) => {\n    const selectedProduct = products.find(p => p.id === productId) || null;\n    onChange(productId, selectedProduct);\n  };\n  const selectedProduct = products.find(p => p.id === value);\n  if (variant === 'autocomplete') {\n    return (\n      <Autocomplete\n        fullWidth={fullWidth}\n        value={selectedProduct || null}\n        onChange={(_, newValue) => {\n          if (newValue) {\n            handleChange(newValue.id);\n          } else {\n            onChange(0, null);\n          }\n        }}\n        options={products}\n        getOptionLabel={(option) => option.product_name}\n        renderOption={(props, option) => (\n          <li {...props}>\n            <Box>\n              <div>{option.product_name}</div>\n              {showDetails && (\n                <div style={{ fontSize: '0.75rem', color: 'text.secondary' }}>\n                  {option.hsn_code && `HSN: ${option.hsn_code} • `}\n                  {option.part_number && `PN: ${option.part_number} • `}\n                  Unit: {option.unit} • ₹{option.unit_price}\n                </div>\n              )}\n            </Box>\n          </li>\n        )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={label}\n            placeholder={placeholder}\n            required={required}\n            error={error}\n            helperText={helperText}\n            disabled={disabled}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <>\n                  {loading ? <CircularProgress size={20} /> : null}\n                  {params.InputProps.endAdornment}\n                </>\n              ),\n            }}\n          />\n        )}\n        loading={loading}\n        disabled={disabled}\n        noOptionsText=\"No products found\"\n        isOptionEqualToValue={(option, selectedValue) => option.id === selectedValue.id}\n      />\n    );\n  }\n  // Select variant\n  return (\n    <FormControl \n      fullWidth={fullWidth} \n      error={error} \n      disabled={disabled}\n      required={required}\n    >\n      <InputLabel>{label}</InputLabel>\n      <Select\n        value={value || ''}\n        onChange={(e: SelectChangeEvent<number>) => {\n          const productId = e.target.value as number;\n          handleChange(productId);\n        }}\n        label={label}\n        disabled={disabled}\n      >\n        <MenuItem value=\"\">\n          <em>None</em>\n        </MenuItem>\n        {loading ? (\n          <MenuItem disabled>\n            <CircularProgress size={20} />\n            <Box ml={1}>Loading products...</Box>\n          </MenuItem>\n        ) : (\n          products.map((product) => (\n            <MenuItem key={product.id} value={product.id}>\n              {product.product_name}\n              {showDetails && (\n                <Box component=\"span\" sx={{ fontSize: '0.75rem', color: 'text.secondary', ml: 1 }}>\n                  ({product.unit} • ₹{product.unit_price})\n                </Box>\n              )}\n            </MenuItem>\n          ))\n        )}\n      </Select>\n      {helperText && (\n        <Box sx={{ fontSize: '0.75rem', color: error ? 'error.main' : 'text.secondary', mt: 0.5 }}>\n          {helperText}\n        </Box>\n      )}\n    </FormControl>\n  );\n};\nexport default ProductDropdown;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ProductFileUpload.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Button"},"fix":{"range":[63,73],"text":""},"desc":"Remove unused variable 'Button'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AttachFile' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"AttachFile"},"fix":{"range":[282,296],"text":""},"desc":"Remove unused variable 'AttachFile'."}]},{"ruleId":"no-shadow","severity":2,"message":"'files' is already declared in the upper scope on line 48 column 17.","line":91,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":91,"endColumn":51},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'files' is already declared in the upper scope on line 48 column 17.","line":91,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":91,"endColumn":51}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport {\n  Box,\n  Button,\n  Typography,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ListItemSecondaryAction,\n  Paper,\n  LinearProgress,\n  Alert,\n  Tooltip,\n  Chip\n} from '@mui/material';\nimport {\n  CloudUpload,\n  AttachFile,\n  Delete,\n  Download,\n  FilePresent\n} from '@mui/icons-material';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport api from '../lib/api';\ninterface ProductFile {\n  id: number;\n  filename: string;\n  original_filename: string;\n  file_size: number;\n  content_type: string;\n  created_at: string;\n}\ninterface ProductFileUploadProps {\n  productId?: number;\n  disabled?: boolean;\n}\nconst ProductFileUpload: React.FC<ProductFileUploadProps> = ({\n  productId,\n  disabled = false\n}) => {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  // Query to get existing files\n  const { data: files = [], isLoading } = useQuery({\n    queryKey: ['product-files', productId],\n    queryFn: async () => {\n      if (!productId) {return [];}\n      const response = await api.get(`/api/v1/products/${productId}/files`);\n      return response.data;\n    },\n    enabled: !!productId\n  });\n  // Upload mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      if (!productId) {throw new Error('Product ID is required');}\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await api.post(\n        `/api/v1/products/${productId}/files`,\n        formData,\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        }\n      );\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['product-files', productId] });\n      setUploadError(null);\n    },\n    onError: (error: any) => {\n      setUploadError(error.response?.data?.detail || 'Upload failed');\n    }\n  });\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (fileId: number) => {\n      await api.delete(`/api/v1/products/${productId}/files/${fileId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['product-files', productId] });\n    }\n  });\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files || files.length === 0) {return;}\n    const file = files[0];\n    // Validate file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      setUploadError('File size must be less than 10MB');\n      return;\n    }\n    uploadMutation.mutate(file);\n  };\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    if (disabled || !productId) {return;}\n    handleFileSelect(e.dataTransfer.files);\n  };\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (!disabled && productId) {\n      setIsDragOver(true);\n    }\n  };\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFileSelect(e.target.files);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleDownload = async (fileId: number, filename: string) => {\n    try {\n      const response = await api.get(\n        `/api/v1/products/${productId}/files/${fileId}/download`,\n        { responseType: 'blob' }\n      );\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Download failed:', error);\n    }\n  };\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) {return '0 Bytes';}\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  const getFileIcon = (contentType: string) => {\n    if (contentType.startsWith('image/')) {return '🖼️';}\n    if (contentType.includes('pdf')) {return '📄';}\n    if (contentType.includes('word')) {return '📝';}\n    if (contentType.includes('excel') || contentType.includes('spreadsheet')) {return '📊';}\n    return '📎';\n  };\n  if (!productId) {\n    return (\n      <Alert severity=\"info\">\n        Save the product first to upload files\n      </Alert>\n    );\n  }\n  return (\n    <Box>\n      <Typography variant=\"h6\" gutterBottom>\n        Product Files\n        <Chip\n          label={`${files.length}/5`}\n          color={files.length >= 5 ? 'error' : 'primary'}\n          size=\"small\"\n          sx={{ ml: 1 }}\n        />\n      </Typography>\n      {uploadError && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {uploadError}\n        </Alert>\n      )}\n      {/* Upload Area */}\n      {files.length < 5 && !disabled && (\n        <Paper\n          sx={{\n            p: 3,\n            mb: 2,\n            border: '2px dashed',\n            borderColor: isDragOver ? 'primary.main' : 'grey.300',\n            bgcolor: isDragOver ? 'action.hover' : 'background.paper',\n            cursor: 'pointer',\n            textAlign: 'center',\n            transition: 'all 0.2s ease-in-out'\n          }}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onClick={() => fileInputRef.current?.click()}\n        >\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            hidden\n            onChange={handleFileInputChange}\n            accept=\"*/*\"\n          />\n          {uploadMutation.isPending ? (\n            <Box>\n              <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                Uploading file...\n              </Typography>\n              <LinearProgress sx={{ mt: 1 }} />\n            </Box>\n          ) : (\n            <Box>\n              <CloudUpload sx={{ fontSize: 48, color: 'grey.400', mb: 1 }} />\n              <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                Click to upload or drag and drop files here\n              </Typography>\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                Maximum file size: 10MB • Maximum 5 files\n              </Typography>\n            </Box>\n          )}\n        </Paper>\n      )}\n      {/* Files List */}\n      {files.length > 0 && (\n        <Paper sx={{ mt: 2 }}>\n          <List>\n            {files.map((file: ProductFile) => (\n              <ListItem key={file.id} divider>\n                <ListItemIcon>\n                  <FilePresent color=\"primary\" />\n                </ListItemIcon>\n                <ListItemText\n                  primary={\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <span>{getFileIcon(file.content_type)}</span>\n                      <Typography variant=\"body2\">\n                        {file.original_filename}\n                      </Typography>\n                    </Box>\n                  }\n                  secondary={\n                    <Box>\n                      <Typography variant=\"caption\" color=\"textSecondary\">\n                        {formatFileSize(file.file_size)} • {new Date(file.created_at).toLocaleDateString()}\n                      </Typography>\n                    </Box>\n                  }\n                />\n                <ListItemSecondaryAction>\n                  <Tooltip title=\"Download\">\n                    <IconButton\n                      edge=\"end\"\n                      onClick={() => handleDownload(file.id, file.original_filename)}\n                      sx={{ mr: 1 }}\n                    >\n                      <Download />\n                    </IconButton>\n                  </Tooltip>\n                  <Tooltip title=\"Delete\">\n                    <IconButton\n                      edge=\"end\"\n                      onClick={() => deleteMutation.mutate(file.id)}\n                      disabled={deleteMutation.isPending || disabled}\n                    >\n                      <Delete />\n                    </IconButton>\n                  </Tooltip>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n        </Paper>\n      )}\n      {files.length === 0 && productId && !isLoading && (\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 2 }}>\n          No files uploaded yet\n        </Typography>\n      )}\n    </Box>\n  );\n};\nexport default ProductFileUpload;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/QuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ResetDialog.tsx","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'handleClose' was used before it was defined.","line":74,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":74,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n// ResetDialog component for requirement #2 - Add Reset Option for Superadmins\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  Box,\n  TextField,\n  Checkbox,\n  FormControlLabel,\n  Alert,\n  CircularProgress,\n  Divider\n} from '@mui/material';\nimport { Warning as WarningIcon } from '@mui/icons-material';\nimport { toast } from 'react-toastify';\ninterface ResetDialogProps {\n  open: boolean;\n  onClose: () => void;\n  resetType: 'organization' | 'entity';\n  organizationName?: string;\n  entityId?: number;\n  onSuccess?: () => void;\n}\nconst ResetDialog: React.FC<ResetDialogProps> = ({\n  open,\n  onClose,\n  resetType,\n  organizationName = '',\n  entityId,\n  onSuccess\n}) => {\n  const [confirmText, setConfirmText] = useState('');\n  const [confirmChecked, setConfirmChecked] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const expectedConfirmText = resetType === 'organization' \n    ? 'RESET ORGANIZATION' \n    : 'RESET ENTITY';\n  const handleReset = async () => {\n    if (confirmText !== expectedConfirmText || !confirmChecked) {\n      toast.error('Please confirm the reset action properly');\n      return;\n    }\n    try {\n      setLoading(true);\n      const endpoint = resetType === 'organization' \n        ? '/api/v1/settings/reset/organization'\n        : `/api/v1/settings/reset/entity`;\n      const body = resetType === 'entity' && entityId\n        ? { entity_id: entityId, confirm: true }\n        : { confirm: true };\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(body),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.detail || 'Reset failed');\n      }\n      const result = await response.json();\n      toast.success(result.message || 'Reset completed successfully');\n      if (onSuccess) {\n        onSuccess();\n      }\n// handleClose is defined later in this file\n      handleClose();\n    } catch (error) {\n      console.error('Reset error:', error);\n      toast.error(error instanceof Error ? error.message : 'Reset failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleClose = () => {\n    setConfirmText('');\n    setConfirmChecked(false);\n    setLoading(false);\n    onClose();\n  };\n  const isConfirmValid = confirmText === expectedConfirmText && confirmChecked;\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        <WarningIcon color=\"error\" />\n        {resetType === 'organization' ? 'Reset Organization Data' : 'Reset Entity Data'}\n      </DialogTitle>\n      <DialogContent>\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            ⚠️ DANGER - This action cannot be undone!\n          </Typography>\n        </Alert>\n        <Typography variant=\"body1\" gutterBottom>\n          {resetType === 'organization' \n            ? `This will permanently delete ALL data for the current organization${organizationName ? ` &quot;${organizationName}&quot;` : ''}.`\n            : `This will permanently delete ALL data for the selected entity${organizationName ? ` &quot;${organizationName}&quot;` : ''}.`\n          }\n        </Typography>\n        <Box sx={{ my: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            The following data will be deleted:\n          </Typography>\n          <ul>\n            <li>All products and inventory</li>\n            <li>All stock records</li>\n            <li>All companies and customer/vendor data</li>\n            <li>All vouchers and transactions</li>\n            <li>All audit logs and notifications</li>\n            <li>Non-admin user accounts</li>\n          </ul>\n        </Box>\n        <Divider sx={{ my: 2 }} />\n        <Typography variant=\"body2\" fontWeight=\"bold\" gutterBottom>\n          To confirm this action:\n        </Typography>\n        <Box sx={{ mb: 2 }}>\n          <Typography variant=\"body2\" gutterBottom>\n            1. Type &quot;{expectedConfirmText}&quot; in the box below:\n          </Typography>\n          <TextField\n            fullWidth\n            value={confirmText}\n            onChange={(e) => setConfirmText(e.target.value)}\n            placeholder={expectedConfirmText}\n            disabled={loading}\n            error={confirmText.length > 0 && confirmText !== expectedConfirmText}\n            helperText={\n              confirmText.length > 0 && confirmText !== expectedConfirmText\n                ? `Must type exactly: ${expectedConfirmText}`\n                : ''\n            }\n          />\n        </Box>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={confirmChecked}\n              onChange={(e) => setConfirmChecked(e.target.checked)}\n              disabled={loading}\n            />\n          }\n          label=\"I understand this action is permanent and cannot be undone\"\n        />\n        {resetType === 'organization' && (\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\n            The organization itself and admin user accounts will be preserved.\n          </Alert>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button \n          onClick={handleClose} \n          disabled={loading}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleReset}\n          variant=\"contained\"\n          color=\"error\"\n          disabled={!isConfirmValid || loading}\n          startIcon={loading ? <CircularProgress size={16} /> : null}\n        >\n          {loading ? 'Resetting...' : 'Reset Data'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default ResetDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/RoleGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SLAStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SearchableDropdown.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ClickAwayListener' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"ClickAwayListener"},"fix":{"range":[138,159],"text":""},"desc":"Remove unused variable 'ClickAwayListener'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":21,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[385,395],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'option' is defined but never used.","line":23,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"option"},"fix":{"range":[450,461],"text":""},"desc":"Remove unused variable 'option'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'option' is defined but never used.","line":24,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"option"},"fix":{"range":[493,504],"text":""},"desc":"Remove unused variable 'option'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  Button,\n  Box,\n  Typography,\n  Paper,\n  Popper,\n  ClickAwayListener,\n  List,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  ListItemButton\n} from '@mui/material';\nimport { Add, Search } from '@mui/icons-material';\ninterface SearchableDropdownProps {\n  options: any[];\n  value: any;\n  onChange: (value: any) => void;\n  onAddNew?: () => void;\n  getOptionLabel: (option: any) => string;\n  getOptionValue: (option: any) => any;\n  placeholder?: string;\n  label?: string;\n  disabled?: boolean;\n  error?: boolean;\n  helperText?: string;\n  required?: boolean;\n  noOptionsText?: string;\n  addNewText?: string;\n  searchFields?: string[]; // Fields to search in (e.g., ['name', 'email'])\n  fullWidth?: boolean;\n}\nconst SearchableDropdown: React.FC<SearchableDropdownProps> = ({\n  options = [],\n  value,\n  onChange,\n  onAddNew,\n  getOptionLabel,\n  getOptionValue,\n  placeholder = \"Search...\",\n  label,\n  disabled = false,\n  error = false,\n  helperText,\n  required = false,\n  noOptionsText = \"No options found\",\n  addNewText = \"Add New\",\n  searchFields = ['name'],\n  fullWidth = true\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [filteredOptions, setFilteredOptions] = useState(options);\n  const [showAddNew, setShowAddNew] = useState(false);\n  // Filter options based on input value\n  useEffect(() => {\n    if (!inputValue.trim()) {\n      setFilteredOptions(options);\n      setShowAddNew(false);\n      return;\n    }\n    const filtered = options.filter(option => {\n      const searchTerm = inputValue.toLowerCase();\n      return searchFields.some(field => {\n        const fieldValue = option[field]?.toString().toLowerCase() || '';\n        return fieldValue.includes(searchTerm);\n      });\n    });\n    setFilteredOptions(filtered);\n    // Show \"Add New\" option if no results found and onAddNew is provided\n    setShowAddNew(filtered.length === 0 && !!onAddNew && inputValue.trim().length > 0);\n  }, [inputValue, options, searchFields, onAddNew]);\n  const handleOptionSelect = (option: any) => {\n    onChange(getOptionValue(option));\n    setInputValue(getOptionLabel(option));\n  };\n  const handleAddNew = () => {\n    if (onAddNew) {\n      onAddNew();\n    }\n  };\n  const CustomPopper = (props: any) => {\n    return (\n      <Popper {...props} style={{ width: props.anchorEl?.clientWidth || 'auto' }} placement=\"bottom-start\">\n        <Paper elevation={3} sx={{ maxHeight: 300, overflow: 'auto' }}>\n          <List dense>\n            {filteredOptions.map((option, index) => (\n              <ListItemButton\n                key={index}\n                onClick={() => handleOptionSelect(option)}\n                sx={{\n                  '&:hover': {\n                    backgroundColor: 'action.hover'\n                  }\n                }}\n              >\n                <ListItemText\n                  primary={getOptionLabel(option)}\n                  secondary={option.email || option.code || option.description || ''}\n                />\n              </ListItemButton>\n            ))}\n            {filteredOptions.length === 0 && !showAddNew && (\n              <ListItemButton disabled>\n                <ListItemText\n                  primary={noOptionsText}\n                  sx={{ color: 'text.secondary', fontStyle: 'italic' }}\n                />\n              </ListItemButton>\n            )}\n            {showAddNew && (\n              <>\n                {filteredOptions.length > 0 && <Divider />}\n                <ListItemButton\n                  onClick={handleAddNew}\n                  sx={{\n                    backgroundColor: 'primary.light',\n                    color: 'primary.contrastText',\n                    '&:hover': {\n                      backgroundColor: 'primary.main'\n                    }\n                  }}\n                >\n                  <ListItemIcon sx={{ color: 'inherit' }}>\n                    <Add />\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={`${addNewText} &quot;${inputValue}&quot;`}\n                    sx={{ fontWeight: 'medium' }}\n                  />\n                </ListItemButton>\n              </>\n            )}\n          </List>\n        </Paper>\n      </Popper>\n    );\n  };\n  return (\n    <Autocomplete\n      fullWidth={fullWidth}\n      options={filteredOptions}\n      getOptionLabel={getOptionLabel}\n      value={value ? options.find(option => getOptionValue(option) === value) || null : null}\n      onChange={(event, newValue) => {\n        if (newValue) {\n          onChange(getOptionValue(newValue));\n        } else {\n          onChange(null);\n        }\n      }}\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      disabled={disabled}\n      noOptionsText={\n        showAddNew ? (\n          <Box>\n            <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 1 }}>\n              {noOptionsText}\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Add />}\n              onClick={handleAddNew}\n              size=\"small\"\n              fullWidth\n            >\n              {addNewText} &quot;{inputValue}&quot;\n            </Button>\n          </Box>\n        ) : (\n          noOptionsText\n        )\n      }\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label={label}\n          placeholder={placeholder}\n          error={error}\n          helperText={helperText}\n          required={required}\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <Box sx={{ mr: 1, display: 'flex', alignItems: 'center' }}>\n                <Search color=\"action\" fontSize=\"small\" />\n              </Box>\n            )\n          }}\n        />\n      )}\n      renderOption={(props, option) => (\n        <li {...props}>\n          <Box>\n            <Typography variant=\"body2\">\n              {getOptionLabel(option)}\n            </Typography>\n            {(option.email || option.code || option.description) && (\n              <Typography variant=\"caption\" color=\"textSecondary\">\n                {option.email || option.code || option.description}\n              </Typography>\n            )}\n          </Box>\n        </li>\n      )}\n      PopperComponent={CustomPopper}\n      clearOnBlur={false}\n      selectOnFocus\n      handleHomeEndKeys\n      freeSolo={false}\n    />\n  );\n};\nexport default SearchableDropdown;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SendNotification.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":2,"column":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { from '@mui/material';\nimport {\n  Send,\n  Person,\n  Group,\n  Email,\n  Sms,\n  NotificationImportant,\n  Notifications,\n  Preview,\n  CheckCircle,\n  Error\n} from '@mui/icons-material';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\nimport {\n  sendNotification,\n  sendBulkNotification,\n  testNotificationTemplate,\n  NotificationTemplate,\n  NotificationSendRequest,\n  BulkNotificationRequest,\n  NOTIFICATION_CHANNELS,\n  RECIPIENT_TYPES,\n  BULK_RECIPIENT_TYPES,\n  getChannelDisplayName,\n  getChannelIcon,\n  getTemplateTypeDisplayName,\n  notificationQueryKeys\n} from '../services/notificationService';\nimport { getAllEntities } from '../services/entityService';\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`send-tabpanel-${index}`}\n      aria-labelledby={`send-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\nconst SendNotification: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n  const [previewContent, setPreviewContent] = useState<any>(null);\n  // Single notification form state\n  const [singleForm, setSingleForm] = useState({\n    template_id: '',\n    recipient_type: 'customer' as 'customer' | 'user',\n    recipient_id: '',\n    channel: 'email',\n    variables: {} as Record<string, string>,\n    override_subject: '',\n    override_content: ''\n  });\n  // Bulk notification form state\n  const [bulkForm, setBulkForm] = useState({\n    template_id: '',\n    subject: '',\n    content: '',\n    channel: 'email',\n    recipient_type: 'customers' as 'customers' | 'segment' | 'users',\n    recipient_ids: [] as number[],\n    segment_name: '',\n    variables: {} as Record<string, string>\n  });\n  // Get templates\n  const { \n    data: templates = [], \n    isLoading: templatesLoading \n  } = useQuery({\n    queryKey: notificationQueryKeys.templates(),\n    queryFn: () => getNotificationTemplates({ is_active: true }),\n  });\n  // Get entities (customers/users)\n  const { \n    data: entities = [], \n    isLoading: entitiesLoading \n  } = useQuery({\n    queryKey: ['entities'],\n    queryFn: getAllEntities,\n  });\n  // Send single notification mutation\n  const sendSingleMutation = useMutation({\n    mutationFn: sendNotification,\n    onSuccess: (data) => {\n      toast.success('Notification sent successfully');\n      resetSingleForm();\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to send notification');\n    }\n  });\n  // Send bulk notification mutation\n  const sendBulkMutation = useMutation({\n    mutationFn: sendBulkNotification,\n    onSuccess: (data) => {\n      toast.success(`Bulk notification sent: ${data.successful_sends}/${data.total_recipients} successful`);\n      if (data.errors.length > 0) {\n        toast.warning(`${data.failed_sends} notifications failed`);\n      }\n      resetBulkForm();\n    },\n    onError: (error: any) => {\n      toast.error(error.response?.data?.detail || 'Failed to send bulk notification');\n    }\n  });\n  // Preview mutation\n  const previewMutation = useMutation({\n    mutationFn: ({ id, testData }: { id: number; testData: any }) =>\n      testNotificationTemplate(id, testData),\n    onSuccess: (data) => {\n      setPreviewContent(data);\n      setIsPreviewOpen(true);\n    },\n    onError: (error: any) => {\n      toast.error('Failed to generate preview');\n    }\n  });\n  const resetSingleForm = () => {\n    setSingleForm({\n      template_id: '',\n      recipient_type: 'customer',\n      recipient_id: '',\n      channel: 'email',\n      variables: {},\n      override_subject: '',\n      override_content: ''\n    });\n  };\n  const resetBulkForm = () => {\n    setBulkForm({\n      template_id: '',\n      subject: '',\n      content: '',\n      channel: 'email',\n      recipient_type: 'customers',\n      recipient_ids: [],\n      segment_name: '',\n      variables: {}\n    });\n  };\n  const handleSendSingle = () => {\n    if (!singleForm.recipient_id) {\n      toast.error('Please select a recipient');\n      return;\n    }\n    if (!singleForm.template_id && !singleForm.override_content) {\n      toast.error('Please select a template or provide custom content');\n      return;\n    }\n    const request: NotificationSendRequest = {\n      template_id: singleForm.template_id ? parseInt(singleForm.template_id) : undefined,\n      recipient_type: singleForm.recipient_type,\n      recipient_id: parseInt(singleForm.recipient_id),\n      channel: singleForm.channel,\n      variables: Object.keys(singleForm.variables).length > 0 ? singleForm.variables : undefined,\n      override_subject: singleForm.override_subject || undefined,\n      override_content: singleForm.override_content || undefined\n    };\n    sendSingleMutation.mutate(request);\n  };\n  const handleSendBulk = () => {\n    if (bulkForm.recipient_type === 'customers' && bulkForm.recipient_ids.length === 0) {\n      toast.error('Please select customers');\n      return;\n    }\n    if (bulkForm.recipient_type === 'segment' && !bulkForm.segment_name) {\n      toast.error('Please enter segment name');\n      return;\n    }\n    if (!bulkForm.template_id && !bulkForm.content) {\n      toast.error('Please select a template or provide custom content');\n      return;\n    }\n    const request: BulkNotificationRequest = {\n      template_id: bulkForm.template_id ? parseInt(bulkForm.template_id) : undefined,\n      subject: bulkForm.subject || undefined,\n      content: bulkForm.content,\n      channel: bulkForm.channel,\n      recipient_type: bulkForm.recipient_type,\n      recipient_ids: bulkForm.recipient_ids.length > 0 ? bulkForm.recipient_ids : undefined,\n      segment_name: bulkForm.segment_name || undefined,\n      variables: Object.keys(bulkForm.variables).length > 0 ? bulkForm.variables : undefined\n    };\n    sendBulkMutation.mutate(request);\n  };\n  const handlePreview = (isForBulk: boolean = false) => {\n    const templateId = isForBulk ? bulkForm.template_id : singleForm.template_id;\n    const variables = isForBulk ? bulkForm.variables : singleForm.variables;\n    if (!templateId) {\n      toast.error('Please select a template to preview');\n      return;\n    }\n    previewMutation.mutate({\n      id: parseInt(templateId),\n      testData: { variables }\n    });\n  };\n  const selectedTemplate = templates.find(t => \n    t.id === parseInt(selectedTab === 0 ? singleForm.template_id : bulkForm.template_id)\n  );\n  // Filter entities based on recipient type\n  const customers = entities.filter(e => e.type === 'Customer');\n  const users = entities.filter(e => e.type === 'User');\n  return (\n    <Box>\n      <Card>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h5\" component=\"h2\">\n              Send Notifications\n            </Typography>\n          </Box>\n          <Tabs \n            value={selectedTab} \n            onChange={(_, newValue) => setSelectedTab(newValue)}\n            sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}\n          >\n            <Tab \n              label=\"Single Notification\" \n              icon={<Person />}\n              iconPosition=\"start\"\n            />\n            <Tab \n              label=\"Bulk Notification\" \n              icon={<Group />}\n              iconPosition=\"start\"\n            />\n          </Tabs>\n          {/* Single Notification Tab */}\n          <TabPanel value={selectedTab} index={0}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Template (Optional)</InputLabel>\n                  <Select\n                    value={singleForm.template_id}\n                    label=\"Template (Optional)\"\n                    onChange={(e) => setSingleForm({ ...singleForm, template_id: e.target.value })}\n                  >\n                    <MenuItem value=\"\">Custom Message</MenuItem>\n                    {templates.map(template => (\n                      <MenuItem key={template.id} value={template.id.toString()}>\n                        {template.name} ({getChannelDisplayName(template.channel as any)})\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Channel</InputLabel>\n                  <Select\n                    value={singleForm.channel}\n                    label=\"Channel\"\n                    onChange={(e) => setSingleForm({ ...singleForm, channel: e.target.value })}\n                  >\n                    {NOTIFICATION_CHANNELS.map(channel => (\n                      <MenuItem key={channel} value={channel}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {getChannelIcon(channel)}\n                          {getChannelDisplayName(channel)}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Recipient Type</InputLabel>\n                  <Select\n                    value={singleForm.recipient_type}\n                    label=\"Recipient Type\"\n                    onChange={(e) => setSingleForm({ \n                      ...singleForm, \n                      recipient_type: e.target.value as any,\n                      recipient_id: '' \n                    })}\n                  >\n                    <MenuItem value=\"customer\">Customer</MenuItem>\n                    <MenuItem value=\"user\">User</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Autocomplete\n                  options={singleForm.recipient_type === 'customer' ? customers : users}\n                  getOptionLabel={(option) => option.name}\n                  value={entities.find(e => e.id.toString() === singleForm.recipient_id) || null}\n                  onChange={(_, value) => setSingleForm({ \n                    ...singleForm, \n                    recipient_id: value?.id.toString() || '' \n                  })}\n                  renderInput={(params) => (\n                    <TextField \n                      {...params} \n                      label={`Select ${singleForm.recipient_type}`}\n                      margin=\"normal\"\n                      fullWidth\n                    />\n                  )}\n                />\n              </Grid>\n              {!singleForm.template_id && (\n                <>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Subject\"\n                      value={singleForm.override_subject}\n                      onChange={(e) => setSingleForm({ ...singleForm, override_subject: e.target.value })}\n                      margin=\"normal\"\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Message Content\"\n                      value={singleForm.override_content}\n                      onChange={(e) => setSingleForm({ ...singleForm, override_content: e.target.value })}\n                      multiline\n                      rows={4}\n                      margin=\"normal\"\n                      required\n                    />\n                  </Grid>\n                </>\n              )}\n              {selectedTemplate && selectedTemplate.variables && (\n                <Grid item xs={12}>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Template Variables\n                  </Typography>\n                  <Grid container spacing={2}>\n                    {selectedTemplate.variables.map(variable => (\n                      <Grid item xs={12} sm={6} key={variable}>\n                        <TextField\n                          fullWidth\n                          label={variable}\n                          value={singleForm.variables[variable] || ''}\n                          onChange={(e) => setSingleForm({\n                            ...singleForm,\n                            variables: {\n                              ...singleForm.variables,\n                              [variable]: e.target.value\n                            }\n                          })}\n                        />\n                      </Grid>\n                    ))}\n                  </Grid>\n                </Grid>\n              )}\n              <Grid item xs={12}>\n                <Box display=\"flex\" gap={2}>\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<Send />}\n                    onClick={handleSendSingle}\n                    disabled={sendSingleMutation.isPending}\n                  >\n                    Send Notification\n                  </Button>\n                  {singleForm.template_id && (\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Preview />}\n                      onClick={() => handlePreview(false)}\n                      disabled={previewMutation.isPending}\n                    >\n                      Preview\n                    </Button>\n                  )}\n                </Box>\n              </Grid>\n            </Grid>\n          </TabPanel>\n          {/* Bulk Notification Tab */}\n          <TabPanel value={selectedTab} index={1}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Template (Optional)</InputLabel>\n                  <Select\n                    value={bulkForm.template_id}\n                    label=\"Template (Optional)\"\n                    onChange={(e) => setBulkForm({ ...bulkForm, template_id: e.target.value })}\n                  >\n                    <MenuItem value=\"\">Custom Message</MenuItem>\n                    {templates.map(template => (\n                      <MenuItem key={template.id} value={template.id.toString()}>\n                        {template.name} ({getChannelDisplayName(template.channel as any)})\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Channel</InputLabel>\n                  <Select\n                    value={bulkForm.channel}\n                    label=\"Channel\"\n                    onChange={(e) => setBulkForm({ ...bulkForm, channel: e.target.value })}\n                  >\n                    {NOTIFICATION_CHANNELS.map(channel => (\n                      <MenuItem key={channel} value={channel}>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          {getChannelIcon(channel)}\n                          {getChannelDisplayName(channel)}\n                        </Box>\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl fullWidth margin=\"normal\">\n                  <InputLabel>Recipient Type</InputLabel>\n                  <Select\n                    value={bulkForm.recipient_type}\n                    label=\"Recipient Type\"\n                    onChange={(e) => setBulkForm({ \n                      ...bulkForm, \n                      recipient_type: e.target.value as any,\n                      recipient_ids: [],\n                      segment_name: ''\n                    })}\n                  >\n                    <MenuItem value=\"customers\">Select Customers</MenuItem>\n                    <MenuItem value=\"segment\">Customer Segment</MenuItem>\n                    <MenuItem value=\"users\">Select Users</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              {bulkForm.recipient_type === 'customers' && (\n                <Grid item xs={12}>\n                  <Autocomplete\n                    multiple\n                    options={customers}\n                    getOptionLabel={(option) => option.name}\n                    value={customers.filter(c => bulkForm.recipient_ids.includes(c.id))}\n                    onChange={(_, value) => setBulkForm({ \n                      ...bulkForm, \n                      recipient_ids: value.map(v => v.id) \n                    })}\n                    renderInput={(params) => (\n                      <TextField \n                        {...params} \n                        label=\"Select Customers\"\n                        margin=\"normal\"\n                        fullWidth\n                      />\n                    )}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip\n                          variant=\"outlined\"\n                          label={option.name}\n                          {...getTagProps({ index })}\n                          key={option.id}\n                        />\n                      ))\n                    }\n                  />\n                </Grid>\n              )}\n              {bulkForm.recipient_type === 'segment' && (\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Segment Name\"\n                    value={bulkForm.segment_name}\n                    onChange={(e) => setBulkForm({ ...bulkForm, segment_name: e.target.value })}\n                    margin=\"normal\"\n                    helperText=\"e.g., 'vip', 'premium', 'new_customers'\"\n                  />\n                </Grid>\n              )}\n              {bulkForm.recipient_type === 'users' && (\n                <Grid item xs={12}>\n                  <Autocomplete\n                    multiple\n                    options={users}\n                    getOptionLabel={(option) => option.name}\n                    value={users.filter(u => bulkForm.recipient_ids.includes(u.id))}\n                    onChange={(_, value) => setBulkForm({ \n                      ...bulkForm, \n                      recipient_ids: value.map(v => v.id) \n                    })}\n                    renderInput={(params) => (\n                      <TextField \n                        {...params} \n                        label=\"Select Users\"\n                        margin=\"normal\"\n                        fullWidth\n                      />\n                    )}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip\n                          variant=\"outlined\"\n                          label={option.name}\n                          {...getTagProps({ index })}\n                          key={option.id}\n                        />\n                      ))\n                    }\n                  />\n                </Grid>\n              )}\n              {!bulkForm.template_id && (\n                <>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Subject\"\n                      value={bulkForm.subject}\n                      onChange={(e) => setBulkForm({ ...bulkForm, subject: e.target.value })}\n                      margin=\"normal\"\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Message Content\"\n                      value={bulkForm.content}\n                      onChange={(e) => setBulkForm({ ...bulkForm, content: e.target.value })}\n                      multiline\n                      rows={4}\n                      margin=\"normal\"\n                      required\n                    />\n                  </Grid>\n                </>\n              )}\n              <Grid item xs={12}>\n                <Box display=\"flex\" gap={2}>\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<Send />}\n                    onClick={handleSendBulk}\n                    disabled={sendBulkMutation.isPending}\n                  >\n                    Send Bulk Notification\n                  </Button>\n                  {bulkForm.template_id && (\n                    <Button\n                      variant=\"outlined\"\n                      startIcon={<Preview />}\n                      onClick={() => handlePreview(true)}\n                      disabled={previewMutation.isPending}\n                    >\n                      Preview\n                    </Button>\n                  )}\n                </Box>\n              </Grid>\n            </Grid>\n          </TabPanel>\n        </CardContent>\n      </Card>\n      {/* Preview Modal */}\n      <Dialog open={isPreviewOpen} onClose={() => setIsPreviewOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Template Preview</DialogTitle>\n        <DialogContent>\n          {previewContent && (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom>\n                {previewContent.template_name} ({getChannelDisplayName(previewContent.channel)})\n              </Typography>\n              {previewContent.test_subject && (\n                <Box mb={2}>\n                  <Typography variant=\"subtitle2\" color=\"text.secondary\">Subject:</Typography>\n                  <Typography>{previewContent.test_subject}</Typography>\n                </Box>\n              )}\n              <Box mb={2}>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\">Content:</Typography>\n                <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>\n                  <Typography style={{ whiteSpace: 'pre-wrap' }}>\n                    {previewContent.test_content}\n                  </Typography>\n                </Paper>\n              </Box>\n              <Box>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\">Variables used:</Typography>\n                <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mt={1}>\n                  {Object.entries(previewContent.variables_used).map(([key, value]) => (\n                    <Chip \n                      key={key} \n                      label={`${key}: ${value}`} \n                      size=\"small\" \n                      variant=\"outlined\" \n                    />\n                  ))}\n                </Box>\n              </Box>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsPreviewOpen(false)}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\nexport default SendNotification;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/ServiceRoleGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SortableTable.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":25,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[578,589],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'row' is defined but never used.","line":25,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"row"},"fix":{"range":[588,596],"text":""},"desc":"Remove unused variable 'row'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'row' is defined but never used.","line":33,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"row"},"fix":{"range":[781,787],"text":""},"desc":"Remove unused variable 'row'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'row' is defined but never used.","line":39,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"row"},"fix":{"range":[933,939],"text":""},"desc":"Remove unused variable 'row'."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":45,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":45,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1127,1129],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":45,"column":28,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":45,"endColumn":30,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1143,1145],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":46,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":46,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1175,1177],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"eqeqeq","severity":2,"message":"Expected '===' and instead saw '=='.","line":47,"column":12,"nodeType":"BinaryExpression","messageId":"unexpected","endLine":47,"endColumn":14,"suggestions":[{"messageId":"replaceOperator","data":{"expectedOperator":"===","actualOperator":"=="},"fix":{"range":[1208,1210],"text":"==="},"desc":"Use '===' instead of '=='."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'a' is defined but never used.","line":70,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":65,"suggestions":[{"messageId":"removeVar","data":{"varName":"a"},"fix":{"range":[2091,2096],"text":""},"desc":"Remove unused variable 'a'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'b' is defined but never used.","line":70,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":71,"suggestions":[{"messageId":"removeVar","data":{"varName":"b"},"fix":{"range":[2095,2101],"text":""},"desc":"Remove unused variable 'b'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'a' is defined but never used.","line":75,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":62,"suggestions":[{"messageId":"removeVar","data":{"varName":"a"},"fix":{"range":[2306,2311],"text":""},"desc":"Remove unused variable 'a'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'b' is defined but never used.","line":75,"column":64,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":68,"suggestions":[{"messageId":"removeVar","data":{"varName":"b"},"fix":{"range":[2310,2316],"text":""},"desc":"Remove unused variable 'b'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'property' is defined but never used.","line":90,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"property"},"fix":{"range":[2731,2748],"text":""},"desc":"Remove unused variable 'property'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":140,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":140,"endColumn":26}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// SortableTable component for requirement #3 - Table Sorting on Header Click\nimport React, { useState, useMemo } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Paper,\n  Box,\n  Typography\n} from '@mui/material';\nimport { visuallyHidden } from '@mui/utils';\nexport type Order = 'asc' | 'desc';\nexport interface HeadCell<T> {\n  id: keyof T;\n  label: string;\n  numeric: boolean;\n  disablePadding?: boolean;\n  sortable?: boolean;\n  width?: string | number;\n  align?: 'left' | 'right' | 'center';\n  render?: (value: any, row: T) => React.ReactNode;\n}\ninterface SortableTableProps<T> {\n  data: T[];\n  headCells: HeadCell<T>[];\n  title?: string;\n  defaultOrderBy?: keyof T;\n  defaultOrder?: Order;\n  onRowClick?: (row: T) => void;\n  dense?: boolean;\n  stickyHeader?: boolean;\n  maxHeight?: string | number;\n  emptyMessage?: string;\n  loading?: boolean;\n  actions?: (row: T) => React.ReactNode;\n}\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  const aVal = a[orderBy];\n  const bVal = b[orderBy];\n  // Handle null/undefined values\n  if (bVal == null && aVal == null) {return 0;}\n  if (bVal == null) {return -1;}\n  if (aVal == null) {return 1;}\n  // Handle different types\n  if (typeof aVal === 'number' && typeof bVal === 'number') {\n    return bVal - aVal;\n  }\n  if (typeof aVal === 'string' && typeof bVal === 'string') {\n    return bVal.localeCompare(aVal, undefined, { numeric: true, sensitivity: 'base' });\n  }\n  // Handle dates\n  if (aVal instanceof Date && bVal instanceof Date) {\n    return bVal.getTime() - aVal.getTime();\n  }\n  // Handle date strings\n  if (typeof aVal === 'string' && typeof bVal === 'string') {\n    const aDate = new Date(aVal);\n    const bDate = new Date(bVal);\n    if (!isNaN(aDate.getTime()) && !isNaN(bDate.getTime())) {\n      return bDate.getTime() - aDate.getTime();\n    }\n  }\n  // Default string comparison\n  return String(bVal).localeCompare(String(aVal), undefined, { numeric: true, sensitivity: 'base' });\n}\nfunction getComparator<T>(order: Order, orderBy: keyof T): (a: T, b: T) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\nfunction stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\ninterface SortableTableHeadProps<T> {\n  headCells: HeadCell<T>[];\n  order: Order;\n  orderBy: keyof T;\n  onRequestSort: (property: keyof T) => void;\n  hasActions: boolean;\n}\nfunction SortableTableHead<T>(props: SortableTableHeadProps<T>) {\n  const { headCells, order, orderBy, onRequestSort, hasActions } = props;\n  const createSortHandler = (property: keyof T) => () => {\n    onRequestSort(property);\n  };\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={String(headCell.id)}\n            align={headCell.align || (headCell.numeric ? 'right' : 'left')}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n            sx={{ \n              fontWeight: 'bold',\n              width: headCell.width,\n              backgroundColor: 'grey.50'\n            }}\n          >\n            {headCell.sortable !== false ? (\n              <TableSortLabel\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : 'asc'}\n                onClick={createSortHandler(headCell.id)}\n              >\n                {headCell.label}\n                {orderBy === headCell.id ? (\n                  <Box component=\"span\" sx={visuallyHidden}>\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                  </Box>\n                ) : null}\n              </TableSortLabel>\n            ) : (\n              headCell.label\n            )}\n          </TableCell>\n        ))}\n        {hasActions && (\n          <TableCell align=\"center\" sx={{ fontWeight: 'bold', backgroundColor: 'grey.50' }}>\n            Actions\n          </TableCell>\n        )}\n      </TableRow>\n    </TableHead>\n  );\n}\nfunction SortableTable<T>({\n  data,\n  headCells,\n  title,\n  defaultOrderBy,\n  defaultOrder = 'asc',\n  onRowClick,\n  dense = false,\n  stickyHeader = false,\n  maxHeight,\n  emptyMessage = 'No data available',\n  loading = false,\n  actions\n}: SortableTableProps<T>) {\n  const [order, setOrder] = useState<Order>(defaultOrder);\n  const [orderBy, setOrderBy] = useState<keyof T>(defaultOrderBy || headCells[0]?.id);\n  const handleRequestSort = (property: keyof T) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n  const sortedData = useMemo(() => {\n    if (!data?.length) {return [];}\n    return stableSort(data, getComparator(order, orderBy));\n  }, [data, order, orderBy]);\n  const hasActions = Boolean(actions);\n  if (loading) {\n    return (\n      <Paper sx={{ p: 3, textAlign: 'center' }}>\n        <Typography>Loading...</Typography>\n      </Paper>\n    );\n  }\n  return (\n    <Paper sx={{ width: '100%', mb: 2 }}>\n      {title && (\n        <Box sx={{ p: 2 }}>\n          <Typography variant=\"h6\" component=\"div\">\n            {title}\n          </Typography>\n        </Box>\n      )}\n      <TableContainer sx={{ maxHeight }}>\n        <Table\n          stickyHeader={stickyHeader}\n          size={dense ? 'small' : 'medium'}\n          aria-label=\"sortable table\"\n        >\n          <SortableTableHead\n            headCells={headCells}\n            order={order}\n            orderBy={orderBy}\n            onRequestSort={handleRequestSort}\n            hasActions={hasActions}\n          />\n          <TableBody>\n            {sortedData.length === 0 ? (\n              <TableRow>\n                <TableCell \n                  colSpan={headCells.length + (hasActions ? 1 : 0)} \n                  align=\"center\"\n                  sx={{ py: 3 }}\n                >\n                  <Typography color=\"textSecondary\">\n                    {emptyMessage}\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            ) : (\n              sortedData.map((row, index) => (\n                <TableRow\n                  hover={Boolean(onRowClick)}\n                  onClick={onRowClick ? () => onRowClick(row) : undefined}\n                  key={index}\n                  sx={{ \n                    cursor: onRowClick ? 'pointer' : 'default',\n                    '&:hover': onRowClick ? { backgroundColor: 'action.hover' } : {}\n                  }}\n                >\n                  {headCells.map((headCell) => (\n                    <TableCell\n                      key={String(headCell.id)}\n                      align={headCell.align || (headCell.numeric ? 'right' : 'left')}\n                      padding={headCell.disablePadding ? 'none' : 'normal'}\n                    >\n                      {headCell.render \n                        ? headCell.render(row[headCell.id], row)\n                        : String(row[headCell.id] ?? '')\n                      }\n                    </TableCell>\n                  ))}\n                  {hasActions && (\n                    <TableCell align=\"center\">\n                      {actions!(row)}\n                    </TableCell>\n                  )}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n}\nexport default SortableTable;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/StockBulkImport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/StockDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/SuspendDialog.tsx","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'handleClose' was used before it was defined.","line":76,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":76,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n// SuspendDialog component for requirement #5 - Account Suspension & License Pause\nimport React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  Typography,\n  TextField,\n  Box,\n  Alert,\n  CircularProgress,\n  FormControlLabel,\n  Checkbox\n} from '@mui/material';\nimport { Block as BlockIcon, PlayArrow as ActivateIcon } from '@mui/icons-material';\nimport { toast } from 'react-toastify';\ninterface SuspendDialogProps {\n  open: boolean;\n  onClose: () => void;\n  organizationId: number;\n  organizationName: string;\n  currentStatus: string;\n  onSuccess?: () => void;\n}\nconst SuspendDialog: React.FC<SuspendDialogProps> = ({\n  open,\n  onClose,\n  organizationId,\n  organizationName,\n  currentStatus,\n  onSuccess\n}) => {\n  const [reason, setReason] = useState('');\n  const [confirmChecked, setConfirmChecked] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const isCurrentlySuspended = currentStatus === 'suspended';\n  const action = isCurrentlySuspended ? 'activate' : 'suspend';\n  const handleAction = async () => {\n    if (!isCurrentlySuspended && !reason.trim()) {\n      toast.error('Please provide a reason for suspension');\n      return;\n    }\n    if (!confirmChecked) {\n      toast.error('Please confirm the action');\n      return;\n    }\n    try {\n      setLoading(true);\n      const endpoint = isCurrentlySuspended\n        ? `/api/v1/settings/settings/organization/${organizationId}/activate`\n        : `/api/v1/settings/organization/${organizationId}/suspend`;\n      const body = isCurrentlySuspended \n        ? {} \n        : { reason: reason.trim() };\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(body),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.detail || `Failed to ${action} organization`);\n      }\n      const result = await response.json();\n      toast.success(result.message || `Organization ${action}d successfully`);\n      if (onSuccess) {\n        onSuccess();\n      }\n// handleClose is defined later in this file\n      handleClose();\n    } catch (error) {\n      console.error(`${action} error:`, error);\n      toast.error(error instanceof Error ? error.message : `Failed to ${action} organization`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleClose = () => {\n    setReason('');\n    setConfirmChecked(false);\n    setLoading(false);\n    onClose();\n  };\n  const isValid = isCurrentlySuspended ? confirmChecked : (reason.trim().length > 0 && confirmChecked);\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        {isCurrentlySuspended ? (\n          <>\n            <ActivateIcon color=\"success\" />\n            Activate Organization\n          </>\n        ) : (\n          <>\n            <BlockIcon color=\"error\" />\n            Suspend Organization\n          </>\n        )}\n      </DialogTitle>\n      <DialogContent>\n        <Alert severity={isCurrentlySuspended ? \"info\" : \"warning\"} sx={{ mb: 2 }}>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            {isCurrentlySuspended \n              ? 'Activate Organization Account'\n              : '⚠️ Suspend Organization Account'\n            }\n          </Typography>\n        </Alert>\n        <Typography variant=\"body1\" gutterBottom>\n          {isCurrentlySuspended \n            ? `Are you sure you want to activate \"${organizationName}\"? This will restore full access to all users in this organization.`\n            : `Are you sure you want to suspend \"${organizationName}\"? This will immediately block access for all users in this organization.`\n          }\n        </Typography>\n        {!isCurrentlySuspended && (\n          <Box sx={{ my: 2 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n              Effects of suspension:\n            </Typography>\n            <ul>\n              <li>All users will be logged out immediately</li>\n              <li>Users cannot log in until reactivated</li>\n              <li>Data is preserved but not accessible</li>\n              <li>All API access is blocked</li>\n            </ul>\n          </Box>\n        )}\n        {!isCurrentlySuspended && (\n          <Box sx={{ my: 2 }}>\n            <TextField\n              fullWidth\n              label=\"Reason for Suspension\"\n              multiline\n              rows={3}\n              value={reason}\n              onChange={(e) => setReason(e.target.value)}\n              disabled={loading}\n              placeholder=\"Enter the reason for suspending this organization...\"\n              required\n            />\n          </Box>\n        )}\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={confirmChecked}\n              onChange={(e) => setConfirmChecked(e.target.checked)}\n              disabled={loading}\n            />\n          }\n          label={isCurrentlySuspended \n            ? `I confirm that I want to activate \"${organizationName}\"`\n            : `I confirm that I want to suspend \"${organizationName}\"`\n          }\n        />\n        {!isCurrentlySuspended && (\n          <Alert severity=\"error\" sx={{ mt: 2 }}>\n            This action takes effect immediately and will affect all users in the organization.\n          </Alert>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button \n          onClick={handleClose} \n          disabled={loading}\n        >\n          Cancel\n        </Button>\n        <Button\n          onClick={handleAction}\n          variant=\"contained\"\n          color={isCurrentlySuspended ? \"success\" : \"error\"}\n          disabled={!isValid || loading}\n          startIcon={loading ? <CircularProgress size={16} /> : null}\n        >\n          {loading \n            ? `${isCurrentlySuspended ? 'Activating' : 'Suspending'}...`\n            : `${isCurrentlySuspended ? 'Activate' : 'Suspend'} Organization`\n          }\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default SuspendDialog;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/UnifiedLoginForm.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":25,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"token"},"fix":{"range":[549,563],"text":""},"desc":"Remove unused variable 'token'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":25,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[562,583],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-shadow","severity":2,"message":"'email' is already declared in the upper scope on line 49 column 9.","line":64,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":64,"endColumn":42},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'email' is already declared in the upper scope on line 49 column 9.","line":64,"column":29,"nodeType":"Identifier","messageId":"noShadow","endLine":64,"endColumn":42},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":76,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":76,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":76,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":76,"endColumn":24},{"ruleId":"no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":108,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":108,"endColumn":24},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'error' is already declared in the upper scope on line 35 column 10.","line":108,"column":14,"nodeType":"Identifier","messageId":"noShadow","endLine":108,"endColumn":24}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/UnifiedLoginForm.tsx\n'use client';\nimport React, { useState } from 'react';\nimport { \n  Box,\n  Card,\n  CardContent,\n  TextField,\n  Button,\n  Typography,\n  Alert,\n  CircularProgress,\n  FormControlLabel,\n  Checkbox,\n  IconButton,\n  InputAdornment,\n  Stepper,\n  Step,\n  StepLabel\n} from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { authService } from '../services/authService';\ninterface UnifiedLoginFormProps {\n  onLogin: (token: string, loginResponse?: any) => void;\n}\ninterface LoginFormData {\n  email: string;\n  password: string;\n  phoneNumber: string;\n  otp: string;\n}\nconst UnifiedLoginForm: React.FC<UnifiedLoginFormProps> = ({ onLogin }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [useOTP, setUseOTP] = useState(false);\n  const [otpStep, setOtpStep] = useState(0); // 0: credentials, 1: OTP entry\n  const [otpSent, setOtpSent] = useState(false);\nconst { control, handleSubmit, formState: { errors }, watch, setValue} = useForm<LoginFormData>({\n    defaultValues: {\n      email: '',\n      password: '',\n      phoneNumber: '',\n      otp: ''\n    }\n  });\n  const email = watch('email');\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n  const handleOTPToggle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUseOTP(event.target.checked);\n    setError('');\n    setSuccess('');\n    if (!event.target.checked) {\n      setOtpStep(0);\n      setOtpSent(false);\n      setValue('otp', '');\n      setValue('phoneNumber', '');\n    }\n  };\n  const requestOTP = async (email: string, phoneNumber: string) => {\n    try {\n      setLoading(true);\n      setError('');\n      // Determine delivery method based on phone number\n      const deliveryMethod = phoneNumber ? 'auto' : 'email';\n      const response = await authService.requestOTP(email, phoneNumber, deliveryMethod);\n      setSuccess(response.delivery_method \n        ? `OTP sent via ${response.delivery_method}. Please check your messages.`\n        : `OTP sent to ${email}. Please check your email.`);\n      setOtpSent(true);\n      setOtpStep(1);\n    } catch (error: any) {\n      setError(error.response?.data?.detail || 'Failed to send OTP. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const onSubmit = async (data: LoginFormData) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n    try {\n      if (useOTP) {\n        if (!otpSent) {\n          // Step 1: Request OTP\n          await requestOTP(data.email, data.phoneNumber);\n          return; // Don't continue to login yet\n        } else {\n          // Step 2: Verify OTP and login\n          const response = await authService.verifyOTP(data.email, data.otp);\n          setSuccess('Login successful!');\n          // Add flag to indicate OTP login (so password change is not mandatory)\n          response.otp_login = true;\n          // Call parent callback with token and response\n          onLogin(response.access_token, response);\n        }\n      } else {\n        // Standard email/password login\n        // Clear any existing invalid token before login attempt\n        localStorage.removeItem('token');\n        const response = await authService.loginWithEmail(data.email, data.password);\n        onLogin(response.access_token, response);\n      }\n    } catch (error: any) {\n      const errorMessage = error.message || error.response?.data?.detail || 'Login failed. Please check your credentials.';\n      setError(errorMessage);\n      // Clear potentially invalid token on failure\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleBackToCredentials = () => {\n    setOtpStep(0);\n    setOtpSent(false);\n    setError('');\n    setSuccess('');\n    setValue('otp', '');\n  };\n  const handleResendOTP = async () => {\n    const phoneNumber = watch('phoneNumber');\n    await requestOTP(email, phoneNumber);\n  };\n  const steps = ['Login Details', 'Verify OTP'];\n  return (\n    <Card>\n      <CardContent sx={{ p: 4 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom align=\"center\">\n          {useOTP ? 'OTP Login' : 'Login'}\n        </Typography>\n        {useOTP && (\n          <Stepper activeStep={otpStep} sx={{ mt: 2, mb: 3 }}>\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n        )}\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n        {success && (\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\n            {success}\n          </Alert>\n        )}\n        <Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>\n          {/* Email field - always visible */}\n          <Controller\n            name=\"email\"\n            control={control}\n            rules={{\n              required: 'Email is required',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: 'Invalid email address'\n              }\n            }}\n            render={({ field }) => (\n              <TextField\n                {...field}\n                fullWidth\n                label=\"Email Address\"\n                type=\"email\"\n                variant=\"outlined\"\n                slotProps={{\n                  inputLabel: {\n                    shrink: field.value ? true : undefined\n                  }\n                }}\n                error={!!errors.email}\n                helperText={errors.email?.message}\n                margin=\"normal\"\n                autoComplete=\"email\"\n                autoFocus\n                disabled={otpSent && useOTP}\n              />\n            )}\n          />\n          {/* Password field - hidden when OTP is active and step > 0 */}\n          {!useOTP && (\n            <Controller\n              name=\"password\"\n              control={control}\n              rules={{\n                required: 'Password is required'\n              }}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"Password\"\n                  type={showPassword ? 'text' : 'password'}\n                  variant=\"outlined\"\n                  slotProps={{\n                    inputLabel: {\n                      shrink: field.value ? true : undefined\n                    }\n                  }}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={togglePasswordVisibility}\n                          edge=\"end\"\n                        >\n                          {showPassword ? <VisibilityOff /> : <Visibility />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                  error={!!errors.password}\n                  helperText={errors.password?.message}\n                  margin=\"normal\"\n                  autoComplete=\"current-password\"\n                />\n              )}\n            />\n          )}\n          {/* Phone number field - shown when OTP is enabled and not yet sent */}\n          {useOTP && !otpSent && (\n            <Controller\n              name=\"phoneNumber\"\n              control={control}\n              rules={{\n                pattern: {\n                  value: /^[\\+]?[1-9][\\d]{0,15}$/,\n                  message: 'Enter a valid phone number with country code (e.g., +91XXXXXXXXXX)'\n                }\n              }}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"Phone Number (Optional for WhatsApp OTP)\"\n                  type=\"tel\"\n                  variant=\"outlined\"\n                  placeholder=\"+91XXXXXXXXXX\"\n                  slotProps={{\n                    inputLabel: {\n                      shrink: field.value ? true : undefined\n                    }\n                  }}\n                  error={!!errors.phoneNumber}\n                  helperText={errors.phoneNumber?.message || \"Include country code for WhatsApp OTP, or leave blank for email OTP\"}\n                  margin=\"normal\"\n                  autoComplete=\"tel\"\n                />\n              )}\n            />\n          )}\n          {/* OTP field - shown when OTP step is active */}\n          {useOTP && otpSent && (\n            <Controller\n              name=\"otp\"\n              control={control}\n              rules={{\n                required: 'OTP is required',\n                pattern: {\n                  value: /^\\d{6}$/,\n                  message: 'OTP must be 6 digits'\n                }\n              }}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  label=\"OTP Code\"\n                  type=\"text\"\n                  inputProps={{ maxLength: 6, pattern: '[0-9]*' }}\n                  variant=\"outlined\"\n                  slotProps={{\n                    inputLabel: {\n                      shrink: field.value ? true : undefined\n                    }\n                  }}\n                  error={!!errors.otp}\n                  helperText={errors.otp?.message}\n                  margin=\"normal\"\n                  autoFocus\n                />\n              )}\n            />\n          )}\n          {/* Login with OTP checkbox */}\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={useOTP}\n                onChange={handleOTPToggle}\n                name=\"useOTP\"\n                color=\"primary\"\n                disabled={loading}\n              />\n            }\n            label=\"Login with OTP\"\n            sx={{ mt: 2, mb: 1 }}\n          />\n          {/* Action buttons */}\n          {!useOTP || !otpSent ? (\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n              disabled={loading}\n            >\n              {loading ? (\n                <CircularProgress size={24} />\n              ) : (\n                useOTP ? 'Send OTP' : 'Login'\n              )}\n            </Button>\n          ) : (\n            <Box sx={{ mt: 3, mb: 2, display: 'flex', gap: 2 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={handleBackToCredentials}\n                disabled={loading}\n                sx={{ flex: 1 }}\n              >\n                Back\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                disabled={loading}\n                sx={{ flex: 1 }}\n              >\n                {loading ? <CircularProgress size={24} /> : 'Verify & Login'}\n              </Button>\n            </Box>\n          )}\n          {/* Resend OTP button */}\n          {useOTP && otpSent && (\n            <Button\n              variant=\"text\"\n              onClick={handleResendOTP}\n              disabled={loading}\n              fullWidth\n              sx={{ mt: 1 }}\n            >\n              Resend OTP\n            </Button>\n          )}\n        </Box>\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" sx={{ mt: 2 }}>\n          {useOTP \n            ? \"Enter your email and optional phone number to receive an OTP for secure login.\"\n            : \"Use your email and password to login, or try OTP authentication for enhanced security.\"\n          }\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\nexport default UnifiedLoginForm;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/UserProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherContextMenu.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":152,"column":0}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherContextMenu.tsx\nimport React, { useState } from 'react';\nimport { Menu, MenuItem, IconButton } from '@mui/material';\nimport { \n  MoreVert as MoreVertIcon, \n  Visibility, \n  Edit, \n  Delete, \n  Print, \n  SaveAlt, \n  Email, \n  ContentCopy,\n  LocalShipping \n} from '@mui/icons-material';\ninterface VoucherContextMenuProps {\n  voucher?: any;\n  voucherType: string;\n  onView: (id: number) => void;\n  onEdit: (id: number) => void;\n  onDelete: (id: number) => void;\n  onPrint?: (id: number, mode: 'print' | 'download') => void;\n  onEmail?: (id: number) => void;\n  onDuplicate?: (id: number) => void;\n  onCreateDispatch?: (id: number) => void;\n  showKebab?: boolean;\n  contextMenu?: { mouseX: number; mouseY: number; voucher: any } | null;\n  onClose: () => void;\n  open?: boolean;\n  anchorPosition?: { left: number; top: number };\n  anchorReference?: 'anchorPosition' | 'anchorEl' | 'none';\n}\nconst VoucherContextMenu: React.FC<VoucherContextMenuProps> = ({\n  voucher,\n  voucherType,\n  onView,\n  onEdit,\n  onDelete,\n  onPrint,\n  onEmail,\n  onDuplicate,\n  onCreateDispatch,\n  showKebab = false,\n  contextMenu = null,\n  onClose,\n  open = false,\n  anchorPosition = null,\n  anchorReference,\n}) => {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const effectiveVoucher = voucher || (contextMenu ? contextMenu.voucher : null);\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    onClose();\n  };\n    if (effectiveVoucher) {\n      action(effectiveVoucher.id);\n    }\n    handleMenuClose();\n  };\n  const handlePrintAction = (mode: 'print' | 'download') => () => {\n    if (onPrint && effectiveVoucher) {\n      onPrint(effectiveVoucher.id, mode);\n    }\n    handleMenuClose();\n  };\n  // Determine email recipient based on voucher type\n  const getEmailRecipient = () => {\n    if (!effectiveVoucher) {return '';}\n    if (!voucherType) {return '';}\n    const lowerType = voucherType.toLowerCase();\n    if (lowerType.includes('sales')) {\n      return effectiveVoucher.customer?.email || '';\n    } else if (lowerType.includes('purchase') || lowerType.includes('financial') || lowerType.includes('payment')) {\n      return effectiveVoucher.vendor?.email || '';\n    } else if (lowerType.includes('receipt')) {\n      return effectiveVoucher.customer?.email || '';\n    }\n    return '';\n  };\n  const handleEmailClick = () => {\n    if (onEmail && effectiveVoucher) {\n      const recipient = getEmailRecipient();\n      if (recipient) {\n        onEmail(effectiveVoucher.id);\n      } else {\n        alert('No email recipient found for this voucher type.');\n      }\n    }\n    handleMenuClose();\n  };\n  const menuProps = anchorPosition && anchorReference ? {\n    open: open || Boolean(anchorEl),\n    onClose: handleMenuClose,\n    anchorReference: anchorReference,\n    anchorPosition,\n  } : {\n    open: Boolean(anchorEl),\n    anchorEl,\n    onClose: handleMenuClose,\n  };\n  const hasEmail = !!onEmail && !!getEmailRecipient();\n  const isDeliveryChallan = voucherType.toLowerCase().includes('delivery challan');\n  const isPurchaseOrder = voucherType.toLowerCase().includes('purchase order');\n  return (\n    <>\n      {showKebab && (\n        <IconButton onClick={handleClick}>\n          <MoreVertIcon />\n        </IconButton>\n      )}\n      <Menu {...menuProps}>\n        <MenuItem onClick={handleAction(onView)}>\n          <Visibility sx={{ mr: 1 }} /> View {voucherType}\n        </MenuItem>\n        <MenuItem onClick={handleAction(onEdit)}>\n          <Edit sx={{ mr: 1 }} /> Edit {voucherType}\n        </MenuItem>\n        {onDuplicate && (\n          <MenuItem onClick={handleAction(onDuplicate)}>\n            <ContentCopy sx={{ mr: 1 }} /> Duplicate {voucherType}\n          </MenuItem>\n        )}\n        <MenuItem onClick={handleAction(onDelete)}>\n          <Delete sx={{ mr: 1 }} /> Delete {voucherType}\n        </MenuItem>\n        {onPrint && (\n          <MenuItem onClick={handlePrintAction('print')}>\n            <Print sx={{ mr: 1 }} /> Print {voucherType}\n          </MenuItem>\n        )}\n        {onPrint && (\n          <MenuItem onClick={handlePrintAction('download')}>\n            <SaveAlt sx={{ mr: 1 }} /> Save {voucherType} as PDF\n          </MenuItem>\n        )}\n        {hasEmail && (\n          <MenuItem onClick={handleEmailClick}>\n            <Email sx={{ mr: 1 }} /> Email {voucherType}\n          </MenuItem>\n        )}\n        {isDeliveryChallan && onCreateDispatch && (\n          <MenuItem onClick={handleAction(onCreateDispatch)}>\n            <LocalShipping sx={{ mr: 1 }} /> Create Dispatch Order\n          </MenuItem>\n        )}\n      </Menu>\n    </>\n  );\n};\nexport default VoucherContextMenu;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherHeaderActions.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'mode' is defined but never used.","line":16,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"mode"},"fix":{"range":[677,709],"text":""},"desc":"Remove unused variable 'mode'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":19,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[783,795],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onModeChange' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"onModeChange"},"fix":{"range":[984,1058],"text":""},"desc":"Remove unused variable 'onModeChange'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onModalOpen' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"onModalOpen"},"fix":{"range":[1058,1073],"text":""},"desc":"Remove unused variable 'onModalOpen'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherList' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherList"},"fix":{"range":[1073,1088],"text":""},"desc":"Remove unused variable 'voucherList'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onView' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"onView"},"fix":{"range":[1088,1098],"text":""},"desc":"Remove unused variable 'onView'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isLoading' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"isLoading"},"fix":{"range":[1098,1111],"text":""},"desc":"Remove unused variable 'isLoading'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherHeaderActions.tsx\n'use client';\nimport React from 'react';\nimport { Box, Button } from '@mui/material';\nimport { Add as AddIcon, Edit as EditIcon, Close as CloseIcon } from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\ninterface VoucherHeaderActionsProps {\n  mode: 'create' | 'edit' | 'view';\n  voucherType: string; // e.g., 'Purchase Order', 'Sales Voucher', etc.\n  voucherRoute: string; // The base route for this voucher type\n  currentId?: number; // Current voucher ID (for edit route)\n  onEdit?: () => void;\n  onCreate?: () => void;\n  onCancel?: () => void;\n  // Additional props for compatibility\n  onModeChange?: (mode: 'create' | 'edit' | 'view') => void;\n  onModalOpen?: () => void;\n  voucherList?: any[];\n  onView?: (voucher: any) => void;\n  isLoading?: boolean;\n}\nconst VoucherHeaderActions: React.FC<VoucherHeaderActionsProps> = ({\n  mode,\n  voucherType,\n  voucherRoute,\n  currentId,\n  onEdit,\n  onCreate,\n  onCancel,\n  // Additional props for compatibility (ignored for now)\n  onModeChange,\n  onModalOpen,\n  voucherList,\n  onView,\n  isLoading,\n}) => {\n  const router = useRouter();\n  const handleEditFallback = () => {\n    if (currentId) {\n      router.push(`${voucherRoute}?mode=edit&id=${currentId}`);\n    }\n  };\n  const handleCreateFallback = () => {\n    router.push(`${voucherRoute}?mode=create`);\n  };\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n      {mode === 'view' && (\n        <>\n          <Button \n            variant=\"contained\" \n            color=\"success\" \n            startIcon={<AddIcon />}\n            onClick={onCreate ? onCreate : handleCreateFallback}\n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Create {voucherType.toLowerCase()}\n          </Button>\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            startIcon={<EditIcon />}\n            onClick={onEdit ? onEdit : handleEditFallback}\n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Edit {voucherType.toLowerCase()}\n          </Button>\n        </>\n      )}\n      {mode === 'edit' && (\n        <>\n          <Button \n            variant=\"contained\" \n            color=\"success\" \n            startIcon={<AddIcon />}\n            onClick={onCreate ? onCreate : handleCreateFallback}\n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Create {voucherType.toLowerCase()}\n          </Button>\n          <Button \n            form=\"voucherForm\" \n            type=\"submit\" \n            variant=\"contained\" \n            color=\"primary\" \n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Save\n          </Button>\n          <Button \n            variant=\"outlined\" \n            startIcon={<CloseIcon />}\n            onClick={onCancel}\n            sx={{ fontSize: 12, textTransform: 'uppercase' }}\n          >\n            Cancel\n          </Button>\n        </>\n      )}\n      {mode === 'create' && (\n        <Button \n          form=\"voucherForm\" \n          type=\"submit\" \n          variant=\"contained\" \n          color=\"primary\" \n          sx={{ fontSize: 12, textTransform: 'uppercase' }}\n        >\n          Save\n        </Button>\n      )}\n    </Box>\n  );\n};\nexport default VoucherHeaderActions;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherLayout.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'page' is defined but never used.","line":17,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"page"},"fix":{"range":[607,619],"text":""},"desc":"Remove unused variable 'page'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucherTitle' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucherTitle"},"fix":{"range":[918,934],"text":""},"desc":"Remove unused variable 'voucherTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showModal' is assigned a value but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"showModal"},"fix":{"range":[1016,1037],"text":""},"desc":"Remove unused variable 'showModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'onCloseModal' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"onCloseModal"},"fix":{"range":[1037,1053],"text":""},"desc":"Remove unused variable 'onCloseModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'centerAligned' is assigned a value but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"centerAligned"},"fix":{"range":[1069,1093],"text":""},"desc":"Remove unused variable 'centerAligned'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherLayout.tsx\n// Enhanced VoucherLayout component with comprehensive UI improvements\nimport React from 'react';\nimport { Container, Grid, Paper, Box, Typography, Button, Pagination } from '@mui/material';\nimport { getVoucherStyles } from '../utils/voucherUtils';\ninterface VoucherLayoutProps {\n  voucherType: string;\n  voucherTitle?: string;\n  indexContent: React.ReactNode;\n  formContent: React.ReactNode;\n  onShowAll?: () => void;\n  showAllButton?: boolean;\n  // Enhanced pagination props\n  pagination?: {\n    currentPage: number;\n    totalPages: number;\n    onPageChange: (page: number) => void;\n    totalItems: number;\n  };\n  // Additional props for modal functionality\n  showModal?: boolean;\n  onCloseModal?: () => void;\n  modalContent?: React.ReactNode;\n  // Center alignment control\n  centerAligned?: boolean;\n}\nconst VoucherLayout: React.FC<VoucherLayoutProps> = ({\n  voucherType,\n  voucherTitle,\n  indexContent,\n  formContent,\n  onShowAll,\n  showAllButton = true,\n  pagination,\n  showModal = false,\n  onCloseModal,\n  modalContent,\n  centerAligned = true\n}) => {\n  const voucherStyles = getVoucherStyles();\n  return (\n    <>\n      <Box sx={{ \n        ...voucherStyles.edgeToEdgeContainer, \n        width: '100%',\n        maxWidth: '100%', \n        overflowX: 'hidden',\n        boxSizing: 'border-box'\n      }}>\n        <Container \n          maxWidth={false} \n          sx={{ \n            padding: 0, \n            margin: 0, \n            width: '100%',\n            maxWidth: '100%', \n            overflowX: 'hidden',\n            boxSizing: 'border-box'\n          }}\n        >\n          {/* Remove redundant top-level title per requirements */}\n          <Grid container spacing={0} sx={{ \n            minHeight: '100vh',\n            width: '100%',\n            margin: 0,\n            '& .MuiGrid-item': {\n              paddingLeft: 0,\n              paddingTop: 0\n            }\n          }}>\n            {/* Index Panel - approximately 40% */}\n            <Grid size={{ xs: 12, md: 5, lg: 4 }} sx={{ \n              borderRight: '1px solid #e0e0e0',\n              maxWidth: { xs: '100%', md: '40%', lg: '33.333%' }\n            }}>\n              <Paper sx={{ \n                p: 1,\n                height: '100vh',\n                borderRadius: 0,\n                boxShadow: 'none',\n                overflow: 'auto',\n                width: '100%',\n                ...voucherStyles.indexContainer\n              }}>\n                <Box \n                  display=\"flex\" \n                  justifyContent=\"space-between\" \n                  alignItems=\"center\" \n                  mb={1}\n                  sx={{ width: '100%' }}\n                >\n                  <Typography \n                    variant=\"h6\" \n                    sx={{ \n                      fontSize: 18, \n                      fontWeight: 'bold', \n                      flex: 1,\n                      ...voucherStyles.centerText\n                    }}\n                  >\n                    {voucherType}\n                  </Typography>\n                  {showAllButton && (\n                    <Button \n                      variant=\"outlined\" \n                      size=\"small\" \n                      onClick={onShowAll}\n                      sx={{ ml: 1 }}\n                    >\n                      Show All\n                    </Button>\n                  )}\n                </Box>\n                {/* Index Content */}\n                <Box sx={{ width: '100%' }}>\n                  {indexContent}\n                </Box>\n                {/* Pagination for index if provided */}\n                {pagination && (\n                  <Box sx={voucherStyles.paginationContainer}>\n                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\n                      <Typography variant=\"caption\" sx={{ fontSize: '0.75rem', color: 'text.secondary' }}>\n                        Page {pagination.currentPage} of {pagination.totalPages} \n                        ({pagination.totalItems} total items)\n                      </Typography>\n                      <Pagination\n                        count={pagination.totalPages}\n                        page={pagination.currentPage}\n                        onChange={(_, page) => pagination.onPageChange(page)}\n                        size=\"small\"\n                        color=\"primary\"\n                        showFirstButton\n                        showLastButton\n                      />\n                    </Box>\n                  </Box>\n                )}\n              </Paper>\n            </Grid>\n            {/* Form Panel - approximately 60% */}\n            <Grid size={{ xs: 12, md: 7, lg: 8 }} sx={{\n              maxWidth: { xs: '100%', md: '60%', lg: '66.667%' }\n            }}>\n              <Paper sx={{ \n                p: 1,\n                height: '100vh',\n                borderRadius: 0,\n                boxShadow: 'none',\n                overflow: 'auto',\n                width: '100%',\n                ...voucherStyles.formContainer\n              }}>\n                {formContent}\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n      {/* Modal Content */}\n      {modalContent}\n    </>\n  );\n};\nexport default VoucherLayout;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherListModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":28,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[621,633],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":29,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[656,666],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":30,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[689,699],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":31,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[724,734],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":32,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[764,776],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":233,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":233,"endColumn":38},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":234,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":234,"endColumn":38},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty arrow function.","line":235,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":235,"endColumn":42}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherListModal.tsx\n// Reusable modal component for displaying voucher lists with clickable functionality\nimport React, { useState } from 'react';\nimport {\n  Modal,\n  Box,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  TextField,\n  Button,\n  Grid,\n  Chip,\n  IconButton,\n} from '@mui/material';\nimport { Close, Search } from '@mui/icons-material';\nimport VoucherContextMenu from './VoucherContextMenu';\ninterface VoucherListModalProps {\n  open: boolean;\n  onClose: () => void;\n  voucherType: string;\n  vouchers: any[];\n  onVoucherClick: (voucher: any) => void;\n  onEdit?: (id: number) => void;\n  onView?: (id: number) => void;\n  onDelete?: (id: number) => void;\n  onGeneratePDF?: (voucher: any) => void;\n  customerList?: any[];\n  vendorList?: any[];\n}\nconst VoucherListModal: React.FC<VoucherListModalProps> = ({\n  open,\n  onClose,\n  voucherType,\n  vouchers,\n  onVoucherClick,\n  onEdit,\n  onView,\n  onDelete,\n  onGeneratePDF,\n  customerList = [],\n  vendorList = [],\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n  const [contextMenu, setContextMenu] = useState<{ mouseX: number; mouseY: number; voucher: any } | null>(null);\n  // Filter vouchers based on search criteria\n  const filteredVouchers = vouchers.filter((voucher) => {\n    const matchesSearch = searchTerm === '' || \n      voucher.voucher_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      voucher.reference?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      voucher.notes?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFromDate = fromDate === '' || new Date(voucher.date) >= new Date(fromDate);\n    const matchesToDate = toDate === '' || new Date(voucher.date) <= new Date(toDate);\n    return matchesSearch && matchesFromDate && matchesToDate;\n  });\n  const handleContextMenu = (event: React.MouseEvent, voucher: any) => {\n    event.preventDefault();\n    setContextMenu(\n      contextMenu === null\n        ? { mouseX: event.clientX, mouseY: event.clientY, voucher }\n        : null,\n    );\n  };\n  const handleCloseContextMenu = () => {\n    setContextMenu(null);\n  };\n  const handleVoucherClick = (voucher: any, event: React.MouseEvent) => {\n    // Don't trigger if right-click (context menu)\n    if (event.button === 2) {return;}\n    onVoucherClick(voucher);\n    onClose(); // Close modal after selection\n  };\n  const getEntityName = (voucher: any) => {\n    if (voucher.customer_id && customerList.length > 0) {\n      return customerList.find((c: any) => c.id === voucher.customer_id)?.name || 'N/A';\n    }\n    if (voucher.vendor_id && vendorList.length > 0) {\n      return vendorList.find((v: any) => v.id === voucher.vendor_id)?.name || 'N/A';\n    }\n    return 'N/A';\n  };\n  const formatDate = (dateString: string) => {\n    if (!dateString) {return 'N/A';}\n    return new Date(dateString).toLocaleDateString();\n  };\n  const modalStyle = {\n    position: 'absolute' as const,\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '90%',\n    maxWidth: 1000,\n    bgcolor: 'background.paper',\n    boxShadow: 24,\n    p: 4,\n    borderRadius: 2,\n    maxHeight: '90vh',\n    overflow: 'auto',\n  };\n  return (\n    <>\n      <Modal open={open} onClose={onClose}>\n        <Box sx={modalStyle}>\n          {/* Header */}\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\">\n              All {voucherType}\n            </Typography>\n            <IconButton onClick={onClose}>\n              <Close />\n            </IconButton>\n          </Box>\n          {/* Search Filters */}\n          <Grid container spacing={2} sx={{ mb: 3 }}>\n            <Grid size={{ xs: 12, md: 4 }}>\n              <TextField\n                label=\"Search\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                fullWidth\n                placeholder=\"Voucher number, reference, notes...\"\n                InputProps={{\n                  startAdornment: <Search sx={{ mr: 1, color: 'text.secondary' }} />\n                }}\n              />\n            </Grid>\n            <Grid size={{ xs: 6, md: 3 }}>\n              <TextField\n                label=\"From Date\"\n                type=\"date\"\n                value={fromDate}\n                onChange={(e) => setFromDate(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                fullWidth\n              />\n            </Grid>\n            <Grid size={{ xs: 6, md: 3 }}>\n              <TextField\n                label=\"To Date\"\n                type=\"date\"\n                value={toDate}\n                onChange={(e) => setToDate(e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                fullWidth\n              />\n            </Grid>\n            <Grid size={{ xs: 12, md: 2 }}>\n              <Button\n                variant=\"outlined\"\n                onClick={() => {\n                  setSearchTerm('');\n                  setFromDate('');\n                  setToDate('');\n                }}\n                fullWidth\n                sx={{ height: '56px' }}\n              >\n                Clear\n              </Button>\n            </Grid>\n          </Grid>\n          {/* Results Summary */}\n          <Box sx={{ mb: 2 }}>\n            <Chip\n              label={`${filteredVouchers.length} of ${vouchers.length} vouchers`}\n              color=\"primary\"\n              variant=\"outlined\"\n            />\n          </Box>\n          {/* Voucher Table */}\n          <TableContainer component={Paper} sx={{ maxHeight: 400 }}>\n            <Table stickyHeader size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold' }}>Voucher No.</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold' }}>Date</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold' }}>Customer</TableCell>\n                  <TableCell align=\"center\" sx={{ fontSize: 15, fontWeight: 'bold' }}>Amount</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredVouchers.map((voucher) => (\n                  <TableRow\n                    key={voucher.id}\n                    hover\n                    onClick={(e) => handleVoucherClick(voucher, e)}\n                    onContextMenu={(e) => handleContextMenu(e, voucher)}\n                    sx={{\n                      cursor: 'pointer',\n                      '&:hover': {\n                        backgroundColor: 'action.hover',\n                      },\n                    }}\n                  >\n                    <TableCell align=\"center\">\n                      <Typography variant=\"body2\" fontWeight=\"medium\">\n                        {voucher.voucher_number}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"center\">{formatDate(voucher.date)}</TableCell>\n                    <TableCell align=\"center\">{getEntityName(voucher)}</TableCell>\n                    <TableCell align=\"center\">\n                      ₹{voucher.total_amount?.toLocaleString() || '0'}\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {filteredVouchers.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={4} align=\"center\">\n                      <Typography color=\"text.secondary\">\n                        No vouchers found matching your criteria\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      </Modal>\n      {/* Context Menu */}\n      {contextMenu && (\n        <VoucherContextMenu\n          voucher={contextMenu.voucher}\n          voucherType={voucherType}\n          onView={onView || (() => {})}\n          onEdit={onEdit || (() => {})}\n          onDelete={onDelete || (() => {})}\n          onPrint={onGeneratePDF ? () => onGeneratePDF(contextMenu.voucher) : undefined}\n          open={true}\n          onClose={handleCloseContextMenu}\n          anchorReference=\"anchorPosition\"\n          anchorPosition={{ top: contextMenu.mouseY, left: contextMenu.mouseX }}\n        />\n      )}\n    </>\n  );\n};\nexport default VoucherListModal;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/VoucherReferenceDropdown.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":4,"column":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/components/VoucherReferenceDropdown.tsx\n// Reference column dropdown component for voucher types\nimport React, { useState, useEffect } from 'react';\nimport { from '@mui/material';\nimport { getReferenceVoucherOptions, getVoucherConfig } from '../utils/voucherUtils';\nimport api from '../lib/api';\ninterface VoucherReferenceDropdownProps {\n  voucherType: string;\n  value?: {\n    referenceType?: string;\n    referenceId?: number;\n    referenceNumber?: string;\n  };\n  onChange: (reference: {\n    referenceType?: string;\n    referenceId?: number;\n    referenceNumber?: string;\n  }) => void;\n  disabled?: boolean;\n  onReferenceSelected?: (referenceData: any) => void;\n}\nconst VoucherReferenceDropdown: React.FC<VoucherReferenceDropdownProps> = ({\n  voucherType,\n  value = {},\n  onChange,\n  disabled = false,\n  onReferenceSelected\n}) => {\n  const [referenceOptions, setReferenceOptions] = useState<any[]>([]);\n  const [loadingReferences, setLoadingReferences] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const config = getVoucherConfig(voucherType as any);\n  const allowedTypes = getReferenceVoucherOptions(voucherType as any);\n  // Fetch reference documents when reference type changes\n  useEffect(() => {\n    if (value.referenceType && config.referenceConfig) {\n      fetchReferenceDocuments(value.referenceType);\n    }\n  }, [value.referenceType, config.referenceConfig]);\n  // If this voucher type doesn't support references, don't render\n  if (!config.referenceConfig) {\n    return null;\n  }\n  const fetchReferenceDocuments = async (referenceType: string) => {\n    setLoadingReferences(true);\n    setError(null);\n    try {\n      const typeConfig = getVoucherConfig(referenceType as any);\n      const response = await api.get(`${typeConfig.endpoint}?limit=100&sort=desc`);\n      if (response.data) {\n        const documents = Array.isArray(response.data) ? response.data : [response.data];\n        setReferenceOptions(documents.map((doc: any) => ({\n          id: doc.id,\n          label: `${doc.voucher_number || doc.number}`,\n          value: doc.id,\n          data: doc\n        })));\n      }\n    } catch (err) {\n      console.error('Error fetching reference documents:', err);\n      setError('Failed to load reference documents');\n      setReferenceOptions([]);\n    } finally {\n      setLoadingReferences(false);\n    }\n  };\n  const handleTypeChange = (newType: string) => {\n    onChange({\n      referenceType: newType,\n      referenceId: undefined,\n      referenceNumber: undefined\n    });\n    setReferenceOptions([]);\n  };\n  const handleDocumentChange = (selectedOption: any) => {\n    if (selectedOption) {\n      const newReference = {\n        referenceType: value.referenceType,\n        referenceId: selectedOption.value,\n        referenceNumber: selectedOption.data.voucher_number || selectedOption.data.number\n      };\n      onChange(newReference);\n      // Call callback with full reference data for auto-population\n      if (onReferenceSelected) {\n        onReferenceSelected(selectedOption.data);\n      }\n    } else {\n      onChange({\n        referenceType: value.referenceType,\n        referenceId: undefined,\n        referenceNumber: undefined\n      });\n    }\n  };\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Grid container spacing={2}>\n        {/* Reference Type Selection */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel \n              id=\"reference-type-label\"\n              style={{ fontSize: 12 }}\n              shrink\n            >\n              Reference Type\n            </InputLabel>\n            <Select\n              labelId=\"reference-type-label\"\n              value={value.referenceType || ''}\n              onChange={(e) => handleTypeChange(e.target.value)}\n              disabled={disabled}\n              label=\"Reference Type\"\n              sx={{ \n                height: 27,\n                '& .MuiSelect-select': { \n                  fontSize: 14,\n                  textAlign: 'center'\n                }\n              }}\n            >\n              {allowedTypes.map((type) => (\n                <MenuItem key={type.value} value={type.value}>\n                  {type.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        {/* Reference Document Selection */}\n        {value.referenceType && (\n          <Grid size={{ xs: 12, md: 6 }}>\n            <Autocomplete\n              size=\"small\"\n              options={referenceOptions}\n              value={referenceOptions.find(opt => opt.value === value.referenceId) || null}\n              onChange={(_, newValue) => handleDocumentChange(newValue)}\n              disabled={disabled || loadingReferences}\n              loading={loadingReferences}\n              getOptionLabel={(option) => option.label || ''}\n              isOptionEqualToValue={(option, value) => option.value === value.value}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label={config.referenceConfig?.label || 'Reference Document'}\n                  InputLabelProps={{ shrink: true, style: { fontSize: 12 } }}\n                  inputProps={{ \n                    ...params.inputProps,\n                    style: { fontSize: 14, textAlign: 'center' }\n                  }}\n                  sx={{ '& .MuiInputBase-root': { height: 27 } }}\n                  InputProps={{\n                    ...params.InputProps,\n                    endAdornment: (\n                      <>\n                        {loadingReferences ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                        {params.InputProps.endAdornment}\n                      </>\n                    ),\n                  }}\n                />\n              )}\n              renderOption={(props, option) => (\n                <Box component=\"li\" {...props} key={option.value}>\n                  <Typography variant=\"body2\" sx={{ fontSize: 13 }}>\n                    {option.label}\n                  </Typography>\n                </Box>\n              )}\n              noOptionsText={\n                value.referenceType \n                  ? `No ${allowedTypes.find(t => t.value === value.referenceType)?.label || 'documents'} found`\n                  : 'Select reference type first'\n              }\n              PopperComponent={(props) => <Popper {...props} sx={{ width: '400px !important' }} />}\n            />\n          </Grid>\n        )}\n      </Grid>\n      {/* Error Display */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mt: 1, fontSize: 12 }}>\n          {error}\n        </Alert>\n      )}\n      {/* Selected Reference Info */}\n      {value.referenceId && value.referenceNumber && (\n        <Typography \n          variant=\"body2\" \n          sx={{ \n            mt: 1, \n            fontSize: 12, \n            textAlign: 'center',\n            color: 'primary.main',\n            fontWeight: 'medium'\n          }}\n        >\n          Referenced: {value.referenceNumber}\n        </Typography>\n      )}\n    </Box>\n  );\n};\nexport default VoucherReferenceDropdown;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/components/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/constants/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/AuthContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'loginResponse' is defined but never used.","line":12,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"loginResponse"},"fix":{"range":[486,504],"text":""},"desc":"Remove unused variable 'loginResponse'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updatedData' is defined but never used.","line":15,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"updatedData"},"fix":{"range":[597,623],"text":""},"desc":"Remove unused variable 'updatedData'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'handlePostLoginRedirect' was used before it was defined.","line":71,"column":9,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":71,"endColumn":32},{"ruleId":"no-use-before-define","severity":2,"message":"'restoreFormData' was used before it was defined.","line":142,"column":11,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":142,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'formKey' is defined but never used.","line":163,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"formKey"},"fix":{"range":[7145,7152],"text":""},"desc":"Remove unused variable 'formKey'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/AuthContext.tsx\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useRouter } from 'next/router';\nimport { toast } from 'react-toastify';\nimport { authService } from '../services/authService';\nimport { User, getDisplayRole } from '../types/user.types';\nimport { markAuthReady, resetAuthReady } from '../lib/api';\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  displayRole: string | null;\n  login: (loginResponse: any) => Promise<void>;\n  logout: () => void;\n  refreshUser: () => Promise<void>;\n  updateUser: (updatedData: Partial<User>) => void;\n  isOrgContextReady: boolean;\n}\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\nexport function AuthProvider({ children }: { children: ReactNode }): any {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n  // -- Fetch the current user from API using the token in localStorage --\n  // NOTE: This should only be called for:\n  // 1. Initial auth state check on app mount\n  // 2. Manual user refresh (e.g., after profile updates)  \n  // DO NOT call this during login - use the user data from login response instead\n  const fetchUser = async (retryCount = 0) => {\n    const maxRetries = 2;\n    console.log(`[AuthProvider] fetchUser started - attempt ${retryCount + 1}/${maxRetries + 1}`, {\n      hasToken: !!localStorage.getItem('token'),\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const currentToken = localStorage.getItem('token');\n      if (!currentToken) {\n        console.log('[AuthProvider] No token found in localStorage');\n        throw new Error('No token found');\n      }\n      console.log('[AuthProvider] Token found, fetching user data from API');\n      const userData = await authService.getCurrentUser();\n      console.log('[AuthProvider] User data received from API:', {\n        userId: userData.id,\n        email: userData.email,\n        role: userData.role,\n        isSuperAdmin: userData.is_super_admin,\n        hasOrgId: !!userData.organization_id,\n        mustChangePassword: userData.must_change_password\n      });\n      // Defensive: org ID should never be leaked between users\n      const newUser = {\n        id: userData.id,\n        email: userData.email,\n        role: userData.role,\n        is_super_admin: userData.is_super_admin,\n        organization_id: userData.organization_id,\n        must_change_password: userData.must_change_password,\n      };\n      setUser(newUser);\n      console.log('[AuthProvider] User state updated successfully');\n      // Check org context for non-super-admins\n      if (!userData.is_super_admin && !userData.organization_id) {\n        console.error('[AuthProvider] Organization context missing for regular user');\n        throw new Error('User account is not properly configured with organization context');\n      }\n      markAuthReady();\n      console.log('[AuthProvider] Auth context marked as ready');\n      // If on login page after successful fetch, redirect to dashboard\n      if (router.pathname === '/login') {\n// handlePostLoginRedirect is defined later in this file\n        handlePostLoginRedirect();\n      }\n    } catch (error: any) {\n      console.error(`[AuthProvider] fetchUser error on attempt ${retryCount + 1}:`, {\n        error: error.message,\n        status: error?.status,\n        willRetry: retryCount < maxRetries && (error?.status !== 401 && error?.status !== 403)\n      });\n      // Only retry on non-auth errors\n      if (retryCount < maxRetries && (error?.status !== 401 && error?.status !== 403)) {\n        const retryDelay = Math.pow(2, retryCount) * 1000;\n        console.log(`[AuthProvider] Retrying fetchUser in ${retryDelay}ms`);\n        setTimeout(() => fetchUser(retryCount + 1), retryDelay);\n        return;\n      }\n      // On error, clear sensitive data and force re-auth\n      console.log('[AuthProvider] Auth error - clearing data');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user_role');\n      localStorage.removeItem('is_super_admin');\n      setUser(null);\n      resetAuthReady();\n      if (error?.userMessage) {\n        toast.error(`Authentication failed: ${error.userMessage}`, { position: \"top-right\", autoClose: 5000 });\n      } else {\n        toast.error('Failed to establish secure session. Please log in again.', { position: \"top-right\", autoClose: 5000 });\n      }\n      // Only redirect if not already on login page to prevent loop\n      if (router.pathname !== '/login') {\n        console.log('[AuthProvider] Redirecting to login');\n        router.push('/login');\n      } else {\n        console.log('[AuthProvider] Already on login - no redirect needed');\n      }\n    }\n  };\n  // -- On mount, check for token and initialize user session --\n  useEffect(() => {\n    console.log('[AuthProvider] Component mounted, initializing auth state');\n    const token = localStorage.getItem('token');\n    console.log('[AuthProvider] Token check result:', {\n      hasToken: !!token,\n      pathname: router.pathname,\n      timestamp: new Date().toISOString()\n    });\n    if (token) {\n      console.log('[AuthProvider] Token found - starting user fetch');\n      // Critical fix: Don't set loading to false until we have a definitive result\n      fetchUser().finally(() => {\n        console.log('[AuthProvider] User fetch completed - setting loading to false');\n        setLoading(false);\n      });\n    } else {\n      console.log('[AuthProvider] No token found - marking auth ready and stopping loading');\n      markAuthReady();\n      setLoading(false);\n    }\n  }, [router.pathname]);  // Add pathname dependency to re-run on route changes\n  // -- Handle post-login redirect with state preservation --\n  const handlePostLoginRedirect = () => {\n    try {\n      // Check for return URL\n      const returnUrl = sessionStorage.getItem('returnUrlAfterLogin');\n      if (returnUrl) {\n        console.log('[AuthProvider] Redirecting to saved URL:', returnUrl);\n        sessionStorage.removeItem('returnUrlAfterLogin');\n        // Use router.replace to avoid adding to history\n        router.replace(returnUrl);\n        // Attempt to restore form data after a short delay\n        setTimeout(() => {\n// restoreFormData is defined later in this file\n          restoreFormData();\n        }, 500);\n        return;\n      }\n      // Default redirect to dashboard\n      console.log('[AuthProvider] No return URL found, redirecting to dashboard');\n      router.push('/dashboard');\n    } catch (error) {\n      console.error('[AuthProvider] Error during post-login redirect:', error);\n      // Fallback to dashboard\n      router.push('/dashboard');\n    }\n  };\n  // -- Attempt to restore form data after login --\n  const restoreFormData = () => {\n    try {\n      const savedFormData = sessionStorage.getItem('formDataBeforeExpiry');\n      if (savedFormData) {\n        const formData = JSON.parse(savedFormData);\n        console.log('[AuthProvider] Attempting to restore form data:', formData);\n        // Attempt to restore form values\n        Object.entries(formData).forEach(([formKey, formValues]: [string, any]) => {\n          if (formValues && typeof formValues === 'object') {\n            Object.entries(formValues).forEach(([fieldName, fieldValue]) => {\n              const field = document.querySelector(`[name=\"${fieldName}\"]`) as HTMLInputElement;\n              if (field && typeof fieldValue === 'string') {\n                field.value = fieldValue;\n                // Trigger input event to update React state\n                field.dispatchEvent(new Event('input', { bubbles: true }));\n              }\n            });\n          }\n        });\n        // Clean up saved form data\n        sessionStorage.removeItem('formDataBeforeExpiry');\n        // Show notification to user\n        toast.info('Form data has been restored from before session expiry.', {\n          position: \"top-right\",\n          autoClose: 5000,\n        });\n      }\n    } catch (error) {\n      console.warn('[AuthProvider] Could not restore form data:', error);\n    }\n  };\n  // -- Force password reset if required --\n  useEffect(() => {\n    if (user && user.must_change_password && router.pathname !== '/password-reset') {\n      router.push('/password-reset');\n    }\n  }, [user, router]);\n  // -- Login: store token, hydrate user, and mark ready --\n  const login = async (loginResponse: any) => {\n    console.log('[AuthProvider] Login process started:', {\n      hasToken: !!loginResponse.access_token,\n      userRole: loginResponse.user_role,\n      isSuperAdmin: loginResponse.user?.is_super_admin,\n      hasOrgId: !!loginResponse.organization_id,\n      mustChangePassword: loginResponse.must_change_password,\n      timestamp: new Date().toISOString()\n    });\n    localStorage.setItem('token', loginResponse.access_token);\n    console.log('[AuthProvider] Token stored in localStorage');\n    if (loginResponse.user_role) {\n      localStorage.setItem('user_role', loginResponse.user_role);\n      console.log('[AuthProvider] User role stored:', loginResponse.user_role);\n    }\n    localStorage.setItem('is_super_admin', loginResponse.user?.is_super_admin ? 'true' : 'false');\n    console.log('[AuthProvider] Super admin flag stored:', loginResponse.user?.is_super_admin);\n    // Defensive: never store org_id in localStorage\n    const userData = loginResponse.user;\n    // Validate org context for regular users\n    if (!userData.is_super_admin && !loginResponse.organization_id) {\n      console.error('[AuthProvider] Organization context validation failed for regular user');\n      throw new Error('Login failed: User account is not properly configured with organization context');\n    }\n    const newUser = {\n      id: userData.id,\n      email: userData.email,\n      role: userData.role,\n      is_super_admin: userData.is_super_admin,\n      organization_id: loginResponse.organization_id,\n      must_change_password: loginResponse.must_change_password,\n    };\n    setUser(newUser);\n    console.log('[AuthProvider] User state set from login response');\n    resetAuthReady();\n    markAuthReady();\n    console.log('[AuthProvider] Auth ready state reset and marked');\n    // Handle post-login redirect and form state restoration\n    handlePostLoginRedirect();\n    // NOTE: No need to call fetchUser() here as we already have fresh user data from login response\n    // This prevents duplicate /users/me API calls that can cause session instability\n    console.log('[AuthProvider] Login process completed successfully - user context established from login response');\n  };\n  // -- Logout: clear all sensitive data and redirect --\n  const logout = () => {\n    console.log('[AuthProvider] Logout initiated');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user_role');\n    localStorage.removeItem('is_super_admin');\n    setUser(null);\n    resetAuthReady();\n    console.log('[AuthProvider] Auth data cleared');\n    // Only redirect if not already on login\n    if (router.pathname !== '/login') {\n      console.log('[AuthProvider] Redirecting to login');\n      router.push('/login');\n    } else {\n      console.log('[AuthProvider] Already on login - no redirect needed');\n    }\n  };\n  // -- Manual refresh of user (e.g., after profile update) --\n  const refreshUser = async () => {\n    await fetchUser();\n  };\n  // -- Update the user object in memory only --\n  const updateUser = (updatedData: Partial<User>) => {\n    setUser(prev => prev ? { ...prev, ...updatedData } : null);\n  };\n  // -- Only ready if user is super admin or has org context --\n  const isOrgContextReady = !user || user.is_super_admin || !!user.organization_id;\n  console.log('[AuthProvider] Render phase:', {\n    loading,\n    hasUser: !!user,\n    userEmail: user?.email,\n    isOrgContextReady,\n    willRenderChildren: !loading,\n    timestamp: new Date().toISOString()\n  });\n  // Show loading spinner while auth state is being determined\n  if (loading) {\n    console.log('[AuthProvider] Rendering loading state');\n    // CSS for enhanced spinner animation with app branding\n    const spinnerStyles = `\n      @keyframes authSpinner {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n      .auth-spinner {\n        width: 40px;\n        height: 40px;\n        border: 4px solid #f3f3f3;\n        border-top: 4px solid #3498db;\n        border-radius: 50%;\n        animation: authSpinner 2s linear infinite;\n        margin-bottom: 15px;\n      }\n      @keyframes pulse {\n        0% { opacity: 0.6; }\n        50% { opacity: 1; }\n        100% { opacity: 0.6; }\n      }\n      .auth-pulse {\n        animation: pulse 2s ease-in-out infinite;\n      }\n    `;\n    return (\n      <>\n        <style dangerouslySetInnerHTML={{ __html: spinnerStyles }} />\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          flexDirection: 'column',\n          backgroundColor: '#f8fafc',\n          backgroundImage: 'linear-gradient(to bottom right, #f8fafc, #e2e8f0)'\n        }}>\n          <div style={{ \n            fontSize: '24px', \n            fontWeight: 600,\n            marginBottom: '10px',\n            color: '#1e293b',\n            textAlign: 'center'\n          }}>\n            TritIQ ERP\n          </div>\n          <div style={{ \n            fontSize: '14px', \n            marginBottom: '30px',\n            color: '#64748b',\n            textAlign: 'center'\n          }}>\n            Business Management System\n          </div>\n          <div className=\"auth-spinner\"></div>\n          <div style={{ \n            marginTop: '20px', \n            fontSize: '14px', \n            color: '#475569',\n            fontWeight: 500,\n            textAlign: 'center'\n          }} className=\"auth-pulse\">\n            Loading your workspace...\n          </div>\n          <div style={{ \n            marginTop: '5px', \n            fontSize: '12px', \n            color: '#94a3b8',\n            textAlign: 'center'\n          }}>\n            Establishing secure connection\n          </div>\n        </div>\n      </>\n    );\n  }\n  return (\n    <AuthContext.Provider value={{\n      user,\n      loading,\n      displayRole: user ? getDisplayRole(user.role, user.is_super_admin) : null,\n      login,\n      logout,\n      refreshUser,\n      updateUser,\n      isOrgContextReady\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\nexport const useAuth = (): any => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n};\nexport const useAuthWithOrgContext = (): any => {\n  const auth = useAuth();\n  return {\n    ...auth,\n    isReady: !auth.loading && auth.isOrgContextReady\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/CompanyContext.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'toast' is not defined.","line":33,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/context/CompanyContext.tsx\nimport React, { createContext, useContext } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { companyService } from '../services/authService';\nimport { useAuth } from './AuthContext';\nimport { useRouter } from 'next/router';\ninterface CompanyContextType {\n  isCompanySetupNeeded: boolean;\n  company: any;  // Replace with proper type\n  isLoading: boolean;\n  error: any;\n  refetch: () => void;\n}\nconst CompanyContext = createContext<CompanyContextType | undefined>(undefined);\nexport const CompanyProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const router = useRouter();\n  const { user, loading } = useAuth();\n  const enabled = !loading && !!user && !!localStorage.getItem('token') && router.pathname !== '/login';\n  const { data: company, isLoading, error, refetch } = useQuery({\n    queryKey: ['currentCompany'],\n    queryFn: companyService.getCurrentCompany,\n    enabled: enabled,  // Only fetch when authenticated and not on login\n    retry: false,  // Don't retry on failure\n    onError: (err: any) => {\n      if (err.message === 'No authentication token available' || err.status === 401) {\n        // Silent handling for no token\n        console.log('[CompanyContext] No auth token - skipping setup check silently');\n      } else if (err.status === 404 || err.isCompanySetupRequired) {\n        console.log('[CompanyContext] Company setup needed due to 404/missing company');\n      } else {\n        console.error('[CompanyContext] Unexpected error fetching company:', err);\n// toast functionality would be imported from react-toastify\n        toast.error(`Error fetching company details: ${err.message}`);\n      }\n    },\n  });\n  const isCompanySetupNeeded = enabled && !isLoading && company === null && !error;\n  return (\n    <CompanyContext.Provider value={{ isCompanySetupNeeded, company, isLoading, error, refetch }}>\n      {children}\n    </CompanyContext.Provider>\n  );\n};\nexport const useCompany = (): any => {\n  const context = useContext(CompanyContext);\n  if (undefined === context) {\n    throw new Error('useCompany must be used within a CompanyProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/ErrorContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":9,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"message"},"fix":{"range":[281,297],"text":""},"desc":"Remove unused variable 'message'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":9,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":79,"suggestions":[{"messageId":"removeVar","data":{"varName":"type"},"fix":{"range":[296,345],"text":""},"desc":"Remove unused variable 'type'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":10,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[370,380],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-use-before-define","severity":2,"message":"'hideError' was used before it was defined.","line":32,"column":7,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":32,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { Alert, Snackbar } from '@mui/material';\ninterface ErrorMessage {\n  id: string;\n  message: string;\n  type: 'error' | 'warning' | 'info' | 'success';\n}\ninterface ErrorContextType {\n  showError: (message: string, type?: 'error' | 'warning' | 'info' | 'success') => void;\n  hideError: (id: string) => void;\n}\nconst ErrorContext = createContext<ErrorContextType | undefined>(undefined);\nexport const useError = (): any => {\n  const context = useContext(ErrorContext);\n  if (!context) {\n    throw new Error('useError must be used within an ErrorProvider');\n  }\n  return context;\n};\ninterface ErrorProviderProps {\n  children: ReactNode;\n}\nexport const ErrorProvider: React.FC<ErrorProviderProps> = ({ children }) => {\n  const [errors, setErrors] = useState<ErrorMessage[]>([]);\n  const showError = (message: string, type: 'error' | 'warning' | 'info' | 'success' = 'error') => {\n    const id = Date.now().toString();\n    const newError: ErrorMessage = { id, message, type };\n    setErrors(prev => [...prev, newError]);\n    // Auto-hide after 6 seconds\n    setTimeout(() => {\n// hideError is defined later in this file\n      hideError(id);\n    }, 6000);\n  };\n  const hideError = (id: string) => {\n    setErrors(prev => prev.filter(error => error.id !== id));\n  };\n  return (\n    <ErrorContext.Provider value={{ showError, hideError }}>\n      {children}\n      {/* Render error snackbars */}\n      {errors.map((error, index) => (\n        <Snackbar\n          key={error.id}\n          open={true}\n          autoHideDuration={6000}\n          onClose={() => hideError(error.id)}\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n          sx={{ mt: index * 7 }} // Stack multiple errors\n        >\n          <Alert \n            onClose={() => hideError(error.id)} \n            severity={error.type}\n            sx={{ width: '100%' }}\n          >\n            {error.message}\n          </Alert>\n        </Snackbar>\n      ))}\n    </ErrorContext.Provider>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/context/VoucherContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":6,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[247,259],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":7,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[288,299],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updatedVoucher' is defined but never used.","line":7,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"updatedVoucher"},"fix":{"range":[298,319],"text":""},"desc":"Remove unused variable 'updatedVoucher'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/context/VoucherContext.tsx\nimport React, { createContext, useState, ReactNode, useContext } from 'react';\ninterface VoucherContextType {\n  vouchers: any[];\n  setVouchers: React.Dispatch<React.SetStateAction<any[]>>;\n  addVoucher: (voucher: any) => void;\n  updateVoucher: (id: number, updatedVoucher: any) => void;\n}\nconst VoucherContext = createContext<VoucherContextType | undefined>(undefined);\nexport const VoucherProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [vouchers, setVouchers] = useState<any[]>([]);\n  const addVoucher = (voucher: any) => {\n    setVouchers((prev) => [...prev, voucher]);\n  };\n  const updateVoucher = (id: number, updatedVoucher: any) => {\n    setVouchers((prev) =>\n      prev.map((v) => (v.id === id ? { ...v, ...updatedVoucher } : v))\n    );\n  };\n  const value = {\n    vouchers,\n    setVouchers,\n    addVoucher,\n    updateVoucher\n  };\n  return (\n    <VoucherContext.Provider value={value}>\n      {children}\n    </VoucherContext.Provider>\n  );\n};\nexport const useVoucherContext = (): VoucherContextType => {\n  const context = useContext(VoucherContext);\n  if (!context) {\n    throw new Error('useVoucherContext must be used within a VoucherProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useEntity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/usePincodeLookup.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'pincode' is defined but never used.","line":9,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"pincode"},"fix":{"range":[193,208],"text":""},"desc":"Remove unused variable 'pincode'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState} from 'react';\nimport axios from 'axios';\ninterface PincodeData {\n  city: string;\n  state: string;\n  state_code: string;\n}\ninterface UsePincodeLookupReturn {\n  lookupPincode: (pincode: string) => Promise<void>;\n  pincodeData: PincodeData | null;\n  loading: boolean;\n  error: string | null;\n  clearData: () => void;\n}\n// Session-based cache for pincode lookups\nconst pincodeCache = new Map<string, PincodeData>();\n// Retry utility with exponential backoff\nconst sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\nconst retryWithBackoff = async <T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> => {\n  let lastError: Error;\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error: any) {\n      lastError = error;\n      // Don't retry for client errors (4xx) or if it's the last attempt\n      if (error.response?.status >= 400 && error.response?.status < 500) {\n        throw error;\n      }\n      if (attempt === maxRetries) {\n        throw error;\n      }\n      // Exponential backoff: 1s, 2s, 4s\n      const delay = baseDelay * Math.pow(2, attempt);\n      await sleep(delay);\n    }\n  }\n  throw lastError!;\n};\nexport const usePincodeLookup = (): UsePincodeLookupReturn => {\n  const [pincodeData, setPincodeData] = useState<PincodeData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const lookupPincode = async (pincode: string): Promise<void> => {\n    // Validate pincode format\n    if (!pincode || !/^\\d{6}$/.test(pincode)) {\n      setError('Please enter a valid 6-digit PIN code');\n      return;\n    }\n    // Check cache first\n    const cachedData = pincodeCache.get(pincode);\n    if (cachedData) {\n      setPincodeData(cachedData);\n      setError(null);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      // Use retry logic for better reliability\n      const response = await retryWithBackoff(\n        () => axios.get(`/api/v1/pincode/lookup/${pincode}`),\n        3, // 3 retries\n        1000 // 1 second base delay\n      );\n      const data = response.data;\n      setPincodeData(data);\n      // Cache successful lookup for the session\n      pincodeCache.set(pincode, data);\n    } catch (err: any) {\n      if (err.response?.status === 404) {\n        setError('PIN code not found. Please enter city and state manually.');\n      } else if (err.response?.status === 503) {\n        setError('PIN code lookup service is currently unavailable. Please try again later or enter details manually.');\n      } else {\n        setError('Failed to lookup PIN code. Please enter details manually.');\n      }\n      setPincodeData(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const clearData = () => {\n    setPincodeData(null);\n    setError(null);\n    setLoading(false);\n  };\n  return {\n    lookupPincode,\n    pincodeData,\n    loading,\n    error,\n    clearData\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useStickyNotes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useUIConfig.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":10,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[296,308],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":11,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[337,349],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":12,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[379,391],"text":""},"desc":"Remove unused variable 'path'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":13,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"path"},"fix":{"range":[426,438],"text":""},"desc":"Remove unused variable 'path'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {useState} from 'react';\nimport uiConfig from '../config/ui-config.json';\ninterface UIConfig {\n  tooltips: Record<string, any>;\n  help_text: Record<string, any>;\n  error_messages: Record<string, any>;\n  success_messages: Record<string, any>;\n}\ninterface UseUIConfigReturn {\n  getTooltip: (path: string) => string;\n  getHelpText: (path: string) => any;\n  getErrorMessage: (path: string) => string;\n  getSuccessMessage: (path: string) => string;\n  config: UIConfig;\n}\n/**\n * Hook to access centralized UI configuration including tooltips, help text, and messages\n * \n * @example\n * const { getTooltip, getHelpText } = useUIConfig();\n * const tooltip = getTooltip('masters.products.name');\n * const helpText = getHelpText('vouchers.pdf_extraction');\n */\nexport const useUIConfig = (): UseUIConfigReturn => {\n  const [config] = useState<UIConfig>(uiConfig);\n  const getNestedValue = (obj: any, path: string): any => {\n    return path.split('.').reduce((current, key) => {\n      return current && current[key] !== undefined ? current[key] : null;\n    }, obj);\n  };\n  const getTooltip = (path: string): string => {\n    const tooltip = getNestedValue(config.tooltips, path);\n    return tooltip || '';\n  };\n  const getHelpText = (path: string): any => {\n    const helpText = getNestedValue(config.help_text, path);\n    return helpText || null;\n  };\n  const getErrorMessage = (path: string): string => {\n    const errorMsg = getNestedValue(config.error_messages, path);\n    return errorMsg || 'An error occurred';\n  };\n  const getSuccessMessage = (path: string): string => {\n    const successMsg = getNestedValue(config.success_messages, path);\n    return successMsg || 'Operation completed successfully';\n  };\n  return {\n    getTooltip,\n    getHelpText,\n    getErrorMessage,\n    getSuccessMessage,\n    config\n  };\n};\nexport default useUIConfig;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useVoucherNumbering.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'name' is defined but never used.","line":8,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"name"},"fix":{"range":[265,278],"text":""},"desc":"Remove unused variable 'name'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":8,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"value"},"fix":{"range":[277,289],"text":""},"desc":"Remove unused variable 'value'."}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":16,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":16,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Voucher numbering utilities and hooks\nimport { useQuery } from '@tanstack/react-query';\nimport { useEffect } from 'react';\nimport api from '../lib/api';\ninterface UseVoucherNumberingProps {\n  apiEndpoint: string;\n  mode: 'create' | 'edit' | 'view';\n  setValue: (name: string, value: any) => void;\n  voucherData?: any;\n}\nexport const useVoucherNumbering = ({ \n  apiEndpoint, \n  mode, \n  setValue, \n  voucherData \n}: UseVoucherNumberingProps) => {\n  // Fetch next voucher number for create mode\n  const { data: nextVoucherNumber, refetch: refetchNextNumber } = useQuery({\n    queryKey: [`next${apiEndpoint}Number`],\n    queryFn: () => api.get(`/${apiEndpoint}/next-number`).then(res => res.data),\n    enabled: mode === 'create',\n  });\n  // Auto-set voucher number based on mode\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (voucherData && voucherData.voucher_number) {\n      setValue('voucher_number', voucherData.voucher_number);\n    }\n  }, [mode, nextVoucherNumber, voucherData, setValue]);\n  // Return refetch function for post-save increment\n  const refreshVoucherNumber = async () => {\n    if (mode === 'create') {\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n      return newNextNumber;\n    }\n  };\n  return {\n    nextVoucherNumber,\n    refreshVoucherNumber\n  };\n};\n// Get API endpoint from voucher config\nexport const getVoucherApiEndpoint = (voucherType: string): string => {\n  const endpointMap: Record<string, string> = {\n    'quotation': 'quotations',\n    'proforma-invoice': 'proforma-invoices',\n    'sales-order': 'sales-orders',\n    'sales-voucher': 'sales-vouchers',\n    'delivery-challan': 'delivery-challans',\n    'sales-return': 'sales-returns',\n    'purchase-order': 'purchase-orders',\n    'grn': 'goods-receipt-notes',\n    'purchase-voucher': 'purchase-vouchers',\n    'purchase-return': 'purchase-returns',\n    'payment-voucher': 'payment-vouchers',\n    'receipt-voucher': 'receipt-vouchers',\n    'journal-voucher': 'journal-vouchers',\n    'contra-voucher': 'contra-vouchers',\n    'credit-note': 'credit-notes',\n    'debit-note': 'debit-notes',\n    'non-sales-credit-note': 'non-sales-credit-notes'\n  };\n  return endpointMap[voucherType] || voucherType;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useVoucherPage.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: ',' expected.","line":519,"column":50}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n// src/hooks/useVoucherPage.ts\n// Enhanced comprehensive hook for voucher page logic with comprehensive overhaul features\nimport { useState, useCallback, useEffect, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport { useForm, useFieldArray, useWatch } from 'react-hook-form';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { voucherService } from '../services/vouchersService';\nimport { getVendors, getProducts, getCustomers, getEmployees } from '../services/masterService';\nimport { useAuth } from '../context/AuthContext';\nimport { \n  calculateVoucherTotals, \n  getDefaultVoucherValues, \n  numberToWords,\n  voucherListUtils,\n  enhancedRateUtils,\n  VOUCHER_PAGINATION_DEFAULTS\n} from '../utils/voucherUtils';\nimport { generateVoucherPDF, getVoucherPdfConfig, VoucherPdfData } from '../utils/pdfUtils';\nimport { VoucherPageConfig } from '../types/voucher.types';\nimport api from '../lib/api';  // Direct import for list fetch\nexport const useVoucherPage = (config: VoucherPageConfig) => {\n  const router = useRouter();\n  const { id, mode: queryMode } = router.query;\n  const { isOrgContextReady, company } = useAuth();  // Get company from context\n  const queryClient = useQueryClient();\n  console.log('[useVoucherPage] Enhanced hook initialized for:', config.voucherType);\n  console.log('[useVoucherPage] config.endpoint:', config.endpoint);\n  console.log('[useVoucherPage] isOrgContextReady:', isOrgContextReady);\n  const [mode, setMode] = useState<'create' | 'edit' | 'view'>((queryMode as 'create' | 'edit' | 'view') || 'create');\n  const [selectedId, setSelectedId] = useState<number | null>(id ? Number(id) : null);\n  // Modal states\n  const [showAddVendorModal, setShowAddVendorModal] = useState(false);\n  const [showAddCustomerModal, setShowAddCustomerModal] = useState(false);\n  const [showAddProductModal, setShowAddProductModal] = useState(false);\n  const [showShippingModal, setShowShippingModal] = useState(false);\n  const [showFullModal, setShowFullModal] = useState(false);\n  // Loading states\n  const [addVendorLoading, setAddVendorLoading] = useState(false);\n  const [addCustomerLoading, setAddCustomerLoading] = useState(false);\n  const [addProductLoading, setAddProductLoading] = useState(false);\n  const [addShippingLoading, setAddShippingLoading] = useState(false);\n  const [addingItemIndex, setAddingItemIndex] = useState(-1);\n  // UI states\n  const [contextMenu, setContextMenu] = useState<{ mouseX: number; mouseY: number; voucher: any } | null>(null);\n  const [useDifferentShipping, setUseDifferentShipping] = useState(false);\n  // Enhanced pagination and filtering states\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(VOUCHER_PAGINATION_DEFAULTS.pageSize);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n  const [filteredVouchers, setFilteredVouchers] = useState<any[]>([]);\n  // Reference document states\n  const [selectedReferenceType, setSelectedReferenceType] = useState<string | null>(null);\n  const [selectedReferenceId, setSelectedReferenceId] = useState<number | null>(null);\n  const [referenceDocument, setReferenceDocument] = useState<any>(null);\n  // Enhanced form management with reference support\n  const defaultValues = useMemo(() => {\n    const baseValues = {\n      voucher_number: '',\n      date: new Date().toISOString().slice(0, 10),\n      reference: '',\n      notes: '',\n      // Reference document fields\n      reference_type: '',\n      reference_id: null as number | null,\n      reference_number: '',\n    };\n    if (config.hasItems === false) {\n      // Financial vouchers - use financial defaults\n      return {\n        ...baseValues,\n        total_amount: 0,\n        from_account: '',\n        to_account: '',\n        payment_method: '',\n        receipt_method: '',\n        name_id: null as number | null,\n        name_type: '' as 'Vendor' | 'Customer'\n      };\n    } else {\n      // Vouchers with items - use standard defaults with enhanced rate formatting\n      const itemDefaults = getDefaultVoucherValues(config.entityType === 'purchase' ? 'purchase' : 'sales');\n      return {\n        ...baseValues,\n        ...itemDefaults,\n        items: [{\n          ...itemDefaults.items[0],\n          unit_price: 0.00, // Ensure 2 decimal places\n          original_unit_price: 0.00,\n          discount_amount: 0.00,\n          taxable_amount: 0.00,\n          cgst_amount: 0.00,\n          sgst_amount: 0.00,\n          igst_amount: 0.00,\n          total_amount: 0.00\n        }]\n      };\n    }\n  }, [config.entityType, config.hasItems]);\n  const { control, handleSubmit, reset, setValue, watch, formState: { errors } } = useForm<any>({\n    defaultValues\n  });\n  // Always create field array and watch, but use conditionally\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'items'\n  });\n  const itemsWatch = useWatch({ control, name: 'items' });\n  const { data: vendorList } = useQuery({\n    queryKey: ['vendors'],\n    queryFn: getVendors,\n    enabled: isOrgContextReady && (config.entityType === 'purchase' || config.entityType === 'financial'),\n  });\n  const { data: customerList } = useQuery({\n    queryKey: ['customers'],\n    queryFn: getCustomers,\n    enabled: isOrgContextReady && (config.entityType === 'sales' || config.entityType === 'financial'),\n  });\n  // Extract isIntrastate as separate memo for UI usage\n  const isIntrastate = useMemo(() => {\n    let isIntra = true;\n    try {\n      const selectedEntityId = watch('customer_id') || watch('vendor_id');\n      let selectedEntity = null;\n      if (config.entityType === 'sales' && customerList && selectedEntityId) {\n        selectedEntity = customerList.find((c: any) => c.id === selectedEntityId);\n      } else if (config.entityType === 'purchase' && vendorList && selectedEntityId) {\n        selectedEntity = vendorList.find((v: any) => v.id === selectedEntityId);\n      }\n      if (selectedEntity) {\n        const companyStateCode = company?.state_code;\n        if (!companyStateCode) {\n          throw new Error('Company state code is not available.');\n        }\n        const entityStateCode = selectedEntity.state_code || selectedEntity.gst_number?.slice(0, 2);\n        if (!entityStateCode) {\n          throw new Error('Entity state code or GST number is not available.');\n        }\n        isIntra = entityStateCode === companyStateCode;\n      }\n    } catch (error) {\n      console.error('Error determining transaction state:', error);\n      throw error; // Re-throw to propagate the error\n    }\n    return isIntra;\n  }, [watch('customer_id'), watch('vendor_id'), config.entityType, customerList, vendorList, company?.state_code]);\n  // Enhanced computed values using the extracted isIntrastate\n  const { computedItems, totalAmount, totalSubtotal, totalGst, totalCgst, totalSgst, totalIgst } = useMemo(() => {\n    if (config.hasItems === false || !itemsWatch) {\n      return {\n        computedItems: [],\n        totalAmount: watch('total_amount') || 0,\n        totalSubtotal: 0,\n        totalGst: 0,\n        totalCgst: 0,\n        totalSgst: 0,\n        totalIgst: 0,\n      };\n    }\n    // Ensure all rates are properly formatted\n    const formattedItems = itemsWatch.map((item: any) => ({\n      ...item,\n      unit_price: enhancedRateUtils.parseRate(String(item.unit_price || 0))\n    }));\n    return calculateVoucherTotals(formattedItems, isIntrastate);\n  }, [itemsWatch, config.hasItems, watch, isIntrastate]);\n  // Enhanced queries with pagination and sorting\n  const { data: voucherList, isLoading: isLoadingList, refetch: refetchVoucherList } = useQuery({\n    queryKey: [config.voucherType, currentPage, pageSize],\n    queryFn: () => voucherService.getVouchers(config.voucherType, { \n      skip: (currentPage - 1) * pageSize, \n      limit: pageSize,\n      sort: 'desc',\n      sortBy: 'created_at'\n    }),\n    enabled: isOrgContextReady\n  });\n  // Handle data sorting when vouchers data changes\n  useEffect(() => {\n    if (voucherList && Array.isArray(voucherList)) {\n      console.log(`[useVoucherPage] Successfully fetched vouchers for ${config.voucherType}:`, voucherList);\n      const sorted = voucherListUtils.sortLatestFirst(voucherList);\n      setFilteredVouchers(sorted);\n    }\n  }, [voucherList, config.voucherType]);\n  // Handle error logging\n  useEffect(() => {\n    if (isLoadingList === false && !voucherList) {\n      console.error(`[useVoucherPage] Error fetching vouchers for ${config.voucherType}`);\n    }\n  }, [isLoadingList, voucherList, config.voucherType]);\n  const { data: employeeList } = useQuery({\n    queryKey: ['employees'],\n    queryFn: getEmployees,\n    enabled: isOrgContextReady && config.entityType === 'financial',\n  });\n  const { data: productList } = useQuery({\n    queryKey: ['products'],\n    queryFn: getProducts,\n    enabled: isOrgContextReady && config.hasItems !== false,\n  });\n  const { data: voucherData, isLoading: isFetching } = useQuery({\n    queryKey: [config.voucherType, selectedId],\n    queryFn: () => voucherService.getVoucherById(config.apiEndpoint || config.voucherType, selectedId!),\n    enabled: !!selectedId && isOrgContextReady && (mode === 'view' || mode === 'edit')\n  });\n  const { data: nextVoucherNumber, isLoading: isNextNumberLoading, refetch: refetchNextNumber } = useQuery({\n    queryKey: [`next${config.voucherType}Number`],\n    queryFn: () => voucherService.getNextVoucherNumber(config.nextNumberEndpoint),\n    enabled: mode === 'create' && isOrgContextReady,\n  });\n  // Enhanced mutations with auto-refresh and pagination support\n  const createMutation = useMutation({\n    mutationFn: (data: any) => voucherService.createVoucher(config.apiEndpoint || config.voucherType, data),\n    onSuccess: async (newVoucher) => {\n      console.log('[useVoucherPage] Voucher created successfully:', newVoucher);\n      // Optimistically update the voucher list by prepending the new voucher\n      queryClient.setQueryData([config.voucherType, currentPage, pageSize], (oldData: any) => {\n        if (!oldData) {return [newVoucher];}\n        return [newVoucher, ...oldData];\n      });\n      queryClient.invalidateQueries({ queryKey: [config.voucherType] });\n      await refetchVoucherList();  // Explicit refetch after invalidation\n      setMode('create');\n      setSelectedId(null);\n      setCurrentPage(1); // Reset to first page to see new voucher\n      reset(defaultValues);\n      const { data: newNextNumber } = await refetchNextNumber();\n      setValue('voucher_number', newNextNumber);\n    },\n    onError: (error: any) => {\n      console.error('[useVoucherPage] Error creating voucher:', error);\n      alert(error.response?.data?.detail || 'Failed to create voucher');\n    }\n  });\n  const updateMutation = useMutation({\n    mutationFn: (data: any) => voucherService.updateVoucher(config.apiEndpoint || config.voucherType, selectedId!, data),\n    onSuccess: () => {\n      console.log('[useVoucherPage] Voucher updated successfully');\n      queryClient.invalidateQueries({ queryKey: [config.voucherType] });\n      queryClient.invalidateQueries({ queryKey: [config.voucherType, selectedId] });\n      refetchVoucherList();  // Explicit refetch after invalidation\n    },\n    onError: (error: any) => {\n      console.error('[useVoucherPage] Error updating voucher:', error);\n      alert(error.response?.data?.detail || 'Failed to update voucher');\n    }\n  });\n  // Enhanced event handlers\n  const handleCreate = () => {\n    setSelectedId(null);\n    setMode('create');\n    setReferenceDocument(null); // Clear reference\n    router.push({ query: { mode: 'create' } }, undefined, { shallow: true });\n    reset(defaultValues);\n  };\n  const handleEdit = (voucherId: number) => {\n    setSelectedId(voucherId);\n    setMode('edit');\n    router.push({ query: { id: voucherId, mode: 'edit' } }, undefined, { shallow: true });\n  };\n  const handleView = (voucherId: number) => {\n    setSelectedId(voucherId);\n    setMode('view');\n    router.push({ query: { id: voucherId, mode: 'view' } }, undefined, { shallow: true });\n  };\n  const handleSubmitForm = (data: any) => {\n    // Enhanced data preparation with reference support\n    if (config.hasItems !== false) {\n      data.items = computedItems;\n      data.total_amount = totalAmount;\n    }\n    // Add reference document data if selected\n    if (referenceDocument) {\n      data.reference_type = selectedReferenceType;\n      data.reference_id = selectedReferenceId;\n      data.reference_number = referenceDocument.voucher_number || referenceDocument.number;\n    }\n    if (mode === 'create') {\n      createMutation.mutate(data);\n    } else if (mode === 'edit') {\n      updateMutation.mutate(data);\n    }\n  };\n  const handleContextMenu = (event: React.MouseEvent, voucher: any) => {\n    event.preventDefault();\n    setContextMenu({\n      mouseX: event.clientX + 2,\n      mouseY: event.clientY - 6,\n      voucher,\n    });\n  };\n  const handleCloseContextMenu = () => {\n    setContextMenu(null);\n  };\n  // Enhanced pagination handlers\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n  // Enhanced reference document handling\n  const handleReferenceSelected = (referenceData: any) => {\n    setReferenceDocument(referenceData);\n    setSelectedReferenceType(referenceData.type);\n    setSelectedReferenceId(referenceData.id);\n    // Auto-populate fields from reference document if applicable\n    if (referenceData.items && config.hasItems) {\n      // Auto-populate items from reference document\n      const referenceItems = referenceData.items.map((item: any) => ({\n        ...item,\n        quantity: item.quantity || 0,\n        unit_price: enhancedRateUtils.parseRate(String(item.unit_price || 0))\n      }));\n      // Clear existing items and add reference items\n      fields.forEach((_, index) => remove(index));\n      referenceItems.forEach((item: any) => append(item));\n    }\n    // Auto-populate customer/vendor if applicable\n    if (referenceData.customer_id && config.entityType === 'sales') {\n      setValue('customer_id', referenceData.customer_id);\n    }\n    if (referenceData.vendor_id && config.entityType === 'purchase') {\n      setValue('vendor_id', referenceData.vendor_id);\n    }\n  };\n  // Enhanced search and filter functionality with pagination\n  const sortedVouchers = useMemo(() => {\n    if (!Array.isArray(voucherList)) {\n      console.warn('[useVoucherPage] voucherList is not an array:', voucherList);\n      return [];\n    }\n    return voucherListUtils.sortLatestFirst(voucherList);\n  }, [voucherList]);\n  const latestVouchers = useMemo(() => \n    voucherListUtils.getLatestVouchers(sortedVouchers, 7), \n    [sortedVouchers]\n  );\n  // Enhanced pagination data\n  const paginationData = useMemo(() => {\n    const totalVouchers = sortedVouchers.length;\n    return voucherListUtils.paginate(sortedVouchers, currentPage, pageSize);\n  }, [sortedVouchers, currentPage, pageSize]);\n  const handleSearch = () => {\n    if (fromDate && toDate && new Date(toDate) < new Date(fromDate)) {\n      alert('To date cannot be earlier than from date');\n      return;\n    }\n    const filtered = sortedVouchers.filter(v => {\n      const lowerSearch = searchTerm.toLowerCase();\n      // Search in voucher number\n      let matchesSearch = v.voucher_number.toLowerCase().includes(lowerSearch);\n      // Search in entity name based on voucher type\n      if (config.entityType === 'purchase' && v.vendor?.name) {\n        matchesSearch = matchesSearch || v.vendor.name.toLowerCase().includes(lowerSearch);\n      } else if (config.entityType === 'sales' && v.customer?.name) {\n        matchesSearch = matchesSearch || v.customer.name.toLowerCase().includes(lowerSearch);\n      }\n      // Date filtering\n      let matchesDate = true;\n      if (fromDate) {\n        matchesDate = matchesDate && new Date(v.date) >= new Date(fromDate);\n      }\n      if (toDate) {\n        matchesDate = matchesDate && new Date(v.date) <= new Date(toDate);\n      }\n      return (!searchTerm || matchesSearch) && matchesDate;\n    });\n    setFilteredVouchers(filtered);\n    setCurrentPage(1); // Reset to first page when filtering\n  };\n  // Modal handlers (missing from original)\n  const handleModalOpen = useCallback(() => {\n    setShowFullModal(true);\n  }, []);\n  const handleModalClose = useCallback(() => {\n    setShowFullModal(false);\n  }, []);\n  // Enhanced PDF generation with proper config\n  const handleGeneratePDF = useCallback(async (voucher?: any) => {\n    const pdfConfig = getVoucherPdfConfig(config.voucherType);\n    const voucherToUse = voucher || voucherData || watch();\n    const pdfData: VoucherPdfData = {\n      voucher_number: voucherToUse.voucher_number,\n      date: voucherToUse.date,\n      reference: voucherToUse.reference,\n      notes: voucherToUse.notes,\n      total_amount: totalAmount,\n      items: computedItems,\n      payment_terms: voucherToUse.payment_terms,\n      from_account: voucherToUse.from_account,\n      to_account: voucherToUse.to_account,\n      ...voucherToUse\n    };\n    await generateVoucherPDF(pdfData, pdfConfig);\n  }, [config.voucherType, watch, voucherData, totalAmount, computedItems]);\n  // Delete functionality\n  const handleDelete = useCallback(async (voucher: any) => {\n    if (window.confirm(`Are you sure you want to delete voucher ${voucher.voucher_number}?`)) {\n      try {\n        await voucherService.deleteVoucher(config.apiEndpoint || config.voucherType, voucher.id);\n        queryClient.invalidateQueries({ queryKey: [config.voucherType] });\n        refetchVoucherList();  // Explicit refetch after deletion\n        console.log('Voucher deleted successfully');\n      } catch (error: any) {\n        console.error('Error deleting voucher:', error);\n        alert(error.response?.data?.detail || 'Failed to delete voucher');\n      }\n    }\n  }, [config.voucherType, config.apiEndpoint, queryClient, refetchVoucherList]);\n  // Number to words utility\n  const getAmountInWords = useCallback((amount: number) => {\n    return numberToWords(amount);\n  }, []);\n  // Master data refresh functionality\n  const refreshMasterData = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['vendors'] });\n    queryClient.invalidateQueries({ queryKey: ['customers'] });\n    queryClient.invalidateQueries({ queryKey: ['products'] });\n  }, [queryClient]);\n  // Import missing service (should be added to imports at top of file)\n  const masterDataService = {\n    createCustomer: (data: any) => api.post('/customers', data),\n    createVendor: (data: any) => api.post('/vendors', data),\n    createProduct: (data: any) => api.post('/products', data)\n  };\n  // Customer add handler with auto-selection\n  const handleAddCustomer = useCallback(async (customerData: any) => {\n    setAddCustomerLoading(true);\n    try {\n      const response = await masterDataService.createCustomer(customerData);\n      const newCustomer = response.data;\n      // Update query data immediately\n      queryClient.setQueryData(['customers'], (old: any) => old ? [...old, newCustomer] : [newCustomer]);\n      queryClient.invalidateQueries({ queryKey: ['customers'] });\n      // Auto-select the new customer (conditional on entity type)\n      if (config.entityType === 'sales') {\n        setValue('customer_id', newCustomer.id);\n      }\n      setShowAddCustomerModal(false);\n      alert('Customer added successfully!');\n    } catch (error: any) {\n      console.error('Error adding customer:', error);\n      let errorMsg = 'Error adding customer';\n      if (error.response?.data?.detail) {\n        const detail = error.response.data.detail;\n        if (Array.isArray(detail)) {\n          errorMsg = detail.map((err: any) => err.msg || err).join(', ');\n        } else if (typeof detail === 'string') {\n          errorMsg = detail;\n        }\n      }\n      alert(errorMsg);\n    } finally {\n      setAddCustomerLoading(false);\n    }\n  }, [queryClient, setValue, setAddCustomerLoading, setShowAddCustomerModal, config.entityType]);\n  // Vendor add handler with auto-selection\n  const handleAddVendor = useCallback(async (vendorData: any) => {\n    setAddVendorLoading(true);\n    try {\n      const response = await masterDataService.createVendor(vendorData);\n      const newVendor = response.data;\n      // Update query data immediately\n      queryClient.setQueryData(['vendors'], (old: any) => old ? [...old, newVendor] : [newVendor]);\n      queryClient.invalidateQueries({ queryKey: ['vendors'] });\n      // Auto-select the new vendor (conditional on entity type)  \n      if (config.entityType === 'purchase') {\n        setValue('vendor_id', newVendor.id);\n      }\n      setShowAddVendorModal(false);\n      alert('Vendor added successfully!');\n    } catch (error: any) {\n      console.error('Error adding vendor:', error);\n      let errorMsg = 'Error adding vendor';\n      if (error.response?.data?.detail) {\n        const detail = error.response.data.detail;\n        if (Array.isArray(detail)) {\n          errorMsg = detail.map((err: any) => err.msg || err).join(', ');\n        } else if (typeof detail === 'string') {\n          errorMsg = detail;\n        }\n      }\n      alert(errorMsg);\n    } finally {\n      setAddVendorLoading(false);\n    }\n  }, [queryClient, setValue, setAddVendorLoading, setShowAddVendorModal, config.entityType]);\n  // Product add handler  \n  const handleAddProduct = useCallback(async (productData: any) => {\n    setAddProductLoading(true);\n    try {\n      const response = await masterDataService.createProduct(productData);\n      const newProduct = response.data;\n      // Update query data immediately\n      queryClient.setQueryData(['products'], (old: any) => old ? [...old, newProduct] : [newProduct]);\n      queryClient.invalidateQueries({ queryKey: ['products'] });\n      setShowAddProductModal(false);\n      alert('Product added successfully!');\n    } catch (error: any) {\n      console.error('Error adding product:', error);\n      alert(error.response?.data?.detail || 'Error adding product');\n    } finally {\n      setAddProductLoading(false);\n    }\n  }, [queryClient, setAddProductLoading, setShowAddProductModal]);\n  // Shipping address add handler\n    setAddShippingLoading(true);\n    try {\n      // Add shipping logic here\n      setShowShippingModal(false);\n      alert('Shipping address added successfully!');\n    } catch (error: any) {\n      console.error('Error adding shipping address:', error);\n      alert('Error adding shipping address');\n    } finally {\n      setAddShippingLoading(false);\n    }\n  }, [setAddShippingLoading, setShowShippingModal]);\n  // Effects - Enhanced data loading to fix bug where vouchers don't load saved data properly\n  useEffect(() => {\n    if (mode === 'create' && nextVoucherNumber) {\n      setValue('voucher_number', nextVoucherNumber);\n    } else if (voucherData) {\n      console.log('[useVoucherPage] Loading voucher data:', voucherData);\n      // Reset with voucher data\n      reset(voucherData);\n      // Ensure items array is properly loaded for vouchers with items\n      if (config.hasItems !== false && voucherData.items && Array.isArray(voucherData.items)) {\n        // Clear existing items first\n        while (fields.length > 0) {\n          remove(0);\n        }\n        // Add items from voucher data\n        voucherData.items.forEach((item: any) => {\n          append({\n            ...item,\n            // Ensure proper field mapping for UI\n            original_unit_price: item.unit_price || 0,\n            product_id: item.product_id,\n            product_name: item.product_name || item.product?.product_name || '',\n            unit: item.unit || item.product?.unit || '',\n            current_stock: item.current_stock || 0,\n            reorder_level: item.reorder_level || 0,\n          });\n        });\n        console.log('[useVoucherPage] Loaded items:', voucherData.items.length);\n      }\n    } else if (mode === 'create') {\n      reset(defaultValues);\n    }\n  }, [voucherData, mode, reset, nextVoucherNumber, setValue, defaultValues, config.hasItems, fields.length, remove, append]);\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'refreshMasterData') {\n        refreshMasterData();\n        localStorage.removeItem('refreshMasterData');\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [refreshMasterData]);\n  useEffect(() => {\n    if (mode === 'create' && isOrgContextReady) {\n      refetchNextNumber();\n    }\n  }, [mode, isOrgContextReady, refetchNextNumber]);\n  useEffect(() => {\n    console.log('Next Voucher Number:', nextVoucherNumber);\n    console.log('Is Next Number Loading:', isNextNumberLoading);\n    console.log('Is Org Context Ready:', isOrgContextReady);\n    console.log('Mode:', mode);\n  }, [nextVoucherNumber, isNextNumberLoading, isOrgContextReady, mode]);\n  // Loading state\n  const isLoading = isLoadingList || isFetching || !isOrgContextReady;\n  // Refetch voucher list when org context becomes ready\n  useEffect(() => {\n    if (isOrgContextReady) {\n      console.log('[useVoucherPage] Org context ready - refetching voucher list');\n      refetchVoucherList();\n    }\n  }, [isOrgContextReady, refetchVoucherList]);\n  // Refetch list after create/update - Enhanced for immediate refresh\n  useEffect(() => {\n    if (createMutation.isSuccess || updateMutation.isSuccess) {\n      // Immediate invalidation and refetch\n      queryClient.invalidateQueries({ queryKey: [config.voucherType] });\n      // Force immediate refetch\n      refetchVoucherList();\n      // Additional immediate refresh after short delay to ensure backend has processed\n      setTimeout(() => {\n        refetchVoucherList();\n      }, 500);\n    }\n  }, [createMutation.isSuccess, updateMutation.isSuccess, queryClient, config.voucherType, refetchVoucherList]);\n  return {\n    // Enhanced state\n    mode,\n    setMode,\n    selectedId,\n    isLoading,\n    showAddVendorModal,\n    setShowAddVendorModal,\n    showAddCustomerModal,\n    setShowAddCustomerModal,\n    showAddProductModal,\n    setShowAddProductModal,\n    showShippingModal,\n    setShowShippingModal,\n    showFullModal,\n    addVendorLoading,\n    setAddVendorLoading,\n    addCustomerLoading,\n    setAddCustomerLoading,\n    addProductLoading,\n    setAddProductLoading,\n    addShippingLoading,\n    setAddShippingLoading,\n    addingItemIndex,\n    setAddingItemIndex,\n    contextMenu,\n    selectedReferenceType,\n    setSelectedReferenceType,\n    selectedReferenceId,\n    setSelectedReferenceId,\n    useDifferentShipping,\n    setUseDifferentShipping,\n    searchTerm,\n    setSearchTerm,\n    fromDate,\n    setFromDate,\n    toDate,\n    setToDate,\n    filteredVouchers,\n    // Enhanced pagination\n    currentPage,\n    pageSize,\n    paginationData,\n    handlePageChange,\n    // Reference document handling\n    referenceDocument,\n    handleReferenceSelected,\n    // Form\n    control,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    errors,\n    fields,\n    append,\n    remove,\n    // Data\n    voucherList,\n    vendorList,\n    customerList,\n    employeeList,\n    productList,\n    voucherData,\n    nextVoucherNumber,\n    sortedVouchers,\n    latestVouchers,\n    // Computed\n    computedItems,\n    totalAmount,\n    totalSubtotal,\n    totalGst,\n    totalCgst,\n    totalSgst,\n    totalIgst,\n    isIntrastate,\n    // Mutations\n    createMutation,\n    updateMutation,\n    // Event handlers\n    handleCreate,\n    handleEdit,\n    handleView,\n    handleSubmitForm,\n    handleContextMenu,\n    handleCloseContextMenu,\n    handleSearch,\n    handleModalOpen,\n    handleModalClose,\n    handleGeneratePDF,\n    handleDelete,\n    handleAddCustomer,\n    handleAddVendor,\n    handleAddProduct,\n    handleAddShipping,\n    refreshMasterData,\n    getAmountInWords,\n    // Enhanced utilities\n    isViewMode: mode === 'view',\n    enhancedRateUtils,\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/hooks/useVouchers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/lib/api.ts","messages":[{"ruleId":"no-use-before-define","severity":2,"message":"'resetAuthReady' was used before it was defined.","line":47,"column":3,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":47,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Revised: frontend/src/lib/api.ts\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n// API base URL from environment\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000';\n// Token expiry handling with state preservation\nconst handleTokenExpiry = () => {\n  console.log('[API] Handling token expiry - preserving application state');\n  // Store current location for redirect after login\n  const currentPath = window.location.pathname;\n  const currentSearch = window.location.search;\n  const currentHash = window.location.hash;\n  const returnUrl = `${currentPath}${currentSearch}${currentHash}`;\n  // Store form data if available (attempt to preserve form state)\n  try {\n    const forms = document.querySelectorAll('form');\n    const formData: { [key: string]: any } = {};\n    forms.forEach((form, index) => {\n      const formDataObj = new FormData(form);\n      const formEntries: { [key: string]: any } = {};\n      for (const [key, value] of formDataObj.entries()) {\n        if (typeof value === 'string' && value.trim()) {\n          formEntries[key] = value;\n        }\n      }\n      if (Object.keys(formEntries).length > 0) {\n        formData[`form_${index}`] = formEntries;\n      }\n    });\n    if (Object.keys(formData).length > 0) {\n      sessionStorage.setItem('formDataBeforeExpiry', JSON.stringify(formData));\n      console.log('[API] Preserved form data before logout');\n    }\n  } catch (error) {\n    console.warn('[API] Could not preserve form data:', error);\n  }\n  // Store return URL for redirect after successful login\n  if (returnUrl !== '/' && !returnUrl.includes('/login')) {\n    sessionStorage.setItem('returnUrlAfterLogin', returnUrl);\n    console.log('[API] Stored return URL:', returnUrl);\n  }\n  // Clear auth data\n  localStorage.removeItem('token');\n  localStorage.removeItem('user_role');\n  localStorage.removeItem('is_super_admin');\n  // Reset auth ready state\n  resetAuthReady();\n  // Add a small delay to allow logging and toast to complete, then redirect to login\n  setTimeout(() => {\n    window.location.href = '/login';\n  }, 100);\n};\n// Auth state management for request queuing\nlet isAuthReady = false;\nlet authReadyPromise: Promise<void> | null = null;\nlet authReadyResolve: (() => void) | null = null;\n// Initialize auth ready promise\nconst initializeAuthPromise = () => {\n  if (!authReadyPromise) {\n    authReadyPromise = new Promise((resolve) => {\n      authReadyResolve = resolve;\n    });\n  }\n};\ninitializeAuthPromise();\n// Mark auth as ready (called from AuthContext)\nexport const markAuthReady = (): any => {\n  console.log('[API] Auth context marked as ready');\n  isAuthReady = true;\n  if (authReadyResolve) {\n    authReadyResolve();\n    authReadyResolve = null;\n  }\n};\n// Reset auth ready state (called on logout)\nexport const resetAuthReady = (): any => {\n  console.log('[API] Auth context reset');\n  isAuthReady = false;\n  initializeAuthPromise();\n};\n// Wait for auth to be ready for protected endpoints\nconst waitForAuthIfNeeded = async (config: any) => {\n  // Skip auth waiting for public endpoints\n  const publicEndpoints = ['/auth/login', '/auth/otp/', '/auth/admin/setup'];\n  const isPublicEndpoint = publicEndpoints.some(endpoint => config.url?.includes(endpoint));\n  if (isPublicEndpoint) {\n    console.log('[API] Public endpoint, skipping auth wait:', config.url);\n    return;\n  }\n  // Wait for auth context if not ready, with timeout to prevent deadlocks\n  if (!isAuthReady && authReadyPromise) {\n    console.log('[API] Waiting for auth context to be ready for:', config.url);\n    // Add timeout to prevent infinite waiting\n    const authTimeout = new Promise<void>((_, reject) => {\n      setTimeout(() => {\n        console.warn('[API] Auth wait timeout - proceeding without auth ready state');\n        reject(new Error('Auth wait timeout'));\n      }, 10000); // 10 second timeout\n    });\n    try {\n      await Promise.race([authReadyPromise, authTimeout]);\n      console.log('[API] Auth context ready, proceeding with request:', config.url);\n    } catch (error: any) {\n      console.warn('[API] Auth wait failed or timed out, proceeding anyway:', error?.message || error);\n      // Continue with request even if auth wait fails\n    }\n  }\n};\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n// Add token to requests - organization context derived from backend session\napi.interceptors.request.use(\n  async (config) => {\n    // Wait for auth context if needed before proceeding\n    await waitForAuthIfNeeded(config);\n    const token = localStorage.getItem('token');\n    // Debug logging for all requests\n    console.log(`[API] ${config.method?.toUpperCase()} ${config.url}`, {\n      hasToken: !!token,\n      authReady: isAuthReady,\n      timestamp: new Date().toISOString(),\n      note: 'Organization context derived from backend session'\n    });\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    // Log the full request URL for debugging 404 issues\n    const fullUrl = `${config.baseURL}${config.url}`;\n    console.log(`[API] Request URL: ${fullUrl}`, {\n      method: config.method?.toUpperCase(),\n      hasAuth: !!token,\n    });\n    return config;\n  },\n  (error) => {\n    console.error('[API] Request interceptor error:', error);\n    return Promise.reject(error);\n  }\n);\n// Handle token expiration and network errors with enhanced debugging and refresh\napi.interceptors.response.use(\n  (response) => {\n    // Log successful responses for protected endpoints\n    if (response.config.headers?.Authorization) {\n      console.log(`[API] Success ${response.config.method?.toUpperCase()} ${response.config.url}`, {\n        status: response.status,\n        hasData: !!response.data,\n        timestamp: new Date().toISOString()\n      });\n    }\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    const method = error.config?.method?.toUpperCase();\n    const url = error.config?.url;\n    const status = error.response?.status;\n    console.error(`[API] Error ${method} ${url}`, {\n      status,\n      error: error.response?.data,\n      timestamp: new Date().toISOString()\n    });\n    if ((status === 401 || status === 403) && !originalRequest._retry) {\n      if (originalRequest.headers?.Authorization) {\n        // Only handle as expired token if it had one\n        console.log(`[API] ${status} Auth error - attempting token refresh`);\n        originalRequest._retry = true;\n        try {\n          // Import authService here to avoid circular dependency\n          const { authService } = await import('../services/authService');\n          // Check if we have a refresh token\n          const refreshToken = localStorage.getItem('refresh_token');\n          if (!refreshToken) {\n            throw new Error('No refresh token available');\n          }\n          // Use authService's refresh method\n          const refreshData = await authService.refreshToken();\n          console.log('[API] Token refreshed successfully');\n          // Update original request with new token and retry\n          originalRequest.headers.Authorization = `Bearer ${refreshData.access_token}`;\n          return api(originalRequest);\n        } catch (refreshError) {\n          console.error('[API] Token refresh failed:', refreshError);\n          // Show specific error message if available before redirect\n          const errorDetail = error.response?.data?.detail;\n          if (errorDetail && typeof errorDetail === 'string') {\n            console.log(`[API] ${status} Error reason:`, errorDetail);\n            // Show toast notification with error reason before redirect\n            toast.error(`Session expired: ${errorDetail}`, {\n              position: \"top-right\",\n              autoClose: 3000,\n            });\n          } else {\n            toast.error('Session expired. Please login again.', {\n              position: \"top-right\",\n              autoClose: 3000,\n            });\n          }\n          // Store current location and form state before logout\n          handleTokenExpiry();\n        }\n      } else {\n        // No token: Just log and reject (don't refresh or reset auth)\n        console.log(`[API] ${status} Error - No token present, not refreshing`);\n        return Promise.reject(error);\n      }\n    } else if (status === 404 && url?.includes('/companies/current')) {\n      // Special handling for company missing scenario - DO NOT logout\n      console.log('[API] 404 on /companies/current - company setup required, not an auth error');\n      // Add a flag to indicate this is a company setup scenario\n      const enhancedError = {\n        ...error,\n        isCompanySetupRequired: true,\n        userMessage: 'Company setup required'\n      };\n      // Don't clear auth data or redirect - let the component handle company onboarding\n      return Promise.reject(enhancedError);\n    }\n    // Extract error message with proper handling for arrays and objects\n    let errorMessage = 'An unexpected error occurred';\n    const detail = error.response?.data?.detail;\n    const message = error.response?.data?.message;\n    if (typeof detail === 'string' && detail) {\n      errorMessage = detail;\n    } else if (typeof message === 'string' && message) {\n      errorMessage = message;\n    } else if (Array.isArray(detail) && detail.length > 0) {\n      // Handle Pydantic validation errors (array of objects)\n      const messages = detail.map(err => err.msg || `${err.loc?.join(' -> ')}: ${err.type}`).filter(Boolean);\n      errorMessage = messages.length > 0 ? messages.join(', ') : 'Validation error';\n    } else if (detail && typeof detail === 'object') {\n      // Handle object error details\n      errorMessage = detail.error || detail.message || JSON.stringify(detail);\n    } else if (error.message) {\n      errorMessage = error.message;\n    }\n    console.error('[API] Processed error message:', errorMessage);\n    return Promise.reject({\n      ...error,\n      userMessage: errorMessage,\n      status: status\n    });\n  }\n);\nexport default api;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/lib/excelUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":5,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":70}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/excelUtils.ts\nimport ExcelJS from 'exceljs';  // New library for creating/reading Excel files\nimport saveAs from 'file-saver';  // Library to handle file downloads in the browser\n// Function to export data (array of objects) to an Excel file\nexport const exportToExcel = async (data: any[], filename: string) => {\n  // Create a new Excel workbook\n  const workbook = new ExcelJS.Workbook();\n  // Add a worksheet to it\n  const worksheet = workbook.addWorksheet('Sheet1');\n  // If there's data, add headers (column names) as the first row\n  if (data.length > 0) {\n    worksheet.addRow(Object.keys(data[0]));  // e.g., ['id', 'name', 'price']\n    // Then add each row of data\n    data.forEach(item => {\n      worksheet.addRow(Object.values(item));  // e.g., [1, 'Product A', 10.99]\n    });\n  }\n  // Generate the Excel file as a buffer (binary data)\n  const buffer = await workbook.xlsx.writeBuffer();\n  // Create a Blob (file-like object) from the buffer\n  const blob = new Blob([buffer], { type: 'application/octet-stream' });\n  // Trigger download with the given filename\n  saveAs(blob, `${filename}.xlsx`);\n};\n// Function to import data from an uploaded Excel file\nexport const importFromExcel = async (file: File): Promise<any[]> => {\n  // Create a new workbook\n  const workbook = new ExcelJS.Workbook();\n  // Read the file's contents into a buffer\n  const buffer = await file.arrayBuffer();\n  // Load the buffer into the workbook\n  await workbook.xlsx.load(buffer);\n  // Get the first worksheet\n  const worksheet = workbook.getWorksheet(1);\n  const json: any[] = [];\n  if (!worksheet) {\n    throw new Error('No worksheet found in the Excel file');\n  }\n  // Get headers from the first row\n  const headers = worksheet.getRow(1).values as string[];\n  // Loop through each row (skip header row)\n  worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {\n    if (rowNumber > 1) {\n      const rowData: { [key: string]: any } = {};\n      // Loop through each cell in the row\n      row.eachCell({ includeEmpty: true }, (cell, colNumber) => {\n        if (headers[colNumber]) {\n          rowData[headers[colNumber]] = cell.value;  // Map cell value to header key\n        }\n      });\n      json.push(rowData);  // Add the row object to the result array\n    }\n  });\n  return json;  // Return array of objects (e.g., [{id:1, name:'Product A'}, ...])\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/lib/jwtUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/_app.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/_error.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ctx' is defined but never used.","line":20,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"ctx"},"fix":{"range":[460,480],"text":""},"desc":"Remove unused variable 'ctx'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Paper,\n  Alert\n} from '@mui/material';\nimport { Home, Refresh, ArrowBack } from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\nimport { NextPageContext } from 'next';\ninterface ErrorProps {\n  statusCode?: number;\n  hasGetInitialProps?: boolean;\n  err?: Error;\n}\ninterface ErrorPageComponent extends React.FC<ErrorProps> {\n  getInitialProps?: (ctx: NextPageContext) => Promise<ErrorProps> | ErrorProps;\n}\nconst ErrorPage: ErrorPageComponent = ({ statusCode, err }) => {\n  const router = useRouter();\n  const handleGoHome = () => {\n    router.push('/');\n  };\n  const handleRefresh = () => {\n    window.location.reload();\n  };\n  const handleGoBack = () => {\n    router.back();\n  };\n  return (\n    <Container maxWidth=\"md\" sx={{ mt: 8 }}>\n      <Paper sx={{ p: 4, textAlign: 'center' }}>\n        <Typography variant=\"h3\" color=\"error\" gutterBottom>\n          {statusCode ? `Error ${statusCode}` : 'Application Error'}\n        </Typography>\n        <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n          {statusCode === 404\n            ? 'The page you are looking for was not found.'\n            : statusCode === 500\n            ? 'An internal server error occurred.'\n            : 'An unexpected error occurred.'}\n        </Typography>\n        {err && process.env.NODE_ENV === 'development' && (\n          <Alert severity=\"error\" sx={{ mt: 2, mb: 2, textAlign: 'left' }}>\n            <Typography variant=\"body2\">\n              <strong>Debug Information:</strong><br />\n              {err.message}\n            </Typography>\n          </Alert>\n        )}\n        <Box sx={{ mt: 4, display: 'flex', gap: 2, justifyContent: 'center' }}>\n          <Button\n            variant=\"contained\"\n            startIcon={<Home />}\n            onClick={handleGoHome}\n          >\n            Go Home\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<ArrowBack />}\n            onClick={handleGoBack}\n          >\n            Go Back\n          </Button>\n          <Button\n            variant=\"outlined\"\n            startIcon={<Refresh />}\n            onClick={handleRefresh}\n          >\n            Refresh\n          </Button>\n        </Box>\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 3 }}>\n          If this problem persists, please contact support.\n        </Typography>\n      </Paper>\n    </Container>\n  );\n};\nErrorPage.getInitialProps = ({ res, err }: NextPageContext) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n  return { statusCode };\n};\nexport default ErrorPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/assets.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[115,126],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[382,392],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[392,407],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[407,424],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogActions"},"fix":{"range":[424,441],"text":""},"desc":"Remove unused variable 'DialogActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[441,454],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[454,469],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[469,483],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[483,493],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[493,505],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DeleteIcon' is defined but never used.","line":40,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"DeleteIcon"},"fix":{"range":[616,640],"text":""},"desc":"Remove unused variable 'DeleteIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useQueryClient' is defined but never used.","line":49,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"useQueryClient"},"fix":{"range":[902,918],"text":""},"desc":"Remove unused variable 'useQueryClient'."}]},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":258,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":258,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'setSelectedAsset' is not defined.","line":314,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":314,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":316,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":316,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'setSelectedAsset' is not defined.","line":327,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":327,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":329,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":329,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":351,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":351,"endColumn":41}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/assets.tsx\n// Asset Management page with comprehensive asset lifecycle management\nimport React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Card,\n  CardContent,\n  Tab,\n  Tabs,\n  Button,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  Tooltip,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Settings as SettingsIcon,\n  Build as BuildIcon,\n  Assessment as AssessmentIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckCircleIcon,\n  Schedule as ScheduleIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../hooks/useAuth';\nimport {useQuery, useQueryClient} from '@tanstack/react-query';\nimport { assetService } from '../services/assetService';\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`asset-tabpanel-${index}`}\n      aria-labelledby={`asset-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\nconst AssetManagementPage: NextPage = () => {\n  const { user } = useAuth();\n  const [tabValue, setTabValue] = useState(0);\n  // Fetch dashboard summary\n  const { data: dashboardData, isLoading: dashboardLoading } = useQuery({\n    queryKey: ['assetDashboard'],\n    queryFn: assetService.getDashboardSummary,\n    enabled: !!user,\n  });\n  // Fetch assets\n  const { data: assets, isLoading: assetsLoading } = useQuery({\n    queryKey: ['assets'],\n    queryFn: () => assetService.getAssets(),\n    enabled: !!user,\n  });\n  // Fetch maintenance schedules\n  const { data: maintenanceSchedules, isLoading: schedulesLoading } = useQuery({\n    queryKey: ['maintenanceSchedules'],\n    queryFn: () => assetService.getMaintenanceSchedules(),\n    enabled: !!user,\n  });\n  // Fetch due maintenance\n  const { data: dueMaintenance, isLoading: dueMaintenanceLoading } = useQuery({\n    queryKey: ['dueMaintenance'],\n    queryFn: () => assetService.getDueMaintenance(),\n    enabled: !!user,\n  });\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'success';\n      case 'maintenance': return 'warning';\n      case 'inactive': return 'default';\n      case 'retired': return 'error';\n      default: return 'default';\n    }\n  };\n  const getConditionColor = (condition: string) => {\n    switch (condition.toLowerCase()) {\n      case 'excellent': return 'success';\n      case 'good': return 'success';\n      case 'fair': return 'warning';\n      case 'poor': return 'error';\n      case 'critical': return 'error';\n      default: return 'default';\n    }\n  };\n  if (!user) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          Please log in to access Asset Management.\n        </Alert>\n      </Container>\n    );\n  }\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <SettingsIcon color=\"primary\" />\n          Asset Management\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Comprehensive asset lifecycle management, maintenance scheduling, and depreciation tracking\n        </Typography>\n      </Box>\n      {/* Dashboard Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Assets\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.total_assets || 0}\n                  </Typography>\n                </Box>\n                <SettingsIcon color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Assets\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.active_assets || 0}\n                  </Typography>\n                </Box>\n                <CheckCircleIcon color=\"success\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Due Maintenance\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"warning.main\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.due_maintenance || 0}\n                  </Typography>\n                </Box>\n                <ScheduleIcon color=\"warning\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Overdue\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"error.main\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.overdue_maintenance || 0}\n                  </Typography>\n                </Box>\n                <WarningIcon color=\"error\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={2.4}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Asset Value\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : \n                     `$${(dashboardData?.total_asset_value || 0).toLocaleString()}`}\n                  </Typography>\n                </Box>\n                <AssessmentIcon color=\"info\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      {/* Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs\n          value={tabValue}\n          onChange={handleTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Asset Register\" />\n          <Tab label=\"Maintenance Schedules\" />\n          <Tab label=\"Maintenance Records\" />\n          <Tab label=\"Due Maintenance\" />\n          <Tab label=\"Reports\" />\n        </Tabs>\n      </Paper>\n      {/* Tab Panels */}\n      <TabPanel value={tabValue} index={0}>\n        {/* Assets List */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Asset Register</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n// TODO: Define or import setOpenDialog\n            onClick={() => setOpenDialog('create')}\n          >\n            Add Asset\n          </Button>\n        </Box>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Asset Code</TableCell>\n                <TableCell>Asset Name</TableCell>\n                <TableCell>Category</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Purchase Cost</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {assetsLoading ? (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                assets?.map((asset: any) => (\n                  <TableRow key={asset.id}>\n                    <TableCell>{asset.asset_code}</TableCell>\n                    <TableCell>{asset.asset_name}</TableCell>\n                    <TableCell>{asset.category}</TableCell>\n                    <TableCell>{asset.location || '-'}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={asset.status}\n                        color={getStatusColor(asset.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={asset.condition}\n                        color={getConditionColor(asset.condition) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {asset.purchase_cost ? `$${asset.purchase_cost.toLocaleString()}` : '-'}\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n// TODO: Define or import setSelectedAsset\n                            setSelectedAsset(asset);\n// TODO: Define or import setOpenDialog\n                            setOpenDialog('edit');\n                          }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Maintenance\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n// TODO: Define or import setSelectedAsset\n                            setSelectedAsset(asset);\n// TODO: Define or import setOpenDialog\n                            setOpenDialog('maintenance');\n                          }}\n                        >\n                          <BuildIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n      <TabPanel value={tabValue} index={1}>\n        {/* Maintenance Schedules */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Maintenance Schedules</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n// TODO: Define or import setOpenDialog\n            onClick={() => setOpenDialog('create')}\n          >\n            Add Schedule\n          </Button>\n        </Box>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Schedule Name</TableCell>\n                <TableCell>Asset</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Frequency</TableCell>\n                <TableCell>Next Due</TableCell>\n                <TableCell>Priority</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {schedulesLoading ? (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                maintenanceSchedules?.map((schedule: any) => (\n                  <TableRow key={schedule.id}>\n                    <TableCell>{schedule.schedule_name}</TableCell>\n                    <TableCell>{schedule.asset_id}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={schedule.maintenance_type}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>{schedule.frequency_type}</TableCell>\n                    <TableCell>\n                      {schedule.next_due_date ? \n                        new Date(schedule.next_due_date).toLocaleDateString() : '-'}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={schedule.priority}\n                        color={schedule.priority === 'high' ? 'error' : \n                               schedule.priority === 'medium' ? 'warning' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={schedule.is_active ? 'Active' : 'Inactive'}\n                        color={schedule.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton size=\"small\">\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n      <TabPanel value={tabValue} index={2}>\n        {/* Maintenance Records */}\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>Maintenance Records</Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Historical maintenance work orders and records\n        </Typography>\n      </TabPanel>\n      <TabPanel value={tabValue} index={3}>\n        {/* Due Maintenance */}\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>Due Maintenance</Typography>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Asset</TableCell>\n                <TableCell>Schedule</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Due Date</TableCell>\n                <TableCell>Priority</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {dueMaintenanceLoading ? (\n                <TableRow>\n                  <TableCell colSpan={7} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                dueMaintenance?.map((item: any) => (\n                  <TableRow key={item.id}>\n                    <TableCell>{item.asset_id}</TableCell>\n                    <TableCell>{item.schedule_name}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.maintenance_type}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Typography\n                        color={new Date(item.next_due_date) < new Date() ? 'error' : 'text.primary'}\n                      >\n                        {new Date(item.next_due_date).toLocaleDateString()}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={item.priority}\n                        color={item.priority === 'high' ? 'error' : \n                               item.priority === 'medium' ? 'warning' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {new Date(item.next_due_date) < new Date() ? (\n                        <Chip label=\"Overdue\" color=\"error\" size=\"small\" />\n                      ) : (\n                        <Chip label=\"Due\" color=\"warning\" size=\"small\" />\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Button size=\"small\" variant=\"outlined\">\n                        Create Work Order\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n      <TabPanel value={tabValue} index={4}>\n        {/* Reports */}\n        <Typography variant=\"h6\" sx={{ mb: 2 }}>Asset Reports</Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Asset Depreciation Report\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Calculate and view asset depreciation by period\n                </Typography>\n                <Button variant=\"outlined\">Generate Report</Button>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Maintenance Cost Analysis\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Analyze maintenance costs and trends\n                </Typography>\n                <Button variant=\"outlined\">Generate Report</Button>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </TabPanel>\n    </Container>\n  );\n};\nexport default AssetManagementPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/bank-accounts.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'setSelectedAccount' is not defined.","line":381,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":381,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'setEditDialogOpen' is not defined.","line":383,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":383,"endColumn":46}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/bank-accounts.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel,\n  Chip,\n  IconButton,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  Switch,\n  FormControlLabel,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  AccountBalance,\n  Star,\n  StarBorder,\n  Refresh,\n  Sync,\n  Visibility\n} from '@mui/icons-material';\nimport axios from 'axios';\ninterface ChartAccount {\n  id: number;\n  account_code: string;\n  account_name: string;\n  account_type: string;\n}\ninterface BankAccount {\n  id: number;\n  chart_account_id: number;\n  bank_name: string;\n  branch_name?: string;\n  account_number: string;\n  ifsc_code?: string;\n  swift_code?: string;\n  account_type: string;\n  currency: string;\n  opening_balance: number;\n  current_balance: number;\n  is_active: boolean;\n  is_default: boolean;\n  auto_reconcile: boolean;\n  created_at: string;\n  updated_at: string;\n}\ninterface CreateBankAccountData {\n  chart_account_id: number;\n  bank_name: string;\n  branch_name?: string;\n  account_number: string;\n  ifsc_code?: string;\n  swift_code?: string;\n  account_type: string;\n  currency: string;\n  opening_balance: number;\n  is_default: boolean;\n  auto_reconcile: boolean;\n}\nconst BankAccounts: React.FC = () => {\n  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);\n  const [chartAccounts, setChartAccounts] = useState<ChartAccount[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  // Create bank account form state\n  const [createData, setCreateData] = useState<CreateBankAccountData>({\n    chart_account_id: 0,\n    bank_name: '',\n    account_number: '',\n    account_type: 'Savings',\n    currency: 'INR',\n    opening_balance: 0,\n    is_default: false,\n    auto_reconcile: false\n  });\n  const accountTypes = [\n    'Savings',\n    'Current',\n    'Fixed Deposit',\n    'Recurring Deposit',\n    'NRI Account',\n    'Overdraft',\n    'Cash Credit'\n  ];\n  const currencies = ['INR', 'USD', 'EUR', 'GBP', 'AED', 'SAR'];\n  const fetchBankAccounts = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/bank-accounts', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setBankAccounts(response.data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch bank accounts');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchChartAccounts = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/chart-of-accounts?account_type=bank', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setChartAccounts(response.data);\n    } catch (err: any) {\n      console.error('Failed to fetch chart accounts:', err);\n    }\n  };\n  useEffect(() => {\n    fetchChartAccounts();\n    fetchBankAccounts();\n  }, []);\n  const handleCreateBankAccount = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post('/api/v1/erp/bank-accounts', createData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setCreateDialogOpen(false);\n      setCreateData({\n        chart_account_id: 0,\n        bank_name: '',\n        account_number: '',\n        account_type: 'Savings',\n        currency: 'INR',\n        opening_balance: 0,\n        is_default: false,\n        auto_reconcile: false\n      });\n      fetchBankAccounts();\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to create bank account');\n    }\n  };\n  const formatCurrency = (amount: number, currency: string = 'INR') => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n  const formatAccountNumber = (accountNumber: string) => {\n    // Mask account number for security (show only last 4 digits)\n    if (accountNumber.length <= 4) {return accountNumber;}\n    return '*'.repeat(accountNumber.length - 4) + accountNumber.slice(-4);\n  };\n  const handleSetDefault = async (accountId: number) => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put(`/api/v1/erp/bank-accounts/${accountId}`, {\n        is_default: true\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      fetchBankAccounts();\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to set default account');\n    }\n  };\n  // Calculate totals\n  const totalBalance = bankAccounts\n    .filter(acc => acc.is_active)\n    .reduce((sum, acc) => sum + acc.current_balance, 0);\n  const activeAccounts = bankAccounts.filter(acc => acc.is_active).length;\n  const defaultAccount = bankAccounts.find(acc => acc.is_default);\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Bank Accounts\n        </Typography>\n        <Box>\n          <Button\n            startIcon={<Add />}\n            variant=\"contained\"\n            onClick={() => setCreateDialogOpen(true)}\n            sx={{ mr: 1 }}\n          >\n            New Account\n          </Button>\n          <IconButton onClick={fetchBankAccounts} color=\"primary\">\n            <Refresh />\n          </IconButton>\n        </Box>\n      </Box>\n      {/* Summary Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <AccountBalance color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Balance\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(totalBalance)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <AccountBalance color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Accounts\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {activeAccounts}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Star color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Default Account\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {defaultAccount?.bank_name || 'None'}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n      {/* Bank Accounts Table */}\n      <Paper>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Bank Name</TableCell>\n                <TableCell>Account Number</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Branch</TableCell>\n                <TableCell>IFSC</TableCell>\n                <TableCell align=\"right\">Current Balance</TableCell>\n                <TableCell>Currency</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Default</TableCell>\n                <TableCell>Auto Reconcile</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {loading ? (\n                <TableRow>\n                  <TableCell colSpan={11} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : bankAccounts.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={11} align=\"center\">\n                    No bank accounts found\n                  </TableCell>\n                </TableRow>\n              ) : (\n                bankAccounts.map((account) => (\n                  <TableRow key={account.id}>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"body2\" fontWeight=\"medium\">\n                          {account.bank_name}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          Created: {new Date(account.created_at).toLocaleDateString()}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\" fontFamily=\"monospace\">\n                        {formatAccountNumber(account.account_number)}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip label={account.account_type} size=\"small\" />\n                    </TableCell>\n                    <TableCell>{account.branch_name || '-'}</TableCell>\n                    <TableCell>\n                      <Typography variant=\"body2\" fontFamily=\"monospace\">\n                        {account.ifsc_code || '-'}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Typography \n                        variant=\"body2\" \n                        color={account.current_balance >= 0 ? 'success.main' : 'error.main'}\n                        fontWeight=\"medium\"\n                      >\n                        {formatCurrency(account.current_balance, account.currency)}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <Chip label={account.currency} size=\"small\" variant=\"outlined\" />\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={account.is_active ? 'Active' : 'Inactive'}\n                        color={account.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title={account.is_default ? 'Default Account' : 'Set as Default'}>\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => !account.is_default && handleSetDefault(account.id)}\n                          disabled={account.is_default}\n                        >\n                          {account.is_default ? <Star color=\"warning\" /> : <StarBorder />}\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        icon={<Sync />}\n                        label={account.auto_reconcile ? 'Yes' : 'No'}\n                        color={account.auto_reconcile ? 'primary' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"View Details\">\n                        <IconButton size=\"small\">\n                          <Visibility />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Edit\">\n                        <IconButton \n                          size=\"small\"\n                          onClick={() => {\n// TODO: Define or import setSelectedAccount\n                            setSelectedAccount(account);\n// TODO: Define or import setEditDialogOpen\n                            setEditDialogOpen(true);\n                          }}\n                        >\n                          <Edit />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Delete\">\n                        <IconButton size=\"small\" color=\"error\">\n                          <Delete />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n      {/* Create Bank Account Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Create Bank Account</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Chart Account</InputLabel>\n                <Select\n                  value={createData.chart_account_id}\n                  onChange={(e) => setCreateData(prev => ({ ...prev, chart_account_id: e.target.value as number }))}\n                  label=\"Chart Account\"\n                >\n                  {chartAccounts.map((account) => (\n                    <MenuItem key={account.id} value={account.id}>\n                      {account.account_code} - {account.account_name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Bank Name\"\n                value={createData.bank_name}\n                onChange={(e) => setCreateData(prev => ({ ...prev, bank_name: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Account Number\"\n                value={createData.account_number}\n                onChange={(e) => setCreateData(prev => ({ ...prev, account_number: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Account Type</InputLabel>\n                <Select\n                  value={createData.account_type}\n                  onChange={(e) => setCreateData(prev => ({ ...prev, account_type: e.target.value }))}\n                  label=\"Account Type\"\n                >\n                  {accountTypes.map((type) => (\n                    <MenuItem key={type} value={type}>\n                      {type}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Branch Name\"\n                value={createData.branch_name || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, branch_name: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"IFSC Code\"\n                value={createData.ifsc_code || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, ifsc_code: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"SWIFT Code\"\n                value={createData.swift_code || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, swift_code: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Currency</InputLabel>\n                <Select\n                  value={createData.currency}\n                  onChange={(e) => setCreateData(prev => ({ ...prev, currency: e.target.value }))}\n                  label=\"Currency\"\n                >\n                  {currencies.map((currency) => (\n                    <MenuItem key={currency} value={currency}>\n                      {currency}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                type=\"number\"\n                label=\"Opening Balance\"\n                value={createData.opening_balance}\n                onChange={(e) => setCreateData(prev => ({ ...prev, opening_balance: parseFloat(e.target.value) || 0 }))}\n                inputProps={{ step: 0.01 }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={createData.is_default}\n                    onChange={(e) => setCreateData(prev => ({ ...prev, is_default: e.target.checked }))}\n                  />\n                }\n                label=\"Set as Default Account\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={createData.auto_reconcile}\n                    onChange={(e) => setCreateData(prev => ({ ...prev, auto_reconcile: e.target.checked }))}\n                  />\n                }\n                label=\"Enable Auto Reconciliation\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleCreateBankAccount} variant=\"contained\">Create Account</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\nexport default BankAccounts;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/cost-centers.tsx","messages":[{"ruleId":"no-shadow","severity":2,"message":"'costCenters' is already declared in the upper scope on line 70 column 10.","line":134,"column":32,"nodeType":"Identifier","messageId":"noShadow","endLine":134,"endColumn":57},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'costCenters' is already declared in the upper scope on line 70 column 10.","line":134,"column":32,"nodeType":"Identifier","messageId":"noShadow","endLine":134,"endColumn":57},{"ruleId":"no-shadow","severity":2,"message":"'costCenters' is already declared in the upper scope on line 70 column 10.","line":142,"column":33,"nodeType":"Identifier","messageId":"noShadow","endLine":142,"endColumn":51},{"ruleId":"@typescript-eslint/no-shadow","severity":2,"message":"'costCenters' is already declared in the upper scope on line 70 column 10.","line":142,"column":33,"nodeType":"Identifier","messageId":"noShadow","endLine":142,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'setSelectedCostCenter' is not defined.","line":354,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":354,"endColumn":56},{"ruleId":"no-undef","severity":2,"message":"'setEditDialogOpen' is not defined.","line":356,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":356,"endColumn":52}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/cost-centers.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid,\n  MenuItem,\n  Select,\n  FormControl,\n  InputLabel,\n  Chip,\n  IconButton,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  LinearProgress,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  Visibility,\n  Refresh,\n  TrendingUp,\n  TrendingDown,\n  CorporateFare\n} from '@mui/icons-material';\nimport { TreeView, TreeItem } from '@mui/x-tree-view';\nimport axios from 'axios';\ninterface CostCenter {\n  id: number;\n  cost_center_code: string;\n  cost_center_name: string;\n  parent_cost_center_id?: number;\n  level: number;\n  budget_amount: number;\n  actual_amount: number;\n  is_active: boolean;\n  department?: string;\n  manager_id?: number;\n  description?: string;\n  created_at: string;\n  updated_at: string;\n}\ninterface CreateCostCenterData {\n  cost_center_code: string;\n  cost_center_name: string;\n  parent_cost_center_id?: number;\n  budget_amount: number;\n  department?: string;\n  manager_id?: number;\n  description?: string;\n}\nconst CostCenters: React.FC = () => {\n  const [costCenters, setCostCenters] = useState<CostCenter[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  // Create cost center form state\n  const [createData, setCreateData] = useState<CreateCostCenterData>({\n    cost_center_code: '',\n    cost_center_name: '',\n    budget_amount: 0,\n    description: ''\n  });\n  const fetchCostCenters = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/cost-centers', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setCostCenters(response.data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch cost centers');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchCostCenters();\n  }, []);\n  const handleCreateCostCenter = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post('/api/v1/erp/cost-centers', createData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setCreateDialogOpen(false);\n      setCreateData({\n        cost_center_code: '',\n        cost_center_name: '',\n        budget_amount: 0,\n        description: ''\n      });\n      fetchCostCenters();\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to create cost center');\n    }\n  };\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n  const calculateVariance = (budget: number, actual: number) => {\n    if (budget === 0) {return 0;}\n    return ((actual - budget) / budget) * 100;\n  };\n  const getVarianceColor = (variance: number) => {\n    if (Math.abs(variance) <= 5) {return 'success';}\n    if (Math.abs(variance) <= 15) {return 'warning';}\n    return 'error';\n  };\n  const buildCostCenterTree = (costCenters: CostCenter[], parentId: number | null = null): CostCenter[] => {\n    return costCenters\n      .filter(cc => cc.parent_cost_center_id === parentId)\n      .map(cc => ({\n        ...cc,\n        children: buildCostCenterTree(costCenters, cc.id)\n      }));\n  };\n  const renderCostCenterTree = (costCenters: any[]) => {\n    return costCenters.map((cc) => (\n      <TreeItem\n        key={cc.id}\n        nodeId={cc.id.toString()}\n        label={\n          <Box display=\"flex\" alignItems=\"center\" sx={{ py: 1 }}>\n            <CorporateFare sx={{ mr: 1, fontSize: 16 }} />\n            <Typography variant=\"body2\" sx={{ fontWeight: 'medium' }}>\n              {cc.cost_center_code} - {cc.cost_center_name}\n            </Typography>\n            <Chip\n              label={cc.is_active ? 'Active' : 'Inactive'}\n              color={cc.is_active ? 'success' : 'default'}\n              size=\"small\"\n              sx={{ ml: 1 }}\n            />\n          </Box>\n        }\n      >\n        {cc.children && cc.children.length > 0 && renderCostCenterTree(cc.children)}\n      </TreeItem>\n    ));\n  };\n  // Calculate totals\n  const totalBudget = costCenters.reduce((sum, cc) => sum + cc.budget_amount, 0);\n  const totalActual = costCenters.reduce((sum, cc) => sum + cc.actual_amount, 0);\n  const totalVariance = calculateVariance(totalBudget, totalActual);\n  const costCenterTree = buildCostCenterTree(costCenters);\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Cost Centers\n        </Typography>\n        <Box>\n          <Button\n            startIcon={<Add />}\n            variant=\"contained\"\n            onClick={() => setCreateDialogOpen(true)}\n            sx={{ mr: 1 }}\n          >\n            New Cost Center\n          </Button>\n          <IconButton onClick={fetchCostCenters} color=\"primary\">\n            <Refresh />\n          </IconButton>\n        </Box>\n      </Box>\n      {/* Summary Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <TrendingUp color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Budget\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(totalBudget)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <TrendingDown color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Actual\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(totalActual)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <CorporateFare color={getVarianceColor(totalVariance)} sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Overall Variance\n                  </Typography>\n                  <Typography variant=\"h6\" color={`${getVarianceColor(totalVariance)}.main`}>\n                    {totalVariance.toFixed(2)}%\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n      )}\n      <Grid container spacing={3}>\n        {/* Cost Center Hierarchy */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2, height: 500, overflow: 'auto' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              Cost Center Hierarchy\n            </Typography>\n            {loading ? (\n              <CircularProgress />\n            ) : (\n              <TreeView>\n                {renderCostCenterTree(costCenterTree)}\n              </TreeView>\n            )}\n          </Paper>\n        </Grid>\n        {/* Cost Centers Table */}\n        <Grid item xs={12} md={8}>\n          <Paper>\n            <TableContainer sx={{ maxHeight: 500 }}>\n              <Table stickyHeader>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Code</TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Department</TableCell>\n                    <TableCell align=\"right\">Budget</TableCell>\n                    <TableCell align=\"right\">Actual</TableCell>\n                    <TableCell align=\"right\">Utilization</TableCell>\n                    <TableCell align=\"right\">Variance %</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {loading ? (\n                    <TableRow>\n                      <TableCell colSpan={9} align=\"center\">\n                        <CircularProgress />\n                      </TableCell>\n                    </TableRow>\n                  ) : costCenters.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={9} align=\"center\">\n                        No cost centers found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    costCenters.map((cc) => {\n                      const variance = calculateVariance(cc.budget_amount, cc.actual_amount);\n                      const utilization = cc.budget_amount > 0 ? (cc.actual_amount / cc.budget_amount) * 100 : 0;\n                      return (\n                        <TableRow key={cc.id}>\n                          <TableCell>{cc.cost_center_code}</TableCell>\n                          <TableCell>\n                            <Box>\n                              <Typography variant=\"body2\">{cc.cost_center_name}</Typography>\n                              {cc.description && (\n                                <Typography variant=\"caption\" color=\"textSecondary\">\n                                  {cc.description}\n                                </Typography>\n                              )}\n                            </Box>\n                          </TableCell>\n                          <TableCell>{cc.department || '-'}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(cc.budget_amount)}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(cc.actual_amount)}</TableCell>\n                          <TableCell align=\"right\">\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <LinearProgress\n                                variant=\"determinate\"\n                                value={Math.min(utilization, 100)}\n                                color={utilization > 100 ? 'error' : utilization > 80 ? 'warning' : 'primary'}\n                                sx={{ width: 60, mr: 1 }}\n                              />\n                              <Typography variant=\"caption\">\n                                {utilization.toFixed(1)}%\n                              </Typography>\n                            </Box>\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <Typography color={`${getVarianceColor(variance)}.main`}>\n                              {variance.toFixed(2)}%\n                            </Typography>\n                          </TableCell>\n                          <TableCell>\n                            <Chip\n                              label={cc.is_active ? 'Active' : 'Inactive'}\n                              color={cc.is_active ? 'success' : 'default'}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <Tooltip title=\"View Details\">\n                              <IconButton size=\"small\">\n                                <Visibility />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Edit\">\n                              <IconButton \n                                size=\"small\"\n                                onClick={() => {\n// TODO: Define or import setSelectedCostCenter\n                                  setSelectedCostCenter(cc);\n// TODO: Define or import setEditDialogOpen\n                                  setEditDialogOpen(true);\n                                }}\n                              >\n                                <Edit />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Delete\">\n                              <IconButton size=\"small\" color=\"error\">\n                                <Delete />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  )}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Paper>\n        </Grid>\n      </Grid>\n      {/* Create Cost Center Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Create Cost Center</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Cost Center Code\"\n                value={createData.cost_center_code}\n                onChange={(e) => setCreateData(prev => ({ ...prev, cost_center_code: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Cost Center Name\"\n                value={createData.cost_center_name}\n                onChange={(e) => setCreateData(prev => ({ ...prev, cost_center_name: e.target.value }))}\n                required\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Parent Cost Center</InputLabel>\n                <Select\n                  value={createData.parent_cost_center_id || ''}\n                  onChange={(e) => setCreateData(prev => ({ ...prev, parent_cost_center_id: e.target.value as number || undefined }))}\n                  label=\"Parent Cost Center\"\n                >\n                  <MenuItem value=\"\">None (Top Level)</MenuItem>\n                  {costCenters.map((cc) => (\n                    <MenuItem key={cc.id} value={cc.id}>\n                      {cc.cost_center_code} - {cc.cost_center_name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Department\"\n                value={createData.department || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, department: e.target.value }))}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                type=\"number\"\n                label=\"Budget Amount\"\n                value={createData.budget_amount}\n                onChange={(e) => setCreateData(prev => ({ ...prev, budget_amount: parseFloat(e.target.value) || 0 }))}\n                inputProps={{ min: 0, step: 0.01 }}\n                required\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                multiline\n                rows={3}\n                label=\"Description\"\n                value={createData.description || ''}\n                onChange={(e) => setCreateData(prev => ({ ...prev, description: e.target.value }))}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button onClick={handleCreateCostCenter} variant=\"contained\">Create</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\nexport default CostCenters;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/demo.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":121,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":121,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n// frontend/src/pages/demo.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Container,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Alert,\n  Switch,\n  FormControlLabel,\n  Grid\n} from '@mui/material';\nimport {\n  Receipt,\n  Inventory,\n  People,\n  Business,\n  Warning,\n  ExitToApp\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\n// Mock/Sample data for demo mode\nconst mockData = {\n  stats: [\n    {\n      title: 'Purchase Vouchers',\n      value: 15,\n      icon: <Receipt />,\n      color: '#1976D2'\n    },\n    {\n      title: 'Sales Vouchers',\n      value: 23,\n      icon: <Receipt />,\n      color: '#2E7D32'\n    },\n    {\n      title: 'Low Stock Items',\n      value: 5,\n      icon: <Warning />,\n      color: '#F57C00'\n    },\n    {\n      title: 'Active Products',\n      value: 148,\n      icon: <People />,\n      color: '#7B1FA2'\n    }\n  ],\n  purchaseVouchers: [\n    {\n      id: 1,\n      voucher_number: 'PV-2024-001',\n      date: '2024-01-15',\n      total_amount: 15750.00,\n      status: 'confirmed',\n      vendor: 'ABC Suppliers'\n    },\n    {\n      id: 2,\n      voucher_number: 'PV-2024-002',\n      date: '2024-01-16',\n      total_amount: 8950.00,\n      status: 'pending',\n      vendor: 'XYZ Materials'\n    },\n    {\n      id: 3,\n      voucher_number: 'PV-2024-003',\n      date: '2024-01-17',\n      total_amount: 22100.00,\n      status: 'confirmed',\n      vendor: 'Best Parts Inc'\n    }\n  ],\n  salesVouchers: [\n    {\n      id: 1,\n      voucher_number: 'SV-2024-001',\n      date: '2024-01-15',\n      total_amount: 25600.00,\n      status: 'confirmed',\n      customer: 'Tech Solutions Ltd'\n    },\n    {\n      id: 2,\n      voucher_number: 'SV-2024-002',\n      date: '2024-01-16',\n      total_amount: 18750.00,\n      status: 'pending',\n      customer: 'Modern Industries'\n    },\n    {\n      id: 3,\n      voucher_number: 'SV-2024-003',\n      date: '2024-01-17',\n      total_amount: 31200.00,\n      status: 'confirmed',\n      customer: 'Global Corp'\n    }\n  ],\n  companyInfo: {\n    name: 'Demo Manufacturing Company',\n    address: '123 Demo Street, Sample City',\n    phone: '+91-9876543210',\n    email: 'demo@example.com',\n    gst: '24AAACC1206D1ZV'\n  }\n};\nexport default function DemoPage() {\n  const router = useRouter();\n  const [demoMode, setDemoMode] = useState(true);\n  const [isDemoTempUser, setIsDemoTempUser] = useState(false);\n  useEffect(() => {\n    // Set demo mode flag\n    localStorage.setItem('demoMode', demoMode.toString());\n    // Check if this is a temporary demo user\n    const tempUser = localStorage.getItem('isDemoTempUser');\n    setIsDemoTempUser(tempUser === 'true');\n  }, [demoMode]);\n  const handleExitDemo = () => {\n    localStorage.removeItem('demoMode');\n    localStorage.removeItem('isDemoTempUser');\n    // If this was a temporary demo user, redirect to login\n    if (isDemoTempUser) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user_role');\n      router.push('/login');\n    } else {\n      // Regular user, go back to dashboard\n      router.push('/dashboard');\n    }\n  };\n  const handleToggleDemo = () => {\n    setDemoMode(!demoMode);\n    if (!demoMode) {\n      localStorage.setItem('demoMode', 'true');\n    } else {\n      localStorage.removeItem('demoMode');\n    }\n  };\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        {/* Demo Mode Alert */}\n        <Alert \n          severity=\"info\" \n          sx={{ mb: 3 }}\n          action={\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={demoMode}\n                    onChange={handleToggleDemo}\n                    color=\"primary\"\n                  />\n                }\n                label=\"Demo Mode\"\n              />\n              <Button\n                color=\"inherit\"\n                size=\"small\"\n                onClick={handleExitDemo}\n                startIcon={<ExitToApp />}\n              >\n                {isDemoTempUser ? 'End Demo Session' : 'Exit Demo'}\n              </Button>\n            </Box>\n          }\n        >\n          <Typography variant=\"h6\" component=\"div\">\n            🎭 Demo Mode Active {isDemoTempUser && '(Temporary User)'}\n          </Typography>\n          <Typography variant=\"body2\">\n            You are viewing the organization dashboard with sample data. This is not real business data. \n            All functionality is simulated for demonstration purposes.\n            {isDemoTempUser && ' Your temporary session will end when you logout or close the browser.'}\n          </Typography>\n        </Alert>\n        {/* Additional alert for temporary demo users */}\n        {isDemoTempUser && (\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\n            <Typography variant=\"body2\">\n              <strong>Temporary Demo Account:</strong> You are using a temporary demo account that was created for this session only. \n              No real user account has been created in the system. When you end this session, all temporary data will be cleared.\n            </Typography>\n          </Alert>\n        )}\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Organization Dashboard - Demo Mode\n        </Typography>\n        {/* Company Info Card */}\n        <Paper sx={{ p: 2, mb: 3, bgcolor: 'primary.light', color: 'primary.contrastText' }}>\n          <Typography variant=\"h6\" gutterBottom>\n            {mockData.companyInfo.name}\n          </Typography>\n          <Typography variant=\"body2\">\n            {mockData.companyInfo.address} • {mockData.companyInfo.phone} • {mockData.companyInfo.email}\n          </Typography>\n          <Typography variant=\"body2\">\n            GST: {mockData.companyInfo.gst}\n          </Typography>\n        </Paper>\n        <Grid container spacing={3}>\n          {/* Statistics Cards */}\n          {mockData.stats.map((stat, index) => (\n            <Grid\n              key={index}\n              size={{\n                xs: 12,\n                sm: 6,\n                md: 3\n              }}>\n              <Card>\n                <CardContent>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <Box sx={{ color: stat.color, mr: 2 }}>\n                      {stat.icon}\n                    </Box>\n                   <Box>\n                      <Typography color=\"textSecondary\" gutterBottom>\n                        {stat.title}\n                      </Typography>\n                      <Typography variant=\"h4\" component=\"h2\">\n                        {stat.value}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n          {/* Recent Purchase Vouchers */}\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Recent Purchase Vouchers (Sample Data)\n              </Typography>\n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Voucher #</TableCell>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Amount</TableCell>\n                      <TableCell>Status</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {mockData.purchaseVouchers.map((voucher) => (\n                      <TableRow key={voucher.id}>\n                        <TableCell>{voucher.voucher_number}</TableCell>\n                        <TableCell>\n                          {new Date(voucher.date).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>₹{voucher.total_amount.toFixed(2)}</TableCell>\n                        <TableCell>\n                          <Chip\n                            label={voucher.status}\n                            color={voucher.status === 'confirmed' ? 'success' : 'default'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n          </Grid>\n          {/* Recent Sales Vouchers */}\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Recent Sales Vouchers (Sample Data)\n              </Typography>\n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Voucher #</TableCell>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Amount</TableCell>\n                      <TableCell>Status</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {mockData.salesVouchers.map((voucher) => (\n                      <TableRow key={voucher.id}>\n                        <TableCell>{voucher.voucher_number}</TableCell>\n                        <TableCell>\n                          {new Date(voucher.date).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>₹{voucher.total_amount.toFixed(2)}</TableCell>\n                        <TableCell>\n                          <Chip\n                            label={voucher.status}\n                            color={voucher.status === 'confirmed' ? 'success' : 'default'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n          </Grid>\n          {/* Demo Features - Comprehensive Feature Showcase */}\n          <Grid size={12}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h5\" gutterBottom sx={{ mb: 3 }}>\n                🎯 Complete Feature Showcase - All Live Features Available\n              </Typography>\n              <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n                Explore all features of the TRITIQ ERP system with sample data. This demo provides access to every module and functionality.\n              </Typography>\n              {/* Master Data Section */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                👥 Master Data Management\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/masters/vendors')}\n                  >\n                    Vendors Management\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Business />}\n                    onClick={() => router.push('/masters/customers')}\n                  >\n                    Customers Management\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Inventory />}\n                    onClick={() => router.push('/masters/products')}\n                  >\n                    Products Catalog\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Business />}\n                    onClick={() => router.push('/masters?tab=company')}\n                  >\n                    Company Details\n                  </Button>\n                </Grid>\n              </Grid>\n              {/* Inventory Management */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                📦 Inventory Management\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Inventory />}\n                    onClick={() => router.push('/inventory/stock')}\n                  >\n                    Current Stock\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/inventory/movements')}\n                  >\n                    Stock Movements\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Warning />}\n                    onClick={() => router.push('/inventory/low-stock')}\n                  >\n                    Low Stock Report\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<ExitToApp />}\n                    onClick={() => router.push('/inventory/bulk-import')}\n                  >\n                    Bulk Import Tools\n                  </Button>\n                </Grid>\n              </Grid>\n              {/* Voucher System */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                🧾 Complete Voucher System\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/vouchers/Purchase-Vouchers/purchase-order')}\n                  >\n                    Purchase Orders\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/vouchers/Sales-Vouchers/sales-voucher')}\n                  >\n                    Sales Vouchers\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/vouchers/Financial-Vouchers/payment-voucher')}\n                  >\n                    Financial Vouchers\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/vouchers/Manufacturing-Vouchers/production-order')}\n                  >\n                    Manufacturing Orders\n                  </Button>\n                </Grid>\n              </Grid>\n              {/* Analytics & Reports */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                📊 Business Intelligence & Analytics\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/analytics/customer')}\n                  >\n                    Customer Analytics\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/analytics/sales')}\n                  >\n                    Sales Analytics\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/analytics/purchase')}\n                  >\n                    Purchase Analytics\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/analytics/service')}\n                  >\n                    Service Analytics\n                  </Button>\n                </Grid>\n              </Grid>\n              {/* Service CRM Features */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                🔧 Service CRM & Operations\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/service/dashboard')}\n                  >\n                    Service Dashboard\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/service/dispatch')}\n                  >\n                    Dispatch Management\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/service/feedback')}\n                  >\n                    Feedback Workflow\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/sla')}\n                  >\n                    SLA Management\n                  </Button>\n                </Grid>\n              </Grid>\n              {/* Reports & Financial */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                📈 Reports & Financial Analysis\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/reports/ledgers')}\n                  >\n                    Ledger Reports\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/reports/trial-balance')}\n                  >\n                    Trial Balance\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/reports/profit-loss')}\n                  >\n                    Profit & Loss\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Inventory />}\n                    onClick={() => router.push('/reports/stock')}\n                  >\n                    Stock Reports\n                  </Button>\n                </Grid>\n              </Grid>\n              {/* Administration Features */}\n              <Typography variant=\"h6\" gutterBottom sx={{ mt: 3, mb: 2, color: 'primary.main' }}>\n                ⚙️ Administration & Management\n              </Typography>\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/admin/rbac')}\n                  >\n                    Role Management\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/admin/audit-logs')}\n                  >\n                    Audit Logs\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Receipt />}\n                    onClick={() => router.push('/admin/notifications')}\n                  >\n                    Notifications\n                  </Button>\n                </Grid>\n                <Grid>\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<People />}\n                    onClick={() => router.push('/settings')}\n                  >\n                    System Settings\n                  </Button>\n                </Grid>\n              </Grid>\n              <Alert severity=\"info\" sx={{ mt: 3 }}>\n                <Typography variant=\"body2\">\n                  <strong>✨ Full Feature Parity:</strong> This demo showcases all live features of the TRITIQ ERP system. \n                  Every module, report, and functionality is accessible with sample data for comprehensive testing and evaluation.\n                </Typography>\n              </Alert>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/exhibition-mode.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Paper' is defined but never used.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"Paper"},"fix":{"range":[55,64],"text":""},"desc":"Remove unused variable 'Paper'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Tooltip"},"fix":{"range":[141,152],"text":""},"desc":"Remove unused variable 'Tooltip'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TextField' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"TextField"},"fix":{"range":[211,224],"text":""},"desc":"Remove unused variable 'TextField'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[224,239],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[239,253],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[253,263],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[263,275],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Delete' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Delete"},"fix":{"range":[472,482],"text":""},"desc":"Remove unused variable 'Delete'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Analytics' is defined but never used.","line":40,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Analytics"},"fix":{"range":[518,531],"text":""},"desc":"Remove unused variable 'Analytics'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FileUpload' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"FileUpload"},"fix":{"range":[531,545],"text":""},"desc":"Remove unused variable 'FileUpload'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'file' is defined but never used.","line":220,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":220,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"file"},"fix":{"range":[6263,6273],"text":""},"desc":"Remove unused variable 'file'."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Chip,\n  IconButton,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  LinearProgress,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Avatar\n} from '@mui/material';\nimport {\n  CameraAlt,\n  Upload,\n  Visibility,\n  Edit,\n  Delete,\n  Event,\n  BusinessCenter,\n  Email,\n  Analytics,\n  FileUpload,\n  QrCodeScanner,\n  ContactMail,\n  TrendingUp\n} from '@mui/icons-material';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'react-toastify';\ninterface ExhibitionEvent {\n  id: number;\n  name: string;\n  description?: string;\n  location?: string;\n  venue?: string;\n  start_date?: string;\n  end_date?: string;\n  status: 'planned' | 'active' | 'completed' | 'cancelled';\n  is_active: boolean;\n  auto_send_intro_email: boolean;\n  created_at: string;\n  card_scan_count?: number;\n  prospect_count?: number;\n}\ninterface BusinessCardScan {\n  id: number;\n  scan_id: string;\n  exhibition_event_id: number;\n  full_name?: string;\n  company_name?: string;\n  designation?: string;\n  email?: string;\n  phone?: string;\n  mobile?: string;\n  website?: string;\n  address?: string;\n  confidence_score?: number;\n  validation_status: 'pending' | 'validated' | 'rejected';\n  processing_status: 'scanned' | 'processed' | 'converted' | 'failed';\n  prospect_created: boolean;\n  intro_email_sent: boolean;\n  created_at: string;\n}\ninterface ExhibitionProspect {\n  id: number;\n  exhibition_event_id: number;\n  card_scan_id?: number;\n  full_name: string;\n  company_name: string;\n  designation?: string;\n  email?: string;\n  phone?: string;\n  mobile?: string;\n  website?: string;\n  address?: string;\n  lead_score?: number;\n  qualification_status: 'unqualified' | 'qualified' | 'hot' | 'cold';\n  interest_level?: 'high' | 'medium' | 'low';\n  status: 'new' | 'contacted' | 'qualified' | 'converted' | 'lost';\n  conversion_status: 'prospect' | 'lead' | 'customer';\n  created_at: string;\n  intro_email_sent_at?: string;\n  contact_attempts: number;\n}\n// Mock API service - would be replaced with actual API calls\nconst exhibitionAPI = {\n  getEvents: () => Promise.resolve([\n    {\n      id: 1,\n      name: \"Tech Expo 2024\",\n      description: \"Annual technology exhibition\",\n      location: \"Convention Center\",\n      venue: \"Hall A\",\n      start_date: \"2024-03-15\",\n      end_date: \"2024-03-17\",\n      status: \"active\" as const,\n      is_active: true,\n      auto_send_intro_email: true,\n      created_at: \"2024-02-01T10:00:00Z\",\n      card_scan_count: 25,\n      prospect_count: 18\n    },\n    {\n      id: 2,\n      name: \"Business Summit 2024\",\n      description: \"Corporate networking event\",\n      location: \"Downtown Hotel\",\n      venue: \"Ballroom\",\n      start_date: \"2024-04-10\",\n      end_date: \"2024-04-11\",\n      status: \"planned\" as const,\n      is_active: true,\n      auto_send_intro_email: true,\n      created_at: \"2024-02-15T09:00:00Z\",\n      card_scan_count: 0,\n      prospect_count: 0\n    }\n  ] as ExhibitionEvent[]),\n  getCardScans: (eventId: number) => Promise.resolve([\n    {\n      id: 1,\n      scan_id: \"scan_001\",\n      exhibition_event_id: eventId,\n      full_name: \"John Smith\",\n      company_name: \"TechCorp Solutions\",\n      designation: \"CEO\",\n      email: \"john.smith@techcorp.com\",\n      phone: \"+1-555-0123\",\n      mobile: \"+1-555-0124\",\n      website: \"https://techcorp.com\",\n      address: \"123 Business Ave, Tech City\",\n      confidence_score: 0.95,\n      validation_status: \"validated\" as const,\n      processing_status: \"converted\" as const,\n      prospect_created: true,\n      intro_email_sent: true,\n      created_at: \"2024-02-20T14:30:00Z\"\n    },\n    {\n      id: 2,\n      scan_id: \"scan_002\",\n      exhibition_event_id: eventId,\n      full_name: \"Sarah Johnson\",\n      company_name: \"Innovation Labs\",\n      designation: \"CTO\",\n      email: \"sarah.j@innovationlabs.com\",\n      phone: \"+1-555-0125\",\n      confidence_score: 0.87,\n      validation_status: \"pending\" as const,\n      processing_status: \"processed\" as const,\n      prospect_created: false,\n      intro_email_sent: false,\n      created_at: \"2024-02-21T09:15:00Z\"\n    }\n  ] as BusinessCardScan[]),\n  getProspects: (eventId: number) => Promise.resolve([\n    {\n      id: 1,\n      exhibition_event_id: eventId,\n      card_scan_id: 1,\n      full_name: \"John Smith\",\n      company_name: \"TechCorp Solutions\",\n      designation: \"CEO\",\n      email: \"john.smith@techcorp.com\",\n      phone: \"+1-555-0123\",\n      lead_score: 85,\n      qualification_status: \"qualified\" as const,\n      interest_level: \"high\" as const,\n      status: \"contacted\" as const,\n      conversion_status: \"lead\" as const,\n      created_at: \"2024-02-20T14:30:00Z\",\n      intro_email_sent_at: \"2024-02-20T15:00:00Z\",\n      contact_attempts: 2\n    }\n  ] as ExhibitionProspect[])\n};\nconst ExhibitionMode: React.FC = () => {\n  const [selectedEvent, setSelectedEvent] = useState<ExhibitionEvent | null>(null);\n  const [activeTab, setActiveTab] = useState<'events' | 'scans' | 'prospects' | 'analytics'>('events');\n  const [scanModalOpen, setScanModalOpen] = useState(false);\n  const [eventModalOpen, setEventModalOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [scanning, setScanning] = useState(false);\n  const queryClient = useQueryClient();\n  // Queries\n  const { data: events, isLoading: eventsLoading } = useQuery({\n    queryKey: ['exhibition-events'],\n    queryFn: exhibitionAPI.getEvents\n  });\n  const { data: cardScans, isLoading: scansLoading } = useQuery({\n    queryKey: ['card-scans', selectedEvent?.id],\n    queryFn: () => selectedEvent ? exhibitionAPI.getCardScans(selectedEvent.id) : Promise.resolve([]),\n    enabled: !!selectedEvent\n  });\n  const { data: prospects, isLoading: prospectsLoading } = useQuery({\n    queryKey: ['prospects', selectedEvent?.id],\n    queryFn: () => selectedEvent ? exhibitionAPI.getProspects(selectedEvent.id) : Promise.resolve([]),\n    enabled: !!selectedEvent\n  });\n  // Mock scan mutation\n  const scanMutation = useMutation({\n    mutationFn: async (file: File) => {\n      setScanning(true);\n      // Simulate OCR processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      setScanning(false);\n      return {\n        id: Date.now(),\n        scan_id: `scan_${Date.now()}`,\n        exhibition_event_id: selectedEvent?.id || 0,\n        full_name: \"Demo Contact\",\n        company_name: \"Demo Company\",\n        confidence_score: 0.9,\n        validation_status: \"pending\" as const,\n        processing_status: \"processed\" as const,\n        prospect_created: false,\n        intro_email_sent: false,\n        created_at: new Date().toISOString()\n      };\n    },\n    onSuccess: () => {\n      toast.success('Business card scanned successfully!');\n      setScanModalOpen(false);\n      setSelectedFile(null);\n      queryClient.invalidateQueries({ queryKey: ['card-scans'] });\n    },\n    onError: () => {\n      setScanning(false);\n      toast.error('Failed to scan business card');\n    }\n  });\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type.startsWith('image/')) {\n      setSelectedFile(file);\n    } else {\n      toast.error('Please select a valid image file');\n    }\n  };\n  const handleScanCard = () => {\n    if (selectedFile) {\n      scanMutation.mutate(selectedFile);\n    }\n  };\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'success';\n      case 'planned': return 'info';\n      case 'completed': return 'default';\n      case 'cancelled': return 'error';\n      case 'validated': return 'success';\n      case 'pending': return 'warning';\n      case 'rejected': return 'error';\n      case 'qualified': return 'success';\n      case 'hot': return 'error';\n      case 'converted': return 'success';\n      default: return 'default';\n    }\n  };\n  const formatDate = (dateStr: string) => {\n    return new Date(dateStr).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n  if (eventsLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Exhibition Mode\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Scan business cards, manage prospects, and track leads from exhibition events\n      </Typography>\n      {/* Tab Navigation */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Box display=\"flex\" gap={2}>\n          {[\n            { key: 'events', label: 'Events', icon: <Event /> },\n            { key: 'scans', label: 'Card Scans', icon: <QrCodeScanner /> },\n            { key: 'prospects', label: 'Prospects', icon: <ContactMail /> },\n            { key: 'analytics', label: 'Analytics', icon: <TrendingUp /> }\n          ].map(tab => (\n            <Button\n              key={tab.key}\n              variant={activeTab === tab.key ? 'contained' : 'text'}\n              startIcon={tab.icon}\n              onClick={() => setActiveTab(tab.key as any)}\n              sx={{ mb: 1 }}\n            >\n              {tab.label}\n            </Button>\n          ))}\n        </Box>\n      </Box>\n      {/* Events Tab */}\n      {activeTab === 'events' && (\n        <Box>\n          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h6\">Exhibition Events</Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<Event />}\n              onClick={() => setEventModalOpen(true)}\n            >\n              Create Event\n            </Button>\n          </Box>\n          <Grid container spacing={3}>\n            {events?.map(event => (\n              <Grid item xs={12} md={6} lg={4} key={event.id}>\n                <Card \n                  sx={{ \n                    cursor: 'pointer',\n                    border: selectedEvent?.id === event.id ? 2 : 0,\n                    borderColor: 'primary.main'\n                  }}\n                  onClick={() => setSelectedEvent(event)}\n                >\n                  <CardContent>\n                    <Box display=\"flex\" justifyContent=\"between\" alignItems=\"start\" mb={2}>\n                      <Typography variant=\"h6\" noWrap>\n                        {event.name}\n                      </Typography>\n                      <Chip \n                        label={event.status} \n                        color={getStatusColor(event.status) as any}\n                        size=\"small\"\n                      />\n                    </Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                      {event.description}\n                    </Typography>\n                    <Box display=\"flex\" gap={2} mb={2}>\n                      <Typography variant=\"body2\">\n                        📍 {event.location}\n                      </Typography>\n                    </Box>\n                    {event.start_date && (\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                        {formatDate(event.start_date)} - {event.end_date ? formatDate(event.end_date) : 'Ongoing'}\n                      </Typography>\n                    )}\n                    <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\">\n                      <Box display=\"flex\" gap={2}>\n                        <Chip \n                          label={`${event.card_scan_count || 0} Scans`} \n                          size=\"small\" \n                          variant=\"outlined\"\n                        />\n                        <Chip \n                          label={`${event.prospect_count || 0} Prospects`} \n                          size=\"small\" \n                          variant=\"outlined\"\n                        />\n                      </Box>\n                      {event.status === 'active' && (\n                        <Button\n                          size=\"small\"\n                          variant=\"contained\"\n                          startIcon={<CameraAlt />}\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setScanModalOpen(true);\n                          }}\n                        >\n                          Scan Card\n                        </Button>\n                      )}\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n      )}\n      {/* Card Scans Tab */}\n      {activeTab === 'scans' && selectedEvent && (\n        <Box>\n          <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={3}>\n            <Typography variant=\"h6\">\n              Card Scans - {selectedEvent.name}\n            </Typography>\n            <Button\n              variant=\"contained\"\n              startIcon={<CameraAlt />}\n              onClick={() => setScanModalOpen(true)}\n            >\n              Scan New Card\n            </Button>\n          </Box>\n          {scansLoading ? (\n            <CircularProgress />\n          ) : (\n            <List>\n              {cardScans?.map(scan => (\n                <ListItem key={scan.id} divider>\n                  <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n                    <BusinessCenter />\n                  </Avatar>\n                  <ListItemText\n                    primary={`${scan.full_name || 'Unknown'} - ${scan.company_name || 'Unknown Company'}`}\n                    secondary={\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {scan.designation} • {scan.email}\n                        </Typography>\n                        <Box display=\"flex\" gap={1} mt={1}>\n                          <Chip \n                            label={scan.validation_status} \n                            size=\"small\" \n                            color={getStatusColor(scan.validation_status) as any}\n                          />\n                          <Chip \n                            label={`${Math.round((scan.confidence_score || 0) * 100)}% confidence`} \n                            size=\"small\" \n                            variant=\"outlined\"\n                          />\n                          {scan.prospect_created && (\n                            <Chip label=\"Prospect Created\" size=\"small\" color=\"success\" />\n                          )}\n                          {scan.intro_email_sent && (\n                            <Chip label=\"Email Sent\" size=\"small\" color=\"info\" />\n                          )}\n                        </Box>\n                      </Box>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton size=\"small\">\n                      <Visibility />\n                    </IconButton>\n                    <IconButton size=\"small\">\n                      <Edit />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </Box>\n      )}\n      {/* Prospects Tab */}\n      {activeTab === 'prospects' && selectedEvent && (\n        <Box>\n          <Typography variant=\"h6\" sx={{ mb: 3 }}>\n            Prospects - {selectedEvent.name}\n          </Typography>\n          {prospectsLoading ? (\n            <CircularProgress />\n          ) : (\n            <List>\n              {prospects?.map(prospect => (\n                <ListItem key={prospect.id} divider>\n                  <Avatar sx={{ mr: 2, bgcolor: 'secondary.main' }}>\n                    <ContactMail />\n                  </Avatar>\n                  <ListItemText\n                    primary={`${prospect.full_name} - ${prospect.company_name}`}\n                    secondary={\n                      <Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {prospect.designation} • Score: {prospect.lead_score || 0}\n                        </Typography>\n                        <Box display=\"flex\" gap={1} mt={1}>\n                          <Chip \n                            label={prospect.qualification_status} \n                            size=\"small\" \n                            color={getStatusColor(prospect.qualification_status) as any}\n                          />\n                          <Chip \n                            label={prospect.status} \n                            size=\"small\" \n                            variant=\"outlined\"\n                          />\n                          {prospect.interest_level && (\n                            <Chip \n                              label={`${prospect.interest_level} interest`} \n                              size=\"small\" \n                              color={prospect.interest_level === 'high' ? 'success' : 'default'}\n                            />\n                          )}\n                        </Box>\n                      </Box>\n                    }\n                  />\n                  <ListItemSecondaryAction>\n                    <IconButton size=\"small\">\n                      <Email />\n                    </IconButton>\n                    <IconButton size=\"small\">\n                      <Edit />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          )}\n        </Box>\n      )}\n      {/* Analytics Tab */}\n      {activeTab === 'analytics' && (\n        <Box>\n          <Typography variant=\"h6\" sx={{ mb: 3 }}>\n            Exhibition Analytics\n          </Typography>\n          <Alert severity=\"info\">\n            Analytics dashboard will show conversion rates, lead quality metrics, \n            and performance comparisons across events.\n          </Alert>\n        </Box>\n      )}\n      {/* Card Scan Modal */}\n      <Dialog open={scanModalOpen} onClose={() => setScanModalOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Scan Business Card</DialogTitle>\n        <DialogContent>\n          {scanning ? (\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" py={4}>\n              <CircularProgress size={60} sx={{ mb: 2 }} />\n              <Typography variant=\"h6\" gutterBottom>\n                Processing Business Card...\n              </Typography>\n              <Typography color=\"text.secondary\">\n                Extracting contact information using OCR\n              </Typography>\n              <LinearProgress sx={{ width: '100%', mt: 2 }} />\n            </Box>\n          ) : (\n            <Box>\n              <Typography variant=\"body1\" sx={{ mb: 3 }}>\n                Upload an image of a business card to extract contact information automatically.\n              </Typography>\n              <Box \n                border={2} \n                borderColor={selectedFile ? 'primary.main' : 'grey.300'}\n                borderStyle=\"dashed\"\n                borderRadius={2}\n                p={4}\n                textAlign=\"center\"\n                sx={{ mb: 3 }}\n              >\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileSelect}\n                  style={{ display: 'none' }}\n                  id=\"file-upload\"\n                />\n                <label htmlFor=\"file-upload\">\n                  <IconButton component=\"span\" size=\"large\">\n                    <Upload fontSize=\"large\" />\n                  </IconButton>\n                </label>\n                <Typography variant=\"h6\" gutterBottom>\n                  {selectedFile ? selectedFile.name : 'Click to upload business card image'}\n                </Typography>\n                <Typography color=\"text.secondary\">\n                  Supports JPG, PNG, and other image formats\n                </Typography>\n              </Box>\n              {selectedFile && (\n                <Alert severity=\"success\" sx={{ mb: 2 }}>\n                  Business card image selected: {selectedFile.name}\n                </Alert>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setScanModalOpen(false)} disabled={scanning}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleScanCard} \n            variant=\"contained\" \n            disabled={!selectedFile || scanning}\n          >\n            {scanning ? 'Processing...' : 'Scan Card'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Event Creation Modal - Placeholder */}\n      <Dialog open={eventModalOpen} onClose={() => setEventModalOpen(false)}>\n        <DialogTitle>Create Exhibition Event</DialogTitle>\n        <DialogContent>\n          <Alert severity=\"info\">\n            Event creation form would be implemented here with fields for name, dates, location, etc.\n          </Alert>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setEventModalOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\">Create Event</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\nexport default ExhibitionMode;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/finance-dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingDown"},"fix":{"range":[364,380],"text":""},"desc":"Remove unused variable 'TrendingDown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Receipt' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Receipt"},"fix":{"range":[409,420],"text":""},"desc":"Remove unused variable 'Receipt'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/finance-dashboard.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Paper,\n  CircularProgress,\n  Alert,\n  Tabs,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  IconButton,\n  Button\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  AccountBalance,\n  Payment,\n  Receipt,\n  Analytics,\n  Refresh,\n  Download\n} from '@mui/icons-material';\nimport {Doughnut, Bar} from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement\n} from 'chart.js';\nimport axios from 'axios';\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  BarElement\n);\ninterface FinancialRatios {\n  current_ratio: number;\n  debt_to_equity: number;\n  working_capital: number;\n  total_assets: number;\n  total_liabilities: number;\n  total_equity: number;\n}\ninterface CashFlow {\n  inflow: number;\n  outflow: number;\n  net_flow: number;\n}\ninterface CostCenter {\n  name: string;\n  budget: number;\n  actual: number;\n  variance_percent: number;\n}\ninterface KPI {\n  code: string;\n  name: string;\n  category: string;\n  value: number;\n  target?: number;\n  variance?: number;\n  period_end: string;\n}\ninterface DashboardData {\n  period: {\n    start_date: string;\n    end_date: string;\n  };\n  financial_ratios: FinancialRatios;\n  cash_flow: CashFlow;\n  accounts_aging: {\n    overdue_payables: number;\n    overdue_receivables: number;\n  };\n  cost_centers: CostCenter[];\n  recent_kpis: KPI[];\n}\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`finance-tabpanel-${index}`}\n      aria-labelledby={`finance-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\nconst FinanceDashboard: React.FC = () => {\n  const [data, setData] = useState<DashboardData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const fetchDashboardData = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/finance/analytics/dashboard', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setData(response.data);\n      setError(null);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchDashboardData();\n  }, []);\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(2)}%`;\n  };\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n  if (error) {\n    return (\n      <Alert severity=\"error\" action={\n        <Button color=\"inherit\" size=\"small\" onClick={fetchDashboardData}>\n          Retry\n        </Button>\n      }>\n        {error}\n      </Alert>\n    );\n  }\n  if (!data) {return null;}\n  // Chart data for cash flow\n  const cashFlowChartData = {\n    labels: ['Inflow', 'Outflow'],\n    datasets: [\n      {\n        data: [data.cash_flow.inflow, data.cash_flow.outflow],\n        backgroundColor: ['#4caf50', '#f44336'],\n        borderWidth: 1\n      }\n    ]\n  };\n  // Chart data for cost center performance\n  const costCenterChartData = {\n    labels: data.cost_centers.map(cc => cc.name),\n    datasets: [\n      {\n        label: 'Budget',\n        data: data.cost_centers.map(cc => cc.budget),\n        backgroundColor: '#2196f3',\n        borderWidth: 1\n      },\n      {\n        label: 'Actual',\n        data: data.cost_centers.map(cc => cc.actual),\n        backgroundColor: '#ff9800',\n        borderWidth: 1\n      }\n    ]\n  };\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Finance Dashboard\n        </Typography>\n        <Box>\n          <IconButton onClick={fetchDashboardData} color=\"primary\">\n            <Refresh />\n          </IconButton>\n          <Button startIcon={<Download />} variant=\"outlined\" sx={{ ml: 1 }}>\n            Export\n          </Button>\n        </Box>\n      </Box>\n      {/* Key Metrics Cards */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <AccountBalance color=\"primary\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Assets\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(data.financial_ratios.total_assets)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Payment color=\"warning\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Liabilities\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(data.financial_ratios.total_liabilities)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <TrendingUp color=\"success\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Working Capital\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {formatCurrency(data.financial_ratios.working_capital)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\">\n                <Analytics color=\"info\" sx={{ mr: 2 }} />\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Current Ratio\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {data.financial_ratios.current_ratio.toFixed(2)}\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      {/* Tabs for detailed views */}\n      <Paper sx={{ width: '100%' }}>\n        <Tabs value={activeTab} onChange={handleTabChange} aria-label=\"finance dashboard tabs\">\n          <Tab label=\"Cash Flow\" />\n          <Tab label=\"Cost Centers\" />\n          <Tab label=\"KPIs\" />\n          <Tab label=\"Aging\" />\n        </Tabs>\n        {/* Cash Flow Tab */}\n        <TabPanel value={activeTab} index={0}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Cash Flow Overview\n                  </Typography>\n                  <Box sx={{ height: 300 }}>\n                    <Doughnut data={cashFlowChartData} />\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Cash Flow Details\n                  </Typography>\n                  <Box sx={{ mt: 2 }}>\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                      <Typography>Inflow:</Typography>\n                      <Typography color=\"success.main\">\n                        {formatCurrency(data.cash_flow.inflow)}\n                      </Typography>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                      <Typography>Outflow:</Typography>\n                      <Typography color=\"error.main\">\n                        {formatCurrency(data.cash_flow.outflow)}\n                      </Typography>\n                    </Box>\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                      <Typography variant=\"h6\">Net Flow:</Typography>\n                      <Typography \n                        variant=\"h6\" \n                        color={data.cash_flow.net_flow >= 0 ? 'success.main' : 'error.main'}\n                      >\n                        {formatCurrency(data.cash_flow.net_flow)}\n                      </Typography>\n                    </Box>\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </TabPanel>\n        {/* Cost Centers Tab */}\n        <TabPanel value={activeTab} index={1}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Cost Center Performance\n              </Typography>\n              <Box sx={{ height: 400, mb: 3 }}>\n                <Bar data={costCenterChartData} />\n              </Box>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Cost Center</TableCell>\n                      <TableCell align=\"right\">Budget</TableCell>\n                      <TableCell align=\"right\">Actual</TableCell>\n                      <TableCell align=\"right\">Variance %</TableCell>\n                      <TableCell align=\"right\">Status</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {data.cost_centers.map((cc, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{cc.name}</TableCell>\n                        <TableCell align=\"right\">{formatCurrency(cc.budget)}</TableCell>\n                        <TableCell align=\"right\">{formatCurrency(cc.actual)}</TableCell>\n                        <TableCell align=\"right\">{formatPercentage(cc.variance_percent)}</TableCell>\n                        <TableCell align=\"right\">\n                          <Chip\n                            label={cc.variance_percent > 10 ? 'Over Budget' : cc.variance_percent < -10 ? 'Under Budget' : 'On Track'}\n                            color={cc.variance_percent > 10 ? 'error' : cc.variance_percent < -10 ? 'warning' : 'success'}\n                            size=\"small\"\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </TabPanel>\n        {/* KPIs Tab */}\n        <TabPanel value={activeTab} index={2}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Recent Financial KPIs\n              </Typography>\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>KPI Name</TableCell>\n                      <TableCell>Category</TableCell>\n                      <TableCell align=\"right\">Value</TableCell>\n                      <TableCell align=\"right\">Target</TableCell>\n                      <TableCell align=\"right\">Variance %</TableCell>\n                      <TableCell>Period</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {data.recent_kpis.map((kpi, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{kpi.name}</TableCell>\n                        <TableCell>\n                          <Chip label={kpi.category} size=\"small\" />\n                        </TableCell>\n                        <TableCell align=\"right\">{kpi.value.toFixed(2)}</TableCell>\n                        <TableCell align=\"right\">\n                          {kpi.target ? kpi.target.toFixed(2) : 'N/A'}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {kpi.variance ? (\n                            <Typography color={kpi.variance >= 0 ? 'success.main' : 'error.main'}>\n                              {formatPercentage(kpi.variance)}\n                            </Typography>\n                          ) : 'N/A'}\n                        </TableCell>\n                        <TableCell>{new Date(kpi.period_end).toLocaleDateString()}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </CardContent>\n          </Card>\n        </TabPanel>\n        {/* Aging Tab */}\n        <TabPanel value={activeTab} index={3}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Overdue Receivables\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"warning.main\">\n                    {formatCurrency(data.accounts_aging.overdue_receivables)}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Amount past due date\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Overdue Payables\n                  </Typography>\n                  <Typography variant=\"h4\" color=\"error.main\">\n                    {formatCurrency(data.accounts_aging.overdue_payables)}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Amount past due date\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </TabPanel>\n      </Paper>\n    </Box>\n  );\n};\nexport default FinanceDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/financial-reports.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[309,324],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[324,338],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[338,348],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[348,360],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingUp"},"fix":{"range":[449,463],"text":""},"desc":"Remove unused variable 'TrendingUp'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"TrendingDown"},"fix":{"range":[463,479],"text":""},"desc":"Remove unused variable 'TrendingDown'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccountBalance' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccountBalance"},"fix":{"range":[479,497],"text":""},"desc":"Remove unused variable 'AccountBalance'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Assessment' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Assessment"},"fix":{"range":[497,511],"text":""},"desc":"Remove unused variable 'Assessment'."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/pages/financial-reports.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  Tabs,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Alert,\n  CircularProgress,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Divider\n} from '@mui/material';\nimport {\n  Download,\n  Print,\n  Refresh,\n  TrendingUp,\n  TrendingDown,\n  AccountBalance,\n  Assessment\n} from '@mui/icons-material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport {Bar} from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport axios from 'axios';\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\ninterface TrialBalanceItem {\n  account_code: string;\n  account_name: string;\n  debit_balance: number;\n  credit_balance: number;\n}\ninterface TrialBalance {\n  trial_balance: TrialBalanceItem[];\n  total_debits: number;\n  total_credits: number;\n  as_of_date: string;\n  organization_id: number;\n}\ninterface ProfitLossItem {\n  account_code: string;\n  account_name: string;\n  amount: number;\n}\ninterface ProfitLoss {\n  income: ProfitLossItem[];\n  expenses: ProfitLossItem[];\n  total_income: number;\n  total_expenses: number;\n  net_profit_loss: number;\n  from_date: string;\n  to_date: string;\n}\ninterface BalanceSheetItem {\n  account_code: string;\n  account_name: string;\n  amount: number;\n}\ninterface BalanceSheet {\n  assets: BalanceSheetItem[];\n  liabilities: BalanceSheetItem[];\n  equity: BalanceSheetItem[];\n  total_assets: number;\n  total_liabilities: number;\n  total_equity: number;\n  as_of_date: string;\n}\ninterface CashFlowItem {\n  account_code: string;\n  account_name: string;\n  amount: number;\n}\ninterface CashFlow {\n  operating_activities: CashFlowItem[];\n  investing_activities: CashFlowItem[];\n  financing_activities: CashFlowItem[];\n  net_operating_cash: number;\n  net_investing_cash: number;\n  net_financing_cash: number;\n  net_cash_flow: number;\n  opening_cash: number;\n  closing_cash: number;\n  from_date: string;\n  to_date: string;\n}\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`reports-tabpanel-${index}`}\n      aria-labelledby={`reports-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\nconst FinancialReports: React.FC = () => {\n  const [activeTab, setActiveTab] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  // Date filters\n  const [fromDate, setFromDate] = useState<Date | null>(new Date(new Date().getFullYear(), 0, 1)); // Start of year\n  const [toDate, setToDate] = useState<Date | null>(new Date()); // Today\n  const [asOfDate, setAsOfDate] = useState<Date | null>(new Date()); // For balance sheet and trial balance\n  // Report data\n  const [trialBalance, setTrialBalance] = useState<TrialBalance | null>(null);\n  const [profitLoss, setProfitLoss] = useState<ProfitLoss | null>(null);\n  const [balanceSheet, setBalanceSheet] = useState<BalanceSheet | null>(null);\n  const [cashFlow, setCashFlow] = useState<CashFlow | null>(null);\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n  const formatDate = (date: Date | null) => {\n    if (!date) {return '';}\n    return date.toISOString().split('T')[0];\n  };\n  const fetchTrialBalance = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/trial-balance', {\n        params: { as_of_date: formatDate(asOfDate) },\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setTrialBalance(response.data);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch trial balance');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchProfitLoss = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/profit-loss', {\n        params: { \n          from_date: formatDate(fromDate), \n          to_date: formatDate(toDate) \n        },\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setProfitLoss(response.data);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch profit & loss');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchBalanceSheet = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      const response = await axios.get('/api/v1/erp/balance-sheet', {\n        params: { as_of_date: formatDate(asOfDate) },\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setBalanceSheet(response.data);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch balance sheet');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchCashFlow = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('token');\n      // Note: This endpoint would need to be implemented in the backend\n      const response = await axios.get('/api/v1/erp/cash-flow', {\n        params: { \n          from_date: formatDate(fromDate), \n          to_date: formatDate(toDate) \n        },\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setCashFlow(response.data);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to fetch cash flow statement');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (activeTab === 0 && !trialBalance) {\n      fetchTrialBalance();\n    } else if (activeTab === 1 && !profitLoss) {\n      fetchProfitLoss();\n    } else if (activeTab === 2 && !balanceSheet) {\n      fetchBalanceSheet();\n    } else if (activeTab === 3 && !cashFlow) {\n      fetchCashFlow();\n    }\n  }, [activeTab]);\n  // Chart data for P&L\n  const profitLossChartData = profitLoss ? {\n    labels: ['Income', 'Expenses', 'Net Profit/Loss'],\n    datasets: [\n      {\n        label: 'Amount',\n        data: [profitLoss.total_income, profitLoss.total_expenses, profitLoss.net_profit_loss],\n        backgroundColor: ['#4caf50', '#f44336', profitLoss.net_profit_loss >= 0 ? '#4caf50' : '#f44336'],\n        borderWidth: 1\n      }\n    ]\n  } : null;\n  // Chart data for Balance Sheet\n  const balanceSheetChartData = balanceSheet ? {\n    labels: ['Assets', 'Liabilities', 'Equity'],\n    datasets: [\n      {\n        label: 'Amount',\n        data: [balanceSheet.total_assets, balanceSheet.total_liabilities, balanceSheet.total_equity],\n        backgroundColor: ['#2196f3', '#ff9800', '#9c27b0'],\n        borderWidth: 1\n      }\n    ]\n  } : null;\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <Box sx={{ p: 3 }}>\n        {/* Header */}\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n          <Typography variant=\"h4\" component=\"h1\">\n            Financial Reports\n          </Typography>\n          <Box>\n            <IconButton \n              onClick={() => {\n                if (activeTab === 0) {fetchTrialBalance();}\n                else if (activeTab === 1) {fetchProfitLoss();}\n                else if (activeTab === 2) {fetchBalanceSheet();}\n                else if (activeTab === 3) {fetchCashFlow();}\n              }} \n              color=\"primary\"\n            >\n              <Refresh />\n            </IconButton>\n            <Button startIcon={<Download />} variant=\"outlined\" sx={{ ml: 1 }}>\n              Export\n            </Button>\n            <Button startIcon={<Print />} variant=\"outlined\" sx={{ ml: 1 }}>\n              Print\n            </Button>\n          </Box>\n        </Box>\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n        {/* Tabs */}\n        <Paper sx={{ width: '100%' }}>\n          <Tabs value={activeTab} onChange={handleTabChange} aria-label=\"financial reports tabs\">\n            <Tab label=\"Trial Balance\" />\n            <Tab label=\"Profit & Loss\" />\n            <Tab label=\"Balance Sheet\" />\n            <Tab label=\"Cash Flow\" />\n          </Tabs>\n          {/* Trial Balance */}\n          <TabPanel value={activeTab} index={0}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={4}>\n                <Card>\n                  <CardContent>\n                    <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                      <DatePicker\n                        label=\"As of Date\"\n                        value={asOfDate}\n                        onChange={setAsOfDate}\n                        renderInput={(params) => <TextField {...params} fullWidth />}\n                      />\n                      <Button onClick={fetchTrialBalance} variant=\"contained\" sx={{ ml: 1 }}>\n                        Generate\n                      </Button>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={8}>\n                {trialBalance && (\n                  <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                      <Card>\n                        <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom>\n                            Total Debits\n                          </Typography>\n                          <Typography variant=\"h6\" color=\"error.main\">\n                            {formatCurrency(trialBalance.total_debits)}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                    <Grid item xs={6}>\n                      <Card>\n                        <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom>\n                            Total Credits\n                          </Typography>\n                          <Typography variant=\"h6\" color=\"success.main\">\n                            {formatCurrency(trialBalance.total_credits)}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n            {loading ? (\n              <Box display=\"flex\" justifyContent=\"center\" my={4}>\n                <CircularProgress />\n              </Box>\n            ) : trialBalance ? (\n              <TableContainer component={Paper} sx={{ mt: 3 }}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Account Code</TableCell>\n                      <TableCell>Account Name</TableCell>\n                      <TableCell align=\"right\">Debit Balance</TableCell>\n                      <TableCell align=\"right\">Credit Balance</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {trialBalance.trial_balance.map((item, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{item.account_code}</TableCell>\n                        <TableCell>{item.account_name}</TableCell>\n                        <TableCell align=\"right\">\n                          {item.debit_balance > 0 ? formatCurrency(item.debit_balance) : '-'}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {item.credit_balance > 0 ? formatCurrency(item.credit_balance) : '-'}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                    <TableRow sx={{ borderTop: 2 }}>\n                      <TableCell colSpan={2}><strong>Total</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{formatCurrency(trialBalance.total_debits)}</strong></TableCell>\n                      <TableCell align=\"right\"><strong>{formatCurrency(trialBalance.total_credits)}</strong></TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            ) : null}\n          </TabPanel>\n          {/* Profit & Loss */}\n          <TabPanel value={activeTab} index={1}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Grid container spacing={2} alignItems=\"center\">\n                      <Grid item xs={5}>\n                        <DatePicker\n                          label=\"From Date\"\n                          value={fromDate}\n                          onChange={setFromDate}\n                          renderInput={(params) => <TextField {...params} fullWidth />}\n                        />\n                      </Grid>\n                      <Grid item xs={5}>\n                        <DatePicker\n                          label=\"To Date\"\n                          value={toDate}\n                          onChange={setToDate}\n                          renderInput={(params) => <TextField {...params} fullWidth />}\n                        />\n                      </Grid>\n                      <Grid item xs={2}>\n                        <Button onClick={fetchProfitLoss} variant=\"contained\" fullWidth>\n                          Generate\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                {profitLoss && profitLossChartData && (\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        P&L Summary\n                      </Typography>\n                      <Box sx={{ height: 200 }}>\n                        <Bar data={profitLossChartData} />\n                      </Box>\n                    </CardContent>\n                  </Card>\n                )}\n              </Grid>\n            </Grid>\n            {loading ? (\n              <Box display=\"flex\" justifyContent=\"center\" my={4}>\n                <CircularProgress />\n              </Box>\n            ) : profitLoss ? (\n              <Grid container spacing={3} sx={{ mt: 1 }}>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"success.main\" gutterBottom>\n                        Income\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Account</TableCell>\n                            <TableCell align=\"right\">Amount</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {profitLoss.income.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Income</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(profitLoss.total_income)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"error.main\" gutterBottom>\n                        Expenses\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Account</TableCell>\n                            <TableCell align=\"right\">Amount</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {profitLoss.expenses.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Expenses</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(profitLoss.total_expenses)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12}>\n                  <Card>\n                    <CardContent>\n                      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                        <Typography variant=\"h5\">\n                          Net {profitLoss.net_profit_loss >= 0 ? 'Profit' : 'Loss'}: \n                        </Typography>\n                        <Typography \n                          variant=\"h4\" \n                          color={profitLoss.net_profit_loss >= 0 ? 'success.main' : 'error.main'}\n                          sx={{ ml: 2 }}\n                        >\n                          {formatCurrency(Math.abs(profitLoss.net_profit_loss))}\n                        </Typography>\n                      </Box>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            ) : null}\n          </TabPanel>\n          {/* Balance Sheet */}\n          <TabPanel value={activeTab} index={2}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={4}>\n                <Card>\n                  <CardContent>\n                    <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                      <DatePicker\n                        label=\"As of Date\"\n                        value={asOfDate}\n                        onChange={setAsOfDate}\n                        renderInput={(params) => <TextField {...params} fullWidth />}\n                      />\n                      <Button onClick={fetchBalanceSheet} variant=\"contained\" sx={{ ml: 1 }}>\n                        Generate\n                      </Button>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={8}>\n                {balanceSheet && balanceSheetChartData && (\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Balance Sheet Summary\n                      </Typography>\n                      <Box sx={{ height: 200 }}>\n                        <Bar data={balanceSheetChartData} />\n                      </Box>\n                    </CardContent>\n                  </Card>\n                )}\n              </Grid>\n            </Grid>\n            {loading ? (\n              <Box display=\"flex\" justifyContent=\"center\" my={4}>\n                <CircularProgress />\n              </Box>\n            ) : balanceSheet ? (\n              <Grid container spacing={3} sx={{ mt: 1 }}>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"primary.main\" gutterBottom>\n                        Assets\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableBody>\n                          {balanceSheet.assets.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Assets</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(balanceSheet.total_assets)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"warning.main\" gutterBottom>\n                        Liabilities\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableBody>\n                          {balanceSheet.liabilities.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Liabilities</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(balanceSheet.total_liabilities)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n                <Grid item xs={12} md={4}>\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" color=\"secondary.main\" gutterBottom>\n                        Equity\n                      </Typography>\n                      <Table size=\"small\">\n                        <TableBody>\n                          {balanceSheet.equity.map((item, index) => (\n                            <TableRow key={index}>\n                              <TableCell>{item.account_name}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(item.amount)}</TableCell>\n                            </TableRow>\n                          ))}\n                          <TableRow sx={{ borderTop: 1 }}>\n                            <TableCell><strong>Total Equity</strong></TableCell>\n                            <TableCell align=\"right\"><strong>{formatCurrency(balanceSheet.total_equity)}</strong></TableCell>\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              </Grid>\n            ) : null}\n          </TabPanel>\n          {/* Cash Flow */}\n          <TabPanel value={activeTab} index={3}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={6}>\n                <Card>\n                  <CardContent>\n                    <Grid container spacing={2} alignItems=\"center\">\n                      <Grid item xs={5}>\n                        <DatePicker\n                          label=\"From Date\"\n                          value={fromDate}\n                          onChange={setFromDate}\n                          renderInput={(params) => <TextField {...params} fullWidth />}\n                        />\n                      </Grid>\n                      <Grid item xs={5}>\n                        <DatePicker\n                          label=\"To Date\"\n                          value={toDate}\n                          onChange={setToDate}\n                          renderInput={(params) => <TextField {...params} fullWidth />}\n                        />\n                      </Grid>\n                      <Grid item xs={2}>\n                        <Button onClick={fetchCashFlow} variant=\"contained\" fullWidth>\n                          Generate\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                {cashFlow && (\n                  <Card>\n                    <CardContent>\n                      <Typography variant=\"h6\" gutterBottom>\n                        Net Cash Flow: \n                        <Typography \n                          component=\"span\" \n                          color={cashFlow.net_cash_flow >= 0 ? 'success.main' : 'error.main'}\n                          sx={{ ml: 1 }}\n                        >\n                          {formatCurrency(cashFlow.net_cash_flow)}\n                        </Typography>\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                )}\n              </Grid>\n            </Grid>\n            {loading ? (\n              <Box display=\"flex\" justifyContent=\"center\" my={4}>\n                <CircularProgress />\n              </Box>\n            ) : cashFlow ? (\n              <Card sx={{ mt: 3 }}>\n                <CardContent>\n                  <Typography variant=\"h6\" gutterBottom>\n                    Cash Flow Statement\n                  </Typography>\n                  <Grid container spacing={3}>\n                    <Grid item xs={12} md={4}>\n                      <Typography variant=\"subtitle1\" gutterBottom>\n                        Operating Activities\n                      </Typography>\n                      {cashFlow.operating_activities.map((item, index) => (\n                        <Box key={index} display=\"flex\" justifyContent=\"space-between\">\n                          <Typography variant=\"body2\">{item.account_name}</Typography>\n                          <Typography variant=\"body2\">{formatCurrency(item.amount)}</Typography>\n                        </Box>\n                      ))}\n                      <Divider sx={{ my: 1 }} />\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body1\"><strong>Net Operating Cash</strong></Typography>\n                        <Typography variant=\"body1\"><strong>{formatCurrency(cashFlow.net_operating_cash)}</strong></Typography>\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Typography variant=\"subtitle1\" gutterBottom>\n                        Investing Activities\n                      </Typography>\n                      {cashFlow.investing_activities.map((item, index) => (\n                        <Box key={index} display=\"flex\" justifyContent=\"space-between\">\n                          <Typography variant=\"body2\">{item.account_name}</Typography>\n                          <Typography variant=\"body2\">{formatCurrency(item.amount)}</Typography>\n                        </Box>\n                      ))}\n                      <Divider sx={{ my: 1 }} />\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body1\"><strong>Net Investing Cash</strong></Typography>\n                        <Typography variant=\"body1\"><strong>{formatCurrency(cashFlow.net_investing_cash)}</strong></Typography>\n                      </Box>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <Typography variant=\"subtitle1\" gutterBottom>\n                        Financing Activities\n                      </Typography>\n                      {cashFlow.financing_activities.map((item, index) => (\n                        <Box key={index} display=\"flex\" justifyContent=\"space-between\">\n                          <Typography variant=\"body2\">{item.account_name}</Typography>\n                          <Typography variant=\"body2\">{formatCurrency(item.amount)}</Typography>\n                        </Box>\n                      ))}\n                      <Divider sx={{ my: 1 }} />\n                      <Box display=\"flex\" justifyContent=\"space-between\">\n                        <Typography variant=\"body1\"><strong>Net Financing Cash</strong></Typography>\n                        <Typography variant=\"body1\"><strong>{formatCurrency(cashFlow.net_financing_cash)}</strong></Typography>\n                      </Box>\n                    </Grid>\n                  </Grid>\n                </CardContent>\n              </Card>\n            ) : null}\n          </TabPanel>\n        </Paper>\n      </Box>\n    </LocalizationProvider>\n  );\n};\nexport default FinancialReports;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/floating-labels-test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/general-ledger.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/index.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":4,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useRouter } from 'next/navigation';\nimport { useEffect } from 'react';\nexport default function Home() {\n  const router = useRouter();\n  useEffect(() => {\n    // Redirect to login page immediately\n    router.push('/login');\n  }, [router]);\n  return null;  // Render nothing while redirecting\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/login.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Checkbox' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"Checkbox"},"fix":{"range":[120,132],"text":""},"desc":"Remove unused variable 'Checkbox'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControlLabel' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControlLabel"},"fix":{"range":[132,152],"text":""},"desc":"Remove unused variable 'FormControlLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'IconButton' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"IconButton"},"fix":{"range":[152,166],"text":""},"desc":"Remove unused variable 'IconButton'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputAdornment' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputAdornment"},"fix":{"range":[166,184],"text":""},"desc":"Remove unused variable 'InputAdornment'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useRouter' is defined but never used.","line":20,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"useRouter"},"fix":{"range":[530,570],"text":""},"desc":"Remove unused variable 'useRouter'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Typography, \n  Container,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  IconButton,\n  InputAdornment,\n  Divider\n} from '@mui/material';\nimport {PlayArrow} from '@mui/icons-material';\nimport Image from 'next/image';\nimport { toast } from 'react-toastify';\nimport UnifiedLoginForm from '../components/UnifiedLoginForm';\nimport ForgotPasswordModal from '../components/ForgotPasswordModal';\nimport DemoModeDialog from '../components/DemoModeDialog';\nimport { useRouter } from 'next/router';\nimport { useAuth } from '../context/AuthContext';\nconst LoginPage: React.FC = () => {\n  const [forgotPasswordOpen, setForgotPasswordOpen] = useState(false);\n  const [demoModeOpen, setDemoModeOpen] = useState(false);\n  const { login } = useAuth();\n  // Check if demo mode should be activated after login\n  useEffect(() => {\n    const pendingDemo = localStorage.getItem('pendingDemoMode');\n    if (pendingDemo === 'true') {\n      localStorage.removeItem('pendingDemoMode');\n      localStorage.setItem('demoMode', 'true');\n    }\n  }, []);\n  const handleLogin = async (token: string, loginResponse?: any) => {\n    console.log('[Login] Login successful, processing response:', {\n      hasToken: !!token,\n      hasLoginResponse: !!loginResponse,\n      organizationId: loginResponse?.organization_id,\n      userRole: loginResponse?.user_role,\n      mustChangePassword: loginResponse?.must_change_password,\n      isSuperAdmin: loginResponse?.user?.is_super_admin,\n      isDemoMode: loginResponse?.demo_mode,\n      timestamp: new Date().toISOString()\n    });\n    // Always save token to localStorage before anything else\n    if (token) {\n      localStorage.setItem('token', token);\n    }\n    try {\n      console.log('[Login] Calling AuthContext login method to establish session');\n      // Use AuthContext login method to establish full context before navigation\n      await login(loginResponse);\n      console.log('[Login] AuthContext login completed - session established');\n      console.log('[Login] Current localStorage state:', {\n        hasToken: !!localStorage.getItem('token'),\n        hasUserRole: !!localStorage.getItem('user_role'),\n        hasSuperAdminFlag: !!localStorage.getItem('is_super_admin'),\n        isDemoMode: !!localStorage.getItem('demoMode')\n      });\n      // Check if this is demo mode\n      if (loginResponse?.demo_mode || localStorage.getItem('demoMode') === 'true') {\n        console.log('[Login] Demo mode activated - redirecting to demo page');\n        window.location.href = '/demo';\n        return;\n      }\n      // Check if password change is required (not mandatory for OTP login)\n      if (loginResponse?.must_change_password && !loginResponse?.otp_login) {\n        console.log('[Login] Password change required - redirecting to password reset');\n        // Use hard reload to avoid SPA race condition - ensures token is present for AuthProvider's effect\n        window.location.href = '/password-reset';\n      } else {\n        console.log('[Login] Login complete - redirecting to dashboard');\n        // Use hard reload to avoid SPA race condition - ensures token is present for AuthProvider's effect\n        window.location.href = '/dashboard';\n      }\n    } catch (error) {\n      console.error('[Login] Failed to establish session:', error);\n      toast.error('Failed to establish secure session. Please try again.', {\n        position: \"top-right\",\n        autoClose: 5000,\n      });\n    }\n  };\n  return (\n    <Container maxWidth=\"xs\">\n      <Box sx={{ mt: 4, textAlign: 'center' }}>\n        <Image \n          src=\"/Tritiq.png\" \n          alt=\"TRITIQ ERP\" \n          width={300}\n          height={120}\n          style={{ maxWidth: '100%', height: 'auto', marginBottom: '16px' }}\n          priority\n        />\n        <Typography variant=\"h6\" component=\"h2\" gutterBottom color=\"textSecondary\">\n          Enterprise Resource Planning System\n        </Typography>\n        <Box sx={{ p: 3 }}>\n          <UnifiedLoginForm onLogin={handleLogin} />\n        </Box>\n        <Box sx={{ mt: 2 }}>\n          <Button\n            variant=\"text\"\n            color=\"primary\"\n            onClick={() => setForgotPasswordOpen(true)}\n          >\n            Forgot Password?\n          </Button>\n        </Box>\n        {/* Demo Mode Section */}\n        <Box sx={{ mt: 3, mb: 2 }}>\n          <Divider sx={{ mb: 2 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              OR\n            </Typography>\n          </Divider>\n          <Button\n            variant=\"outlined\"\n            fullWidth\n            startIcon={<PlayArrow />}\n            onClick={() => setDemoModeOpen(true)}\n            sx={{\n              borderRadius: 2,\n              py: 1.5,\n              borderColor: 'primary.light',\n              '&:hover': {\n                borderColor: 'primary.main',\n                backgroundColor: 'primary.light',\n                color: 'primary.contrastText'\n              }\n            }}\n          >\n            Try Demo Mode\n          </Button>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1, textAlign: 'center' }}>\n            Experience all features with sample data\n          </Typography>\n        </Box>\n      </Box>\n      {/* Forgot Password Modal */}\n      <ForgotPasswordModal\n        open={forgotPasswordOpen}\n        onClose={() => setForgotPasswordOpen(false)}\n        onSuccess={() => {\n          setForgotPasswordOpen(false);\n          // Show success message or redirect\n        }}\n      />\n      {/* Demo Mode Dialog */}\n      <DemoModeDialog\n        open={demoModeOpen}\n        onClose={() => setDemoModeOpen(false)}\n        onDemoStart={handleLogin}\n      />\n    </Container>\n  );\n};\nexport default LoginPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/notification-demo.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Divider' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"Divider"},"fix":{"range":[216,227],"text":""},"desc":"Remove unused variable 'Divider'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/pages/notification-demo.tsx\n// Demo page to showcase notification components\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  Alert\n} from '@mui/material';\nimport {\n  Notifications,\n  Settings,\n  Send,\n  Dashboard\n} from '@mui/icons-material';\nimport NotificationBell from '../components/NotificationBell';\nimport NotificationSettingsModal from '../components/NotificationSettingsModal';\nimport AlertsFeed from '../components/AlertsFeed';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ToastContainer } from 'react-toastify';\n// Create a query client for the demo\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: false,\n    },\n  },\n});\nconst NotificationDemo: React.FC = () => {\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const handleOpenSettings = () => {\n    setSettingsOpen(true);\n  };\n  const handleCloseSettings = () => {\n    setSettingsOpen(false);\n  };\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Container maxWidth=\"xl\" sx={{ py: 4 }}>\n        <Box sx={{ mb: 4 }}>\n          <Typography variant=\"h3\" component=\"h1\" gutterBottom>\n            🔔 Notification & Alerts System Demo\n          </Typography>\n          <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n            Service CRM Vertical Slice Implementation\n          </Typography>\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\n            This demo showcases the complete notification system including real-time alerts, \n            user preferences, and workflow integration for the Service CRM platform.\n          </Alert>\n        </Box>\n        <Grid container spacing={4}>\n          {/* Notification Bell Demo */}\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <Notifications sx={{ mr: 1 }} />\n                  <Typography variant=\"h5\" component=\"h2\">\n                    Notification Bell\n                  </Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Real-time notification dropdown with unread count badge and quick actions.\n                </Typography>\n                <Box sx={{ display: 'flex', justifyContent: 'center', p: 3, bgcolor: 'grey.50', borderRadius: 1 }}>\n                  <NotificationBell onSettingsClick={handleOpenSettings} />\n                </Box>\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                  Click the bell icon to view notifications. Badge shows unread count.\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          {/* Settings Modal Demo */}\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <Settings sx={{ mr: 1 }} />\n                  <Typography variant=\"h5\" component=\"h2\">\n                    Notification Settings\n                  </Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Comprehensive user preference management for all notification types and channels.\n                </Typography>\n                <Button\n                  variant=\"contained\"\n                  startIcon={<Settings />}\n                  onClick={handleOpenSettings}\n                  fullWidth\n                >\n                  Open Settings Modal\n                </Button>\n                <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n                  Configure notification preferences for email, SMS, push, and in-app alerts.\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          {/* Alerts Feed Demo */}\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                  <Dashboard sx={{ mr: 1 }} />\n                  <Typography variant=\"h5\" component=\"h2\">\n                    Alerts Feed\n                  </Typography>\n                </Box>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n                  Real-time alerts and notifications feed with filtering, bulk actions, and priority indicators.\n                </Typography>\n                <AlertsFeed \n                  showFilters={true}\n                  maxHeight={400}\n                  autoRefresh={true}\n                  refreshInterval={30000}\n                />\n              </CardContent>\n            </Card>\n          </Grid>\n          {/* Feature Overview */}\n          <Grid item xs={12}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                🚀 Implemented Features\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Notifications color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Multi-Channel Notifications\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Email, SMS, Push, In-App\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Settings color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      User Preferences\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Granular opt-in/out controls\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Send color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Workflow Integration\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Automated triggers for CRM events\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Dashboard color=\"primary\" sx={{ fontSize: 40, mb: 1 }} />\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Real-Time Updates\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Live feed with auto-refresh\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n          {/* Implementation Status */}\n          <Grid item xs={12}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                📋 Implementation Status\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"success.main\" gutterBottom>\n                    ✅ Completed Backend Features\n                  </Typography>\n                  <ul style={{ margin: 0, paddingLeft: 20 }}>\n                    <li>SQLAlchemy models (NotificationTemplate, NotificationLog, NotificationPreference)</li>\n                    <li>FastAPI endpoints for CRUD operations</li>\n                    <li>User preference management API</li>\n                    <li>Multi-channel notification service</li>\n                    <li>Email/SMS/Push gateway integration (mockable)</li>\n                    <li>Automated trigger system</li>\n                    <li>Unit tests and service validation</li>\n                  </ul>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <Typography variant=\"subtitle2\" color=\"success.main\" gutterBottom>\n                    ✅ Completed Frontend Features\n                  </Typography>\n                  <ul style={{ margin: 0, paddingLeft: 20 }}>\n                    <li>NotificationBell component with unread count</li>\n                    <li>NotificationSettingsModal for preferences</li>\n                    <li>AlertsFeed with filtering and bulk actions</li>\n                    <li>Real-time updates via polling</li>\n                    <li>Workflow integration utilities</li>\n                    <li>TypeScript interfaces and services</li>\n                    <li>Material-UI responsive design</li>\n                  </ul>\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n        </Grid>\n        {/* Settings Modal */}\n        <NotificationSettingsModal\n          open={settingsOpen}\n          onClose={handleCloseSettings}\n          userId={1}\n          userType=\"user\"\n        />\n        {/* Toast Container for notifications */}\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n        />\n      </Container>\n    </QueryClientProvider>\n  );\n};\nexport default NotificationDemo;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/password-reset.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/reports.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier expected.","line":114,"column":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState } from 'react';\nimport '../styles/print.css';\nimport {\n  Box,\n  Container,\n  Typography,\n  Tab,\n  Tabs,\n  Paper,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n  Switch,\n  FormControlLabel,\n  Alert\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport {\n  Assessment,\n  TrendingUp,\n  TrendingDown,\n  Download,\n  Print,\n  Refresh,\n  Business,\n  Person,\n  Inventory,\n  Warning,\n  AccountBalance\n} from '@mui/icons-material';\nimport { useQuery } from '@tanstack/react-query';\nimport { reportsService } from '../services/authService';\nimport MegaMenu from '../components/MegaMenu';\nimport ExportPrintToolbar from '../components/ExportPrintToolbar';\nimport { canAccessLedger } from '../types/user.types';\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`reports-tabpanel-${index}`}\n      aria-labelledby={`reports-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\nconst ReportsPage: React.FC = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const [user] = useState({ id: 1, email: 'demo@example.com', role: 'admin' });\n  const [dateRange, setDateRange] = useState({\n    start: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0], // First day of current month\n    end: new Date().toISOString().split('T')[0]\n  });\n  const [salesFilters, setSalesFilters] = useState({\n    customer_id: '',\n    search: ''\n  });\n  const [purchaseFilters, setPurchaseFilters] = useState({\n    vendor_id: '',\n    search: ''\n  });\n  const [inventoryFilters, setInventoryFilters] = useState({\n    include_zero_stock: false,\n    search: ''\n  });\n  const [pendingOrdersFilters, setPendingOrdersFilters] = useState({\n    order_type: 'all',\n    search: ''\n  });\n  // Ledger specific state\n  const [ledgerType, setLedgerType] = useState<'complete' | 'outstanding'>('complete');\n  const [ledgerFilters, setLedgerFilters] = useState({\n    start_date: dateRange.start,\n    end_date: dateRange.end,\n    account_type: 'all',\n    account_id: '',\n    voucher_type: 'all'\n  });\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n  const handleLogout = () => {\n    // Handle logout\n  };\n  const handleDateChange = (field: 'start' | 'end', value: string) => {\n    setDateRange(prev => ({ ...prev, [field]: value }));\n  };\n  // Fetch dashboard statistics\nconst { data: dashboardStats, isLoading: statsLoading, refetch:} = useQuery({\n    queryKey: ['dashboardStats'],\n    queryFn: reportsService.getDashboardStats,\n    enabled: true,\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n  // Fetch sales report\n  const { data: salesReport, isLoading: salesLoading, refetch: refetchSales } = useQuery({\n    queryKey: ['salesReport', dateRange.start, dateRange.end, salesFilters],\n    queryFn: () => reportsService.getSalesReport({\n      start_date: dateRange.start,\n      end_date: dateRange.end,\n      customer_id: salesFilters.customer_id || undefined,\n      search: salesFilters.search || undefined\n    }),\n    enabled: tabValue === 1\n  });\n  // Fetch purchase report\n  const { data: purchaseReport, isLoading: purchaseLoading, refetch: refetchPurchase } = useQuery({\n    queryKey: ['purchaseReport', dateRange.start, dateRange.end, purchaseFilters],\n    queryFn: () => reportsService.getPurchaseReport({\n      start_date: dateRange.start,\n      end_date: dateRange.end,\n      vendor_id: purchaseFilters.vendor_id || undefined,\n      search: purchaseFilters.search || undefined\n    }),\n    enabled: tabValue === 2\n  });\n  // Fetch inventory report\n  const { data: inventoryReport, isLoading: inventoryLoading, refetch: refetchInventory } = useQuery({\n    queryKey: ['inventoryReport', inventoryFilters],\n    queryFn: () => reportsService.getInventoryReport(inventoryFilters.include_zero_stock),\n    enabled: tabValue === 3\n  });\n  // Fetch pending orders\n  const { data: pendingOrders, isLoading: ordersLoading, refetch: refetchOrders } = useQuery({\n    queryKey: ['pendingOrders', pendingOrdersFilters],\n    queryFn: () => reportsService.getPendingOrders(pendingOrdersFilters.order_type),\n    enabled: tabValue === 4\n  });\n  // Fetch complete ledger\n  const { data: completeLedger, isLoading: completeLedgerLoading, refetch: refetchCompleteLedger } = useQuery({\n    queryKey: ['completeLedger', ledgerFilters],\n    queryFn: () => reportsService.getCompleteLedger(ledgerFilters),\n    enabled: tabValue === 5 && ledgerType === 'complete' && canAccessLedger(user)\n  });\n  // Fetch outstanding ledger  \n  const { data: outstandingLedger, isLoading: outstandingLedgerLoading, refetch: refetchOutstandingLedger } = useQuery({\n    queryKey: ['outstandingLedger', ledgerFilters],\n    queryFn: () => reportsService.getOutstandingLedger(ledgerFilters),\n    enabled: tabValue === 5 && ledgerType === 'outstanding' && canAccessLedger(user)\n  });\n  const handleLedgerFilterChange = (field: string, value: string) => {\n    setLedgerFilters(prev => ({ ...prev, [field]: value }));\n  };\n  const handleLedgerTypeChange = (type: 'complete' | 'outstanding') => {\n    setLedgerType(type);\n  };\n  const renderSummaryCards = () => {\n    if (statsLoading || !dashboardStats) {\n      return <Typography>Loading statistics...</Typography>;\n    }\n    const cards = [\n      {\n        title: 'Vendors',\n        value: dashboardStats.masters?.vendors || 0,\n        color: '#1976D2',\n        icon: <Business />\n      },\n      {\n        title: 'Customers', \n        value: dashboardStats.masters?.customers || 0,\n        color: '#2E7D32',\n        icon: <Person />\n      },\n      {\n        title: 'Products',\n        value: dashboardStats.masters?.products || 0,\n        color: '#7B1FA2',\n        icon: <Inventory />\n      },\n      {\n        title: 'Low Stock Items',\n        value: dashboardStats.inventory?.low_stock_items || 0,\n        color: '#F57C00',\n        icon: <Warning />\n      }\n    ];\n    return (\n      <Grid container spacing={3}>\n        {cards.map((card, index) => (\n          <Grid\n            key={index}\n            size={{\n              xs: 12,\n              sm: 6,\n              md: 3\n            }}>\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Box>\n                    <Typography color=\"textSecondary\" gutterBottom>\n                      {card.title}\n                    </Typography>\n                    <Typography variant=\"h4\" component=\"h2\">\n                      {card.value}\n                    </Typography>\n                  </Box>\n                  <Box sx={{ color: card.color }}>\n                    {card.icon}\n                  </Box>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  };\n  const renderVoucherTable = (vouchers: any[], title: string, reportType: string, filters?: any) => {\n    const getExportHandler = () => {\n      switch (reportType) {\n        case 'sales':\n          return () => reportsService.exportSalesReportExcel({\n            start_date: dateRange.start,\n            end_date: dateRange.end,\n            ...filters\n          });\n        case 'purchase':\n          return () => reportsService.exportPurchaseReportExcel({\n            start_date: dateRange.start,\n            end_date: dateRange.end,\n            ...filters\n          });\n        case 'pending-orders':\n          return () => reportsService.exportPendingOrdersExcel(filters);\n        default:\n          return undefined;\n      }\n    };\n    return (\n      <TableContainer component={Paper}>\n        <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Typography variant=\"h6\">{title}</Typography>\n          <ExportPrintToolbar\n            onExportExcel={getExportHandler()}\n            filename={`${reportType.replace('-', '_')}_report`}\n            showCSV={false}\n            onPrint={() => window.print()}\n          />\n        </Box>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Voucher #</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Party</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>GST</TableCell>\n              <TableCell>Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {vouchers?.map((voucher) => (\n              <TableRow key={voucher.id}>\n                <TableCell>{voucher.voucher_number}</TableCell>\n                <TableCell>{new Date(voucher.date).toLocaleDateString()}</TableCell>\n                <TableCell>{voucher.vendor_name || voucher.customer_name}</TableCell>\n                <TableCell>₹{voucher.total_amount.toLocaleString()}</TableCell>\n                <TableCell>₹{voucher.gst_amount.toLocaleString()}</TableCell>\n                <TableCell>\n                  <Chip\n                    label={voucher.status}\n                    color={voucher.status === 'confirmed' ? 'success' : 'default'}\n                    size=\"small\"\n                  />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <MegaMenu user={user} onLogout={handleLogout} />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Reports & Analytics\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\" sx={{ mb: 4 }}>\n          Comprehensive business reports and data analytics\n        </Typography>\n        {/* Summary Cards */}\n        <Box sx={{ mb: 4 }}>\n          {renderSummaryCards()}\n        </Box>\n        {/* Reports Tabs */}\n        <Paper sx={{ mb: 4 }}>\n          <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n            <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"reports tabs\">\n              <Tab label=\"Overview\" />\n              <Tab label=\"Sales Report\" />\n              <Tab label=\"Purchase Report\" />\n              <Tab label=\"Inventory Report\" />\n              <Tab label=\"Pending Orders\" />\n              <Tab label=\"Ledger\" />\n            </Tabs>\n          </Box>\n          <TabPanel value={tabValue} index={0}>\n            <Typography variant=\"h6\" gutterBottom>\n              Business Overview\n            </Typography>\n            <Grid container spacing={3}>\n              <Grid\n                size={{\n                  xs: 12,\n                  md: 6\n                }}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Sales Performance\n                    </Typography>\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <TrendingUp sx={{ color: 'green', mr: 1 }} />\n                      <Typography variant=\"body1\">\n                        Total Sales Vouchers: {dashboardStats?.vouchers?.sales_vouchers || 0}\n                      </Typography>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n              <Grid\n                size={{\n                  xs: 12,\n                  md: 6\n                }}>\n                <Card>\n                  <CardContent>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Purchase Performance\n                    </Typography>\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <TrendingDown sx={{ color: 'orange', mr: 1 }} />\n                      <Typography variant=\"body1\">\n                        Total Purchase Vouchers: {dashboardStats?.vouchers?.purchase_vouchers || 0}\n                      </Typography>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n          </TabPanel>\n          <TabPanel value={tabValue} index={1}>\n            <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n              <TextField\n                label=\"Start Date\"\n                type=\"date\"\n                value={dateRange.start}\n                onChange={(e) => handleDateChange('start', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"End Date\"\n                type=\"date\"\n                value={dateRange.end}\n                onChange={(e) => handleDateChange('end', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"Search\"\n                placeholder=\"Search vouchers...\"\n                value={salesFilters.search}\n                onChange={(e) => setSalesFilters(prev => ({ ...prev, search: e.target.value }))}\n                size=\"small\"\n                sx={{ minWidth: 200 }}\n              />\n              <Button variant=\"contained\" startIcon={<Refresh />} onClick={() => refetchSales()}>\n                Refresh\n              </Button>\n            </Box>\n            {salesLoading ? (\n              <Typography>Loading sales report...</Typography>\n            ) : salesReport ? (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography variant=\"h6\">Summary</Typography>\n                  <Typography>Total Vouchers: {salesReport.summary?.total_vouchers || 0}</Typography>\n                  <Typography>Total Sales: ₹{salesReport.summary?.total_sales?.toLocaleString() || 0}</Typography>\n                  <Typography>Total GST: ₹{salesReport.summary?.total_gst?.toLocaleString() || 0}</Typography>\n                </Box>\n                {renderVoucherTable(salesReport.vouchers || [], 'Sales Vouchers', 'sales', {\n                  customer_id: salesFilters.customer_id,\n                  search: salesFilters.search\n                })}\n              </>\n            ) : (\n              <Typography>No sales data available</Typography>\n            )}\n          </TabPanel>\n          <TabPanel value={tabValue} index={2}>\n            <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n              <TextField\n                label=\"Start Date\"\n                type=\"date\"\n                value={dateRange.start}\n                onChange={(e) => handleDateChange('start', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"End Date\"\n                type=\"date\"\n                value={dateRange.end}\n                onChange={(e) => handleDateChange('end', e.target.value)}\n                InputLabelProps={{ shrink: true }}\n                size=\"small\"\n              />\n              <TextField\n                label=\"Search\"\n                placeholder=\"Search vouchers...\"\n                value={purchaseFilters.search}\n                onChange={(e) => setPurchaseFilters(prev => ({ ...prev, search: e.target.value }))}\n                size=\"small\"\n                sx={{ minWidth: 200 }}\n              />\n              <Button variant=\"contained\" startIcon={<Refresh />} onClick={() => refetchPurchase()}>\n                Refresh\n              </Button>\n            </Box>\n            {purchaseLoading ? (\n              <Typography>Loading purchase report...</Typography>\n            ) : purchaseReport ? (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography variant=\"h6\">Summary</Typography>\n                  <Typography>Total Vouchers: {purchaseReport.summary?.total_vouchers || 0}</Typography>\n                  <Typography>Total Purchases: ₹{purchaseReport.summary?.total_purchases?.toLocaleString() || 0}</Typography>\n                  <Typography>Total GST: ₹{purchaseReport.summary?.total_gst?.toLocaleString() || 0}</Typography>\n                </Box>\n                {renderVoucherTable(purchaseReport.vouchers || [], 'Purchase Vouchers', 'purchase', {\n                  vendor_id: purchaseFilters.vendor_id,\n                  search: purchaseFilters.search\n                })}\n              </>\n            ) : (\n              <Typography>No purchase data available</Typography>\n            )}\n          </TabPanel>\n          <TabPanel value={tabValue} index={3}>\n            <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n              <Typography variant=\"h6\">Inventory Status</Typography>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={inventoryFilters.include_zero_stock}\n                    onChange={(e) => setInventoryFilters(prev => ({ ...prev, include_zero_stock: e.target.checked }))}\n                  />\n                }\n                label=\"Include Zero Stock\"\n              />\n              <TextField\n                label=\"Search Products\"\n                placeholder=\"Search products...\"\n                value={inventoryFilters.search}\n                onChange={(e) => setInventoryFilters(prev => ({ ...prev, search: e.target.value }))}\n                size=\"small\"\n                sx={{ minWidth: 200 }}\n              />\n              <Button variant=\"contained\" startIcon={<Refresh />} onClick={() => refetchInventory()}>\n                Refresh\n              </Button>\n            </Box>\n            {inventoryLoading ? (\n              <Typography>Loading inventory report...</Typography>\n            ) : inventoryReport ? (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography>Total Items: {inventoryReport.summary?.total_items || 0}</Typography>\n                  <Typography>Total Value: ₹{inventoryReport.summary?.total_value?.toLocaleString() || 0}</Typography>\n                  <Typography>Low Stock Items: {inventoryReport.summary?.low_stock_items || 0}</Typography>\n                </Box>\n                <TableContainer component={Paper}>\n                  <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Typography variant=\"h6\">Inventory Items</Typography>\n                    <ExportPrintToolbar\n                      onExportExcel={() => reportsService.exportInventoryReportExcel({\n                        include_zero_stock: inventoryFilters.include_zero_stock\n                      })}\n                      filename=\"inventory_report\"\n                      showCSV={false}\n                      onPrint={() => window.print()}\n                    />\n                  </Box>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Product</TableCell>\n                        <TableCell>Quantity</TableCell>\n                        <TableCell>Unit</TableCell>\n                        <TableCell>Unit Price</TableCell>\n                        <TableCell>Total Value</TableCell>\n                        <TableCell>Status</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {inventoryReport.items?.map((item: any) => (\n                        <TableRow key={item.product_id}>\n                          <TableCell>{item.product_name}</TableCell>\n                          <TableCell>{item.quantity}</TableCell>\n                          <TableCell>{item.unit}</TableCell>\n                          <TableCell>₹{item.unit_price.toLocaleString()}</TableCell>\n                          <TableCell>₹{item.total_value.toLocaleString()}</TableCell>\n                          <TableCell>\n                            <Chip\n                              label={item.is_low_stock ? 'Low Stock' : 'Normal'}\n                              color={item.is_low_stock ? 'warning' : 'success'}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </>\n            ) : (\n              <Typography>No inventory data available</Typography>\n            )}\n          </TabPanel>\n          <TabPanel value={tabValue} index={4}>\n            <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n              <Typography variant=\"h6\">Pending Orders</Typography>\n              <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n                <InputLabel>Order Type</InputLabel>\n                <Select\n                  value={pendingOrdersFilters.order_type}\n                  label=\"Order Type\"\n                  onChange={(e) => setPendingOrdersFilters(prev => ({ ...prev, order_type: e.target.value }))}\n                >\n                  <MenuItem value=\"all\">All Orders</MenuItem>\n                  <MenuItem value=\"purchase\">Purchase Orders</MenuItem>\n                  <MenuItem value=\"sales\">Sales Orders</MenuItem>\n                </Select>\n              </FormControl>\n              <TextField\n                label=\"Search Orders\"\n                placeholder=\"Search orders...\"\n                value={pendingOrdersFilters.search}\n                onChange={(e) => setPendingOrdersFilters(prev => ({ ...prev, search: e.target.value }))}\n                size=\"small\"\n                sx={{ minWidth: 200 }}\n              />\n              <Button variant=\"contained\" startIcon={<Refresh />} onClick={() => refetchOrders()}>\n                Refresh\n              </Button>\n            </Box>\n            {ordersLoading ? (\n              <Typography>Loading pending orders...</Typography>\n            ) : pendingOrders ? (\n              <>\n                <Box sx={{ mb: 3 }}>\n                  <Typography>Total Orders: {pendingOrders.summary?.total_orders || 0}</Typography>\n                  <Typography>Total Value: ₹{pendingOrders.summary?.total_value?.toLocaleString() || 0}</Typography>\n                </Box>\n                <TableContainer component={Paper}>\n                  <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                    <Typography variant=\"h6\">Pending Orders</Typography>\n                    <ExportPrintToolbar\n                      onExportExcel={() => reportsService.exportPendingOrdersExcel({\n                        order_type: pendingOrdersFilters.order_type\n                      })}\n                      filename=\"pending_orders_report\"\n                      showCSV={false}\n                      onPrint={() => window.print()}\n                    />\n                  </Box>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Type</TableCell>\n                        <TableCell>Order #</TableCell>\n                        <TableCell>Date</TableCell>\n                        <TableCell>Party</TableCell>\n                        <TableCell>Amount</TableCell>\n                        <TableCell>Status</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {pendingOrders.orders?.map((order: any) => (\n                        <TableRow key={`${order.type}-${order.id}`}>\n                          <TableCell>{order.type}</TableCell>\n                          <TableCell>{order.number}</TableCell>\n                          <TableCell>{new Date(order.date).toLocaleDateString()}</TableCell>\n                          <TableCell>{order.party}</TableCell>\n                          <TableCell>₹{order.amount.toLocaleString()}</TableCell>\n                          <TableCell>\n                            <Chip\n                              label={order.status}\n                              color={order.status === 'pending' ? 'warning' : 'default'}\n                              size=\"small\"\n                            />\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </>\n            ) : (\n              <Typography>No pending orders</Typography>\n            )}\n          </TabPanel>\n          <TabPanel value={tabValue} index={5}>\n            {!canAccessLedger(user) ? (\n              <Alert severity=\"warning\">\n                You don't have permission to access the Ledger report. Contact your administrator for access.\n              </Alert>\n            ) : (\n              <>\n                <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>\n                  <Typography variant=\"h6\" sx={{ mr: 2 }}>\n                    Ledger Report\n                  </Typography>\n                  {/* Ledger Type Toggle */}\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={ledgerType === 'outstanding'}\n                        onChange={(e) => handleLedgerTypeChange(e.target.checked ? 'outstanding' : 'complete')}\n                        color=\"primary\"\n                      />\n                    }\n                    label={ledgerType === 'complete' ? 'Complete Ledger' : 'Outstanding Ledger'}\n                    sx={{ mr: 2 }}\n                  />\n                  {/* Date Range Filters */}\n                  <TextField\n                    label=\"Start Date\"\n                    type=\"date\"\n                    value={ledgerFilters.start_date}\n                    onChange={(e) => handleLedgerFilterChange('start_date', e.target.value)}\n                    InputLabelProps={{ shrink: true }}\n                    size=\"small\"\n                    sx={{ minWidth: 140 }}\n                  />\n                  <TextField\n                    label=\"End Date\"\n                    type=\"date\"\n                    value={ledgerFilters.end_date}\n                    onChange={(e) => handleLedgerFilterChange('end_date', e.target.value)}\n                    InputLabelProps={{ shrink: true }}\n                    size=\"small\"\n                    sx={{ minWidth: 140 }}\n                  />\n                  {/* Account Type Filter */}\n                  <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n                    <InputLabel>Account Type</InputLabel>\n                    <Select\n                      value={ledgerFilters.account_type}\n                      label=\"Account Type\"\n                      onChange={(e) => handleLedgerFilterChange('account_type', e.target.value)}\n                    >\n                      <MenuItem value=\"all\">All</MenuItem>\n                      <MenuItem value=\"vendor\">Vendors</MenuItem>\n                      <MenuItem value=\"customer\">Customers</MenuItem>\n                    </Select>\n                  </FormControl>\n                  {/* Voucher Type Filter */}\n                  <FormControl size=\"small\" sx={{ minWidth: 140 }}>\n                    <InputLabel>Voucher Type</InputLabel>\n                    <Select\n                      value={ledgerFilters.voucher_type}\n                      label=\"Voucher Type\"\n                      onChange={(e) => handleLedgerFilterChange('voucher_type', e.target.value)}\n                    >\n                      <MenuItem value=\"all\">All</MenuItem>\n                      <MenuItem value=\"purchase_voucher\">Purchase</MenuItem>\n                      <MenuItem value=\"sales_voucher\">Sales</MenuItem>\n                      <MenuItem value=\"payment_voucher\">Payment</MenuItem>\n                      <MenuItem value=\"receipt_voucher\">Receipt</MenuItem>\n                      <MenuItem value=\"debit_note\">Debit Note</MenuItem>\n                      <MenuItem value=\"credit_note\">Credit Note</MenuItem>\n                    </Select>\n                  </FormControl>\n                  <Button \n                    variant=\"contained\" \n                    startIcon={<Refresh />} \n                    onClick={() => ledgerType === 'complete' ? refetchCompleteLedger() : refetchOutstandingLedger()}\n                  >\n                    Refresh\n                  </Button>\n                </Box>\n                {/* Complete Ledger View */}\n                {ledgerType === 'complete' && (\n                  <>\n                    {completeLedgerLoading ? (\n                      <Typography>Loading complete ledger...</Typography>\n                    ) : completeLedger ? (\n                      <>\n                        <Box sx={{ mb: 3 }}>\n                          <Typography variant=\"h6\">Summary</Typography>\n                          <Typography>Total Transactions: {completeLedger.summary?.transaction_count || 0}</Typography>\n                          <Typography>Total Debit: ₹{Number(completeLedger.total_debit || 0).toLocaleString()}</Typography>\n                          <Typography>Total Credit: ₹{Number(completeLedger.total_credit || 0).toLocaleString()}</Typography>\n                          <Typography>Net Balance: ₹{Number(completeLedger.net_balance || 0).toLocaleString()}</Typography>\n                        </Box>\n                        <TableContainer component={Paper}>\n                          <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                            <Typography variant=\"h6\">Complete Ledger Transactions</Typography>\n                            <ExportPrintToolbar\n                              onExportExcel={() => reportsService.exportCompleteLedgerExcel(ledgerFilters)}\n                              filename=\"complete_ledger_report\"\n                              showCSV={false}\n                              onPrint={() => window.print()}\n                            />\n                          </Box>\n                          <Table>\n                            <TableHead>\n                              <TableRow>\n                                <TableCell>Date</TableCell>\n                                <TableCell>Voucher Type</TableCell>\n                                <TableCell>Voucher #</TableCell>\n                                <TableCell>Account</TableCell>\n                                <TableCell>Debit</TableCell>\n                                <TableCell>Credit</TableCell>\n                                <TableCell>Balance</TableCell>\n                                <TableCell>Status</TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {completeLedger.transactions?.map((transaction: any) => (\n                                <TableRow key={`${transaction.voucher_type}-${transaction.id}`}>\n                                  <TableCell>{new Date(transaction.date).toLocaleDateString()}</TableCell>\n                                  <TableCell>{transaction.voucher_type.replace('_', ' ').toUpperCase()}</TableCell>\n                                  <TableCell>{transaction.voucher_number}</TableCell>\n                                  <TableCell>{transaction.account_name}</TableCell>\n                                  <TableCell>₹{Number(transaction.debit_amount || 0).toLocaleString()}</TableCell>\n                                  <TableCell>₹{Number(transaction.credit_amount || 0).toLocaleString()}</TableCell>\n                                  <TableCell>₹{Number(transaction.balance || 0).toLocaleString()}</TableCell>\n                                  <TableCell>\n                                    <Chip\n                                      label={transaction.status}\n                                      color={transaction.status === 'confirmed' ? 'success' : 'default'}\n                                      size=\"small\"\n                                    />\n                                  </TableCell>\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </TableContainer>\n                      </>\n                    ) : (\n                      <Typography>No complete ledger data available</Typography>\n                    )}\n                  </>\n                )}\n                {/* Outstanding Ledger View */}\n                {ledgerType === 'outstanding' && (\n                  <>\n                    {outstandingLedgerLoading ? (\n                      <Typography>Loading outstanding ledger...</Typography>\n                    ) : outstandingLedger ? (\n                      <>\n                        <Box sx={{ mb: 3 }}>\n                          <Typography variant=\"h6\">Outstanding Balances Summary</Typography>\n                          <Typography>Total Accounts: {outstandingLedger.summary?.total_accounts || 0}</Typography>\n                          <Typography color=\"error\">\n                            Total Payable: ₹{Math.abs(Number(outstandingLedger.total_payable || 0)).toLocaleString()} \n                            (Amount owed to vendors)\n                          </Typography>\n                          <Typography color=\"success.main\">\n                            Total Receivable: ₹{Number(outstandingLedger.total_receivable || 0).toLocaleString()} \n                            (Amount owed by customers)\n                          </Typography>\n                          <Typography>\n                            Net Outstanding: ₹{Number(outstandingLedger.net_outstanding || 0).toLocaleString()}\n                          </Typography>\n                        </Box>\n                        <TableContainer component={Paper}>\n                          <Box sx={{ p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                            <Typography variant=\"h6\">Outstanding Balances</Typography>\n                            <ExportPrintToolbar\n                              onExportExcel={() => reportsService.exportOutstandingLedgerExcel(ledgerFilters)}\n                              filename=\"outstanding_ledger_report\"\n                              showCSV={false}\n                              onPrint={() => window.print()}\n                            />\n                          </Box>\n                          <Table>\n                            <TableHead>\n                              <TableRow>\n                                <TableCell>Account Type</TableCell>\n                                <TableCell>Account Name</TableCell>\n                                <TableCell>Outstanding Amount</TableCell>\n                                <TableCell>Last Transaction</TableCell>\n                                <TableCell>Transaction Count</TableCell>\n                                <TableCell>Contact</TableCell>\n                              </TableRow>\n                            </TableHead>\n                            <TableBody>\n                              {outstandingLedger.outstanding_balances?.map((balance: any) => (\n                                <TableRow key={`${balance.account_type}-${balance.account_id}`}>\n                                  <TableCell>\n                                    <Chip\n                                      label={balance.account_type.toUpperCase()}\n                                      color={balance.account_type === 'vendor' ? 'warning' : 'info'}\n                                      size=\"small\"\n                                    />\n                                  </TableCell>\n                                  <TableCell>{balance.account_name}</TableCell>\n                                  <TableCell>\n                                    <Typography \n                                      color={balance.outstanding_amount < 0 ? 'error' : 'success.main'}\n                                      fontWeight=\"bold\"\n                                    >\n                                      ₹{Math.abs(Number(balance.outstanding_amount || 0)).toLocaleString()}\n                                      {balance.outstanding_amount < 0 && ' (Payable)'}\n                                      {balance.outstanding_amount > 0 && ' (Receivable)'}\n                                    </Typography>\n                                  </TableCell>\n                                  <TableCell>\n                                    {balance.last_transaction_date \n                                      ? new Date(balance.last_transaction_date).toLocaleDateString()\n                                      : 'N/A'\n                                    }\n                                  </TableCell>\n                                  <TableCell>{balance.transaction_count || 0}</TableCell>\n                                  <TableCell>{balance.contact_info || 'N/A'}</TableCell>\n                                </TableRow>\n                              ))}\n                            </TableBody>\n                          </Table>\n                        </TableContainer>\n                      </>\n                    ) : (\n                      <Typography>No outstanding ledger data available</Typography>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </TabPanel>\n        </Paper>\n      </Container>\n    </Box>\n  );\n};\nexport default ReportsPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/settings.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":59,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":59,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n/**\n * Settings Page Page Component\n * \n * This component provides the main settings interface for users with different roles.\n * It uses centralized role and permission functions from user.types.ts to ensure\n * consistent behavior across the application.\n * \n * Role Display:\n * - Uses getDisplayRole(user.role, user.is_super_admin) for consistent role naming\n * - Prioritizes is_super_admin flag over role string for App Super Admin detection\n * \n * Permission Checks:\n * - isAppSuperAdmin(user): Determines if user is an app-level super admin\n * - canFactoryReset(user): Determines if user can perform reset operations  \n * - canManageUsers(user): Determines if user can manage other users\n * \n * Features shown based on permissions:\n * - App Super Admin: All features including cross-org management\n * - Org Admin: Organization-level management and reset options\n * - Standard User: Basic profile and company detail access only\n */\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Alert,\n  CircularProgress,\n  Divider,\n  DialogContentText\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport { \n  Warning,\n  DeleteSweep,\n  Security,\n  Business,\n  Add\n} from '@mui/icons-material';\nimport { useRouter } from 'next/navigation';\nimport axios from 'axios';\nimport { useAuth } from '../context/AuthContext';\nimport { \n  getDisplayRole, \n  isAppSuperAdmin, \n  canFactoryReset, \n  canManageUsers, \n  canAccessOrganizationSettings,\n  canShowFactoryResetOnly,\n  canShowOrgDataResetOnly\n} from '../types/user.types';\nexport default function Settings() {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [resetDialogOpen, setResetDialogOpen] = useState(false);\n  const [factoryResetDialogOpen, setFactoryResetDialogOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [factoryLoading, setFactoryLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  // Get token for API calls\n  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n  // Use centralized permission and role functions\n  const displayRole = getDisplayRole(user?.role || '', user?.is_super_admin);\n  const isSuperAdmin = isAppSuperAdmin(user);\n  const canReset = canFactoryReset(user);\n  const canManage = canManageUsers(user);\n  const canAccessOrgSettings = canAccessOrganizationSettings(user);\n  const showFactoryResetOnly = canShowFactoryResetOnly(user);\n  const showOrgDataResetOnly = canShowOrgDataResetOnly(user);\n  /**\n   * @deprecated Organization name should come from React user context, not localStorage\n   * Organization context is automatically managed by the backend session\n   */\n  const organizationName = user?.organization_id ? 'Current Organization' : null;\n  const handleResetData = async () => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    try {\n      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n      const response = await axios.post(\n        `${API_BASE_URL}/api/v1/organizations/reset-data`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      setSuccess(response.data.message);\n      setResetDialogOpen(false);\n      // For organization admins, refresh the page to reflect changes\n      if (!isSuperAdmin) {\n        setTimeout(() => {\n          window.location.reload();\n        }, 2000);\n      }\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to reset data');\n      setResetDialogOpen(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleFactoryReset = async () => {\n    setFactoryLoading(true);\n    setError(null);\n    setSuccess(null);\n    try {\n      const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n      const response = await axios.post(\n        `${API_BASE_URL}/api/v1/organizations/factory-default`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      setSuccess(response.data.message);\n      setFactoryResetDialogOpen(false);\n      // Refresh the page to reflect changes\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Failed to perform factory reset');\n      setFactoryResetDialogOpen(false);\n    } finally {\n      setFactoryLoading(false);\n    }\n  };\n  return (\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Settings\n      </Typography>\n      {/* User Role Information */}\n      <Paper sx={{ p: 2, mb: 3, bgcolor: 'info.main', color: 'info.contrastText' }}>\n        <Typography variant=\"body1\">\n          <strong>Current Role:</strong> {displayRole} {organizationName && `• Organization: ${organizationName}`}\n        </Typography>\n        {canManage && (\n          <Typography variant=\"body2\" sx={{ mt: 1 }}>\n            You have administrative privileges to manage users and organization settings.\n          </Typography>\n        )}\n      </Paper>\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 3 }}>\n          {success}\n        </Alert>\n      )}\n      <Grid container spacing={3}>\n        {/* Admin Section - For App Admin User Creation */}\n        {isSuperAdmin && (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Security sx={{ mr: 1 }} />\n                Admin Management\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\n                <Typography variant=\"body2\">\n                  App admins can create organization licenses but cannot create other app admin users.\n                </Typography>\n              </Alert>\n              <Button\n                variant=\"contained\"\n                onClick={() => router.push('/admin/license-management')}\n                sx={{ mb: 2, mr: 2 }}\n                startIcon={<Business />}\n                color=\"primary\"\n              >\n                License Management\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/admin/organizations')}\n                sx={{ mb: 2 }}\n                startIcon={<Business />}\n              >\n                Manage Organizations\n              </Button>\n            </Paper>\n          </Grid>\n        )}\n        {/* Organization Settings - Hidden from App Super Admins */}\n        {canAccessOrgSettings && (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Business sx={{ mr: 1 }} />\n                Organization Settings\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/masters/company-details')}\n                sx={{ mb: 2, mr: 2 }}\n              >\n                Edit Company Details\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/profile')}\n                sx={{ mb: 2 }}\n              >\n                User Profile\n              </Button>\n              {/* User Management for Organization Admins - Now in Settings */}\n              {canManage && (\n                <>\n                  <Button\n                    variant=\"contained\"\n                    onClick={() => router.push('/settings/user-management')}\n                    sx={{ mb: 2, mr: 2 }}\n                    startIcon={<Security />}\n                    color=\"primary\"\n                  >\n                    Manage Users\n                  </Button>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => router.push('/settings/add-user')}\n                    sx={{ mb: 2 }}\n                    startIcon={<Add />}\n                  >\n                    Add User\n                  </Button>\n                </>\n              )}\n            </Paper>\n          </Grid>\n        )}\n        {/* User Profile for App Super Admins (when Organization Settings is hidden) */}\n        {!canAccessOrgSettings && (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Business sx={{ mr: 1 }} />\n                User Profile\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/profile')}\n                sx={{ mb: 2 }}\n              >\n                Edit Profile\n              </Button>\n            </Paper>\n          </Grid>\n        )}\n        {/* Data Management */}\n        {canReset && (\n          <Grid\n            size={{\n              xs: 12,\n              md: 6\n            }}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Security sx={{ mr: 1 }} />\n                Data Management\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                <Typography variant=\"body2\">\n                  <strong>Warning:</strong> Database reset will permanently delete data\n                  {showFactoryResetOnly ? ' for all organizations' : ' for your organization'}. \n                  This action cannot be undone.\n                </Typography>\n              </Alert>\n              {/* App Super Admin: Only Factory Reset */}\n              {showFactoryResetOnly && (\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  startIcon={<Warning />}\n                  onClick={() => setFactoryResetDialogOpen(true)}\n                  disabled={loading || factoryLoading}\n                  sx={{ mt: 1 }}\n                >\n                  {factoryLoading ? (\n                    <CircularProgress size={20} color=\"inherit\" />\n                  ) : (\n                    'Restore to Factory Defaults'\n                  )}\n                </Button>\n              )}\n              {/* Org Super Admin: Only Reset Organization Data */}\n              {showOrgDataResetOnly && (\n                <Button\n                  variant=\"contained\"\n                  color=\"error\"\n                  startIcon={<DeleteSweep />}\n                  onClick={() => setResetDialogOpen(true)}\n                  disabled={loading || factoryLoading}\n                  sx={{ mt: 1 }}\n                >\n                  {loading ? (\n                    <CircularProgress size={20} color=\"inherit\" />\n                  ) : (\n                    'Reset Organization Data'\n                  )}\n                </Button>\n              )}\n              {/* Legacy: Both options for other admin types */}\n              {!showFactoryResetOnly && !showOrgDataResetOnly && (\n                <>\n                  <Button\n                    variant=\"contained\"\n                    color=\"error\"\n                    startIcon={<DeleteSweep />}\n                    onClick={() => setResetDialogOpen(true)}\n                    disabled={loading || factoryLoading}\n                    sx={{ mt: 1, mr: 2 }}\n                  >\n                    {loading ? (\n                      <CircularProgress size={20} color=\"inherit\" />\n                    ) : (\n                      `Reset ${isSuperAdmin ? 'All' : 'Organization'} Data`\n                    )}\n                  </Button>\n                  <Button\n                    variant=\"outlined\"\n                    color=\"warning\"\n                    startIcon={<Warning />}\n                    onClick={() => setFactoryResetDialogOpen(true)}\n                    disabled={loading || factoryLoading}\n                    sx={{ mt: 1 }}\n                  >\n                    {factoryLoading ? (\n                      <CircularProgress size={20} color=\"inherit\" />\n                    ) : (\n                      'Factory Default Reset'\n                    )}\n                  </Button>\n                </>\n              )}\n              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mt: 1 }}>\n                {showFactoryResetOnly \n                  ? 'Restore to Factory Defaults: Wipes all app data including organizations, licenses, and license holders'\n                  : showOrgDataResetOnly\n                  ? 'Reset Organization Data: Removes all business data but not organization settings'\n                  : isSuperAdmin \n                  ? 'As app super admin, this will reset all organization data'\n                  : 'Reset data: removes all business data but keeps organization settings'\n                }\n              </Typography>\n            </Paper>\n          </Grid>\n        )}\n        {/* System Administration - App-level controls only */}\n        {isSuperAdmin && (\n          <Grid size={12}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\n                <Warning sx={{ mr: 1, color: 'warning.main' }} />\n                System Administration\n              </Typography>\n              <Divider sx={{ mb: 2 }} />\n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                <Typography variant=\"body2\">\n                  System-level controls for application management. Use with caution.\n                </Typography>\n              </Alert>\n              <Button\n                variant=\"outlined\"\n                onClick={() => router.push('/dashboard')}\n                sx={{ mr: 2, mb: 2 }}\n                startIcon={<Business />}\n              >\n                App Dashboard\n              </Button>\n            </Paper>\n          </Grid>\n        )}\n      </Grid>\n      {/* Reset Confirmation Dialog */}\n      <Dialog\n        open={resetDialogOpen}\n        onClose={() => setResetDialogOpen(false)}\n      >\n        <DialogTitle sx={{ display: 'flex', alignItems: 'center' }}>\n          <Warning sx={{ mr: 1, color: 'error.main' }} />\n          Confirm Data Reset\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to reset {showOrgDataResetOnly ? 'your organization&apos;s' : isSuperAdmin ? 'all' : 'your organization&apos;s'} data? \n            This action will permanently delete:\n          </DialogContentText>\n          <Box component=\"ul\" sx={{ mt: 2, mb: 2 }}>\n            <li>All companies</li>\n            <li>All vendors and customers</li>\n            <li>All products and inventory</li>\n            <li>All vouchers and transactions</li>\n            <li>All audit logs</li>\n            {isSuperAdmin && !showOrgDataResetOnly && (\n              <>\n                <li>All organization users (except super admin)</li>\n                <li>All organizations</li>\n              </>\n            )}\n          </Box>\n          <DialogContentText color=\"error\">\n            <strong>This action cannot be undone!</strong>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={() => setResetDialogOpen(false)} \n            disabled={loading}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleResetData} \n            color=\"error\" \n            variant=\"contained\"\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={16} /> : <DeleteSweep />}\n          >\n            {loading ? 'Resetting...' : 'Reset Data'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* Factory Default Confirmation Dialog */}\n      <Dialog\n        open={factoryResetDialogOpen}\n        onClose={() => setFactoryResetDialogOpen(false)}\n      >\n        <DialogTitle sx={{ display: 'flex', alignItems: 'center' }}>\n          <Warning sx={{ mr: 1, color: 'warning.main' }} />\n          {showFactoryResetOnly ? 'Confirm Restore to Factory Defaults' : 'Confirm Factory Default Reset'}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {showFactoryResetOnly ? (\n              <>\n                Are you sure you want to restore the entire application to factory defaults? \n                This action will permanently delete:\n              </>\n            ) : (\n              <>\n                Are you sure you want to perform a factory default reset? \n                This action will permanently restore your organization to its initial state:\n              </>\n            )}\n          </DialogContentText>\n          <Box component=\"ul\" sx={{ mt: 2, mb: 2 }}>\n            {showFactoryResetOnly ? (\n              <>\n                <li>All organizations and their data</li>\n                <li>All licenses and license holders</li>\n                <li>All users (except the primary super admin)</li>\n                <li>All companies, vendors, customers</li>\n                <li>All products and inventory</li>\n                <li>All vouchers and transactions</li>\n                <li>All audit logs</li>\n                <li>System returns to initial installation state</li>\n              </>\n            ) : (\n              <>\n                <li>All business data will be deleted (same as data reset)</li>\n                <li>Organization settings will be reset to defaults</li>\n                <li>Business type will be set to &quot;Other&quot;</li>\n                <li>Timezone will be set to &quot;Asia/Kolkata&quot;</li>\n                <li>Currency will be set to &quot;INR&quot;</li>\n                <li>Company details status will be reset</li>\n              </>\n            )}\n          </Box>\n          <DialogContentText color={showFactoryResetOnly ? 'error' : 'warning.main'}>\n            <strong>\n              {showFactoryResetOnly \n                ? 'This action cannot be undone and will completely reset the entire application!'\n                : 'This action cannot be undone and will reset both data and settings!'\n              }\n            </strong>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={() => setFactoryResetDialogOpen(false)} \n            disabled={factoryLoading}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleFactoryReset} \n            color={showFactoryResetOnly ? 'error' : 'warning'} \n            variant=\"contained\"\n            disabled={factoryLoading}\n            startIcon={factoryLoading ? <CircularProgress size={16} /> : <Warning />}\n          >\n            {factoryLoading ? 'Resetting...' : (showFactoryResetOnly ? 'Restore to Factory Defaults' : 'Factory Default Reset')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/transport.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[88,99],"text":""},"desc":"Remove unused variable 'useEffect'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Dialog"},"fix":{"range":[355,365],"text":""},"desc":"Remove unused variable 'Dialog'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogTitle"},"fix":{"range":[365,380],"text":""},"desc":"Remove unused variable 'DialogTitle'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogContent"},"fix":{"range":[380,397],"text":""},"desc":"Remove unused variable 'DialogContent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogActions' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":16,"suggestions":[{"messageId":"removeVar","data":{"varName":"DialogActions"},"fix":{"range":[397,414],"text":""},"desc":"Remove unused variable 'DialogActions'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'FormControl' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"FormControl"},"fix":{"range":[427,442],"text":""},"desc":"Remove unused variable 'FormControl'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'InputLabel' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"InputLabel"},"fix":{"range":[442,456],"text":""},"desc":"Remove unused variable 'InputLabel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"Select"},"fix":{"range":[456,466],"text":""},"desc":"Remove unused variable 'Select'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MenuItem' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"MenuItem"},"fix":{"range":[466,478],"text":""},"desc":"Remove unused variable 'MenuItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Accordion' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"Accordion"},"fix":{"range":[518,531],"text":""},"desc":"Remove unused variable 'Accordion'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionSummary' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionSummary"},"fix":{"range":[531,551],"text":""},"desc":"Remove unused variable 'AccordionSummary'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AccordionDetails' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"AccordionDetails"},"fix":{"range":[551,571],"text":""},"desc":"Remove unused variable 'AccordionDetails'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DeleteIcon' is defined but never used.","line":43,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"DeleteIcon"},"fix":{"range":[642,666],"text":""},"desc":"Remove unused variable 'DeleteIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'RouteIcon' is defined but never used.","line":45,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"RouteIcon"},"fix":{"range":[704,726],"text":""},"desc":"Remove unused variable 'RouteIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'AssessmentIcon' is defined but never used.","line":48,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"AssessmentIcon"},"fix":{"range":[796,828],"text":""},"desc":"Remove unused variable 'AssessmentIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ExpandMoreIcon' is defined but never used.","line":50,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"ExpandMoreIcon"},"fix":{"range":[866,898],"text":""},"desc":"Remove unused variable 'ExpandMoreIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ErrorIcon' is defined but never used.","line":52,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"ErrorIcon"},"fix":{"range":[932,954],"text":""},"desc":"Remove unused variable 'ErrorIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'WarningIcon' is defined but never used.","line":53,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"WarningIcon"},"fix":{"range":[954,980],"text":""},"desc":"Remove unused variable 'WarningIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useQueryClient' is defined but never used.","line":56,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"useQueryClient"},"fix":{"range":[1072,1088],"text":""},"desc":"Remove unused variable 'useQueryClient'."}]},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":263,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":263,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'setSelectedItem' is not defined.","line":332,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":332,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":334,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":334,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":356,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":356,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'setSelectedItem' is not defined.","line":411,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":411,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":413,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":413,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":435,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":435,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'setSelectedItem' is not defined.","line":496,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":496,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":498,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":498,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'setOpenDialog' is not defined.","line":520,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":520,"endColumn":41}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// pages/transport.tsx\n// Transport and Freight Management page\nimport React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport {\n  Box,\n  Container,\n  Typography,\n  Paper,\n  Grid,\n  Card,\n  CardContent,\n  Tab,\n  Tabs,\n  Button,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  Tooltip,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  LocalShipping as LocalShippingIcon,\n  Route as RouteIcon,\n  AttachMoney as AttachMoneyIcon,\n  TrackChanges as TrackChangesIcon,\n  Assessment as AssessmentIcon,\n  CompareArrows as CompareArrowsIcon,\n  ExpandMore as ExpandMoreIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Warning as WarningIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../hooks/useAuth';\nimport {useQuery, useQueryClient} from '@tanstack/react-query';\nimport { transportService } from '../services/transportService';\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`transport-tabpanel-${index}`}\n      aria-labelledby={`transport-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\nconst TransportManagementPage: NextPage = () => {\n  const { user } = useAuth();\n  const [tabValue, setTabValue] = useState(0);\n  const [rateComparisonData, setRateComparisonData] = useState({\n    origin_city: '',\n    destination_city: '',\n    weight_kg: 0,\n    volume_cbm: 0,\n  });\n  // Fetch dashboard summary\n  const { data: dashboardData, isLoading: dashboardLoading } = useQuery({\n    queryKey: ['transportDashboard'],\n    queryFn: transportService.getDashboardSummary,\n    enabled: !!user,\n  });\n  // Fetch carriers\n  const { data: carriers, isLoading: carriersLoading } = useQuery({\n    queryKey: ['carriers'],\n    queryFn: () => transportService.getCarriers(),\n    enabled: !!user,\n  });\n  // Fetch routes\n  const { data: routes, isLoading: routesLoading } = useQuery({\n    queryKey: ['routes'],\n    queryFn: () => transportService.getRoutes(),\n    enabled: !!user,\n  });\n  // Fetch freight rates\n  const { data: freightRates, isLoading: ratesLoading } = useQuery({\n    queryKey: ['freightRates'],\n    queryFn: () => transportService.getFreightRates(),\n    enabled: !!user,\n  });\n  // Fetch shipments\n  const { data: shipments, isLoading: shipmentsLoading } = useQuery({\n    queryKey: ['shipments'],\n    queryFn: () => transportService.getShipments(),\n    enabled: !!user,\n  });\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'success';\n      case 'booked': return 'info';\n      case 'in_transit': return 'warning';\n      case 'delivered': return 'success';\n      case 'cancelled': return 'error';\n      case 'delayed': return 'error';\n      default: return 'default';\n    }\n  };\n  const getCarrierTypeIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'road': return '🚛';\n      case 'rail': return '🚂';\n      case 'air': return '✈️';\n      case 'sea': return '🚢';\n      case 'courier': return '📦';\n      default: return '🚚';\n    }\n  };\n  if (!user) {\n    return (\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\n        <Alert severity=\"error\">\n          Please log in to access Transport Management.\n        </Alert>\n      </Container>\n    );\n  }\n  return (\n    <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <LocalShippingIcon color=\"primary\" />\n          Transport & Freight Management\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Manage carriers, routes, freight rates, shipments, and logistics operations\n        </Typography>\n      </Box>\n      {/* Dashboard Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Total Carriers\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.total_carriers || 0}\n                  </Typography>\n                </Box>\n                <LocalShippingIcon color=\"primary\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Active Shipments\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.active_shipments || 0}\n                  </Typography>\n                </Box>\n                <TrackChangesIcon color=\"warning\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Delivered This Month\n                  </Typography>\n                  <Typography variant=\"h4\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : dashboardData?.delivered_this_month || 0}\n                  </Typography>\n                </Box>\n                <CheckCircleIcon color=\"success\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Freight Cost MTD\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    {dashboardLoading ? <CircularProgress size={24} /> : \n                     `$${(dashboardData?.total_freight_cost_this_month || 0).toLocaleString()}`}\n                  </Typography>\n                </Box>\n                <AttachMoneyIcon color=\"info\" sx={{ fontSize: 40 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      {/* Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs\n          value={tabValue}\n          onChange={handleTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n        >\n          <Tab label=\"Carriers\" />\n          <Tab label=\"Routes\" />\n          <Tab label=\"Freight Rates\" />\n          <Tab label=\"Shipments\" />\n          <Tab label=\"Rate Comparison\" />\n          <Tab label=\"Analytics\" />\n        </Tabs>\n      </Paper>\n      {/* Tab Panels */}\n      <TabPanel value={tabValue} index={0}>\n        {/* Carriers */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Carrier Management</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n// TODO: Define or import setOpenDialog\n            onClick={() => setOpenDialog('carrier')}\n          >\n            Add Carrier\n          </Button>\n        </Box>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Carrier Code</TableCell>\n                <TableCell>Carrier Name</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Contact</TableCell>\n                <TableCell>Rating</TableCell>\n                <TableCell>On-Time %</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Preferred</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {carriersLoading ? (\n                <TableRow>\n                  <TableCell colSpan={9} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                carriers?.map((carrier: any) => (\n                  <TableRow key={carrier.id}>\n                    <TableCell>{carrier.carrier_code}</TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <span>{getCarrierTypeIcon(carrier.carrier_type)}</span>\n                        {carrier.carrier_name}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={carrier.carrier_type}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>{carrier.phone || carrier.email || '-'}</TableCell>\n                    <TableCell>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        ⭐ {carrier.rating.toFixed(1)}\n                      </Box>\n                    </TableCell>\n                    <TableCell>{carrier.on_time_percentage.toFixed(1)}%</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={carrier.is_active ? 'Active' : 'Inactive'}\n                        color={carrier.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {carrier.is_preferred && (\n                        <Chip label=\"Preferred\" color=\"primary\" size=\"small\" />\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n// TODO: Define or import setSelectedItem\n                            setSelectedItem(carrier);\n// TODO: Define or import setOpenDialog\n                            setOpenDialog('carrier');\n                          }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n      <TabPanel value={tabValue} index={1}>\n        {/* Routes */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Route Management</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n// TODO: Define or import setOpenDialog\n            onClick={() => setOpenDialog('route')}\n          >\n            Add Route\n          </Button>\n        </Box>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Route Code</TableCell>\n                <TableCell>Route Name</TableCell>\n                <TableCell>Carrier</TableCell>\n                <TableCell>Origin</TableCell>\n                <TableCell>Destination</TableCell>\n                <TableCell>Distance</TableCell>\n                <TableCell>Transit Time</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {routesLoading ? (\n                <TableRow>\n                  <TableCell colSpan={9} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                routes?.map((route: any) => (\n                  <TableRow key={route.id}>\n                    <TableCell>{route.route_code}</TableCell>\n                    <TableCell>{route.route_name}</TableCell>\n                    <TableCell>{route.carrier_id}</TableCell>\n                    <TableCell>{route.origin_city}</TableCell>\n                    <TableCell>{route.destination_city}</TableCell>\n                    <TableCell>\n                      {route.distance_km ? `${route.distance_km} km` : '-'}\n                    </TableCell>\n                    <TableCell>\n                      {route.estimated_transit_time_hours ? \n                        `${route.estimated_transit_time_hours}h` : '-'}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={route.status}\n                        color={getStatusColor(route.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n// TODO: Define or import setSelectedItem\n                            setSelectedItem(route);\n// TODO: Define or import setOpenDialog\n                            setOpenDialog('route');\n                          }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n      <TabPanel value={tabValue} index={2}>\n        {/* Freight Rates */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Freight Rate Management</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n// TODO: Define or import setOpenDialog\n            onClick={() => setOpenDialog('rate')}\n          >\n            Add Rate\n          </Button>\n        </Box>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Rate Code</TableCell>\n                <TableCell>Carrier</TableCell>\n                <TableCell>Mode</TableCell>\n                <TableCell>Rate Basis</TableCell>\n                <TableCell>Minimum Charge</TableCell>\n                <TableCell>Effective Date</TableCell>\n                <TableCell>Expiry Date</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {ratesLoading ? (\n                <TableRow>\n                  <TableCell colSpan={9} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                freightRates?.map((rate: any) => (\n                  <TableRow key={rate.id}>\n                    <TableCell>{rate.rate_code}</TableCell>\n                    <TableCell>{rate.carrier_id}</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={rate.freight_mode}\n                        size=\"small\"\n                        variant=\"outlined\"\n                      />\n                    </TableCell>\n                    <TableCell>{rate.rate_basis}</TableCell>\n                    <TableCell>${rate.minimum_charge}</TableCell>\n                    <TableCell>\n                      {new Date(rate.effective_date).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell>\n                      {rate.expiry_date ? \n                        new Date(rate.expiry_date).toLocaleDateString() : 'No Expiry'}\n                    </TableCell>\n                    <TableCell>\n                      <Chip\n                        label={rate.is_active ? 'Active' : 'Inactive'}\n                        color={rate.is_active ? 'success' : 'default'}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Edit\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => {\n// TODO: Define or import setSelectedItem\n                            setSelectedItem(rate);\n// TODO: Define or import setOpenDialog\n                            setOpenDialog('rate');\n                          }}\n                        >\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n      <TabPanel value={tabValue} index={3}>\n        {/* Shipments */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>\n          <Typography variant=\"h6\">Shipment Tracking</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n// TODO: Define or import setOpenDialog\n            onClick={() => setOpenDialog('shipment')}\n          >\n            Create Shipment\n          </Button>\n        </Box>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Shipment #</TableCell>\n                <TableCell>Carrier</TableCell>\n                <TableCell>Origin</TableCell>\n                <TableCell>Destination</TableCell>\n                <TableCell>Weight</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Pickup Date</TableCell>\n                <TableCell>Expected Delivery</TableCell>\n                <TableCell>Total Charges</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {shipmentsLoading ? (\n                <TableRow>\n                  <TableCell colSpan={10} align=\"center\">\n                    <CircularProgress />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                shipments?.map((shipment: any) => (\n                  <TableRow key={shipment.id}>\n                    <TableCell>{shipment.shipment_number}</TableCell>\n                    <TableCell>{shipment.carrier_id}</TableCell>\n                    <TableCell>{shipment.origin_city}</TableCell>\n                    <TableCell>{shipment.destination_city}</TableCell>\n                    <TableCell>{shipment.total_weight_kg} kg</TableCell>\n                    <TableCell>\n                      <Chip\n                        label={shipment.status}\n                        color={getStatusColor(shipment.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      {shipment.pickup_date ? \n                        new Date(shipment.pickup_date).toLocaleDateString() : '-'}\n                    </TableCell>\n                    <TableCell>\n                      {shipment.expected_delivery_date ? \n                        new Date(shipment.expected_delivery_date).toLocaleDateString() : '-'}\n                    </TableCell>\n                    <TableCell>${shipment.total_charges}</TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Track\">\n                        <IconButton size=\"small\">\n                          <TrackChangesIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n      <TabPanel value={tabValue} index={4}>\n        {/* Rate Comparison */}\n        <Typography variant=\"h6\" sx={{ mb: 3 }}>Freight Rate Comparison</Typography>\n        <Paper sx={{ p: 3, mb: 3 }}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={3}>\n              <TextField\n                fullWidth\n                label=\"Origin City\"\n                value={rateComparisonData.origin_city}\n                onChange={(e) => setRateComparisonData(prev => ({\n                  ...prev,\n                  origin_city: e.target.value\n                }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={3}>\n              <TextField\n                fullWidth\n                label=\"Destination City\"\n                value={rateComparisonData.destination_city}\n                onChange={(e) => setRateComparisonData(prev => ({\n                  ...prev,\n                  destination_city: e.target.value\n                }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <TextField\n                fullWidth\n                label=\"Weight (kg)\"\n                type=\"number\"\n                value={rateComparisonData.weight_kg}\n                onChange={(e) => setRateComparisonData(prev => ({\n                  ...prev,\n                  weight_kg: parseFloat(e.target.value) || 0\n                }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <TextField\n                fullWidth\n                label=\"Volume (cbm)\"\n                type=\"number\"\n                value={rateComparisonData.volume_cbm}\n                onChange={(e) => setRateComparisonData(prev => ({\n                  ...prev,\n                  volume_cbm: parseFloat(e.target.value) || 0\n                }))}\n              />\n            </Grid>\n            <Grid item xs={12} md={2}>\n              <Button\n                fullWidth\n                variant=\"contained\"\n                size=\"large\"\n                startIcon={<CompareArrowsIcon />}\n              >\n                Compare Rates\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Enter shipment details above to compare freight rates across carriers and routes.\n        </Typography>\n      </TabPanel>\n      <TabPanel value={tabValue} index={5}>\n        {/* Analytics */}\n        <Typography variant=\"h6\" sx={{ mb: 3 }}>Transport Analytics</Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Carrier Performance Report\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Compare carrier performance metrics\n                </Typography>\n                <Button variant=\"outlined\">Generate Report</Button>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Freight Cost Analysis\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                  Analyze freight costs and optimization opportunities\n                </Typography>\n                <Button variant=\"outlined\">Generate Report</Button>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </TabPanel>\n    </Container>\n  );\n};\nexport default TransportManagementPage;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/pages/ui-test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/adminService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":48,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":48,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'licenseData' should be typed with a non-any type.","line":48,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":48,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":57,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":57,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":66,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":66,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// New: v1/frontend/src/services/adminService.ts\nimport api from '../lib/api';  // Changed import to use the correct api instance with /api/v1 baseURL\ninterface AppStatistics {\n  total_licenses_issued: number;\n  active_organizations: number;\n  trial_organizations: number;\n  total_active_users: number;\n  super_admins_count: number;\n  new_licenses_this_month: number;\n  plan_breakdown: { [key: string]: number };\n  system_health: {\n    status: string;\n    uptime: string;\n  };\n  generated_at: string;\n}\ninterface OrgStatistics {\n  total_products: number;\n  total_customers: number;\n  total_vendors: number;\n  active_users: number;\n  monthly_sales: number;\n  inventory_value: number;\n  plan_type: string;\n  storage_used_gb: number;\n  generated_at: string;\n}\nconst adminService = {\n  getAppStatistics: async (): Promise<AppStatistics> => {\n    try {\n      const response = await api.get<AppStatistics>('/organizations/app-statistics');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch app statistics:', error);\n      throw error;\n    }\n  },\n  getOrgStatistics: async (): Promise<OrgStatistics> => {\n    try {\n      const response = await api.get<OrgStatistics>('/organizations/org-statistics');  // Assuming this endpoint exists in backend\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch organization statistics:', error);\n      throw error;\n    }\n  },\n  // Add more admin-related API calls as needed, e.g., manage licenses, organizations, etc.\n  createLicense: async (licenseData: any) => {\n    try {\n      const response = await api.post('/organizations/license/create', licenseData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create license:', error);\n      throw error;\n    }\n  },\n  resetOrganizationData: async () => {\n    try {\n      const response = await api.post('/organizations/reset-data');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to reset organization data:', error);\n      throw error;\n    }\n  },\n  resetUserPassword: async (email: string) => {\n    try {\n      const response = await api.post('/password/admin-reset', { user_email: email });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to reset user password:', error);\n      throw error;\n    }\n  }\n};\nexport default adminService;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/analyticsService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":103,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":103,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/analyticsService.ts\nimport api from '../lib/api';\nexport interface CustomerAnalyticsData {\n  customer_id: number;\n  customer_name: string;\n  total_interactions: number;\n  last_interaction_date?: string;\n  interaction_types: Record<string, number>;\n  interaction_status: Record<string, number>;\n  segments: Array<{\n    segment_name: string;\n    segment_value?: number;\n    assigned_date: string;\n    description?: string;\n  }>;\n  recent_interactions: Array<{\n    interaction_type: string;\n    subject: string;\n    status: string;\n    interaction_date: string;\n  }>;\n  calculated_at: string;\n}\nexport interface SegmentAnalyticsData {\n  segment_name: string;\n  total_customers: number;\n  total_interactions: number;\n  avg_interactions_per_customer: number;\n  interaction_distribution: Record<string, number>;\n  activity_timeline: Array<{\n    date: string;\n    interaction_count: number;\n  }>;\n  calculated_at: string;\n}\nexport interface DashboardMetrics {\n  total_customers: number;\n  total_interactions_today: number;\n  total_interactions_week: number;\n  total_interactions_month: number;\n  top_segments: Array<{\n    segment_name: string;\n    customer_count: number;\n  }>;\n  recent_activity: Array<{\n    customer_name: string;\n    interaction_type: string;\n    interaction_date: string;\n  }>;\n  calculated_at: string;\n}\nexport const analyticsService = {\n  getCustomerAnalytics: async (\n    customerId: number, \n    includeRecentInteractions: boolean = true,\n    recentInteractionsLimit: number = 5\n  ): Promise<CustomerAnalyticsData> => {\n    try {\n      const response = await api.get(`/analytics/customers/${customerId}/analytics`, {\n        params: {\n          include_recent_interactions: includeRecentInteractions,\n          recent_interactions_limit: recentInteractionsLimit,\n        },\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get customer analytics');\n    }\n  },\n  getSegmentAnalytics: async (\n    segmentName: string,\n    includeTimeline: boolean = true,\n    timelineDays: number = 30\n  ): Promise<SegmentAnalyticsData> => {\n    try {\n      const response = await api.get(`/analytics/segments/${segmentName}/analytics`, {\n        params: {\n          include_timeline: includeTimeline,\n          timeline_days: timelineDays,\n        },\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get segment analytics');\n    }\n  },\n  getDashboardMetrics: async (): Promise<DashboardMetrics> => {\n    try {\n      const response = await api.get('/analytics/dashboard/metrics');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get dashboard metrics');\n    }\n  },\n  getAvailableSegments: async (): Promise<string[]> => {\n    try {\n      const response = await api.get('/analytics/segments');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get available segments');\n    }\n  },\n  getOrganizationSummary: async () => {\n    try {\n      const response = await api.get('/analytics/organization/summary');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization analytics summary');\n    }\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/assetService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/authService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":45,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":45,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":84,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":84,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":112,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":112,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":119,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":119,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":134,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":134,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":142,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":142,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":171,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":171,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":185,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":185,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":196,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":196,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":196,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":196,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":204,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":204,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":204,"column":39,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":204,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":212,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":212,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":220,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":220,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":220,"column":51,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":220,"endColumn":60},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":228,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":228,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":236,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":236,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":248,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":248,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":248,"column":28,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":248,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":252,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":252,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":252,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":252,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":255,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":255,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":258,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":258,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":258,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":258,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":261,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":261,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":261,"column":43,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":261,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":265,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":265,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":265,"column":19,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":265,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":268,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":268,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":271,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":271,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":271,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":271,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":274,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":274,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":274,"column":33,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":274,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":278,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":278,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":278,"column":22,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":278,"endColumn":34},{"ruleId":"no-use-before-define","severity":2,"message":"'masterDataService' was used before it was defined.","line":279,"column":12,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":279,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":281,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":281,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":281,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":281,"endColumn":35},{"ruleId":"no-use-before-define","severity":2,"message":"'masterDataService' was used before it was defined.","line":282,"column":12,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":282,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":284,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":284,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":284,"column":24,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":284,"endColumn":36},{"ruleId":"no-use-before-define","severity":2,"message":"'masterDataService' was used before it was defined.","line":285,"column":12,"nodeType":"Identifier","messageId":"usedBeforeDefined","endLine":285,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":289,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":289,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":298,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":298,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":298,"column":24,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":298,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":306,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":306,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":306,"column":36,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":306,"endColumn":45},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":314,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":314,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":322,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":322,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":331,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":331,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":331,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":331,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":339,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":339,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":339,"column":38,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":339,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":347,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":347,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":355,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":355,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":364,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":364,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":364,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":364,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":372,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":372,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":372,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":372,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":380,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":380,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":388,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":388,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":397,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":397,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":406,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":406,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":406,"column":42,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":406,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":414,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":414,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":424,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":424,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":451,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":451,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":471,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":471,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":471,"column":23,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":471,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":498,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":498,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":521,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":521,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":525,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":525,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":530,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":530,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":530,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":530,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":538,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":538,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":538,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":538,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":546,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":546,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":560,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":560,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":568,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":568,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":572,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":572,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":580,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":580,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":588,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":588,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":596,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":596,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":604,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":604,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'updates' should be typed with a non-any type.","line":604,"column":74,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":604,"endColumn":86},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":612,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":612,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":622,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":622,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":630,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":630,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":630,"column":26,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":630,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":638,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":638,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":638,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":638,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":646,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":646,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":656,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":656,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":666,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":666,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":666,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":666,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":674,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":674,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":674,"column":32,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":674,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":683,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":683,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":683,"column":34,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":683,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":694,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":694,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":694,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":694,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":705,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":705,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":705,"column":38,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":705,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":716,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":716,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":716,"column":36,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":716,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":727,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":727,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":727,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":727,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":738,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":738,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":738,"column":40,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":738,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":751,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":751,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":751,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":751,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":759,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":759,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":767,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":767,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":767,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":767,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":776,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":776,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":784,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":784,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":792,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":792,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":792,"column":46,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":792,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":802,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":802,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":824,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":824,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":832,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":832,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":852,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":852,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":852,"column":32,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":852,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":860,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":860,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":860,"column":22,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":860,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":868,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":868,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":868,"column":34,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":868,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":876,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":876,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":884,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":884,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":892,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":892,"endColumn":27}],"suppressedMessages":[],"errorCount":131,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/authService.ts\n// Revised: frontend/src/services/authService.ts\n// frontend/src/services/authService.ts (Revised for detailed error handling in companyService)\nimport api from '../lib/api';  // Use the api client\nexport const authService = {\n  login: async (username: string, password: string) => {\n    try {\n      console.log('[AuthService] Starting login process for:', username);\n      const formData = new FormData();\n      formData.append('username', username);\n      formData.append('password', password);\n      const response = await api.post('/auth/login', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      console.log('[AuthService] Login API response received:', {\n        hasToken: !!response.data.access_token,\n        organizationId: response.data.organization_id,\n        userRole: response.data.user_role,\n        mustChangePassword: response.data.must_change_password\n      });\n      // Store token FIRST\n      localStorage.setItem('token', response.data.access_token);\n      // Store refresh token if provided\n      if (response.data.refresh_token) {\n        localStorage.setItem('refresh_token', response.data.refresh_token);\n        console.log('[AuthService] Stored refresh token');\n      }\n      // Store authentication context data (NOT organization_id - that stays in memory)\n      if (response.data.user_role) {\n        localStorage.setItem('user_role', response.data.user_role);\n        console.log('[AuthService] Stored user_role:', response.data.user_role);\n      }\n      localStorage.setItem('is_super_admin', response.data.user?.is_super_admin ? 'true' : 'false');\n      console.log('[AuthService] Stored is_super_admin:', response.data.user?.is_super_admin);\n      console.log('[AuthService] Organization context managed by backend session only');\n      console.log('[AuthService] Login complete - auth context established');\n      return response.data;\n    } catch (error: any) {\n      console.error('[AuthService] Login failed:', error);\n      throw new Error(error.userMessage || 'Login failed');\n    }\n  },\n  loginWithEmail: async (email: string, password: string) => {\n    try {\n      console.log('[AuthService] Starting email login process for:', email);\n      const formData = new FormData();\n      formData.append('username', email);\n      formData.append('password', password);\n      const response = await api.post('/auth/login', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      console.log('[AuthService] Email login API response received:', {\n        hasToken: !!response.data.access_token,\n        organizationId: response.data.organization_id,\n        userRole: response.data.user_role,\n        mustChangePassword: response.data.must_change_password\n      });\n      // Store token FIRST\n      localStorage.setItem('token', response.data.access_token);\n      // Store ALL authentication context data immediately after token\n      // Store authentication context data (NOT organization_id - that stays in memory)\n      if (response.data.user_role) {\n        localStorage.setItem('user_role', response.data.user_role);\n        console.log('[AuthService] Stored user_role:', response.data.user_role);\n      }\n      localStorage.setItem('is_super_admin', response.data.user?.is_super_admin ? 'true' : 'false');\n      console.log('[AuthService] Stored is_super_admin:', response.data.user?.is_super_admin);\n      console.log('[AuthService] Organization context managed by backend session only');\n      console.log('[AuthService] Email login complete - all context established');\n      return response.data;\n    } catch (error: any) {\n      console.error('[AuthService] Email login failed:', error);\n      throw new Error(error.userMessage || 'Email login failed');\n    }\n  },\n  // NOTE: This method should only be called by AuthProvider for:\n  // 1. Initial user fetch on app mount \n  // 2. Manual user refresh operations\n  // DO NOT call this directly from components - use useAuth() hook instead\n  getCurrentUser: async () => {\n    try {\n      console.log('[AuthService] Fetching current user data');\n      const response = await api.get('/users/me');\n      console.log('[AuthService] User data received from /users/me:', {\n        id: response.data.id,\n        email: response.data.email,\n        role: response.data.role,\n        is_super_admin: response.data.is_super_admin,\n        organization_id: response.data.organization_id,\n        must_change_password: response.data.must_change_password\n      });\n      // Organization context is managed by backend session only\n      console.log('[AuthService] Organization context from backend session:', response.data.organization_id);\n      // Store role information\n      if (response.data.role) {\n        localStorage.setItem('user_role', response.data.role);\n        console.log('[AuthService] Updated user_role in localStorage:', response.data.role);\n      }\n      localStorage.setItem('is_super_admin', response.data.is_super_admin ? 'true' : 'false');\n      console.log('[AuthService] Updated is_super_admin in localStorage:', response.data.is_super_admin);\n      console.log('[AuthService] getCurrentUser complete - all localStorage updated');\n      return response.data;\n    } catch (error: any) {\n      console.error('[AuthService] Failed to fetch current user:', error);\n      throw new Error(error.userMessage || 'Failed to fetch user information');\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user_role');\n    localStorage.removeItem('is_super_admin');\n    window.location.href = '/';\n  },\n  requestOTP: async (email: string, phone: string, deliveryMethod: string = 'auto', purpose: string = 'login') => {\n    try {\n      const requestData: any = { email, purpose };\n      if (phone) {\n        requestData.phone_number = phone;\n      }\n      if (deliveryMethod) {\n        requestData.delivery_method = deliveryMethod;\n      }\n      const response = await api.post('/auth/otp/request', requestData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to send OTP');\n    }\n  },\n  verifyOTP: async (email: string, otp: string, purpose: string = 'login') => {\n    try {\n      const response = await api.post('/auth/otp/verify', { email, otp, purpose });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'OTP verification failed');\n    }\n  },\n  refreshToken: async () => {\n    try {\n      console.log('[AuthService] Attempting to refresh token');\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await api.post('/auth/refresh-token', {\n        refresh_token: refreshToken\n      });\n      console.log('[AuthService] Token refresh successful');\n      // Update stored tokens\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n      }\n      if (response.data.refresh_token) {\n        localStorage.setItem('refresh_token', response.data.refresh_token);\n      }\n      return response.data;\n    } catch (error: any) {\n      console.error('[AuthService] Token refresh failed:', error);\n      // Clear invalid tokens\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user_role');\n      localStorage.removeItem('is_super_admin');\n      throw new Error(error.userMessage || 'Token refresh failed');\n    }\n  },\n  isTokenValid: () => {\n    const token = localStorage.getItem('token');\n    if (!token) {return false;}\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const expiry = payload.exp * 1000; // Convert to milliseconds\n      const now = Date.now();\n      // Check if token expires in next 5 minutes\n      return expiry > now + (5 * 60 * 1000);\n    } catch (error) {\n      console.error('[AuthService] Failed to parse token:', error);\n      return false;\n    }\n  },\n  setupAdminAccount: async () => {\n    try {\n      const response = await api.post('/auth/admin/setup');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Admin setup failed');\n    }\n  },\n};\nexport const voucherService = {\n  // Generic function for CRUD\n  getVouchers: async (type: string, params?: any) => {\n    try {\n      const response = await api.get(`/${type}/`, { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to fetch ${type}`);\n    }\n  },\n  createVoucher: async (type: string, data: any, sendEmail = false) => {\n    try {\n      const response = await api.post(`/${type}/`, data, { params: { send_email: sendEmail } });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to create ${type}`);\n    }\n  },\n  getVoucherById: async (type: string, id: number) => {\n    try {\n      const response = await api.get(`/${type}/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to fetch ${type}`);\n    }\n  },\n  updateVoucher: async (type: string, id: number, data: any) => {\n    try {\n      const response = await api.put(`/${type}/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to update ${type}`);\n    }\n  },\n  deleteVoucher: async (type: string, id: number) => {\n    try {\n      const response = await api.delete(`/${type}/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || `Failed to delete ${type}`);\n    }\n  },\n  sendVoucherEmail: async (voucherType: string, voucherId: number, customEmail?: string) => {\n    let params = '';\n    if (customEmail) {\n      params = `?custom_email=${customEmail}`;\n    }\n    try {\n      const response = await api.post(`/${voucherType}/${voucherId}/send-email${params}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to send email');\n    }\n  },\n  getSalesVouchers: async (params?: any) => {\n    return voucherService.getVouchers('sales-vouchers', params);\n  },\n  // Purchase Order specific methods\n  getPurchaseOrders: async (params?: any) => {\n    return voucherService.getVouchers('purchase-orders', params);\n  },\n  getPurchaseOrderById: async (id: number) => {\n    return voucherService.getVoucherById('purchase-orders', id);\n  },\n  createPurchaseOrder: async (data: any, sendEmail = false) => {\n    return voucherService.createVoucher('purchase-orders', data, sendEmail);\n  },\n  updatePurchaseOrder: async (id: number, data: any) => {\n    return voucherService.updateVoucher('purchase-orders', id, data);\n  },\n  // GRN specific methods\n  getGrns: async (params?: any) => {\n    return voucherService.getVouchers('goods-receipt-notes', params);\n  },\n  getGrnById: async (id: number) => {\n    return voucherService.getVoucherById('goods-receipt-notes', id);\n  },\n  createGrn: async (data: any, sendEmail = false) => {\n    return voucherService.createVoucher('goods-receipt-notes', data, sendEmail);\n  },\n  updateGrn: async (id: number, data: any) => {\n    return voucherService.updateVoucher('goods-receipt-notes', id, data);\n  },\n  // Access to master data for vouchers\n  getVendors: async (params?: any) => {\n    return masterDataService.getVendors(params);\n  },\n  getProducts: async (params?: any) => {\n    return masterDataService.getProducts(params);\n  },\n  getCustomers: async (params?: any) => {\n    return masterDataService.getCustomers(params);\n  },\n};\nexport const masterDataService = {\n  getVendors: async ({ signal, params = {} } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/vendors', { params, signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch vendors');\n    }\n  },\n  createVendor: async (data: any) => {\n    try {\n      const response = await api.post('/vendors', data);  // No trailing /\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create vendor');\n    }\n  },\n  updateVendor: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/vendors/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update vendor');\n    }\n  },\n  deleteVendor: async (id: number) => {\n    try {\n      const response = await api.delete(`/vendors/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete vendor');\n    }\n  },\n  getCustomers: async ({ signal, params = {} } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/customers', { params, signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch customers');\n    }\n  },\n  createCustomer: async (data: any) => {\n    try {\n      const response = await api.post('/customers', data);  // No trailing /\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create customer');\n    }\n  },\n  updateCustomer: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/customers/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update customer');\n    }\n  },\n  deleteCustomer: async (id: number) => {\n    try {\n      const response = await api.delete(`/customers/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete customer');\n    }\n  },\n  getProducts: async ({ signal } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/products', { signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch products');\n    }\n  },\n  createProduct: async (data: any) => {\n    try {\n      const response = await api.post('/products', data);  // No trailing /\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create product');\n    }\n  },\n  updateProduct: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/products/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update product');\n    }\n  },\n  deleteProduct: async (id: number) => {\n    try {\n      const response = await api.delete(`/products/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete product');\n    }\n  },\n  getStock: async ({ signal, params = {} } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/stock', { params, signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch stock data');\n    }\n  },\n  getLowStock: async ({ signal } = {}) => {\n    try {\n      // Organization context is derived from backend session, no need to add manually\n      const response = await api.get('/stock/low-stock', { signal });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch low stock data');\n    }\n  },\n  updateStock: async (productId: number, data: any) => {\n    try {\n      const response = await api.put(`/stock/product/${productId}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update stock');\n    }\n  },\n  adjustStock: async (productId: number, quantityChange: number, reason: string) => {\n    try {\n      const response = await api.post(`/stock/adjust/${productId}`, null, {\n        params: { quantity_change: quantityChange, reason }\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to adjust stock');\n    }\n  },\n  bulkImportStock: async (file: File, mode: string = 'replace') => {\n    try {\n      // Ensure user is authenticated before attempting import\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required. Please log in before importing inventory.');\n      }\n      const formData = new FormData();\n      formData.append('file', file);\n      /**\n       * @deprecated Use React user context instead - organization context is derived from backend session\n       * Organization context is automatically managed by the backend via JWT token\n       */\n      const params = { mode };\n      console.log('Bulk import params:', params);\n      const response = await api.post('/stock/bulk', formData, {\n        params,\n        headers: {\n          'Content-Type': undefined,\n        },\n        transformRequest: (data) => data,\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to bulk import stock');\n    }\n  },\n  downloadStockTemplate: async () => {\n    try {\n      const response = await api.get('/stock/template/excel', {\n        responseType: 'blob',\n      });\n      const blob = new Blob([response.data], { \n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'stock_template.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to download stock template');\n    }\n  },\n  exportStock: async (params?: any) => {\n    try {\n      /**\n       * @deprecated Use React user context instead - organization context is derived from backend session\n       * Organization context is automatically managed by the backend via JWT token\n       */\n      const response = await api.get('/stock/export/excel', {\n        params,\n        responseType: 'blob',\n      });\n      const blob = new Blob([response.data], { \n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'stock_export.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export stock');\n    }\n  },\n};\nexport const companyService = {\n  getCurrentCompany: async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log('[CompanyService] Skipping company fetch - no token available');\n      return null;\n    }\n    try {\n      /**\n       * @deprecated Use React user context instead - organization context is derived from backend session\n       * Organization context is automatically managed by the backend via JWT token\n       */\n      const response = await api.get('/companies/current');\n      console.log('[CompanyService] Company data received:', response.data);\n      return response.data;\n    } catch (error: any) {\n      if (error.status === 404 || error.isCompanySetupRequired) {\n        console.log('[CompanyService] Company setup required (404 or company missing)');\n        return null;\n      }\n      console.error('[CompanyService] Error fetching company:', error);\n      return null;  // Return null on error to avoid throwing\n    }\n  },\n  isCompanySetupRequired: async () => {\n    try {\n      const company = await companyService.getCurrentCompany();\n      return company === null;\n    } catch (error: any) {\n      // If we get an error other than 404, assume company setup is required\n      return true;\n    }\n  },\n  createCompany: async (data: any) => {\n    try {\n      const response = await api.post('/companies/', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create company');\n    }\n  },\n  updateCompany: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/companies/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update company');\n    }\n  },\n  uploadLogo: async (companyId: number, file: File) => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await api.post(`/companies/${companyId}/logo`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to upload logo');\n    }\n  },\n  deleteLogo: async (companyId: number) => {\n    try {\n      const response = await api.delete(`/companies/${companyId}/logo`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete logo');\n    }\n  },\n  getLogoUrl: (companyId: number) => {\n    return `/api/v1/companies/${companyId}/logo`;\n  },\n  // Multi-company management methods\n  getCompanies: async () => {\n    try {\n      const response = await api.get('/companies/');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch companies');\n    }\n  },\n  getOrganizationInfo: async () => {\n    try {\n      const response = await api.get('/organizations/current');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch organization info');\n    }\n  },\n  getCompanyUsers: async (companyId: number) => {\n    try {\n      const response = await api.get(`/companies/${companyId}/users`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch company users');\n    }\n  },\n  assignUserToCompany: async (companyId: number, data: { user_id: number; company_id: number; is_company_admin: boolean }) => {\n    try {\n      const response = await api.post(`/companies/${companyId}/users`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to assign user to company');\n    }\n  },\n  updateUserCompanyAssignment: async (companyId: number, userId: number, updates: any) => {\n    try {\n      const response = await api.put(`/companies/${companyId}/users/${userId}`, updates);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update user assignment');\n    }\n  },\n  removeUserFromCompany: async (companyId: number, userId: number) => {\n    try {\n      const response = await api.delete(`/companies/${companyId}/users/${userId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to remove user from company');\n    }\n  },\n};\nexport const reportsService = {\n  getDashboardStats: async () => {\n    try {\n      const response = await api.get('/reports/dashboard-stats');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get dashboard stats');\n    }\n  },\n  getSalesReport: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/sales-report', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get sales report');\n    }\n  },\n  getPurchaseReport: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/purchase-report', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get purchase report');\n    }\n  },\n  getInventoryReport: async (lowStockOnly = false) => {\n    try {\n      const response = await api.get('/reports/inventory-report', {\n        params: { low_stock_only: lowStockOnly }\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get inventory report');\n    }\n  },\n  getPendingOrders: async (orderType = 'all') => {\n    try {\n      const response = await api.get('/reports/pending-orders', {\n        params: { order_type: orderType }\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get pending orders');\n    }\n  },\n  getCompleteLedger: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/complete-ledger', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get complete ledger');\n    }\n  },\n  getOutstandingLedger: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/outstanding-ledger', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get outstanding ledger');\n    }\n  },\n  // Export functions\n  exportSalesReportExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/sales-report/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export sales report');\n    }\n  },\n  exportPurchaseReportExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/purchase-report/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export purchase report');\n    }\n  },\n  exportInventoryReportExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/inventory-report/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export inventory report');\n    }\n  },\n  exportPendingOrdersExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/pending-orders/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export pending orders report');\n    }\n  },\n  exportCompleteLedgerExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/complete-ledger/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export complete ledger');\n    }\n  },\n  exportOutstandingLedgerExcel: async (params?: any) => {\n    try {\n      const response = await api.get('/reports/outstanding-ledger/export/excel', { \n        params,\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export outstanding ledger');\n    }\n  },\n};\nexport const organizationService = {\n  createLicense: async (data: any) => {\n    try {\n      const response = await api.post('/organizations/license/create', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create organization license');\n    }\n  },\n  getCurrentOrganization: async () => {\n    try {\n      const response = await api.get('/organizations/current');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get current organization');\n    }\n  },\n  updateOrganization: async (data: any) => {\n    try {\n      const response = await api.put('/organizations/current', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update organization');\n    }\n  },\n  // Admin-only endpoints\n  getAllOrganizations: async () => {\n    try {\n      const response = await api.get('/organizations/');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organizations');\n    }\n  },\n  getOrganization: async (id: number) => {\n    try {\n      const response = await api.get(`/organizations/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization');\n    }\n  },\n  updateOrganizationById: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/organizations/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update organization');\n    }\n  },\n};\nexport const passwordService = {\n  changePassword: async (currentPassword: string | null, newPassword: string, confirmPassword?: string) => {\n    try {\n      const payload: { new_password: string; current_password?: string; confirm_password?: string } = {\n        new_password: newPassword\n      };\n      if (currentPassword) {\n        payload.current_password = currentPassword;\n      }\n      if (confirmPassword) {\n        payload.confirm_password = confirmPassword;\n      }\n      const response = await api.post('/password/change', payload);\n      // Handle new token if provided in response (password change returns new JWT)\n      if (response.data.access_token) {\n        console.log('[PasswordService] New token received after password change, updating storage');\n        localStorage.setItem('token', response.data.access_token);\n      }\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to change password');\n    }\n  },\n  forgotPassword: async (email: string) => {\n    try {\n      const response = await api.post('/password/forgot', { email });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to send password reset email');\n    }\n  },\n  resetPassword: async (email: string, otp: string, newPassword: string) => {\n    try {\n      const response = await api.post('/password/reset', {\n        email,\n        otp,\n        new_password: newPassword\n      });\n      // Handle new token if provided in response (password reset returns new JWT)\n      if (response.data.access_token) {\n        console.log('[PasswordService] New token received after password reset, updating storage');\n        localStorage.setItem('token', response.data.access_token);\n      }\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to reset password');\n    }\n  },\n};\nexport const userService = {\n  // Organization user management (for org admins)\n  getOrganizationUsers: async (params?: any) => {\n    try {\n      const response = await api.get('/users/', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization users');\n    }\n  },\n  createUser: async (data: any) => {\n    try {\n      const response = await api.post('/users/', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create user');\n    }\n  },\n  updateUser: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/users/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update user');\n    }\n  },\n  deleteUser: async (id: number) => {\n    try {\n      const response = await api.delete(`/users/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete user');\n    }\n  },\n  resetUserPassword: async (userId: number) => {\n    try {\n      const response = await api.post(`/auth/reset/${userId}/password`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to reset user password');\n    }\n  },\n  toggleUserStatus: async (userId: number, isActive: boolean) => {\n    try {\n      const response = await api.put(`/users/${userId}`, { is_active: isActive });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update user status');\n    }\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/crmService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/dispatchService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/entityService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":108,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":110},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":167,"column":81,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":167,"endColumn":83},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":169,"column":83,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":169,"endColumn":85}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/entityService.ts\n// Unified Entity service for Customer + Vendor + Employee + ExpenseAccount management\nimport api from '../lib/api';\nimport {Entity, EntityType, EntityOption, ENTITY_CONFIGS} from '../types/entity.types';\ninterface QueryFunctionContext {\n  queryKey: any[];\n  signal?: AbortSignal;\n}\n/**\n * Get all entities of a specific type\n */\nexport const getEntitiesByType = async (entityType: EntityType, { signal }: { signal?: AbortSignal } = {}) => {\n  const config = ENTITY_CONFIGS[entityType];\n  const response = await api.get(config.endpoint, { signal });\n  return response.data.map((entity: any) => ({\n    ...entity,\n    type: entityType\n  }));\n};\n/**\n * Get all entities across all types (unified)\n */\nexport const getAllEntities = async ({ signal }: { signal?: AbortSignal } = {}): Promise<Entity[]> => {\n  try {\n    const [customers, vendors] = await Promise.all([\n      getEntitiesByType('Customer', { signal }).catch(() => []),\n      getEntitiesByType('Vendor', { signal }).catch(() => [])\n      // Future: Add Employee and ExpenseAccount when endpoints are available\n      // getEntitiesByType('Employee', { signal }).catch(() => []),\n      // getEntitiesByType('ExpenseAccount', { signal }).catch(() => [])\n    ]);\n    return [...customers, ...vendors];\n  } catch (error) {\n    console.error('Error fetching entities:', error);\n    return [];\n  }\n};\n/**\n * Convert entities to form-compatible options\n */\nexport const entitiesToOptions = (entities: Entity[]): EntityOption[] => {\n  return entities.map(entity => ({\n    id: entity.id,\n    name: entity.name,\n    type: entity.type,\n    label: `${entity.name} (${entity.type})`,\n    value: entity.id,\n    originalData: entity\n  }));\n};\n/**\n * Search entities across all types\n */\nexport const searchEntities = async (\n  searchTerm: string, \n  entityTypes: EntityType[] = ['Customer', 'Vendor'],\n  { signal }: { signal?: AbortSignal } = {}\n): Promise<EntityOption[]> => {\n  try {\n    const searchPromises = entityTypes.map(async (type) => {\n      const config = ENTITY_CONFIGS[type];\n      const response = await api.get(config.endpoint, {\n        params: {\n          search: searchTerm,\n          limit: 10,\n          active_only: true\n        },\n        signal\n      });\n      return response.data.map((entity: any) => ({\n        ...entity,\n        type\n      }));\n    });\n    const results = await Promise.all(searchPromises);\n    const allEntities = results.flat();\n    return entitiesToOptions(allEntities);\n  } catch (error) {\n    console.error('Error searching entities:', error);\n    return [];\n  }\n};\n/**\n * Get entity by ID and type\n */\nexport const getEntityById = async (\n  id: number, \n  entityType: EntityType,\n  { signal }: { signal?: AbortSignal } = {}\n): Promise<Entity | null> => {\n  try {\n    const config = ENTITY_CONFIGS[entityType];\n    const response = await api.get(`${config.endpoint}/${id}`, { signal });\n    return {\n      ...response.data,\n      type: entityType\n    };\n  } catch (error) {\n    console.error(`Error fetching ${entityType} with ID ${id}:`, error);\n    return null;\n  }\n};\n/**\n * Create new entity\n */\nexport const createEntity = async (\n  entityType: EntityType,\n  data: Partial<Entity>\n): Promise<Entity> => {\n  const config = ENTITY_CONFIGS[entityType];\n  const response = await api.post(config.endpoint, data);\n  return {\n    ...response.data,\n    type: entityType\n  };\n};\n/**\n * Update existing entity\n */\nexport const updateEntity = async (\n  id: number,\n  entityType: EntityType,\n  data: Partial<Entity>\n): Promise<Entity> => {\n  const config = ENTITY_CONFIGS[entityType];\n  const response = await api.put(`${config.endpoint}/${id}`, data);\n  return {\n    ...response.data,\n    type: entityType\n  };\n};\n/**\n * Delete entity\n */\nexport const deleteEntity = async (\n  id: number,\n  entityType: EntityType\n): Promise<void> => {\n  const config = ENTITY_CONFIGS[entityType];\n  await api.delete(`${config.endpoint}/${id}`);\n};\n/**\n * Get entity balance/outstanding amount\n */\nexport const getEntityBalance = async (\n  id: number,\n  entityType: EntityType,\n  { signal }: { signal?: AbortSignal } = {}\n): any =>  {\n  try {\n    const params = entityType === 'Customer' ? { customer_id: id } : { vendor_id: id };\n    const response = await api.get('/reports/outstanding-ledger', {\n      params,\n      signal\n    });\n    const balances = response.data?.outstanding_balances || [];\n    return balances.find((balance: any) => \n      (entityType === 'Customer' && balance.customer_id === id) ||\n      (entityType === 'Vendor' && balance.vendor_id === id)\n    );\n  } catch (error) {\n    console.error(`Error fetching balance for ${entityType} ${id}:`, error);\n    return null;\n  }\n};\n// Legacy compatibility functions (to maintain existing code)\nexport const getVendors = ({ signal }: QueryFunctionContext = { queryKey: [] }) => \n  getEntitiesByType('Vendor', { signal });\nexport const getCustomers = ({ signal }: QueryFunctionContext = { queryKey: [] }) => \n  getEntitiesByType('Customer', { signal });","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/feedbackService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/hrService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/marketingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/masterService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":70},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":17,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":72},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":22,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":71},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":27,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":72},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":32,"column":83,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":32,"endColumn":85},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":45,"column":82,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":45,"endColumn":84},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":124,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":124,"endColumn":56},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":128,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":128,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":132,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":132,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":136,"column":52,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":136,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":141,"column":76,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":141,"endColumn":78}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/masterService.ts\n// masterService.ts - Service to fetch master data like vendors, customers, products\nimport api from '../lib/api';  // Import the axios instance for consistency with authService and automatic token handling\n// Note: Functions are defined to accept React Query's QueryFunctionContext for proper integration.\n// This allows using signal for cancellation and prevents accidental passing of context as query params.\n// Each function ignores unnecessary context parts and uses only what is needed (e.g., signal).\ninterface QueryFunctionContext {\n  queryKey: any[];\n  signal?: AbortSignal;\n}\n// Fetch all vendors\nexport const getVendors = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/vendors', { signal });\n  return response.data;\n};\n// Fetch all customers\nexport const getCustomers = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/customers', { signal });\n  return response.data;\n};\n// Fetch all products\nexport const getProducts = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/products', { signal });\n  return response.data;\n};\n// Fetch all employees\nexport const getEmployees = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/employees', { signal });\n  return response.data;\n};\n// Search customers for autocomplete/dropdown\nexport const searchCustomers = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, searchTerm, limit] = queryKey;  // Expect queryKey = ['searchCustomers', searchTerm, limit]\n  const response = await api.get('/customers', {\n    params: {\n      search: searchTerm,\n      limit: limit || 10,\n      active_only: true,\n    },\n    signal,\n  });\n  return response.data;\n};\n// Search products for autocomplete/dropdown\nexport const searchProducts = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, searchTerm, limit] = queryKey;  // Expect queryKey = ['searchProducts', searchTerm, limit]\n  const response = await api.get('/products', {\n    params: {\n      search: searchTerm,\n      limit: limit || 10,\n      active_only: true,\n    },\n    signal,\n  });\n  return response.data;\n};\n// Create new customer\nexport const createCustomer = async (customerData: {\n  name: string;\n  contact_number: string;\n  email?: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  gst_number?: string;\n  pan_number?: string;\n}): any =>  {\n  const response = await api.post('/customers', customerData);\n  return response.data;\n};\n// Create new vendor\nexport const createVendor = async (vendorData: {\n  name: string;\n  contact_number: string;\n  email?: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  pin_code: string;\n  state_code: string;\n  gst_number?: string;\n  pan_number?: string;\n}): any =>  {\n  const response = await api.post('/vendors', vendorData);\n  return response.data;\n};\n// Create new product\nexport const createProduct = async (productData: {\n  name: string;\n  hsn_code?: string;\n  part_number?: string;\n  unit: string;\n  unit_price: number;\n  gst_rate?: number;\n  is_gst_inclusive?: boolean;\n  reorder_level?: number;\n  description?: string;\n  is_manufactured?: boolean;\n}): any =>  {\n  const response = await api.post('/products', productData);\n  return response.data;\n};\n// Create new employee\nexport const createEmployee = async (employeeData: {\n  name: string;\n  employee_id?: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  pincode?: string;\n  department?: string;\n  designation?: string;\n  salary?: number;\n}): any =>  {\n  const response = await api.post('/employees', employeeData);\n  return response.data;\n};\nexport const bulkImportVendors = async (data: any[]) => {\n  const response = await api.post('/vendors/bulk', data);\n  return response.data;\n};\nexport const bulkImportCustomers = async (data: any[]) => {\n  const response = await api.post('/customers/bulk', data);\n  return response.data;\n};\nexport const bulkImportProducts = async (data: any[]) => {\n  const response = await api.post('/products/bulk', data);\n  return response.data;\n};\nexport const bulkImportStock = async (data: any[]) => {\n  const response = await api.post('/stock/bulk', data);\n  return response.data;\n};\n// Fetch stock with parameter cleaning to avoid 422 errors\nexport const getStock = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, rawParams = {}] = queryKey;  // Expect queryKey = ['stock', { skip: 0, limit: 100, product_id: ..., low_stock_only: ..., search: ..., show_zero: ... }]\n  // Clean parameters to exclude invalid or empty values that cause validation errors\n  const params: any = {\n    skip: rawParams.skip || 0,\n    limit: rawParams.limit || 100,\n    low_stock_only: rawParams.low_stock_only || false,\n    search: rawParams.search || '',\n    show_zero: rawParams.show_zero || false,\n  };\n  // Include product_id only if it's a valid number (not empty string or NaN)\n  const productId = rawParams.product_id;\n  if (productId && !isNaN(Number(productId)) && productId !== '') {\n    params.product_id = Number(productId);\n  }\n  const response = await api.get('/stock', { params, signal });\n  return response.data;\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/notificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/notificationWorkflow.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/organizationService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":4,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":4,"column":25,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":4,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":13,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":22,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":22,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":22,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":22,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":31,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":39,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":39,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":47,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":47,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":47,"column":46,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":47,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":56,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":56,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":56,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":56,"endColumn":39},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":64,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":64,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":73,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":73,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":81,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":81,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'userData' should be typed with a non-any type.","line":81,"column":60,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":81,"endColumn":73},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":90,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":90,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":98,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":98,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":107,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":107,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":116,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":116,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":116,"column":56,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":116,"endColumn":68},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":124,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":124,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'userData' should be typed with a non-any type.","line":124,"column":60,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":124,"endColumn":73},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":132,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":132,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'userData' should be typed with a non-any type.","line":132,"column":76,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":132,"endColumn":89},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":140,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":140,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":149,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":149,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":149,"column":62,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":149,"endColumn":74},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":157,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":157,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":165,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":165,"endColumn":27}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/organizationService.ts\nimport api from '../lib/api';\nexport const organizationService = {\n  createLicense: async (data: any) => {\n    try {\n      const response = await api.post('/organizations/license/create', data);\n      // Organization context is managed by backend session only\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create organization license');\n    }\n  },\n  getCurrentOrganization: async () => {\n    try {\n      const response = await api.get('/organizations/current');\n      // Organization context is managed by backend session only\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get current organization');\n    }\n  },\n  updateOrganization: async (data: any) => {\n    try {\n      const response = await api.put('/organizations/current', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update organization');\n    }\n  },\n  // Admin-only endpoints\n  getAllOrganizations: async () => {\n    try {\n      const response = await api.get('/organizations/');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organizations');\n    }\n  },\n  getOrganization: async (id: number) => {\n    try {\n      const response = await api.get(`/organizations/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization');\n    }\n  },\n  updateOrganizationById: async (id: number, data: any) => {\n    try {\n      const response = await api.put(`/organizations/${id}`, data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update organization');\n    }\n  },\n  // New organization management endpoints\n  createOrganization: async (data: any) => {\n    try {\n      const response = await api.post('/organizations/', data);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create organization');\n    }\n  },\n  joinOrganization: async (organizationId: number) => {\n    try {\n      const response = await api.post(`/organizations/${organizationId}/join`);\n      // Organization context is managed by backend session only\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to join organization');\n    }\n  },\n  getOrganizationMembers: async (organizationId: number) => {\n    try {\n      const response = await api.get(`/organizations/${organizationId}/members`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization members');\n    }\n  },\n  inviteUserToOrganization: async (organizationId: number, userData: any) => {\n    try {\n      const response = await api.post(`/organizations/${organizationId}/invite`, userData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to invite user to organization');\n    }\n  },\n  // User organization management\n  getUserOrganizations: async () => {\n    try {\n      const response = await api.get('/users/me/organizations');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get user organizations');\n    }\n  },\n  switchOrganization: async (organizationId: number) => {\n    try {\n      const response = await api.put('/users/me/organization', { organization_id: organizationId });\n      // Organization context is managed by backend session only\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to switch organization');\n    }\n  },\n  deleteOrganization: async (organizationId: number) => {\n    try {\n      const response = await api.delete(`/organizations/${organizationId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete organization');\n    }\n  },\n  // Organization-scoped user management\n  getOrganizationUsers: async (organizationId: number, params?: any) => {\n    try {\n      const response = await api.get(`/organizations/${organizationId}/users`, { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization users');\n    }\n  },\n  createUserInOrganization: async (organizationId: number, userData: any) => {\n    try {\n      const response = await api.post(`/organizations/${organizationId}/users`, userData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create user in organization');\n    }\n  },\n  updateUserInOrganization: async (organizationId: number, userId: number, userData: any) => {\n    try {\n      const response = await api.put(`/organizations/${organizationId}/users/${userId}`, userData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update user in organization');\n    }\n  },\n  deleteUserFromOrganization: async (organizationId: number, userId: number) => {\n    try {\n      const response = await api.delete(`/organizations/${organizationId}/users/${userId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete user from organization');\n    }\n  },\n  // Invitation management\n  getOrganizationInvitations: async (organizationId: number, params?: any) => {\n    try {\n      const response = await api.get(`/organizations/${organizationId}/invitations`, { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get organization invitations');\n    }\n  },\n  resendInvitation: async (organizationId: number, invitationId: number) => {\n    try {\n      const response = await api.post(`/organizations/${organizationId}/invitations/${invitationId}/resend`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to resend invitation');\n    }\n  },\n  cancelInvitation: async (organizationId: number, invitationId: number) => {\n    try {\n      const response = await api.delete(`/organizations/${organizationId}/invitations/${invitationId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to cancel invitation');\n    }\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/pdfService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/procurementService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/rbacService.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ServicePermissionCreate' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"ServicePermissionCreate"},"fix":{"range":[288,315],"text":""},"desc":"Remove unused variable 'ServicePermissionCreate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'UserServiceRole' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"UserServiceRole"},"fix":{"range":[402,421],"text":""},"desc":"Remove unused variable 'UserServiceRole'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/rbacService.ts\n/**\n * Service CRM RBAC Service\n * \n * Client-side service for managing Service CRM role-based access control.\n * Provides methods for managing roles, permissions, and user assignments.\n */\nimport api from '../lib/api';\nimport {\n  ServicePermission,\n  ServicePermissionCreate,\n  ServiceRole,\n  ServiceRoleWithPermissions,\n  ServiceRoleCreate,\n  ServiceRoleUpdate,\n  UserServiceRole,\n  UserWithServiceRoles,\n  RoleAssignmentRequest,\n  RoleAssignmentResponse,\n  BulkRoleAssignmentRequest,\n  BulkRoleAssignmentResponse,\n  PermissionCheckRequest,\n  PermissionCheckResponse,\n  UserPermissions,\n  ServiceModule,\n  ServiceAction\n} from '../types/rbac.types';\nexport const rbacService = {\n  // Permission Management\n  getPermissions: async (params?: { \n    module?: ServiceModule; \n    action?: ServiceAction; \n  }): Promise<ServicePermission[]> => {\n    try {\n      const response = await api.get('/rbac/permissions', { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch service permissions');\n    }\n  },\n  initializeDefaultPermissions: async (): Promise<{ message: string; permissions: ServicePermission[] }> => {\n    try {\n      const response = await api.post('/rbac/permissions/initialize');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to initialize default permissions');\n    }\n  },\n  // Role Management\n  getOrganizationRoles: async (\n    organizationId: number, \n    isActive?: boolean\n  ): Promise<ServiceRole[]> => {\n    try {\n      const params = isActive !== undefined ? { is_active: isActive } : {};\n      const response = await api.get(`/rbac/organizations/${organizationId}/roles`, { params });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch organization roles');\n    }\n  },\n  createRole: async (\n    organizationId: number, \n    roleData: ServiceRoleCreate\n  ): Promise<ServiceRole> => {\n    try {\n      const response = await api.post(`/rbac/organizations/${organizationId}/roles`, {\n        ...roleData,\n        organization_id: organizationId\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create service role');\n    }\n  },\n  getRole: async (roleId: number): Promise<ServiceRoleWithPermissions> => {\n    try {\n      const response = await api.get(`/rbac/roles/${roleId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch service role');\n    }\n  },\n  updateRole: async (roleId: number, updates: ServiceRoleUpdate): Promise<ServiceRole> => {\n    try {\n      const response = await api.put(`/rbac/roles/${roleId}`, updates);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to update service role');\n    }\n  },\n  deleteRole: async (roleId: number): Promise<{ message: string }> => {\n    try {\n      const response = await api.delete(`/rbac/roles/${roleId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to delete service role');\n    }\n  },\n  initializeDefaultRoles: async (organizationId: number): Promise<{ message: string; roles: ServiceRole[] }> => {\n    try {\n      const response = await api.post(`/rbac/organizations/${organizationId}/roles/initialize`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to initialize default roles');\n    }\n  },\n  // User Role Assignment\n  assignRolesToUser: async (\n    userId: number, \n    assignment: RoleAssignmentRequest\n  ): Promise<RoleAssignmentResponse> => {\n    try {\n      const response = await api.post(`/rbac/users/${userId}/roles`, {\n        ...assignment,\n        user_id: userId\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to assign roles to user');\n    }\n  },\n  removeRoleFromUser: async (userId: number, roleId: number): Promise<{ message: string }> => {\n    try {\n      const response = await api.delete(`/rbac/users/${userId}/roles/${roleId}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to remove role from user');\n    }\n  },\n  removeAllRolesFromUser: async (userId: number): Promise<{ message: string }> => {\n    try {\n      const response = await api.delete(`/rbac/users/${userId}/roles`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to remove all roles from user');\n    }\n  },\n  getUserServiceRoles: async (userId: number): Promise<ServiceRole[]> => {\n    try {\n      const response = await api.get(`/rbac/users/${userId}/roles`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch user service roles');\n    }\n  },\n  getUsersWithRole: async (roleId: number): Promise<UserWithServiceRoles[]> => {\n    try {\n      const response = await api.get(`/rbac/roles/${roleId}/users`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch users with role');\n    }\n  },\n  // Permission Checking\n  checkUserPermission: async (\n    request: PermissionCheckRequest\n  ): Promise<PermissionCheckResponse> => {\n    try {\n      const response = await api.post('/rbac/permissions/check', request);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to check user permission');\n    }\n  },\n  getUserPermissions: async (userId: number): Promise<UserPermissions> => {\n    try {\n      const response = await api.get(`/rbac/users/${userId}/permissions`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch user permissions');\n    }\n  },\n  // Bulk Operations\n  bulkAssignRoles: async (\n    request: BulkRoleAssignmentRequest\n  ): Promise<BulkRoleAssignmentResponse> => {\n    try {\n      const response = await api.post('/rbac/roles/assign/bulk', request);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to bulk assign roles');\n    }\n  },\n  // Utility Functions\n  getCurrentUserPermissions: async (): Promise<string[]> => {\n    try {\n      // Get current user first to get user ID\n      const userResponse = await api.get('/users/me');\n      const userId = userResponse.data.id;\n      // Get user's service permissions\n      const permissions = await rbacService.getUserPermissions(userId);\n      return permissions.permissions;\n    } catch (error: any) {\n      console.warn('Failed to fetch current user permissions:', error);\n      return [];\n    }\n  },\n  getCurrentUserServiceRoles: async (): Promise<ServiceRole[]> => {\n    try {\n      // Get current user first to get user ID\n      const userResponse = await api.get('/users/me');\n      const userId = userResponse.data.id;\n      // Get user's service roles\n      return await rbacService.getUserServiceRoles(userId);\n    } catch (error: any) {\n      console.warn('Failed to fetch current user service roles:', error);\n      return [];\n    }\n  },\n  // Check if current user has specific service permission\n  hasCurrentUserPermission: async (permission: string): Promise<boolean> => {\n    try {\n      const permissions = await rbacService.getCurrentUserPermissions();\n      return permissions.includes(permission);\n    } catch (error: any) {\n      console.warn('Failed to check current user permission:', error);\n      return false;\n    }\n  },\n  // Get roles available for assignment in organization\n  getAvailableRoles: async (organizationId: number): Promise<ServiceRole[]> => {\n    try {\n      return await rbacService.getOrganizationRoles(organizationId, true); // Only active roles\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch available roles');\n    }\n  },\n  // Get comprehensive role data with permissions\n  getRolesWithPermissions: async (organizationId: number): Promise<ServiceRoleWithPermissions[]> => {\n    try {\n      const roles = await rbacService.getOrganizationRoles(organizationId);\n      // Fetch permissions for each role\n      const rolesWithPermissions = await Promise.all(\n        roles.map(async (role) => {\n          try {\n            return await rbacService.getRole(role.id);\n          } catch (error) {\n            console.warn(`Failed to fetch permissions for role ${role.id}:`, error);\n            return { ...role, permissions: [] } as ServiceRoleWithPermissions;\n          }\n        })\n      );\n      return rolesWithPermissions;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch roles with permissions');\n    }\n  },\n  // Get permissions grouped by module\n  getPermissionsByModule: async (): Promise<Record<string, ServicePermission[]>> => {\n    try {\n      const permissions = await rbacService.getPermissions();\n      const grouped: Record<string, ServicePermission[]> = {};\n      permissions.forEach(permission => {\n        if (!grouped[permission.module]) {\n          grouped[permission.module] = [];\n        }\n        grouped[permission.module].push(permission);\n      });\n      return grouped;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to fetch permissions by module');\n    }\n  },\n  // Validate role assignment (client-side checks)\n  validateRoleAssignment: (\n    userOrgId: number, \n    roleOrgId: number, \n    currentUserRole: string,\n    isCurrentUserSuperAdmin: boolean\n  ): { valid: boolean; error?: string } => {\n    // Super admins can assign any role\n    if (isCurrentUserSuperAdmin) {\n      return { valid: true };\n    }\n    // Regular users can only assign roles within their organization\n    if (userOrgId !== roleOrgId) {\n      return { \n        valid: false, \n        error: 'Cannot assign roles across different organizations' \n      };\n    }\n    // Check if current user has permission to manage roles\n    const canManageRoles = ['org_admin', 'admin'].includes(currentUserRole);\n    if (!canManageRoles) {\n      return { \n        valid: false, \n        error: 'Insufficient permissions to assign roles' \n      };\n    }\n    return { valid: true };\n  }\n};\n// Export permission constants for easy import\nexport * from '../types/rbac.types';\nexport { SERVICE_PERMISSIONS } from '../types/rbac.types';\nexport default rbacService;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/resetService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/serviceAnalyticsService.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TODAY' is defined but never used.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"TODAY"},"fix":{"range":[141,146],"text":""},"desc":"Remove unused variable 'TODAY'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'WEEK' is defined but never used.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"WEEK"},"fix":{"range":[156,164],"text":""},"desc":"Remove unused variable 'WEEK'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MONTH' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"MONTH"},"fix":{"range":[173,182],"text":""},"desc":"Remove unused variable 'MONTH'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'QUARTER' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"QUARTER"},"fix":{"range":[192,203],"text":""},"desc":"Remove unused variable 'QUARTER'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'YEAR' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"YEAR"},"fix":{"range":[215,223],"text":""},"desc":"Remove unused variable 'YEAR'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CUSTOM' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"CUSTOM"},"fix":{"range":[232,242],"text":""},"desc":"Remove unused variable 'CUSTOM'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'JOB_COMPLETION' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"JOB_COMPLETION"},"fix":{"range":[283,297],"text":""},"desc":"Remove unused variable 'JOB_COMPLETION'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TECHNICIAN_PERFORMANCE' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"TECHNICIAN_PERFORMANCE"},"fix":{"range":[316,342],"text":""},"desc":"Remove unused variable 'TECHNICIAN_PERFORMANCE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CUSTOMER_SATISFACTION' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"CUSTOMER_SATISFACTION"},"fix":{"range":[369,394],"text":""},"desc":"Remove unused variable 'CUSTOMER_SATISFACTION'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'JOB_VOLUME' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"JOB_VOLUME"},"fix":{"range":[420,434],"text":""},"desc":"Remove unused variable 'JOB_VOLUME'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SLA_COMPLIANCE' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"SLA_COMPLIANCE"},"fix":{"range":[449,467],"text":""},"desc":"Remove unused variable 'SLA_COMPLIANCE'."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/serviceAnalyticsService.ts\nimport api from '../lib/api';\n// Enums matching the backend\nexport enum ReportPeriod {\n  TODAY = 'today',\n  WEEK = 'week',\n  MONTH = 'month',\n  QUARTER = 'quarter',\n  YEAR = 'year',\n  CUSTOM = 'custom'\n}\nexport enum MetricType {\n  JOB_COMPLETION = 'job_completion',\n  TECHNICIAN_PERFORMANCE = 'technician_performance',\n  CUSTOMER_SATISFACTION = 'customer_satisfaction',\n  JOB_VOLUME = 'job_volume',\n  SLA_COMPLIANCE = 'sla_compliance'\n}\n// Interfaces matching the backend schemas\nexport interface TimeSeriesDataPoint {\n  date: string;\n  value: number;\n  label?: string;\n}\nexport interface JobCompletionMetrics {\n  total_jobs: number;\n  completed_jobs: number;\n  pending_jobs: number;\n  cancelled_jobs: number;\n  completion_rate: number;\n  average_completion_time_hours?: number;\n  on_time_completion_rate: number;\n  jobs_by_status: Record<string, number>;\n  completion_trend: TimeSeriesDataPoint[];\n}\nexport interface TechnicianPerformanceMetrics {\n  technician_id: number;\n  technician_name: string;\n  total_jobs_assigned: number;\n  jobs_completed: number;\n  jobs_in_progress: number;\n  average_completion_time_hours?: number;\n  customer_rating_average?: number;\n  utilization_rate: number;\n  efficiency_score: number;\n}\nexport interface CustomerSatisfactionMetrics {\n  total_feedback_received: number;\n  average_overall_rating: number;\n  average_service_quality?: number;\n  average_technician_rating?: number;\n  average_timeliness_rating?: number;\n  average_communication_rating?: number;\n  satisfaction_distribution: Record<string, number>;\n  nps_score?: number;\n  recommendation_rate?: number;\n  satisfaction_trend: TimeSeriesDataPoint[];\n}\nexport interface JobVolumeMetrics {\n  total_jobs: number;\n  jobs_per_day_average: number;\n  peak_day?: string;\n  peak_day_count: number;\n  volume_trend: TimeSeriesDataPoint[];\n  jobs_by_priority: Record<string, number>;\n  jobs_by_customer: Array<{\n    customer_id: number;\n    customer_name: string;\n    job_count: number;\n  }>;\n}\nexport interface SLAComplianceMetrics {\n  total_jobs_with_sla: number;\n  sla_met_count: number;\n  sla_breached_count: number;\n  overall_compliance_rate: number;\n  average_resolution_time_hours?: number;\n  compliance_by_priority: Record<string, number>;\n  compliance_trend: TimeSeriesDataPoint[];\n  breach_reasons: Record<string, number>;\n}\nexport interface AnalyticsDashboard {\n  organization_id: number;\n  report_period: ReportPeriod;\n  start_date: string;\n  end_date: string;\n  job_completion: JobCompletionMetrics;\n  technician_performance: TechnicianPerformanceMetrics[];\n  customer_satisfaction: CustomerSatisfactionMetrics;\n  job_volume: JobVolumeMetrics;\n  sla_compliance: SLAComplianceMetrics;\n  generated_at: string;\n}\nexport interface AnalyticsRequest {\n  start_date?: string;\n  end_date?: string;\n  period?: ReportPeriod;\n  technician_id?: number;\n  customer_id?: number;\n}\nexport interface ReportConfiguration {\n  id: number;\n  organization_id: number;\n  name: string;\n  description?: string;\n  metric_types: MetricType[];\n  filters: Record<string, any>;\n  schedule_enabled: boolean;\n  schedule_frequency?: string;\n  email_recipients: string[];\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\nexport interface TechnicianOption {\n  id: number;\n  name: string;\n  email: string;\n}\nexport interface CustomerOption {\n  id: number;\n  name: string;\n  email: string;\n}\nexport const serviceAnalyticsService = {\n  /**\n   * Get complete analytics dashboard\n   */\n  getAnalyticsDashboard: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<AnalyticsDashboard> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/dashboard`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get analytics dashboard');\n    }\n  },\n  /**\n   * Get job completion metrics\n   */\n  getJobCompletionMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<JobCompletionMetrics> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/job-completion`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get job completion metrics');\n    }\n  },\n  /**\n   * Get technician performance metrics (requires manager permissions)\n   */\n  getTechnicianPerformanceMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<TechnicianPerformanceMetrics[]> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/technician-performance`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get technician performance metrics');\n    }\n  },\n  /**\n   * Get customer satisfaction metrics\n   */\n  getCustomerSatisfactionMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<CustomerSatisfactionMetrics> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/customer-satisfaction`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get customer satisfaction metrics');\n    }\n  },\n  /**\n   * Get job volume metrics\n   */\n  getJobVolumeMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<JobVolumeMetrics> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/job-volume`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get job volume metrics');\n    }\n  },\n  /**\n   * Get SLA compliance metrics (requires manager permissions)\n   */\n  getSLAComplianceMetrics: async (\n    organizationId: number,\n    filters: AnalyticsRequest = {}\n  ): Promise<SLAComplianceMetrics> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/sla-compliance`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get SLA compliance metrics');\n    }\n  },\n  /**\n   * Get available technicians for filtering\n   */\n  getAvailableTechnicians: async (organizationId: number): Promise<TechnicianOption[]> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/technicians`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get available technicians');\n    }\n  },\n  /**\n   * Get available customers for filtering\n   */\n  getAvailableCustomers: async (organizationId: number): Promise<CustomerOption[]> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/customers`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get available customers');\n    }\n  },\n  /**\n   * Get report configurations\n   */\n  getReportConfigurations: async (\n    organizationId: number,\n    activeOnly: boolean = true\n  ): Promise<ReportConfiguration[]> => {\n    try {\n      const response = await api.get(`/service-analytics/organizations/${organizationId}/analytics/report-configurations`, {\n        params: { active_only: activeOnly }\n      });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to get report configurations');\n    }\n  },\n  /**\n   * Create a new report configuration (requires manager permissions)\n   */\n  createReportConfiguration: async (\n    organizationId: number,\n    config: Omit<ReportConfiguration, 'id' | 'organization_id' | 'created_at' | 'updated_at'>\n  ): Promise<ReportConfiguration> => {\n    try {\n      const response = await api.post(`/service-analytics/organizations/${organizationId}/analytics/report-configurations`, config);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to create report configuration');\n    }\n  },\n  /**\n   * Export analytics data\n   */\n  exportAnalyticsData: async (\n    organizationId: number,\n    exportRequest: {\n      format: string;\n      metric_types: MetricType[];\n      filters: AnalyticsRequest;\n      include_raw_data?: boolean;\n    }\n  ): Promise<Blob> => {\n    try {\n      const response = await api.post(\n        `/service-analytics/organizations/${organizationId}/analytics/export`,\n        exportRequest,\n        {\n          responseType: 'blob'\n        }\n      );\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.userMessage || 'Failed to export analytics data');\n    }\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/serviceDeskService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/slaService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'update' should be typed with a non-any type.","line":147,"column":73,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":147,"endColumn":84}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/slaService.ts\n/**\n * SLA Management Service\n * Handles API calls for SLA policies and tracking\n */\nimport api from '../lib/api';\n// Types for SLA Management\nexport interface SLAPolicy {\n  id: number;\n  organization_id: number;\n  name: string;\n  description?: string;\n  priority?: string;\n  ticket_type?: string;\n  customer_tier?: string;\n  response_time_hours: number;\n  resolution_time_hours: number;\n  escalation_enabled: boolean;\n  escalation_threshold_percent: number;\n  is_active: boolean;\n  is_default: boolean;\n  created_at: string;\n  updated_at?: string;\n  created_by_id?: number;\n}\nexport interface SLATracking {\n  id: number;\n  organization_id: number;\n  ticket_id: number;\n  policy_id: number;\n  response_deadline: string;\n  resolution_deadline: string;\n  first_response_at?: string;\n  resolved_at?: string;\n  response_status: 'pending' | 'met' | 'breached';\n  resolution_status: 'pending' | 'met' | 'breached';\n  escalation_triggered: boolean;\n  escalation_triggered_at?: string;\n  escalation_level: number;\n  response_breach_hours?: number;\n  resolution_breach_hours?: number;\n  created_at: string;\n  updated_at?: string;\n}\nexport interface SLATrackingWithPolicy extends SLATracking {\n  policy: SLAPolicy;\n}\nexport interface SLAMetrics {\n  total_tickets: number;\n  response_sla_met: number;\n  resolution_sla_met: number;\n  response_sla_breached: number;\n  resolution_sla_breached: number;\n  escalated_tickets: number;\n  avg_response_time_hours?: number;\n  avg_resolution_time_hours?: number;\n  response_sla_percentage: number;\n  resolution_sla_percentage: number;\n}\nexport interface SLAPolicyCreate {\n  name: string;\n  description?: string;\n  priority?: string;\n  ticket_type?: string;\n  customer_tier?: string;\n  response_time_hours: number;\n  resolution_time_hours: number;\n  escalation_enabled?: boolean;\n  escalation_threshold_percent?: number;\n  is_active?: boolean;\n  is_default?: boolean;\n}\nexport type SLAPolicyUpdate = Partial<SLAPolicyCreate>;\nexport const slaService = {\n  // SLA Policy Management\n  getPolicies: async (organizationId: number, isActive?: boolean): Promise<SLAPolicy[]> => {\n    try {\n      const params = new URLSearchParams();\n      if (isActive !== undefined) {\n        params.append('is_active', isActive.toString());\n      }\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/policies?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching SLA policies:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch SLA policies');\n    }\n  },\n  getPolicy: async (organizationId: number, policyId: number): Promise<SLAPolicy> => {\n    try {\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/policies/${policyId}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching SLA policy:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch SLA policy');\n    }\n  },\n  createPolicy: async (organizationId: number, policy: SLAPolicyCreate): Promise<SLAPolicy> => {\n    try {\n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/policies`, policy);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error creating SLA policy:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to create SLA policy');\n    }\n  },\n  updatePolicy: async (organizationId: number, policyId: number, policy: SLAPolicyUpdate): Promise<SLAPolicy> => {\n    try {\n      const response = await api.put(`/api/v1/sla/organizations/${organizationId}/policies/${policyId}`, policy);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error updating SLA policy:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to update SLA policy');\n    }\n  },\n  deletePolicy: async (organizationId: number, policyId: number): Promise<void> => {\n    try {\n      await api.delete(`/api/v1/sla/organizations/${organizationId}/policies/${policyId}`);\n    } catch (error: any) {\n      console.error('Error deleting SLA policy:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to delete SLA policy');\n    }\n  },\n  // SLA Tracking\n  assignSLAToTicket: async (organizationId: number, ticketId: number, forceRecreate?: boolean): Promise<any> => {\n    try {\n      const params = new URLSearchParams();\n      if (forceRecreate) {\n        params.append('force_recreate', 'true');\n      }\n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/tickets/${ticketId}/sla?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error assigning SLA to ticket:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to assign SLA to ticket');\n    }\n  },\n  getTicketSLA: async (organizationId: number, ticketId: number): Promise<SLATrackingWithPolicy> => {\n    try {\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/tickets/${ticketId}/sla`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching ticket SLA:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch ticket SLA');\n    }\n  },\n  updateSLATracking: async (organizationId: number, trackingId: number, update: any): Promise<SLATracking> => {\n    try {\n      const response = await api.put(`/api/v1/sla/organizations/${organizationId}/tracking/${trackingId}`, update);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error updating SLA tracking:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to update SLA tracking');\n    }\n  },\n  // SLA Monitoring\n  getBreachedSLAs: async (organizationId: number, limit?: number): Promise<SLATracking[]> => {\n    try {\n      const params = new URLSearchParams();\n      if (limit) {\n        params.append('limit', limit.toString());\n      }\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/sla/breached?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching breached SLAs:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch breached SLAs');\n    }\n  },\n  getEscalationCandidates: async (organizationId: number): Promise<SLATracking[]> => {\n    try {\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/sla/escalation-candidates`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching escalation candidates:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch escalation candidates');\n    }\n  },\n  triggerEscalation: async (organizationId: number, trackingId: number): Promise<any> => {\n    try {\n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/tracking/${trackingId}/escalate`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error triggering escalation:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to trigger escalation');\n    }\n  },\n  // SLA Analytics\n  getSLAMetrics: async (\n    organizationId: number, \n    startDate?: string, \n    endDate?: string, \n    days?: number\n  ): Promise<SLAMetrics> => {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) {params.append('start_date', startDate);}\n      if (endDate) {params.append('end_date', endDate);}\n      if (days) {params.append('days', days.toString());}\n      const response = await api.get(`/api/v1/sla/organizations/${organizationId}/sla/metrics?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error fetching SLA metrics:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to fetch SLA metrics');\n    }\n  },\n  // Ticket Processing\n  processTicketResponse: async (organizationId: number, ticketId: number, responseTime?: string): Promise<any> => {\n    try {\n      const params = new URLSearchParams();\n      if (responseTime) {\n        params.append('response_time', responseTime);\n      }\n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/tickets/${ticketId}/response?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error processing ticket response:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to process ticket response');\n    }\n  },\n  processTicketResolution: async (organizationId: number, ticketId: number, resolutionTime?: string): Promise<any> => {\n    try {\n      const params = new URLSearchParams();\n      if (resolutionTime) {\n        params.append('resolution_time', resolutionTime);\n      }\n      const response = await api.post(`/api/v1/sla/organizations/${organizationId}/tickets/${ticketId}/resolution?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      console.error('Error processing ticket resolution:', error);\n      throw new Error(error.response?.data?.detail || 'Failed to process ticket resolution');\n    }\n  }\n};\nexport default slaService;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/stickyNotesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/stockService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":10,"column":83,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":10,"endColumn":85},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":27,"column":85,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":87},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":55,"column":85,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":55,"endColumn":87},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":64,"column":75,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":64,"endColumn":77},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":69,"column":62,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":69,"endColumn":64},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":76,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":76,"endColumn":68},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":80,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":17}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/services/stockService.ts\n// services/stockService.ts\n// Service for fetching stock and balance information for voucher forms\nimport api from '../lib/api';\ninterface QueryFunctionContext {\n  queryKey: any[];\n  signal?: AbortSignal;\n}\n// Fetch stock quantity for a specific product\nexport const getProductStock = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, productId] = queryKey; // Expect queryKey = ['productStock', productId]\n  if (!productId) {\n    return null;\n  }\n  try {\n    const response = await api.get(`/stock/product/${productId}`, { signal });\n    return response.data;\n  } catch (error: any) {\n    // Return null if no stock data found or access denied (instead of throwing)\n    if (error.response?.status === 404 || error.response?.status === 403) {\n      return null;\n    }\n    throw error;\n  }\n};\n// Fetch outstanding balance for a specific customer or vendor\nexport const getAccountBalance = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, accountType, accountId] = queryKey; // Expect queryKey = ['accountBalance', accountType, accountId]\n  if (!accountType || !accountId) {\n    return null;\n  }\n  try {\n    const response = await api.get('/reports/outstanding-ledger', {\n      params: {\n        account_type: accountType,\n        account_id: accountId\n      },\n      signal\n    });\n    // Find the specific account in the response\n    const balances = response.data?.outstanding_balances || [];\n    const accountBalance = balances.find((balance: any) => \n      balance.account_type === accountType && balance.account_id === accountId\n    );\n    return accountBalance;\n  } catch (error: any) {\n    // Return null if no balance data found or access denied (instead of throwing)\n    if (error.response?.status === 404 || error.response?.status === 403) {\n      return null;\n    }\n    throw error;\n  }\n};\n// Fetch stock movements\nexport const getStockMovements = async ({ queryKey, signal }: QueryFunctionContext) => {\n  const [, params] = queryKey; // Expect queryKey = ['stockMovements', { search, recent }]\n  const response = await api.get('/stock/movements', {\n    params,\n    signal\n  });\n  return response.data;\n};\n// Fetch low stock report\nexport const getLowStockReport = async ({ signal }: QueryFunctionContext) => {\n  const response = await api.get('/stock/low-stock', { signal });\n  return response.data;\n};\n// Fetch movements for specific product\nexport const getProductMovements = async (productId: number) => {\n  const response = await api.get('/stock/movements', {\n    params: { product_id: productId }\n  });\n  return response.data;\n};\n// Fetch last vendor for product\nexport const getLastVendorForProduct = async (productId: number) => {\n  try {\n    const response = await api.get(`/stock/product/${productId}/last-vendor`);\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/transportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/services/vouchersService.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":6,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":6,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":13,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":13,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":19,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":19,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":19,"column":39,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":19,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":25,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":25,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":25,"column":51,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":25,"endColumn":60},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":31,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":37,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":37,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":41,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":41,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":41,"column":33,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":41,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":45,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":45,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":45,"column":45,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":45,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":50,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":50,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":54,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":54,"column":31,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":54,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":58,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":58,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":58,"column":43,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":58,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":63,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":63,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":67,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":67,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":67,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":67,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":71,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":71,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":71,"column":33,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":71,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":76,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":76,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":80,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":80,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":80,"column":29,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":80,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":84,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":84,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'data' should be typed with a non-any type.","line":84,"column":41,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":84,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'voucher' should be typed with a non-any type.","line":89,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":89,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":107,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":107,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":116,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":116,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'voucher' should be typed with a non-any type.","line":125,"column":21,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":125,"endColumn":33}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/services/vouchersService.ts\n// frontend/src/services/vouchersService.ts\nimport api from '../lib/api';\nexport const voucherService = {\n  // Generic Voucher Methods\n  getVouchers: async (type: string, params?: any) => {\n    const endpoint = `/${type}`;  // Use type directly since it's already plural\n    console.log(`[voucherService] Fetching vouchers from endpoint: ${endpoint}`);\n    const response = await api.get(endpoint, { params });\n    console.log(`[voucherService] Received data for ${type}:`, response.data);\n    return response.data;\n  },\n  getVoucherById: async (type: string, id: number) => {\n    const endpoint = `/${type}/${id}`;\n    console.log(`[voucherService] Fetching voucher by ID from: ${endpoint}`);\n    const response = await api.get(endpoint);\n    return response.data;\n  },\n  createVoucher: async (type: string, data: any, sendEmail: boolean = false) => {\n    const endpoint = `/${type}`;\n    console.log(`[voucherService] Creating voucher at: ${endpoint}`);\n    const response = await api.post(endpoint, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updateVoucher: async (type: string, id: number, data: any) => {\n    const endpoint = `/${type}/${id}`;\n    console.log(`[voucherService] Updating voucher at: ${endpoint}`);\n    const response = await api.put(endpoint, data);\n    return response.data;\n  },\n  getNextVoucherNumber: async (endpoint: string) => {\n    console.log(`[voucherService] Fetching next number from: ${endpoint}`);\n    const response = await api.get(endpoint);\n    return response.data;\n  },\n  // Purchase Vouchers\n  getPurchaseVoucherById: async (id: number) => {\n    const response = await api.get(`/purchase-vouchers/${id}`);\n    return response.data;\n  },\n  createPurchaseVoucher: async (data: any, sendEmail: boolean) => {\n    const response = await api.post(`/purchase-vouchers`, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updatePurchaseVoucher: async (id: number, data: any) => {\n    const response = await api.put(`/purchase-vouchers/${id}`, data);\n    return response.data;\n  },\n  // Purchase Orders\n  getPurchaseOrderById: async (id: number) => {\n    const response = await api.get(`/purchase-orders/${id}`);\n    return response.data;\n  },\n  createPurchaseOrder: async (data: any, sendEmail: boolean) => {\n    const response = await api.post(`/purchase-orders`, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updatePurchaseOrder: async (id: number, data: any) => {\n    const response = await api.put(`/purchase-orders/${id}`, data);\n    return response.data;\n  },\n  // GRN\n  getGrnById: async (id: number) => {\n    const response = await api.get(`/goods-receipt-notes/${id}`);\n    return response.data;\n  },\n  createGrn: async (data: any, sendEmail: boolean) => {\n    const response = await api.post(`/goods-receipt-notes`, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updateGrn: async (id: number, data: any) => {\n    const response = await api.put(`/goods-receipt-notes/${id}`, data);\n    return response.data;\n  },\n  // Rejection In\n  getRejectionInById: async (id: number) => {\n    const response = await api.get(`/purchase-returns/${id}`);\n    return response.data;\n  },\n  createRejectionIn: async (data: any, sendEmail: boolean) => {\n    const response = await api.post(`/purchase-returns`, data, { params: { send_email: sendEmail } });\n    return response.data;\n  },\n  updateRejectionIn: async (id: number, data: any) => {\n    const response = await api.put(`/purchase-returns/${id}`, data);\n    return response.data;\n  },\n  // Enhanced service methods for voucher actions\ngetEmailRecipient: (voucher: any, voucherType: string): any => {\n    const type = voucherType.toLowerCase();\n    if (type === 'purchase' && voucher.vendor) {\n      return {\n        name: voucher.vendor.name,\n        email: voucher.vendor.email,\n        type: 'vendor',\n      };\n    }\n    if (type === 'sales' && voucher.customer) {\n      return {\n        name: voucher.customer.name,\n        email: voucher.customer.email,\n        type: 'customer',\n      };\n    }\n    return null;\n  },\n  sendVoucherEmail: async (voucherType: string, id: number) => {\n    try {\n      const response = await api.post(`/${voucherType}/${id}/send-email`);\n      return response.data;\n    } catch (error) {\n      console.error('Error sending voucher email:', error);\n      throw error;\n    }\n  },\n  deleteVoucher: async (voucherType: string, id: number) => {\n    try {\n      const response = await api.delete(`/${voucherType}/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting voucher:', error);\n      throw error;\n    }\n  },\ngetVoucherActions: (voucher: any, voucherType: string): any => {\n    const recipient = voucherService.getEmailRecipient(voucher, voucherType);\n    return {\n      canView: true,\n      canEdit: true,\n      canDelete: voucher.status !== 'approved' && voucher.status !== 'confirmed',\n      canPrint: true,\n      canEmail: Boolean(recipient?.email),\n      emailRecipient: recipient,\n    };\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/dispatch.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/entity.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/rbac.types.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ADMIN' is defined but never used.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"ADMIN"},"fix":{"range":[223,228],"text":""},"desc":"Remove unused variable 'ADMIN'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'MANAGER' is defined but never used.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"MANAGER"},"fix":{"range":[238,249],"text":""},"desc":"Remove unused variable 'MANAGER'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SUPPORT' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"SUPPORT"},"fix":{"range":[261,272],"text":""},"desc":"Remove unused variable 'SUPPORT'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'VIEWER' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"VIEWER"},"fix":{"range":[284,294],"text":""},"desc":"Remove unused variable 'VIEWER'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SERVICE' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":10,"suggestions":[{"messageId":"removeVar","data":{"varName":"SERVICE"},"fix":{"range":[338,345],"text":""},"desc":"Remove unused variable 'SERVICE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'TECHNICIAN' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"TECHNICIAN"},"fix":{"range":[357,371],"text":""},"desc":"Remove unused variable 'TECHNICIAN'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'APPOINTMENT' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"APPOINTMENT"},"fix":{"range":[386,401],"text":""},"desc":"Remove unused variable 'APPOINTMENT'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CUSTOMER_SERVICE' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"CUSTOMER_SERVICE"},"fix":{"range":[417,437],"text":""},"desc":"Remove unused variable 'CUSTOMER_SERVICE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'WORK_ORDER' is defined but never used.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"WORK_ORDER"},"fix":{"range":[458,472],"text":""},"desc":"Remove unused variable 'WORK_ORDER'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'SERVICE_REPORTS' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"SERVICE_REPORTS"},"fix":{"range":[487,506],"text":""},"desc":"Remove unused variable 'SERVICE_REPORTS'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CRM_ADMIN' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"CRM_ADMIN"},"fix":{"range":[526,539],"text":""},"desc":"Remove unused variable 'CRM_ADMIN'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'CREATE' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"CREATE"},"fix":{"range":[586,592],"text":""},"desc":"Remove unused variable 'CREATE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'READ' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"READ"},"fix":{"range":[603,611],"text":""},"desc":"Remove unused variable 'READ'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'UPDATE' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"UPDATE"},"fix":{"range":[620,630],"text":""},"desc":"Remove unused variable 'UPDATE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'DELETE' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"DELETE"},"fix":{"range":[641,651],"text":""},"desc":"Remove unused variable 'DELETE'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'EXPORT' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"EXPORT"},"fix":{"range":[662,672],"text":""},"desc":"Remove unused variable 'EXPORT'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'ADMIN' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":8,"suggestions":[{"messageId":"removeVar","data":{"varName":"ADMIN"},"fix":{"range":[683,692],"text":""},"desc":"Remove unused variable 'ADMIN'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":157,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":157,"endColumn":57,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[3658,3701],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'roleIds' is defined but never used.","line":167,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":167,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"roleIds"},"fix":{"range":[3943,3960],"text":""},"desc":"Remove unused variable 'roleIds'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'roleId' is defined but never used.","line":168,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":168,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"roleId"},"fix":{"range":[3984,3998],"text":""},"desc":"Remove unused variable 'roleId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'roleId' is defined but never used.","line":174,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"roleId"},"fix":{"range":[4175,4190],"text":""},"desc":"Remove unused variable 'roleId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'permissionId' is defined but never used.","line":174,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"permissionId"},"fix":{"range":[4189,4211],"text":""},"desc":"Remove unused variable 'permissionId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'granted' is defined but never used.","line":174,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":78,"suggestions":[{"messageId":"removeVar","data":{"varName":"granted"},"fix":{"range":[4211,4229],"text":""},"desc":"Remove unused variable 'granted'."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/types/rbac.types.ts\n/**\n * Service CRM RBAC Types\n * \n * TypeScript type definitions for Role-Based Access Control\n * in the Service CRM module.\n */\n// Enums matching backend\nexport enum ServiceRoleType {\n  ADMIN = 'admin',\n  MANAGER = 'manager',\n  SUPPORT = 'support',\n  VIEWER = 'viewer'\n}\nexport enum ServiceModule {\n  SERVICE = 'service',\n  TECHNICIAN = 'technician',\n  APPOINTMENT = 'appointment',\n  CUSTOMER_SERVICE = 'customer_service',\n  WORK_ORDER = 'work_order',\n  SERVICE_REPORTS = 'service_reports',\n  CRM_ADMIN = 'crm_admin'\n}\nexport enum ServiceAction {\n  CREATE = 'create',\n  READ = 'read',\n  UPDATE = 'update',\n  DELETE = 'delete',\n  EXPORT = 'export',\n  ADMIN = 'admin'\n}\n// Service Permission Types\nexport interface ServicePermission {\n  id: number;\n  name: string;\n  display_name: string;\n  description?: string;\n  module: ServiceModule;\n  action: ServiceAction;\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\nexport interface ServicePermissionCreate {\n  name: string;\n  display_name: string;\n  description?: string;\n  module: ServiceModule;\n  action: ServiceAction;\n  is_active?: boolean;\n}\nexport interface ServicePermissionUpdate {\n  display_name?: string;\n  description?: string;\n  is_active?: boolean;\n}\n// Service Role Types\nexport interface ServiceRole {\n  id: number;\n  organization_id: number;\n  name: ServiceRoleType;\n  display_name: string;\n  description?: string;\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\nexport interface ServiceRoleWithPermissions extends ServiceRole {\n  permissions: ServicePermission[];\n}\nexport interface ServiceRoleCreate {\n  name: ServiceRoleType;\n  display_name: string;\n  description?: string;\n  organization_id: number;\n  permission_ids?: number[];\n  is_active?: boolean;\n}\nexport interface ServiceRoleUpdate {\n  display_name?: string;\n  description?: string;\n  is_active?: boolean;\n  permission_ids?: number[];\n}\n// User Role Assignment Types\nexport interface UserServiceRole {\n  id: number;\n  user_id: number;\n  role_id: number;\n  assigned_by_id?: number;\n  is_active: boolean;\n  created_at: string;\n  updated_at?: string;\n}\nexport interface UserServiceRoleCreate {\n  user_id: number;\n  role_id: number;\n  assigned_by_id?: number;\n  is_active?: boolean;\n}\nexport interface UserWithServiceRoles {\n  id: number;\n  email: string;\n  full_name?: string;\n  role: string; // Regular user role\n  is_active: boolean;\n  service_roles: ServiceRole[];\n}\n// Role Assignment Request/Response Types\nexport interface RoleAssignmentRequest {\n  user_id: number;\n  role_ids: number[];\n}\nexport interface RoleAssignmentResponse {\n  success: boolean;\n  message: string;\n  assignments: UserServiceRole[];\n}\nexport interface BulkRoleAssignmentRequest {\n  user_ids: number[];\n  role_ids: number[];\n  replace_existing?: boolean;\n}\nexport interface BulkRoleAssignmentResponse {\n  success: boolean;\n  message: string;\n  successful_assignments: number;\n  failed_assignments: number;\n  details: string[];\n}\n// Permission Checking Types\nexport interface PermissionCheckRequest {\n  user_id: number;\n  permission: string;\n  organization_id?: number;\n}\nexport interface PermissionCheckResponse {\n  has_permission: boolean;\n  user_id: number;\n  permission: string;\n  source: string;\n}\nexport interface UserPermissions {\n  user_id: number;\n  permissions: string[];\n  service_roles: ServiceRole[];\n  total_permissions: number;\n}\n// UI Component Props Types\nexport interface RoleManagementProps {\n  organizationId: number;\n}\nexport interface RoleFormProps {\n  role?: ServiceRoleWithPermissions;\n  permissions: ServicePermission[];\n  organizationId: number;\n  onSubmit: (data: ServiceRoleCreate | ServiceRoleUpdate) => void;\n  onCancel: () => void;\n  loading?: boolean;\n}\nexport interface UserRoleAssignmentProps {\n  userId: number;\n  userEmail: string;\n  userFullName?: string;\n  currentRoles: ServiceRole[];\n  availableRoles: ServiceRole[];\n  onAssign: (roleIds: number[]) => void;\n  onRemove: (roleId: number) => void;\n  loading?: boolean;\n}\nexport interface RolePermissionMatrixProps {\n  roles: ServiceRoleWithPermissions[];\n  permissions: ServicePermission[];\n  onPermissionToggle: (roleId: number, permissionId: number, granted: boolean) => void;\n  loading?: boolean;\n}\n// Service Role Defaults\nexport const SERVICE_ROLE_DEFAULTS: Record<ServiceRoleType, Partial<ServiceRoleCreate>> = {\n  [ServiceRoleType.ADMIN]: {\n    name: ServiceRoleType.ADMIN,\n    display_name: 'Service Admin',\n    description: 'Full access to all service CRM functionality'\n  },\n  [ServiceRoleType.MANAGER]: {\n    name: ServiceRoleType.MANAGER,\n    display_name: 'Service Manager',\n    description: 'Manage services, technicians, and appointments'\n  },\n  [ServiceRoleType.SUPPORT]: {\n    name: ServiceRoleType.SUPPORT,\n    display_name: 'Support Agent',\n    description: 'Handle customer service and basic operations'\n  },\n  [ServiceRoleType.VIEWER]: {\n    name: ServiceRoleType.VIEWER,\n    display_name: 'Viewer',\n    description: 'Read-only access to service information'\n  }\n};\n// Permission Display Names\nexport const PERMISSION_DISPLAY_NAMES: Record<string, string> = {\n  // Service Management\n  'service_create': 'Create Services',\n  'service_read': 'View Services',\n  'service_update': 'Update Services',\n  'service_delete': 'Delete Services',\n  // Technician Management\n  'technician_create': 'Create Technicians',\n  'technician_read': 'View Technicians',\n  'technician_update': 'Update Technicians',\n  'technician_delete': 'Delete Technicians',\n  // Appointment Management\n  'appointment_create': 'Create Appointments',\n  'appointment_read': 'View Appointments',\n  'appointment_update': 'Update Appointments',\n  'appointment_delete': 'Cancel Appointments',\n  // Customer Service\n  'customer_service_create': 'Create Customer Records',\n  'customer_service_read': 'View Customer Records',\n  'customer_service_update': 'Update Customer Records',\n  'customer_service_delete': 'Delete Customer Records',\n  // Work Orders\n  'work_order_create': 'Create Work Orders',\n  'work_order_read': 'View Work Orders',\n  'work_order_update': 'Update Work Orders',\n  'work_order_delete': 'Delete Work Orders',\n  // Reports\n  'service_reports_read': 'View Service Reports',\n  'service_reports_export': 'Export Service Reports',\n  // CRM Admin\n  'crm_admin': 'CRM Administration',\n  'crm_settings': 'CRM Settings'\n};\n// Module Display Names\nexport const MODULE_DISPLAY_NAMES: Record<ServiceModule, string> = {\n  [ServiceModule.SERVICE]: 'Service Management',\n  [ServiceModule.TECHNICIAN]: 'Technician Management',\n  [ServiceModule.APPOINTMENT]: 'Appointment Management',\n  [ServiceModule.CUSTOMER_SERVICE]: 'Customer Service',\n  [ServiceModule.WORK_ORDER]: 'Work Orders',\n  [ServiceModule.SERVICE_REPORTS]: 'Service Reports',\n  [ServiceModule.CRM_ADMIN]: 'CRM Administration'\n};\n// Role Badge Colors (for UI display)\nexport const ROLE_BADGE_COLORS: Record<ServiceRoleType, string> = {\n  [ServiceRoleType.ADMIN]: 'error', // Red\n  [ServiceRoleType.MANAGER]: 'warning', // Orange\n  [ServiceRoleType.SUPPORT]: 'info', // Blue\n  [ServiceRoleType.VIEWER]: 'success' // Green\n};\n// Permission checking helper functions\nexport const hasServicePermission = (\n  userRoles: ServiceRole[],\n  requiredPermission: string,\n  allRoles: ServiceRoleWithPermissions[]\n): boolean => {\n  for (const userRole of userRoles) {\n    const roleWithPermissions = allRoles.find(r => r.id === userRole.id);\n    if (roleWithPermissions) {\n      const hasPermission = roleWithPermissions.permissions.some(\n        p => p.name === requiredPermission && p.is_active\n      );\n      if (hasPermission) {return true;}\n    }\n  }\n  return false;\n};\nexport const getUserServicePermissions = (\n  userRoles: ServiceRole[],\n  allRoles: ServiceRoleWithPermissions[]\n): string[] => {\n  const permissions = new Set<string>();\n  for (const userRole of userRoles) {\n    const roleWithPermissions = allRoles.find(r => r.id === userRole.id);\n    if (roleWithPermissions) {\n      roleWithPermissions.permissions\n        .filter(p => p.is_active)\n        .forEach(p => permissions.add(p.name));\n    }\n  }\n  return Array.from(permissions);\n};\n// Service permission constants (matching backend)\nexport const SERVICE_PERMISSIONS = {\n  // Service Management\n  SERVICE_CREATE: 'service_create',\n  SERVICE_READ: 'service_read',\n  SERVICE_UPDATE: 'service_update',\n  SERVICE_DELETE: 'service_delete',\n  // Technician Management\n  TECHNICIAN_CREATE: 'technician_create',\n  TECHNICIAN_READ: 'technician_read',\n  TECHNICIAN_UPDATE: 'technician_update',\n  TECHNICIAN_DELETE: 'technician_delete',\n  // Appointment Management\n  APPOINTMENT_CREATE: 'appointment_create',\n  APPOINTMENT_READ: 'appointment_read',\n  APPOINTMENT_UPDATE: 'appointment_update',\n  APPOINTMENT_DELETE: 'appointment_delete',\n  // Customer Service\n  CUSTOMER_SERVICE_CREATE: 'customer_service_create',\n  CUSTOMER_SERVICE_READ: 'customer_service_read',\n  CUSTOMER_SERVICE_UPDATE: 'customer_service_update',\n  CUSTOMER_SERVICE_DELETE: 'customer_service_delete',\n  // Work Orders\n  WORK_ORDER_CREATE: 'work_order_create',\n  WORK_ORDER_READ: 'work_order_read',\n  WORK_ORDER_UPDATE: 'work_order_update',\n  WORK_ORDER_DELETE: 'work_order_delete',\n  // Reports\n  SERVICE_REPORTS_READ: 'service_reports_read',\n  SERVICE_REPORTS_EXPORT: 'service_reports_export',\n  // CRM Admin\n  CRM_ADMIN: 'crm_admin',\n  CRM_SETTINGS: 'crm_settings',\n  // Finance & Accounting\n  FINANCE_DASHBOARD_READ: 'finance_dashboard_read',\n  FINANCE_ACCOUNTS_CREATE: 'finance_accounts_create',\n  FINANCE_ACCOUNTS_READ: 'finance_accounts_read',\n  FINANCE_ACCOUNTS_UPDATE: 'finance_accounts_update',\n  FINANCE_ACCOUNTS_DELETE: 'finance_accounts_delete',\n  // General Ledger\n  GL_ENTRY_CREATE: 'gl_entry_create',\n  GL_ENTRY_READ: 'gl_entry_read',\n  GL_ENTRY_UPDATE: 'gl_entry_update',\n  GL_ENTRY_DELETE: 'gl_entry_delete',\n  GL_RECONCILE: 'gl_reconcile',\n  // Cost Centers\n  COST_CENTER_CREATE: 'cost_center_create',\n  COST_CENTER_READ: 'cost_center_read',\n  COST_CENTER_UPDATE: 'cost_center_update',\n  COST_CENTER_DELETE: 'cost_center_delete',\n  COST_CENTER_BUDGET: 'cost_center_budget',\n  // Bank Management\n  BANK_ACCOUNT_CREATE: 'bank_account_create',\n  BANK_ACCOUNT_READ: 'bank_account_read',\n  BANK_ACCOUNT_UPDATE: 'bank_account_update',\n  BANK_ACCOUNT_DELETE: 'bank_account_delete',\n  BANK_RECONCILIATION: 'bank_reconciliation',\n  // Financial Reports\n  FINANCIAL_REPORTS_READ: 'financial_reports_read',\n  FINANCIAL_REPORTS_EXPORT: 'financial_reports_export',\n  TRIAL_BALANCE_READ: 'trial_balance_read',\n  PROFIT_LOSS_READ: 'profit_loss_read',\n  BALANCE_SHEET_READ: 'balance_sheet_read',\n  CASH_FLOW_READ: 'cash_flow_read',\n  // Financial Analytics\n  FINANCE_ANALYTICS_READ: 'finance_analytics_read',\n  FINANCE_KPI_CREATE: 'finance_kpi_create',\n  FINANCE_KPI_READ: 'finance_kpi_read',\n  FINANCE_KPI_UPDATE: 'finance_kpi_update',\n  FINANCE_KPI_DELETE: 'finance_kpi_delete',\n  // Finance Admin\n  FINANCE_ADMIN: 'finance_admin',\n  FINANCE_SETTINGS: 'finance_settings'\n} as const;\nexport type ServicePermissionType = typeof SERVICE_PERMISSIONS[keyof typeof SERVICE_PERMISSIONS];","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/reset.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/ui.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/user.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/types/voucher.types.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":111,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2626,2636],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":112,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2658,2668],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":113,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[2692,2712],"text":""},"desc":"Remove unused variable 'voucher'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'voucher' is defined but never used.","line":114,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"voucher"},"fix":{"range":[2741,2761],"text":""},"desc":"Remove unused variable 'voucher'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/types/voucher.types.ts\n// TypeScript types for voucher system\nexport interface VoucherPageConfig {\n  voucherType: string;\n  entityType: 'purchase' | 'sales' | 'financial';\n  endpoint: string;\n  nextNumberEndpoint: string;\n  hasItems: boolean;\n  voucherTitle: string;\n  apiEndpoint?: string;\n}\nexport interface VoucherItem {\n  id?: number;\n  product_id: number | null;\n  product_name?: string;\n  hsn_code?: string;\n  quantity: number;\n  unit: string;\n  unit_price: number;\n  original_unit_price?: number;\n  discount_percentage: number;\n  discount_amount: number;\n  taxable_amount: number;\n  gst_rate: number;\n  cgst_amount: number;\n  sgst_amount: number;\n  igst_amount: number;\n  total_amount: number;\n  reorder_level?: number;\n}\nexport interface VoucherBase {\n  id?: number;\n  voucher_number: string;\n  date: string;\n  reference?: string;\n  notes?: string;\n  total_amount: number;\n  created_at?: string;\n  updated_at?: string;\n  created_by?: number;\n  organization_id?: number;\n  // Reference document fields\n  reference_type?: string;\n  reference_id?: number | null;\n  reference_number?: string;\n}\nexport interface PurchaseVoucher extends VoucherBase {\n  vendor_id: number | null;\n  vendor?: {\n    id: number;\n    name: string;\n    email?: string;\n    phone?: string;\n  };\n  payment_terms?: string;\n  items: VoucherItem[];\n}\nexport interface SalesVoucher extends VoucherBase {\n  customer_id: number | null;\n  customer?: {\n    id: number;\n    name: string;\n    email?: string;\n    phone?: string;\n  };\n  payment_terms?: string;\n  items: VoucherItem[];\n}\nexport interface FinancialVoucher extends VoucherBase {\n  from_account: string;\n  to_account: string;\n  payment_method?: string;\n  receipt_method?: string;\n  name_id?: number | null;\n  name_type?: 'Vendor' | 'Customer';\n}\nexport interface VoucherFormData extends VoucherBase {\n  items?: VoucherItem[];\n  vendor_id?: number | null;\n  customer_id?: number | null;\n  from_account?: string;\n  to_account?: string;\n  payment_method?: string;\n  receipt_method?: string;\n  payment_terms?: string;\n  name_id?: number | null;\n  name_type?: 'Vendor' | 'Customer';\n}\nexport interface VoucherListResponse {\n  items: VoucherBase[];\n  total: number;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n}\nexport interface ReferenceDocumentData {\n  id: number;\n  voucher_number: string;\n  date: string;\n  total_amount: number;\n  items?: VoucherItem[];\n  customer_id?: number;\n  vendor_id?: number;\n  type: string;\n}\nexport interface VoucherContextMenuProps {\n  anchorEl: null | HTMLElement;\n  open: boolean;\n  onClose: () => void;\n  voucher: VoucherBase;\n  onEdit: (id: number) => void;\n  onView: (id: number) => void;\n  onDelete: (voucher: VoucherBase) => void;\n  onGeneratePDF: (voucher: VoucherBase) => void;\n}","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/apiUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'error' should be typed with a non-any type.","line":29,"column":32,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":29,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'params' should be typed with a non-any type.","line":38,"column":30,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":38,"endColumn":41}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Revised: v1/frontend/src/utils/apiUtils.ts\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api/v1',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n// Add token interceptor\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n// Add error handling interceptor\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized - redirect to login\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\nexport const handleApiError = (error: any): string => {\n  if (error.response) {\n    return error.response.data?.message || error.response.data?.detail || 'An error occurred';\n  } else if (error.request) {\n    return 'No response received from server';\n  } else {\n    return error.message || 'Unknown error';\n  }\n};\nexport const getApiParams = (params: any): URLSearchParams => {\n  const searchParams = new URLSearchParams();\n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      searchParams.append(key, String(value));\n    }\n  });\n  return searchParams;\n};\nexport const uploadStockBulk = async (file: File): Promise<any> => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file); // Ensure field name matches backend expectation ('file')\n    const response = await api.post('/stock/bulk', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(handleApiError(error));\n  }\n};\nexport default api;","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/errorHandling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/jwt-decode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/nameRefUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/pdfUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":47,"column":97,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":47,"endColumn":99},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'voucherData' should be typed with a non-any type.","line":298,"column":3,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":298,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Unified PDF generation utility for all voucher types\n// frontend/src/utils/pdfUtils.ts\nimport pdfService from '../services/pdfService';\nexport interface VoucherPdfConfig {\n  voucherType: string;\n  voucherTitle: string;\n  showItems?: boolean;\n  showTaxDetails?: boolean;\n  entityType?: 'vendor' | 'customer';\n}\nexport interface VoucherPdfData {\n  voucher_number: string;\n  date: string;\n  reference?: string;\n  notes?: string;\n  total_amount: number;\n  items?: any[];\n  // Entity information (vendor/customer)\n  vendor?: {\n    id: number;\n    name: string;\n    address?: string;\n    contact_number?: string;\n    email?: string;\n    gstin?: string;\n  };\n  customer?: {\n    id: number;\n    name: string;\n    address?: string;\n    contact_number?: string;\n    email?: string;\n    gstin?: string;\n  };\n  // Voucher specific fields\n  payment_method?: string;\n  receipt_method?: string;\n  payment_terms?: string;\n  from_account?: string;\n  to_account?: string;\n  // Additional fields for different voucher types\n  [key: string]: any;\n}\n/**\n * Generate PDF for any voucher type using standardized configuration\n */\nexport const generateVoucherPDF = async (voucherData: VoucherPdfData, config: VoucherPdfConfig) => {\n  try {\n    // Check authorization before generating PDF\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('You must be logged in to generate PDFs');\n      return;\n    }\n    // Prepare standardized voucher data for the PDF service\n    const pdfVoucherData = {\n      voucher_number: voucherData.voucher_number,\n      date: voucherData.date,\n      reference: voucherData.reference,\n      notes: voucherData.notes,\n      total_amount: voucherData.total_amount || 0,\n      items: voucherData.items || [],\n      // Map party information based on entity type\n      party: config.entityType === 'vendor' && voucherData.vendor ? {\n        name: voucherData.vendor.name,\n        address: voucherData.vendor.address,\n        contact_number: voucherData.vendor.contact_number,\n        email: voucherData.vendor.email,\n        gstin: voucherData.vendor.gstin\n      } : config.entityType === 'customer' && voucherData.customer ? {\n        name: voucherData.customer.name,\n        address: voucherData.customer.address,\n        contact_number: voucherData.customer.contact_number,\n        email: voucherData.customer.email,\n        gstin: voucherData.customer.gstin\n      } : undefined,\n      // Include voucher-specific fields\n      payment_method: voucherData.payment_method,\n      receipt_method: voucherData.receipt_method,\n      payment_terms: voucherData.payment_terms,\n      from_account: voucherData.from_account,\n      to_account: voucherData.to_account,\n      ...Object.fromEntries(\n        Object.entries(voucherData).filter(([key]) => \n          !['voucher_number', 'date', 'reference', 'notes', 'total_amount', 'items', 'vendor', 'customer'].includes(key)\n        )\n      )\n    };\n    const pdfOptions = {\n      voucherType: config.voucherType,\n      voucherTitle: config.voucherTitle,\n      filename: `${config.voucherTitle.replace(/\\s+/g, '')}${voucherData.voucher_number?.replace(/[^a-zA-Z0-9]/g, '_') || 'Unknown'}.pdf`,\n      showItems: config.showItems || false,\n      showTaxDetails: config.showTaxDetails || false\n    };\n    await pdfService.generateVoucherPDF(pdfVoucherData, pdfOptions);\n  } catch (error) {\n    console.error('Error generating PDF:', error);\n    alert('Failed to generate PDF. Please try again.');\n  }\n};\n/**\n * Voucher type configurations for PDF generation\n */\nexport const VOUCHER_PDF_CONFIGS: Record<string, VoucherPdfConfig> = {\n  // Financial Vouchers\n  'payment-voucher': {\n    voucherType: 'payment-voucher',\n    voucherTitle: 'PAYMENT VOUCHER',\n    showItems: false,\n    showTaxDetails: false,\n    entityType: 'vendor'\n  },\n  'receipt-voucher': {\n    voucherType: 'receipt-voucher',\n    voucherTitle: 'RECEIPT VOUCHER',\n    showItems: false,\n    showTaxDetails: false,\n    entityType: 'customer'\n  },\n  'journal-voucher': {\n    voucherType: 'journal-voucher',\n    voucherTitle: 'JOURNAL VOUCHER',\n    showItems: false,\n    showTaxDetails: false\n  },\n  'contra-voucher': {\n    voucherType: 'contra-voucher',\n    voucherTitle: 'CONTRA VOUCHER',\n    showItems: false,\n    showTaxDetails: false\n  },\n  // Purchase Vouchers\n  'purchase-voucher': {\n    voucherType: 'purchase-voucher',\n    voucherTitle: 'PURCHASE VOUCHER / BILL',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  'purchase-order': {\n    voucherType: 'purchase-order',\n    voucherTitle: 'PURCHASE ORDER',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  'grn': {\n    voucherType: 'grn',\n    voucherTitle: 'GOODS RECEIPT NOTE',\n    showItems: true,\n    showTaxDetails: false,\n    entityType: 'vendor'\n  },\n  'purchase-return': {\n    voucherType: 'purchase-return',\n    voucherTitle: 'PURCHASE RETURN',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  // Sales Vouchers\n  'sales-voucher': {\n    voucherType: 'sales-voucher',\n    voucherTitle: 'SALES INVOICE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'quotation': {\n    voucherType: 'quotation',\n    voucherTitle: 'QUOTATION',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'proforma-invoice': {\n    voucherType: 'proforma-invoice',\n    voucherTitle: 'PROFORMA INVOICE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'sales-order': {\n    voucherType: 'sales-order',\n    voucherTitle: 'SALES ORDER',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'delivery-challan': {\n    voucherType: 'delivery-challan',\n    voucherTitle: 'DELIVERY CHALLAN',\n    showItems: true,\n    showTaxDetails: false,\n    entityType: 'customer'\n  },\n  'sales-return': {\n    voucherType: 'sales-return',\n    voucherTitle: 'SALES RETURN',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'credit-note': {\n    voucherType: 'credit-note',\n    voucherTitle: 'CREDIT NOTE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  'debit-note': {\n    voucherType: 'debit-note',\n    voucherTitle: 'DEBIT NOTE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  'non-sales-credit-note': {\n    voucherType: 'non-sales-credit-note',\n    voucherTitle: 'NON-SALES CREDIT NOTE',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'customer'\n  },\n  // Manufacturing Vouchers\n  'job-card': {\n    voucherType: 'job-card',\n    voucherTitle: 'JOB CARD',\n    showItems: true,\n    showTaxDetails: true,\n    entityType: 'vendor'\n  },\n  'production-order': {\n    voucherType: 'production-order',\n    voucherTitle: 'PRODUCTION ORDER',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'work-order': {\n    voucherType: 'work-order',\n    voucherTitle: 'WORK ORDER',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'material-receipt': {\n    voucherType: 'material-receipt',\n    voucherTitle: 'MATERIAL RECEIPT',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'material-requisition': {\n    voucherType: 'material-requisition',\n    voucherTitle: 'MATERIAL REQUISITION',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'finished-good-receipt': {\n    voucherType: 'finished-good-receipt',\n    voucherTitle: 'FINISHED GOODS RECEIPT',\n    showItems: true,\n    showTaxDetails: false\n  },\n  'manufacturing-journal': {\n    voucherType: 'manufacturing-journal',\n    voucherTitle: 'MANUFACTURING JOURNAL',\n    showItems: false,\n    showTaxDetails: false\n  },\n  'stock-journal': {\n    voucherType: 'stock-journal',\n    voucherTitle: 'STOCK JOURNAL',\n    showItems: true,\n    showTaxDetails: false\n  }\n};\n/**\n * Get PDF configuration for a voucher type\n */\nexport const getVoucherPdfConfig = (voucherType: string): VoucherPdfConfig => {\n  const config = VOUCHER_PDF_CONFIGS[voucherType];\n  if (!config) {\n    console.warn(`No PDF configuration found for voucher type: ${voucherType}`);\n    return {\n      voucherType,\n      voucherTitle: voucherType.toUpperCase().replace(/-/g, ' '),\n      showItems: false,\n      showTaxDetails: false\n    };\n  }\n  return config;\n};\n/**\n * Standalone PDF generation function for individual vouchers\n * Can be used in any voucher component without requiring useVoucherPage hook\n */\nexport const generateStandalonePDF = async (\n  voucherData: any, \n  voucherType: string, \n  entityData?: { vendor?: any; customer?: any; employee?: any }\n): any =>  {\n  try {\n    console.log('[PDF] Generating standalone PDF for:', voucherType, voucherData);\n    // Check authorization\n    const token = localStorage.getItem('token');\n    if (!token) {\n      alert('You must be logged in to generate PDFs');\n      return;\n    }\n    // Get PDF configuration\n    const pdfConfig = getVoucherPdfConfig(voucherType);\n    // Prepare PDF data with entity information\n    const pdfData: VoucherPdfData = {\n      voucher_number: voucherData.voucher_number || voucherData.job_number || 'Unknown',\n      date: voucherData.date || new Date().toISOString().split('T')[0],\n      reference: voucherData.reference || voucherData.po_number,\n      notes: voucherData.notes || voucherData.description,\n      total_amount: voucherData.total_amount || voucherData.total_cost || 0,\n      items: voucherData.items || voucherData.materials || [],\n      // Map entity information\n      vendor: entityData?.vendor,\n      customer: entityData?.customer,\n      // Additional voucher-specific fields\n      payment_method: voucherData.payment_method,\n      receipt_method: voucherData.receipt_method,\n      payment_terms: voucherData.payment_terms,\n      from_account: voucherData.from_account,\n      to_account: voucherData.to_account,\n      // Manufacturing-specific fields\n      job_type: voucherData.job_type,\n      job_description: voucherData.job_description,\n      expected_completion_date: voucherData.expected_completion_date,\n      actual_completion_date: voucherData.actual_completion_date,\n      materials_supplied_by: voucherData.materials_supplied_by,\n      quality_specifications: voucherData.quality_specifications\n    };\n    // Generate PDF\n    await generateVoucherPDF(pdfData, pdfConfig);\n    console.log('[PDF] PDF generated successfully for:', voucherType);\n  } catch (error) {\n    console.error('[PDF] Error generating standalone PDF:', error);\n    alert('Failed to generate PDF. Please try again.');\n  }\n};","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/FastApiv1.6/FastApiv1.6/frontend/src/utils/voucherUtils.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Argument 'item' should be typed with a non-any type.","line":121,"column":37,"nodeType":"Identifier","messageId":"anyTypedArg","endLine":121,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// frontend/src/utils/voucherUtils.ts\nimport { UI_CONSTANTS } from '../constants/ui';\nexport const GST_SLABS = [0, 5, 12, 18, 28];\n// State to GST state code mapping for GST calculations\nexport const STATE_TO_CODE_MAP: { [key: string]: string } = {\n  'Andhra Pradesh': '37',\n  'Arunachal Pradesh': '12', \n  'Assam': '18',\n  'Bihar': '10',\n  'Chhattisgarh': '22',\n  'Goa': '30',\n  'Gujarat': '24',\n  'Haryana': '06',\n  'Himachal Pradesh': '02',\n  'Jammu and Kashmir': '01',\n  'Jharkhand': '20',\n  'Karnataka': '29',\n  'Kerala': '32',\n  'Madhya Pradesh': '23',\n  'Maharashtra': '27',\n  'Manipur': '14',\n  'Meghalaya': '17',\n  'Mizoram': '15',\n  'Nagaland': '13',\n  'Odisha': '21',\n  'Punjab': '03',\n  'Rajasthan': '08',\n  'Sikkim': '11',\n  'Tamil Nadu': '33',\n  'Telangana': '36',\n  'Tripura': '16',\n  'Uttar Pradesh': '09',\n  'Uttarakhand': '05',\n  'West Bengal': '19',\n  'Andaman and Nicobar Islands': '35',\n  'Chandigarh': '04',\n  'Dadra and Nagar Haveli and Daman and Diu': '26',\n  'Lakshadweep': '31',\n  'Delhi': '07',\n  'Puducherry': '34',\n  'Ladakh': '38',\n};\nexport const voucherTypes = {\n  purchase: [\n    { label: 'Purchase Order', slug: 'purchase-orders' },\n    { label: 'Purchase Voucher', slug: 'purchase-vouchers' },\n    { label: 'Purchase Return', slug: 'purchase-returns' },\n    { label: 'GRN', slug: 'grns' },\n  ],\n  sales: [\n    { label: 'Quotation', slug: 'quotations' },\n    { label: 'Proforma Invoice', slug: 'proforma-invoices' },\n    { label: 'Sales Order', slug: 'sales-orders' },\n    { label: 'Delivery Challan', slug: 'delivery-challans' },\n    { label: 'Sales Voucher', slug: 'sales-vouchers' },\n    { label: 'Sales Return', slug: 'sales-returns' },\n  ],\n  financial: [\n    { label: 'Payment Voucher', slug: 'payment-vouchers' },\n    { label: 'Receipt Voucher', slug: 'receipt-vouchers' },\n    { label: 'Journal Voucher', slug: 'journal-vouchers' },\n    { label: 'Contra Voucher', slug: 'contra-vouchers' },\n  ]\n};\n/**\n * Convert number to words in Indian format\n * This is the centralized implementation used across all voucher types\n */\nexport const numberToWordsInteger = (num: number): string => {\n  if (num === 0 || isNaN(num)) {return '';}\n  const belowTwenty = [' ', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];\n  const tens = [' ', ' ', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\n  const thousands = ['', 'Thousand', 'Million', 'Billion'];\n  let word = '';\n  let i = 0;\n  while (num > 0) {\n    const chunk = num % 1000;\n    if (chunk) {\n      let chunkWord = '';\n      if (chunk >= 100) {\n        chunkWord += belowTwenty[Math.floor(chunk / 100)] + ' Hundred ';\n      }\n      let remain = chunk % 100;\n      if (remain >= 20) {\n        chunkWord += tens[Math.floor(remain / 10)] + ' ';\n        remain %= 10;\n      }\n      if (remain > 0) {\n        chunkWord += belowTwenty[remain] + ' ';\n      }\n      word = chunkWord + thousands[i] + ' ' + word;\n    }\n    num = Math.floor(num / 1000);\n    i++;\n  }\n  return word.trim();\n};\n/**\n * Convert number to words with decimal support\n * This is the the centralized implementation used across all voucher types\n */\nexport const numberToWords = (num: number): string => {\n  if (num === 0 || isNaN(num)) {return 'Zero only';}\n  const integer = Math.floor(num);\n  const decimal = Math.round((num - integer) * 100);\n  let word = numberToWordsInteger(integer);\n  if (decimal > 0) {\n    word += ' point ' + numberToWordsInteger(decimal);\n  }\n  return word ? word + ' only' : '';\n};\n/**\n * Enhanced GST calculation utilities with state-based split logic\n * Supports both intrastate (CGST+SGST) and interstate (IGST) transactions\n */\n// Helper function to determine if transaction is intrastate\nexport const isIntrastateTransaction = (companyStateCode: string, customerVendorStateCode: string): boolean => {\n  return companyStateCode === customerVendorStateCode;\n};\n// Common voucher item calculation utilities with enhanced GST logic\nexport const calculateItemTotals = (item: any, isIntrastate: boolean = true): any => {\n  const subtotal = (item.quantity || 0) * (item.unit_price || 0);\n  const discountAmount = subtotal * ((item.discount_percentage || 0) / 100);\n  const taxableAmount = subtotal - discountAmount;\n  const gstAmount = taxableAmount * ((item.gst_rate || 0) / 100);\n  // GST split logic based on transaction type\n  let cgstAmount = 0;\n  let sgstAmount = 0; \n  let igstAmount = 0;\n  if (isIntrastate) {\n    // Same state: Split GST into CGST and SGST (half each)\n    cgstAmount = gstAmount / 2;\n    sgstAmount = gstAmount / 2;\n    igstAmount = 0;\n  } else {\n    // Different state: Use IGST (full GST rate)\n    cgstAmount = 0;\n    sgstAmount = 0;\n    igstAmount = gstAmount;\n  }\n  const totalAmount = taxableAmount + gstAmount;\n  return {\n    ...item,\n    discount_amount: parseFloat(discountAmount.toFixed(2)),\n    taxable_amount: parseFloat(taxableAmount.toFixed(2)),\n    cgst_amount: parseFloat(cgstAmount.toFixed(2)),\n    sgst_amount: parseFloat(sgstAmount.toFixed(2)),\n    igst_amount: parseFloat(igstAmount.toFixed(2)),\n    total_amount: parseFloat(totalAmount.toFixed(2)),\n  };\n};\nexport const calculateVoucherTotals = (items: any[], isIntrastate: boolean = true): any => {\n  const computedItems = items.map(item => calculateItemTotals(item, isIntrastate));\n  const totalAmount = computedItems.reduce((sum, item) => sum + item.total_amount, 0);\n  const totalSubtotal = computedItems.reduce((sum, item) => sum + (item.quantity || 0) * (item.unit_price || 0), 0);\n  const totalGst = computedItems.reduce((sum, item) => sum + item.taxable_amount * ((item.gst_rate || 0) / 100), 0);\n  const totalCgst = computedItems.reduce((sum, item) => sum + item.cgst_amount, 0);\n  const totalSgst = computedItems.reduce((sum, item) => sum + item.sgst_amount, 0);\n  const totalIgst = computedItems.reduce((sum, item) => sum + item.igst_amount, 0);\n  return {\n    computedItems,\n    totalAmount: parseFloat(totalAmount.toFixed(2)),\n    totalSubtotal: parseFloat(totalSubtotal.toFixed(2)),\n    totalGst: parseFloat(totalGst.toFixed(2)),\n    totalCgst: parseFloat(totalCgst.toFixed(2)),\n    totalSgst: parseFloat(totalSgst.toFixed(2)),\n    totalIgst: parseFloat(totalIgst.toFixed(2)),\n  };\n};\n/**\n * Get GST breakdown labels based on transaction type\n */\nexport const getGstLabels = (isIntrastate: boolean): any => {\n  if (isIntrastate) {\n    return {\n      tax1Label: 'CGST',\n      tax2Label: 'SGST',\n      showIgst: false\n    };\n  } else {\n    return {\n      tax1Label: 'IGST',\n      tax2Label: '',\n      showIgst: true\n    };\n  }\n};\n// Common default values for voucher forms\nexport const getDefaultVoucherValues = (type: 'purchase' | 'sales'): any => {\n  const baseValues = {\n    voucher_number: '',\n    date: new Date().toISOString().slice(0, 10),\n    reference: '',\n    payment_terms: '',\n    notes: '',\n    items: [{ \n      product_id: null as number | null, \n      hsn_code: '', \n      quantity: 0, \n      unit: '', \n      unit_price: 0.00, \n      original_unit_price: 0.00, \n      discount_percentage: 0, \n      discount_amount: 0.00, \n      taxable_amount: 0.00, \n      gst_rate: 0, \n      cgst_amount: 0.00, \n      sgst_amount: 0.00, \n      igst_amount: 0.00, \n      total_amount: 0.00 \n    }],\n    total_amount: 0.00,\n  };\n  if (type === 'purchase') {\n    return {\n      ...baseValues,\n      vendor_id: null as number | null,\n    };\n  } else {\n    return {\n      ...baseValues,\n      customer_id: null as number | null,\n    };\n  }\n};\n/**\n * Format number to 2 decimal places for rate fields\n */\nexport const formatRateField = (value: number | string): string => {\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  return isNaN(numValue) ? '0.00' : numValue.toFixed(2);\n};\n/**\n * Parse rate field input to ensure 2 decimal places\n */\nexport const parseRateField = (value: string): number => {\n  const parsed = parseFloat(value);\n  return isNaN(parsed) ? 0 : Math.round(parsed * 100) / 100;\n};\n/**\n * Get financial voucher default values (no items array)\n */\nexport const getFinancialVoucherDefaults = (): any => ({\n  voucher_number: '',\n  date: new Date().toISOString().slice(0, 10),\n  reference: '',\n  notes: '',\n  total_amount: 0,\n  from_account: '',\n  to_account: '',\n  payment_method: '',\n  receipt_method: ''\n});\n/**\n * Voucher configuration presets for common voucher types\n */\nexport const VOUCHER_CONFIGS = {\n  'payment-voucher': {\n    voucherType: 'payment-vouchers',\n    entityType: 'financial' as const,\n    endpoint: '/payment-vouchers',\n    nextNumberEndpoint: '/payment-vouchers/next-number',\n    hasItems: false,\n    voucherTitle: 'Payment Voucher'\n  },\n  'receipt-voucher': {\n    voucherType: 'receipt-vouchers',\n    entityType: 'financial' as const,\n    endpoint: '/receipt-vouchers',\n    nextNumberEndpoint: '/receipt-vouchers/next-number',\n    hasItems: false,\n    voucherTitle: 'Receipt Voucher'\n  },\n  'journal-voucher': {\n    voucherType: 'journal-vouchers',\n    entityType: 'financial' as const,\n    endpoint: '/journal-vouchers',\n    nextNumberEndpoint: '/journal-vouchers/next-number',\n    hasItems: false,\n    voucherTitle: 'Journal Voucher'\n  },\n  'contra-voucher': {\n    voucherType: 'contra-vouchers',\n    entityType: 'financial' as const,\n    endpoint: '/contra-vouchers',\n    nextNumberEndpoint: '/contra-vouchers/next-number',\n    hasItems: false,\n    voucherTitle: 'Contra Voucher'\n  },\n  'purchase-voucher': {\n    voucherType: 'purchase-vouchers',\n    entityType: 'purchase' as const,\n    endpoint: '/purchase-vouchers',\n    nextNumberEndpoint: '/purchase-vouchers/next-number',\n    hasItems: true,\n    voucherTitle: 'Purchase Voucher'\n  },\n  'purchase-order': {\n    voucherType: 'purchase-orders',\n    entityType: 'purchase' as const,\n    endpoint: '/purchase-orders',\n    nextNumberEndpoint: '/purchase-orders/next-number',\n    hasItems: true,\n    voucherTitle: 'Purchase Order'\n  },\n  'purchase-return': {\n    voucherType: 'purchase-returns',\n    entityType: 'purchase' as const,\n    endpoint: '/purchase-returns',\n    nextNumberEndpoint: '/purchase-returns/next-number',\n    hasItems: true,\n    voucherTitle: 'Purchase Return'\n  },\n  'grn': {\n    voucherType: 'goods-receipt-notes',\n    entityType: 'purchase' as const,\n    endpoint: '/goods-receipt-notes',\n    nextNumberEndpoint: '/goods-receipt-notes/next-number',\n    hasItems: true,\n    voucherTitle: 'GRN'\n  },\n  'sales-voucher': {\n    voucherType: 'sales-vouchers',\n    entityType: 'sales' as const,\n    endpoint: '/sales-vouchers',\n    nextNumberEndpoint: '/sales-vouchers/next-number',\n    hasItems: true,\n    voucherTitle: 'Sales Voucher'\n  },\n  'quotation': {\n    voucherType: 'quotations',\n    entityType: 'sales' as const,\n    endpoint: '/quotations',\n    nextNumberEndpoint: '/quotations/next-number',\n    hasItems: true,\n    voucherTitle: 'Quotation'\n  },\n  'proforma-invoice': {\n    voucherType: 'proforma-invoices',\n    entityType: 'sales' as const,\n    endpoint: '/proforma-invoices',\n    nextNumberEndpoint: '/proforma-invoices/next-number',\n    hasItems: true,\n    voucherTitle: 'Proforma Invoice'\n  },\n  'sales-order': {\n    voucherType: 'sales-orders',\n    entityType: 'sales' as const,\n    endpoint: '/sales-orders',\n    nextNumberEndpoint: '/sales-orders/next-number',\n    hasItems: true,\n    voucherTitle: 'Sales Order'\n  },\n  'delivery-challan': {\n    voucherType: 'delivery-challans',\n    entityType: 'sales' as const,\n    endpoint: '/delivery-challans',\n    nextNumberEndpoint: '/delivery-challans/next-number',\n    hasItems: true,\n    voucherTitle: 'Delivery Challan'\n  },\n  'sales-return': {\n    voucherType: 'sales-returns',\n    entityType: 'sales' as const,\n    endpoint: '/sales-returns',\n    nextNumberEndpoint: '/sales-returns/next-number',\n    hasItems: true,\n    voucherTitle: 'Sales Return'\n  },\n  'credit-note': {\n    voucherType: 'credit-notes',\n    entityType: 'financial' as const,\n    endpoint: '/credit-notes',\n    nextNumberEndpoint: '/credit-notes/next-number',\n    hasItems: false,\n    voucherTitle: 'Credit Note'\n  },\n  'debit-note': {\n    voucherType: 'debit-notes',\n    entityType: 'financial' as const,\n    endpoint: '/debit-notes',\n    nextNumberEndpoint: '/debit-notes/next-number',\n    hasItems: false,\n    voucherTitle: 'Debit Note'\n  },\n  'non-sales-credit-note': {\n    voucherType: 'non-sales-credit-notes',\n    entityType: 'financial' as const,\n    endpoint: '/non-sales-credit-notes',\n    nextNumberEndpoint: '/non-sales-credit-notes/next-number',\n    hasItems: false,\n    voucherTitle: 'Non-Sales Credit Note'\n  },\n  // Manufacturing Vouchers\n  'job-card': {\n    voucherType: 'job-cards',\n    entityType: 'purchase' as const,\n    endpoint: '/job-cards',\n    nextNumberEndpoint: '/job-cards/next-number',\n    hasItems: true,\n    voucherTitle: 'Job Card'\n  },\n  'production-order': {\n    voucherType: 'production-orders',\n    entityType: 'purchase' as const,\n    endpoint: '/production-orders',\n    nextNumberEndpoint: '/production-orders/next-number',\n    hasItems: true,\n    voucherTitle: 'Production Order'\n  },\n  'work-order': {\n    voucherType: 'work-orders',\n    entityType: 'purchase' as const,\n    endpoint: '/work-orders',\n    nextNumberEndpoint: '/work-orders/next-number',\n    hasItems: true,\n    voucherTitle: 'Work Order'\n  },\n  'material-receipt': {\n    voucherType: 'material-receipts',\n    entityType: 'purchase' as const,\n    endpoint: '/material-receipts',\n    nextNumberEndpoint: '/material-receipts/next-number',\n    hasItems: true,\n    voucherTitle: 'Material Receipt'\n  },\n  'material-requisition': {\n    voucherType: 'material-requisitions',\n    entityType: 'purchase' as const,\n    endpoint: '/material-requisitions',\n    nextNumberEndpoint: '/material-requisitions/next-number',\n    hasItems: true,\n    voucherTitle: 'Material Requisition'\n  },\n  'finished-good-receipt': {\n    voucherType: 'finished-good-receipts',\n    entityType: 'purchase' as const,\n    endpoint: '/finished-good-receipts',\n    nextNumberEndpoint: '/finished-good-receipts/next-number',\n    hasItems: true,\n    voucherTitle: 'Finished Good Receipt'\n  },\n  'manufacturing-journal': {\n    voucherType: 'manufacturing-journals',\n    entityType: 'financial' as const,\n    endpoint: '/manufacturing-journals',\n    nextNumberEndpoint: '/manufacturing-journals/next-number',\n    hasItems: false,\n    voucherTitle: 'Manufacturing Journal'\n  },\n  'stock-journal': {\n    voucherType: 'stock-journals',\n    entityType: 'financial' as const,\n    endpoint: '/stock-journals',\n    nextNumberEndpoint: '/stock-journals/next-number',\n    hasItems: true,\n    voucherTitle: 'Stock Journal'\n  }\n} as const;\n/**\n * Reference column configurations for voucher types\n * Defines which voucher types can reference which other voucher types\n */\nexport const REFERENCE_CONFIGS = {\n  'purchase-voucher': {\n    allowedTypes: ['purchase-order', 'grn'],\n    label: 'Reference Document'\n  },\n  'purchase-return': {\n    allowedTypes: ['purchase-voucher'],\n    label: 'Reference Purchase Voucher'\n  },\n  'sales-voucher': {\n    allowedTypes: ['delivery-challan', 'sales-order', 'quotation', 'proforma-invoice'],\n    label: 'Reference Document'\n  },\n  'sales-return': {\n    allowedTypes: ['delivery-challan', 'sales-voucher'],\n    label: 'Reference Document'\n  },\n  'delivery-challan': {\n    allowedTypes: ['sales-order', 'quotation', 'proforma-invoice'],\n    label: 'Reference Document'\n  },\n  'sales-order': {\n    allowedTypes: ['quotation', 'proforma-invoice'],\n    label: 'Reference Document'\n  },\n  'proforma-invoice': {\n    allowedTypes: ['quotation', 'sales-order'],\n    label: 'Reference Document'\n  },\n  // These voucher types don't have reference columns per requirements\n  'grn': null,\n  'quotation': null,\n  'purchase-order': null,\n} as const;\n/**\n * Voucher types that should NOT have GST/totals sections\n */\nexport const NO_GST_VOUCHER_TYPES = ['grn', 'delivery-challan'] as const;\n/**\n * Default pagination settings for all voucher types\n */\nexport const VOUCHER_PAGINATION_DEFAULTS = {\n  pageSize: 5,\n  sortOrder: 'desc', // Latest on top\n  sortBy: 'created_at'\n} as const;\n/**\n * Get voucher configuration by type\n */\nexport const getVoucherConfig = (voucherType: keyof typeof VOUCHER_CONFIGS): any => {\n  const baseConfig = VOUCHER_CONFIGS[voucherType];\n  const referenceConfig = REFERENCE_CONFIGS[voucherType as keyof typeof REFERENCE_CONFIGS];\n  const hasGstSection = !NO_GST_VOUCHER_TYPES.includes(voucherType as any);\n  return {\n    ...baseConfig,\n    referenceConfig,\n    hasGstSection,\n    pagination: VOUCHER_PAGINATION_DEFAULTS\n  };\n};\n/**\n * Get reference voucher options for a given voucher type\n */\nexport const getReferenceVoucherOptions = (voucherType: keyof typeof REFERENCE_CONFIGS): any => {\n  const config = REFERENCE_CONFIGS[voucherType];\n  if (!config) {return [{ value: 'new', label: 'New', endpoint: '' }];}\n  const options = config.allowedTypes.map(type => ({\n    value: type,\n    label: VOUCHER_CONFIGS[type]?.voucherTitle || type,\n    endpoint: VOUCHER_CONFIGS[type]?.endpoint || `/${type}s`\n  }));\n  // Add 'New' as the first option instead of 'None'\n  return [{ value: 'new', label: 'New', endpoint: '' }, ...options];\n};\n/**\n * Check if a voucher type should have GST/totals section\n */\nexport const shouldShowGstSection = (voucherType: string): boolean => {\n  return !NO_GST_VOUCHER_TYPES.includes(voucherType as any);\n};\n/**\n * Enhanced rate field utilities with strict 2 decimal place formatting\n */\nexport const enhancedRateUtils = {\n  /**\n   * Format rate to exactly 2 decimal places\n   */\n  formatRate: (value: number | string): string => {\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\n    return isNaN(numValue) ? '0.00' : numValue.toFixed(2);\n  },\n  /**\n   * Parse rate input ensuring 2 decimal places max\n   */\n  parseRate: (value: string): number => {\n    const parsed = parseFloat(value);\n    return isNaN(parsed) ? 0 : Math.round(parsed * 100) / 100;\n  },\n  /**\n   * Validate rate input (positive number with max 2 decimal places)\n   */\n  validateRate: (value: string): boolean => {\n    const regex = /^\\d+(\\.\\d{1,2})?$/;\n    return regex.test(value) && parseFloat(value) >= 0;\n  }\n};\n/**\n * Enhanced voucher list utilities with minimal pagination and sorting\n */\nexport const voucherListUtils = {\n  /**\n   * Sort vouchers with latest first\n   */\nsortLatestFirst: (vouchers: any[]): any => {\n    return [...vouchers].sort((a, b) => {\n      const dateA = new Date(a.created_at || a.date);\n      const dateB = new Date(b.created_at || b.date);\n      return dateB.getTime() - dateA.getTime();\n    });\n  },\n  /**\n   * Paginate vouchers with default 5 per page\n   */\npaginate: (vouchers: any[], page: number = 1, pageSize: number = 5): any => {\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return {\n      items: vouchers.slice(startIndex, endIndex),\n      totalPages: Math.ceil(vouchers.length / pageSize),\n      currentPage: page,\n      totalItems: vouchers.length,\n      hasNext: endIndex < vouchers.length,\n      hasPrev: page > 1\n    };\n  },\n  /**\n   * Get latest vouchers for dashboard display\n   */\ngetLatestVouchers: (vouchers: any[], count: number = 7): any => {\n    return voucherListUtils.sortLatestFirst(vouchers).slice(0, count);\n  }\n};\n/**\n * Common styling utilities for voucher forms and tables with minimal gaps\n */\nexport const getVoucherStyles = (): any => ({\n  // Center alignment for all text elements\n  centerText: {\n    textAlign: 'center' as const,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  // Center alignment for form fields\n  centerField: {\n    textAlign: 'center' as const,\n    '& .MuiInputBase-input': {\n      textAlign: 'center' as const,\n    },\n  },\n  // Center alignment for table headers\n  centerHeader: {\n    textAlign: 'center' as const,\n    fontWeight: 'bold',\n  },\n  // Center alignment for table cells\n  centerCell: {\n    textAlign: 'center' as const,\n  },\n  // Container for voucher layout with minimal padding\n  voucherContainer: {\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    width: '100%',\n    margin: 0,\n    padding: 0\n  },\n  // Full-width edge-to-edge layout container\n  edgeToEdgeContainer: {\n    width: '100%',\n    margin: 0,\n    padding: 0,\n    boxSizing: 'border-box' as const,\n    '& .MuiContainer-root': {\n      maxWidth: 'none !important',\n      padding: '0 !important',\n      margin: '0 !important',\n    },\n    '& .MuiBox-root': {\n      margin: '0 !important',\n    }\n  },\n  // Index and form layout containers\n  indexContainer: {\n    width: '100%',\n    padding: '8px',\n    margin: 0,\n  },\n  formContainer: {\n    width: '100%',\n    padding: '8px',\n    margin: 0,\n    boxSizing: 'border-box' as const,\n    '& .MuiTextField-root': {\n      '& .MuiInputBase-input': {\n        textAlign: 'center' as const,\n      },\n    },\n    '& .MuiFormLabel-root': {\n      textAlign: 'center' as const,\n    },\n    // Enhanced dropdown width for voucher numbers\n    '& .voucher-dropdown': {\n      minWidth: `${UI_CONSTANTS.WIDTH.VOUCHER_MIN}px`,\n      '& .MuiSelect-select': {\n        minWidth: `${UI_CONSTANTS.WIDTH.VOUCHER_MIN - 20}px`,\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n      }\n    },\n    // Reference dropdown width\n    '& .reference-dropdown': {\n      minWidth: `${UI_CONSTANTS.WIDTH.REFERENCE_MIN}px`,\n      '& .MuiSelect-select': {\n        minWidth: `${UI_CONSTANTS.WIDTH.REFERENCE_MIN - 20}px`,\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n      }\n    }\n  },\n  // Table with center-aligned content\n  centeredTable: {\n    '& .MuiTableCell-root': {\n      textAlign: 'center' as const,\n    },\n    '& .MuiTableCell-head': {\n      textAlign: 'center' as const,\n      fontWeight: 'bold',\n    },\n  },\n  // Rate field styling with 2 decimal places\n  rateField: {\n    '& .MuiInputBase-input': {\n      textAlign: 'center' as const,\n    },\n    '& input[type=number]': {\n      '-moz-appearance': 'textfield',\n    },\n    '& input[type=number]::-webkit-outer-spin-button': {\n      '-webkit-appearance': 'none',\n      margin: 0,\n    },\n    '& input[type=number]::-webkit-inner-spin-button': {\n      '-webkit-appearance': 'none',\n      margin: 0,\n    },\n  },\n  // Enhanced title styling with center alignment\n  voucherTitle: {\n    textAlign: 'center' as const,\n    fontWeight: 'bold',\n    fontSize: '1.25rem',\n    marginBottom: '16px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  // Date field styling to ensure visibility in view mode\n  dateField: {\n    '& .MuiInputBase-input': {\n      textAlign: 'center' as const,\n    },\n    '& .MuiFormLabel-root': {\n      display: 'block !important',\n      visibility: 'visible !important'\n    }\n  },\n  // Pagination styling for 5 per page standard\n  paginationContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '16px',\n    '& .MuiPagination-root': {\n      '& .MuiPaginationItem-root': {\n        fontSize: '0.875rem'\n      }\n    }\n  },\n  // Optimized table column widths for voucher product tables\n  productTableColumns: {\n    productName: {\n      width: '35%',\n      minWidth: '200px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    quantity: {\n      width: '12%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    rate: {\n      width: '10%',\n      minWidth: '70px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    discount: {\n      width: '8%',\n      minWidth: '60px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    gst: {\n      width: '8%',\n      minWidth: '60px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    amount: {\n      width: '12%',\n      minWidth: '90px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    hsn: {\n      width: '10%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    action: {\n      width: '8%',\n      minWidth: '60px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    }\n  },\n  // GRN specific column widths (different from standard vouchers)\n  grnTableColumns: {\n    productName: {\n      width: '30%',\n      minWidth: '200px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    orderQty: {\n      width: '17.5%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    receivedQty: {\n      width: '17.5%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    acceptedQty: {\n      width: '17.5%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n    rejectedQty: {\n      width: '17.5%',\n      minWidth: '80px',\n      fontSize: 12,\n      fontWeight: 'bold',\n      padding: '4px 8px',\n      textAlign: 'center' as const\n    },\n  },\n  // Enhanced table container with minimal gaps\n  optimizedTableContainer: {\n    '& .MuiTableContainer-root': {\n      borderRadius: '4px',\n    },\n    '& .MuiTable-root': {\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    '& .MuiTableCell-root': {\n      padding: '4px 4px',\n      '&:last-child': {\n        borderRight: 'none'\n      }\n    },\n    '& .MuiTableHead-root .MuiTableCell-root': {\n      backgroundColor: '#fafafa',\n      fontSize: '12px',\n      fontWeight: 'bold'\n    },\n    '& .MuiTableBody-root .MuiTableRow-root': {\n      '&:hover': {\n        backgroundColor: '#f8f9fa'\n      },\n      '&:nth-of-type(even)': {\n        backgroundColor: '#fafbfc'\n      }\n    }\n  }\n});","usedDeprecatedRules":[]}]
