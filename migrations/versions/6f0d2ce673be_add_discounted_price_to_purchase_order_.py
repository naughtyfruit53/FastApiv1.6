# migrations/versions/6f0d2ce673be_add_discounted_price_to_purchase_order_.py

"""add discounted_price to purchase_order_items

Revision ID: 6f0d2ce673be
Revises: 07a20c493584
Create Date: 2025-10-10 12:55:28.401575

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6f0d2ce673be'
down_revision = '07a20c493584'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_email_analytics_email_id', table_name='email_analytics')
    op.drop_index('idx_email_analytics_message_id', table_name='email_analytics')
    op.drop_index('idx_email_analytics_scheduled_email_id', table_name='email_analytics')
    op.drop_index('idx_email_analytics_to_address', table_name='email_analytics')
    op.create_foreign_key(None, 'mail_accounts', 'user_email_tokens', ['oauth_token_id'], ['id'])
    op.alter_column('oauth_states', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('oauth_states', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('idx_oauth_states_organization_id', table_name='oauth_states')
    op.drop_index('idx_oauth_states_user_id', table_name='oauth_states')
    op.drop_constraint('oauth_states_state_key', 'oauth_states', type_='unique')
    op.create_index(op.f('ix_oauth_states_id'), 'oauth_states', ['id'], unique=False)
    op.create_index(op.f('ix_oauth_states_organization_id'), 'oauth_states', ['organization_id'], unique=False)
    op.create_index(op.f('ix_oauth_states_state'), 'oauth_states', ['state'], unique=True)
    op.create_index(op.f('ix_oauth_states_user_id'), 'oauth_states', ['user_id'], unique=False)
    op.drop_constraint('oauth_states_organization_id_fkey', 'oauth_states', type_='foreignkey')
    op.drop_constraint('oauth_states_user_id_fkey', 'oauth_states', type_='foreignkey')
    op.create_foreign_key(None, 'oauth_states', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key(None, 'oauth_states', 'users', ['user_id'], ['id'])
    op.add_column('purchase_order_items', sa.Column('discounted_price', sa.Float(), nullable=True))
    op.alter_column('user_email_tokens', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('user_email_tokens', 'provider_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('user_email_tokens', 'sync_folders',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('user_email_tokens', 'last_sync_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('user_email_tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_email_tokens', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_email_tokens', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index('idx_user_email_tokens_email_address', table_name='user_email_tokens')
    op.drop_index('idx_user_email_tokens_organization_id', table_name='user_email_tokens')
    op.drop_index('idx_user_email_tokens_user_id', table_name='user_email_tokens')
    op.create_index(op.f('ix_user_email_tokens_email_address'), 'user_email_tokens', ['email_address'], unique=False)
    op.create_index(op.f('ix_user_email_tokens_id'), 'user_email_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_user_email_tokens_organization_id'), 'user_email_tokens', ['organization_id'], unique=False)
    op.create_index(op.f('ix_user_email_tokens_user_id'), 'user_email_tokens', ['user_id'], unique=False)
    op.drop_constraint('user_email_tokens_user_id_fkey', 'user_email_tokens', type_='foreignkey')
    op.drop_constraint('user_email_tokens_organization_id_fkey', 'user_email_tokens', type_='foreignkey')
    op.create_foreign_key(None, 'user_email_tokens', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'user_email_tokens', 'organizations', ['organization_id'], ['id'])
    op.drop_column('user_email_tokens', 'last_refresh_response')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_email_tokens', sa.Column('last_refresh_response', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'user_email_tokens', type_='foreignkey')
    op.drop_constraint(None, 'user_email_tokens', type_='foreignkey')
    op.create_foreign_key('user_email_tokens_organization_id_fkey', 'user_email_tokens', 'organizations', ['organization_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('user_email_tokens_user_id_fkey', 'user_email_tokens', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_user_email_tokens_user_id'), table_name='user_email_tokens')
    op.drop_index(op.f('ix_user_email_tokens_organization_id'), table_name='user_email_tokens')
    op.drop_index(op.f('ix_user_email_tokens_id'), table_name='user_email_tokens')
    op.drop_index(op.f('ix_user_email_tokens_email_address'), table_name='user_email_tokens')
    op.create_index('idx_user_email_tokens_user_id', 'user_email_tokens', ['user_id'], unique=False)
    op.create_index('idx_user_email_tokens_organization_id', 'user_email_tokens', ['organization_id'], unique=False)
    op.create_index('idx_user_email_tokens_email_address', 'user_email_tokens', ['email_address'], unique=False)
    op.alter_column('user_email_tokens', 'last_used_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('user_email_tokens', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_email_tokens', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('user_email_tokens', 'last_sync_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('user_email_tokens', 'sync_folders',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('user_email_tokens', 'provider_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('user_email_tokens', 'expires_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_column('purchase_order_items', 'discounted_price')
    op.drop_constraint(None, 'oauth_states', type_='foreignkey')
    op.drop_constraint(None, 'oauth_states', type_='foreignkey')
    op.create_foreign_key('oauth_states_user_id_fkey', 'oauth_states', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('oauth_states_organization_id_fkey', 'oauth_states', 'organizations', ['organization_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_oauth_states_user_id'), table_name='oauth_states')
    op.drop_index(op.f('ix_oauth_states_state'), table_name='oauth_states')
    op.drop_index(op.f('ix_oauth_states_organization_id'), table_name='oauth_states')
    op.drop_index(op.f('ix_oauth_states_id'), table_name='oauth_states')
    op.create_unique_constraint('oauth_states_state_key', 'oauth_states', ['state'], postgresql_nulls_not_distinct=False)
    op.create_index('idx_oauth_states_user_id', 'oauth_states', ['user_id'], unique=False)
    op.create_index('idx_oauth_states_organization_id', 'oauth_states', ['organization_id'], unique=False)
    op.alter_column('oauth_states', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('oauth_states', 'expires_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.drop_constraint(None, 'mail_accounts', type_='foreignkey')
    op.create_index('idx_email_analytics_to_address', 'email_analytics', ['to_address'], unique=False)
    op.create_index('idx_email_analytics_scheduled_email_id', 'email_analytics', ['scheduled_email_id'], unique=False)
    op.create_index('idx_email_analytics_message_id', 'email_analytics', ['message_id'], unique=False)
    op.create_index('idx_email_analytics_email_id', 'email_analytics', ['email_id'], unique=False)
    # ### end Alembic commands ###